//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-foundation")]
use objc2_foundation::*;

use crate::*;

/// Quality prioritization levels to favor quality or performance.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtopticalflowconfigurationqualityprioritization?language=objc)
// NS_ENUM
#[cfg(feature = "objc2")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct VTOpticalFlowConfigurationQualityPrioritization(pub NSInteger);
#[cfg(feature = "objc2")]
impl VTOpticalFlowConfigurationQualityPrioritization {
    #[doc(alias = "VTOpticalFlowConfigurationQualityPrioritizationNormal")]
    pub const Normal: Self = Self(1);
    #[doc(alias = "VTOpticalFlowConfigurationQualityPrioritizationQuality")]
    pub const Quality: Self = Self(2);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for VTOpticalFlowConfigurationQualityPrioritization {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for VTOpticalFlowConfigurationQualityPrioritization {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// List of existing algorithm revisions with the highest being the latest. Clients can read defaultRevision property to find the default revision.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtopticalflowconfigurationrevision?language=objc)
// NS_ENUM
#[cfg(feature = "objc2")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct VTOpticalFlowConfigurationRevision(pub NSInteger);
#[cfg(feature = "objc2")]
impl VTOpticalFlowConfigurationRevision {
    #[doc(alias = "VTOpticalFlowConfigurationRevision1")]
    pub const Revision1: Self = Self(1);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for VTOpticalFlowConfigurationRevision {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for VTOpticalFlowConfigurationRevision {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Hint to let the processor know whether frames are being submitted in presenatation sequence, allowing performance optimizations based on previous processing requests
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtopticalflowparameterssubmissionmode?language=objc)
// NS_ENUM
#[cfg(feature = "objc2")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct VTOpticalFlowParametersSubmissionMode(pub NSInteger);
#[cfg(feature = "objc2")]
impl VTOpticalFlowParametersSubmissionMode {
    #[doc(alias = "VTOpticalFlowParametersSubmissionModeRandom")]
    pub const Random: Self = Self(1);
    #[doc(alias = "VTOpticalFlowParametersSubmissionModeSequential")]
    pub const Sequential: Self = Self(2);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for VTOpticalFlowParametersSubmissionMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for VTOpticalFlowParametersSubmissionMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

#[cfg(feature = "objc2")]
extern_class!(
    /// Configuration that is used to set up an OpticalFlow processor
    ///
    ///
    /// This configuration enables the OpticalFlow on a VTFrameProcessing session.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtopticalflowconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct VTOpticalFlowConfiguration;
);

#[cfg(feature = "objc2")]
unsafe impl Send for VTOpticalFlowConfiguration {}

#[cfg(feature = "objc2")]
unsafe impl Sync for VTOpticalFlowConfiguration {}

#[cfg(feature = "objc2")]
extern_conformance!(
    unsafe impl NSObjectProtocol for VTOpticalFlowConfiguration {}
);

#[cfg(all(feature = "VTFrameProcessorConfiguration", feature = "objc2"))]
extern_conformance!(
    unsafe impl VTFrameProcessorConfiguration for VTOpticalFlowConfiguration {}
);

#[cfg(feature = "objc2")]
impl VTOpticalFlowConfiguration {
    extern_methods!(
        /// Creates a new VTOpticalFlowConfiguration with specified flow width and height.
        ///
        ///
        /// init will return nil if dimensions are out of range or revision is unsupported.
        ///
        ///
        /// Parameter `frameWidth`: Width of source frame in pixels. Maximum value is 8192 for macOS, and 4096 for iOS.
        ///
        ///
        /// Parameter `frameHeight`: Height of source frame in pixels. Maximum value is 4320 for macOS, and 2160 for iOS.
        ///
        ///
        /// Parameter `usePrecomputedFlow`: Boolean value to indicate that Optical Flow will be provided by the user, if false this configuration will compute the optical flow on the fly.
        ///
        ///
        /// Parameter `qualityPrioritization`: Used to control quality and performance levels. See VTOpticalFlowConfigurationQualityPrioritization for more info.
        ///
        ///
        /// Parameter `revision`: The specific algorithm or configuration revision that is to be used to perform the request.
        #[unsafe(method(initWithFrameWidth:frameHeight:qualityPrioritization:revision:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrameWidth_frameHeight_qualityPrioritization_revision(
            this: Allocated<Self>,
            frame_width: NSInteger,
            frame_height: NSInteger,
            quality_prioritization: VTOpticalFlowConfigurationQualityPrioritization,
            revision: VTOpticalFlowConfigurationRevision,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Width of source frame in pixels.
        #[unsafe(method(frameWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn frameWidth(&self) -> NSInteger;

        /// Height of source frame in pixels.
        #[unsafe(method(frameHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn frameHeight(&self) -> NSInteger;

        /// parameter used to control quality and performance levels. See VTOpticalFlowConfigurationQualityPrioritization for more info.
        #[unsafe(method(qualityPrioritization))]
        #[unsafe(method_family = none)]
        pub unsafe fn qualityPrioritization(
            &self,
        ) -> VTOpticalFlowConfigurationQualityPrioritization;

        /// The specific algorithm or configuration revision that is to be used to perform the request.
        #[unsafe(method(revision))]
        #[unsafe(method_family = none)]
        pub unsafe fn revision(&self) -> VTOpticalFlowConfigurationRevision;

        #[cfg(feature = "objc2-foundation")]
        /// Provides the collection of currently-supported algorithm or configuration revisions for the class of configuration.
        ///
        /// This property allows clients to introspect at runtime what revisions are available for each configuration.
        #[unsafe(method(supportedRevisions))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedRevisions() -> Retained<NSIndexSet>;

        /// Provides the default revision of a particular algorithm or configuration.
        #[unsafe(method(defaultRevision))]
        #[unsafe(method_family = none)]
        pub unsafe fn defaultRevision() -> VTOpticalFlowConfigurationRevision;

        #[cfg(feature = "objc2-foundation")]
        /// list of source frame supported pixel formats for current configuration
        #[unsafe(method(frameSupportedPixelFormats))]
        #[unsafe(method_family = none)]
        pub unsafe fn frameSupportedPixelFormats(&self) -> Retained<NSArray<NSNumber>>;

        #[cfg(feature = "objc2-foundation")]
        /// returns a pixelBufferAttributes dictionary describing requirements for pixelBuffers used as source frames and reference frames.
        #[unsafe(method(sourcePixelBufferAttributes))]
        #[unsafe(method_family = none)]
        pub unsafe fn sourcePixelBufferAttributes(
            &self,
        ) -> Retained<NSDictionary<NSString, AnyObject>>;

        #[cfg(feature = "objc2-foundation")]
        /// returns a pixelBufferAttributes dictionary describing requirements for pixelBuffers used as OpticalFlow buffers
        #[unsafe(method(destinationPixelBufferAttributes))]
        #[unsafe(method_family = none)]
        pub unsafe fn destinationPixelBufferAttributes(
            &self,
        ) -> Retained<NSDictionary<NSString, AnyObject>>;

        /// reports whether this processor is supported
        #[unsafe(method(isSupported))]
        #[unsafe(method_family = none)]
        pub unsafe fn isSupported() -> bool;

        #[deprecated]
        #[unsafe(method(processorSupported))]
        #[unsafe(method_family = none)]
        pub unsafe fn processorSupported() -> Boolean;
    );
}

#[cfg(feature = "objc2")]
extern_class!(
    /// VTOpticalFlowParameters object contains both input and output parameters needed to generate optical flow between two frames. This object is used in the processWithParameters call of VTFrameProcessor class. The output parameter for this class is destinationOpticalFlow where the output flow is returned (as VTFrameProcessorMutableOpticalFlow) back to the caller function once the processWithParameters completes.
    ///
    ///
    /// VTOpticalFlowParameters are frame level parameters.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtopticalflowparameters?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct VTOpticalFlowParameters;
);

#[cfg(feature = "objc2")]
extern_conformance!(
    unsafe impl NSObjectProtocol for VTOpticalFlowParameters {}
);

#[cfg(all(feature = "VTFrameProcessorParameters", feature = "objc2"))]
extern_conformance!(
    unsafe impl VTFrameProcessorParameters for VTOpticalFlowParameters {}
);

#[cfg(feature = "objc2")]
impl VTOpticalFlowParameters {
    extern_methods!(
        #[cfg(feature = "VTFrameProcessorFrame")]
        /// Creates a new VTOpticalFlowParameters .
        ///
        ///
        /// init will return nil if sourceFrame or nextFrame is nil, or sourceFrame and nextFrame are different pixelFormats..
        ///
        ///
        /// Parameter `sourceFrame`: Current source frame. Must be non nil.
        ///
        ///
        /// Parameter `nextFrame`: Next source frame in presentation time order.
        ///
        ///
        /// Parameter `submissionMode`: Set to VTOpticalFlowParametersSubmissionModeSequential to indicate that current submission follow presentation time order without jump or skip when compared to previous submission. VTOpticalFlowParametersSubmissionModeSequential will yield better performance. Set to  VTOpticalFlowParametersSubmissionModeRandom to indicate a skip or a jump in frame sequence. If VTOpticalFlowParametersSubmissionModeRandom is set internal cache will be cleared during processWithParameters call.
        ///
        ///
        /// Parameter `destinationOpticalFlow`: User allocated VTFrameProcessorMutableOpticalFlow that will receive the results.
        #[unsafe(method(initWithSourceFrame:nextFrame:submissionMode:destinationOpticalFlow:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithSourceFrame_nextFrame_submissionMode_destinationOpticalFlow(
            this: Allocated<Self>,
            source_frame: &VTFrameProcessorFrame,
            next_frame: &VTFrameProcessorFrame,
            submission_mode: VTOpticalFlowParametersSubmissionMode,
            destination_optical_flow: &VTFrameProcessorOpticalFlow,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "VTFrameProcessorFrame")]
        /// sourceFrame Current source frame. Must be non nil
        #[unsafe(method(sourceFrame))]
        #[unsafe(method_family = none)]
        pub unsafe fn sourceFrame(&self) -> Retained<VTFrameProcessorFrame>;

        #[cfg(feature = "VTFrameProcessorFrame")]
        /// Next source frame in presentation time order.
        #[unsafe(method(nextFrame))]
        #[unsafe(method_family = none)]
        pub unsafe fn nextFrame(&self) -> Retained<VTFrameProcessorFrame>;

        /// A VTOpticalFlowParametersSubmissionMode value describing the processing request in this Parameters object .
        #[unsafe(method(submissionMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn submissionMode(&self) -> VTOpticalFlowParametersSubmissionMode;

        #[cfg(feature = "VTFrameProcessorFrame")]
        /// VTFrameProcessorMutableOpticalFlow that contains user allocated flow pixel buffers that will receive the results.
        #[unsafe(method(destinationOpticalFlow))]
        #[unsafe(method_family = none)]
        pub unsafe fn destinationOpticalFlow(&self) -> Retained<VTFrameProcessorOpticalFlow>;
    );
}
