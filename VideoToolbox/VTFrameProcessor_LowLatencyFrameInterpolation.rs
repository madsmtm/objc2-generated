//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-foundation")]
use objc2_foundation::*;

use crate::*;

#[cfg(feature = "objc2")]
extern_class!(
    /// Configuration that is used to program VTFrameProcessor for Low Latency Frame Interpolation.  This can either do purely temporal interpolation (Frame Rate Conversion) or it can do temporal and spatial interpolation (Scaling and Frame Rate Conversion).
    ///
    ///
    /// This processor requires a source frame and a previous frame.  It does temporal scaling, interpolating frames between the previous frame and the source frame.  When performing both temporal and spatial interpolation, the processor can only perform 2x upscaling, and a single frame of temporal interpolation.  When performing spatial scaling, the processor will produce upscaled intermediate frames as well as an upscaled sourceFrame but will not upscale the previous reference frame provided. Important: When calling [VTFrameProcessor startSessionWithConfiguration:] to create a VTLowLatencyFrameInterpolation session, ML model loading may take longer than a frame time. Avoid blocking the UI thread or stalling frame rendering pipelines during this call.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtlowlatencyframeinterpolationconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct VTLowLatencyFrameInterpolationConfiguration;
);

#[cfg(feature = "objc2")]
unsafe impl Send for VTLowLatencyFrameInterpolationConfiguration {}

#[cfg(feature = "objc2")]
unsafe impl Sync for VTLowLatencyFrameInterpolationConfiguration {}

#[cfg(feature = "objc2")]
extern_conformance!(
    unsafe impl NSObjectProtocol for VTLowLatencyFrameInterpolationConfiguration {}
);

#[cfg(all(feature = "VTFrameProcessorConfiguration", feature = "objc2"))]
extern_conformance!(
    unsafe impl VTFrameProcessorConfiguration for VTLowLatencyFrameInterpolationConfiguration {}
);

#[cfg(feature = "objc2")]
impl VTLowLatencyFrameInterpolationConfiguration {
    extern_methods!(
        /// Creates a new VTLowLatencyFrameInterpolationConfiguration with specified frame width and height, configured for temporal interpolation (Frame Rate Conversion).
        ///
        ///
        /// Parameter `frameWidth`: Width of source frame in pixels.
        ///
        ///
        /// Parameter `frameHeight`: Height of source frame in pixels.
        ///
        ///
        /// Parameter `numberOfInterpolatedFrames`: The number of uniformly spaced frames that you want to have available for interpolation.
        ///
        ///
        /// The available interpolation points will be be the next value of  (2^x -1) which is greater than or equal to numberOfInterpolatedFrames.  For example, if 1 interpolated frame is requested, 1 interpolation point at 0.5 is available.  If 2 interpolated frames are requested, 3 interpolation points at 0.25, 0.5 and 0.75 are available.  Not all available interpolation points need to be used.  Setting a higher numberOfInterpolatedFrames increases the resolution of interpolation in some cases, but will also increase latency.
        #[unsafe(method(initWithFrameWidth:frameHeight:numberOfInterpolatedFrames:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrameWidth_frameHeight_numberOfInterpolatedFrames(
            this: Allocated<Self>,
            frame_width: NSInteger,
            frame_height: NSInteger,
            number_of_interpolated_frames: NSInteger,
        ) -> Option<Retained<Self>>;

        /// Creates a new VTLowLatencyFrameInterpolationConfiguration with specified frame width and height, configured for spatial scaling as well as temporal scaling.
        ///
        ///
        /// Parameter `frameWidth`: Width of source frame in pixels.
        ///
        ///
        /// Parameter `frameHeight`: Height of source frame in pixels.
        ///
        ///
        /// Parameter `spatialScaleFactor`: The requested spatial scale factor as an integer.  Currently, only 2x spatial scaling is supported.
        ///
        ///
        /// When configured for spatial scaling, the VTLowLatencyFrameInterpolation processor only supports 2x spatial upscaling and a single frame of temporal interpolation at a 0.5 interpolation phase.  Setting the numberOfInterpolatedFrames property will be ignored in this case.
        #[unsafe(method(initWithFrameWidth:frameHeight:spatialScaleFactor:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrameWidth_frameHeight_spatialScaleFactor(
            this: Allocated<Self>,
            frame_width: NSInteger,
            frame_height: NSInteger,
            spatial_scale_factor: NSInteger,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns the width of source frames in pixels.
        #[unsafe(method(frameWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn frameWidth(&self) -> NSInteger;

        /// Returns the height of source frames in pixels.
        #[unsafe(method(frameHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn frameHeight(&self) -> NSInteger;

        /// Returns the configured spatial scale factor as an integer.
        #[unsafe(method(spatialScaleFactor))]
        #[unsafe(method_family = none)]
        pub unsafe fn spatialScaleFactor(&self) -> NSInteger;

        /// Returns the number of uniformly spaced frames that the processor is configured for..
        #[unsafe(method(numberOfInterpolatedFrames))]
        #[unsafe(method_family = none)]
        pub unsafe fn numberOfInterpolatedFrames(&self) -> NSInteger;

        #[cfg(feature = "objc2-foundation")]
        /// Returns a list of supported pixel formats for current configuration
        #[unsafe(method(frameSupportedPixelFormats))]
        #[unsafe(method_family = none)]
        pub unsafe fn frameSupportedPixelFormats(&self) -> Retained<NSArray<NSNumber>>;

        #[cfg(feature = "objc2-foundation")]
        /// Returns a pixelBufferAttributes dictionary describing requirements for pixelBuffers used as source and reference frames
        #[unsafe(method(sourcePixelBufferAttributes))]
        #[unsafe(method_family = none)]
        pub unsafe fn sourcePixelBufferAttributes(
            &self,
        ) -> Retained<NSDictionary<NSString, AnyObject>>;

        #[cfg(feature = "objc2-foundation")]
        /// Returns a pixelBufferAttributes dictionary describing requirements for pixelBuffers used as destination frames
        #[unsafe(method(destinationPixelBufferAttributes))]
        #[unsafe(method_family = none)]
        pub unsafe fn destinationPixelBufferAttributes(
            &self,
        ) -> Retained<NSDictionary<NSString, AnyObject>>;

        /// reports whether this processor is supported
        #[unsafe(method(isSupported))]
        #[unsafe(method_family = none)]
        pub unsafe fn isSupported() -> bool;
    );
}

#[cfg(feature = "objc2")]
extern_class!(
    /// VTLowLatencyFrameInterpolationParameters object contains both input and output parameters needed for the Temporal Noise Filter Frame Processor. This object is used in the processWithParameters call of VTFrameProcessor class.
    ///
    ///
    /// VTLowLatencyFrameInterpolationParameters are frame level parameters.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtlowlatencyframeinterpolationparameters?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct VTLowLatencyFrameInterpolationParameters;
);

#[cfg(feature = "objc2")]
extern_conformance!(
    unsafe impl NSObjectProtocol for VTLowLatencyFrameInterpolationParameters {}
);

#[cfg(all(feature = "VTFrameProcessorParameters", feature = "objc2"))]
extern_conformance!(
    unsafe impl VTFrameProcessorParameters for VTLowLatencyFrameInterpolationParameters {}
);

#[cfg(feature = "objc2")]
impl VTLowLatencyFrameInterpolationParameters {
    extern_methods!(
        #[cfg(all(feature = "VTFrameProcessorFrame", feature = "objc2-foundation"))]
        /// Creates a new VTLowLatencyFrameInterpolationParameters used to generate interpolated frames between a previous frame and a sourceFrame.
        ///
        ///
        /// Parameter `sourceFrame`: Current source frame. Must be non nil.
        ///
        ///
        /// Parameter `previousFrame`: Previous frame used for interpolation.  Must be non nil.
        ///
        ///
        /// Parameter `interpolationPhase`: The list of interpolation phase locations for the frames to be interpolated.  Must be greater than 0 and less than 1.0  0.5 is midway between the previous frame and the source frame.  If spatial scaling has been enabled, the only supported interpolation phase is 0.5.
        ///
        ///
        /// Parameter `destinationFrames`: The list of VTFrameProcessorFrame to receive the interpolated frames.  This must have the same number of elements as the the interpolationPhase.  If spatial scaling is enabled, it must also contain an element to hold the scaled version of sourceFrame.
        #[unsafe(method(initWithSourceFrame:previousFrame:interpolationPhase:destinationFrames:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithSourceFrame_previousFrame_interpolationPhase_destinationFrames(
            this: Allocated<Self>,
            source_frame: &VTFrameProcessorFrame,
            previous_frame: &VTFrameProcessorFrame,
            interpolation_phase: &NSArray<NSNumber>,
            destination_frames: &NSArray<VTFrameProcessorFrame>,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "VTFrameProcessorFrame")]
        /// Returns the source frame that was provided when the VTLowLatencyFrameInterpolationParameters object was created.
        #[unsafe(method(sourceFrame))]
        #[unsafe(method_family = none)]
        pub unsafe fn sourceFrame(&self) -> Retained<VTFrameProcessorFrame>;

        #[cfg(feature = "VTFrameProcessorFrame")]
        /// Returns the previous frame that was provided when the VTLowLatencyFrameInterpolationParameters object was created.
        #[unsafe(method(previousFrame))]
        #[unsafe(method_family = none)]
        pub unsafe fn previousFrame(&self) -> Retained<VTFrameProcessorFrame>;

        #[cfg(feature = "objc2-foundation")]
        /// Returns the array of interpolation [phases that were provided when the VTLowLatencyFrameInterpolationParameters object was created.
        #[unsafe(method(interpolationPhase))]
        #[unsafe(method_family = none)]
        pub unsafe fn interpolationPhase(&self) -> Retained<NSArray<NSNumber>>;

        #[cfg(all(feature = "VTFrameProcessorFrame", feature = "objc2-foundation"))]
        /// Returns the array of destination frames that were provided when the VTLowLatencyFrameInterpolationParameters object was created.
        #[unsafe(method(destinationFrames))]
        #[unsafe(method_family = none)]
        pub unsafe fn destinationFrames(&self) -> Retained<NSArray<VTFrameProcessorFrame>>;
    );
}
