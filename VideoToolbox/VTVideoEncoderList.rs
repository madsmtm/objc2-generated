//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;

use crate::*;

extern "C-unwind" {
    /// Builds a list of available video encoders.
    ///
    /// The caller must CFRelease the returned list.
    ///
    /// # Safety
    ///
    /// - `options` generics must be of the correct type.
    /// - `list_of_video_encoders_out` must be a valid pointer.
    pub fn VTCopyVideoEncoderList(
        options: Option<&CFDictionary>,
        list_of_video_encoders_out: NonNull<*const CFArray>,
    ) -> OSStatus;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/kvtvideoencoderlistoption_includestandarddefinitiondvencoders?language=objc)
    pub static kVTVideoEncoderListOption_IncludeStandardDefinitionDVEncoders: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/kvtvideoencoderlist_codectype?language=objc)
    pub static kVTVideoEncoderList_CodecType: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/kvtvideoencoderlist_encoderid?language=objc)
    pub static kVTVideoEncoderList_EncoderID: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/kvtvideoencoderlist_codecname?language=objc)
    pub static kVTVideoEncoderList_CodecName: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/kvtvideoencoderlist_encodername?language=objc)
    pub static kVTVideoEncoderList_EncoderName: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/kvtvideoencoderlist_displayname?language=objc)
    pub static kVTVideoEncoderList_DisplayName: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/kvtvideoencoderlist_gpuregistryid?language=objc)
    pub static kVTVideoEncoderList_GPURegistryID: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/kvtvideoencoderlist_supportedselectionproperties?language=objc)
    pub static kVTVideoEncoderList_SupportedSelectionProperties: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/kvtvideoencoderlist_performancerating?language=objc)
    pub static kVTVideoEncoderList_PerformanceRating: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/kvtvideoencoderlist_qualityrating?language=objc)
    pub static kVTVideoEncoderList_QualityRating: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/kvtvideoencoderlist_instancelimit?language=objc)
    pub static kVTVideoEncoderList_InstanceLimit: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/kvtvideoencoderlist_ishardwareaccelerated?language=objc)
    pub static kVTVideoEncoderList_IsHardwareAccelerated: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/kvtvideoencoderlist_supportsframereordering?language=objc)
    pub static kVTVideoEncoderList_SupportsFrameReordering: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/kvtvideoencoderlist_supportsmultipass?language=objc)
    pub static kVTVideoEncoderList_SupportsMultiPass: &'static CFString;
}

extern "C-unwind" {
    /// Builds a list of supported properties and encoder ID for an encoder
    ///
    /// The caller must CFRelease the returned supported properties and encoder ID.
    ///
    /// # Safety
    ///
    /// - `encoder_specification` generics must be of the correct type.
    /// - `encoder_id_out` must be a valid pointer or null.
    /// - `supported_properties_out` must be a valid pointer or null.
    #[cfg(feature = "objc2-core-media")]
    pub fn VTCopySupportedPropertyDictionaryForEncoder(
        width: i32,
        height: i32,
        codec_type: CMVideoCodecType,
        encoder_specification: Option<&CFDictionary>,
        encoder_id_out: *mut *const CFString,
        supported_properties_out: *mut *const CFDictionary,
    ) -> OSStatus;
}
