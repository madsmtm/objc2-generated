// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::unportable_markdown)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "VideoToolbox", kind = "framework")]
extern "C" {}

#[cfg(feature = "VTBase")]
#[path = "VTBase.rs"]
mod __VTBase;
#[cfg(feature = "VTCompressionProperties")]
#[path = "VTCompressionProperties.rs"]
mod __VTCompressionProperties;
#[cfg(feature = "VTCompressionSession")]
#[path = "VTCompressionSession.rs"]
mod __VTCompressionSession;
#[cfg(feature = "VTDecompressionProperties")]
#[path = "VTDecompressionProperties.rs"]
mod __VTDecompressionProperties;
#[cfg(feature = "VTDecompressionSession")]
#[path = "VTDecompressionSession.rs"]
mod __VTDecompressionSession;
#[cfg(feature = "VTErrors")]
#[path = "VTErrors.rs"]
mod __VTErrors;
#[cfg(feature = "VTFrameProcessor")]
#[path = "VTFrameProcessor.rs"]
mod __VTFrameProcessor;
#[cfg(feature = "VTFrameProcessorConfiguration")]
#[path = "VTFrameProcessorConfiguration.rs"]
mod __VTFrameProcessorConfiguration;
#[cfg(feature = "VTFrameProcessorErrors")]
#[path = "VTFrameProcessorErrors.rs"]
mod __VTFrameProcessorErrors;
#[cfg(feature = "VTFrameProcessorFrame")]
#[path = "VTFrameProcessorFrame.rs"]
mod __VTFrameProcessorFrame;
#[cfg(feature = "VTFrameProcessorParameters")]
#[path = "VTFrameProcessorParameters.rs"]
mod __VTFrameProcessorParameters;
#[cfg(feature = "VTFrameProcessor_FrameRateConversion")]
#[path = "VTFrameProcessor_FrameRateConversion.rs"]
mod __VTFrameProcessor_FrameRateConversion;
#[cfg(feature = "VTFrameProcessor_LowLatencyFrameInterpolation")]
#[path = "VTFrameProcessor_LowLatencyFrameInterpolation.rs"]
mod __VTFrameProcessor_LowLatencyFrameInterpolation;
#[cfg(feature = "VTFrameProcessor_LowLatencySuperResolutionScaler")]
#[path = "VTFrameProcessor_LowLatencySuperResolutionScaler.rs"]
mod __VTFrameProcessor_LowLatencySuperResolutionScaler;
#[cfg(feature = "VTFrameProcessor_MotionBlur")]
#[path = "VTFrameProcessor_MotionBlur.rs"]
mod __VTFrameProcessor_MotionBlur;
#[cfg(feature = "VTFrameProcessor_OpticalFlow")]
#[path = "VTFrameProcessor_OpticalFlow.rs"]
mod __VTFrameProcessor_OpticalFlow;
#[cfg(feature = "VTFrameProcessor_SuperResolutionScaler")]
#[path = "VTFrameProcessor_SuperResolutionScaler.rs"]
mod __VTFrameProcessor_SuperResolutionScaler;
#[cfg(feature = "VTFrameProcessor_TemporalNoiseFilter")]
#[path = "VTFrameProcessor_TemporalNoiseFilter.rs"]
mod __VTFrameProcessor_TemporalNoiseFilter;
#[cfg(feature = "VTFrameSilo")]
#[path = "VTFrameSilo.rs"]
mod __VTFrameSilo;
#[cfg(feature = "VTHDRPerFrameMetadataGenerationSession")]
#[path = "VTHDRPerFrameMetadataGenerationSession.rs"]
mod __VTHDRPerFrameMetadataGenerationSession;
#[cfg(feature = "VTMotionEstimationSession")]
#[path = "VTMotionEstimationSession.rs"]
mod __VTMotionEstimationSession;
#[cfg(feature = "VTMotionEstimationSessionProperties")]
#[path = "VTMotionEstimationSessionProperties.rs"]
mod __VTMotionEstimationSessionProperties;
#[cfg(feature = "VTMultiPassStorage")]
#[path = "VTMultiPassStorage.rs"]
mod __VTMultiPassStorage;
#[cfg(feature = "VTPixelRotationProperties")]
#[path = "VTPixelRotationProperties.rs"]
mod __VTPixelRotationProperties;
#[cfg(feature = "VTPixelRotationSession")]
#[path = "VTPixelRotationSession.rs"]
mod __VTPixelRotationSession;
#[cfg(feature = "VTPixelTransferProperties")]
#[path = "VTPixelTransferProperties.rs"]
mod __VTPixelTransferProperties;
#[cfg(feature = "VTPixelTransferSession")]
#[path = "VTPixelTransferSession.rs"]
mod __VTPixelTransferSession;
#[cfg(feature = "VTProfessionalVideoWorkflow")]
#[path = "VTProfessionalVideoWorkflow.rs"]
mod __VTProfessionalVideoWorkflow;
#[cfg(feature = "VTRAWProcessingProperties")]
#[path = "VTRAWProcessingProperties.rs"]
mod __VTRAWProcessingProperties;
#[cfg(feature = "VTRAWProcessingSession")]
#[path = "VTRAWProcessingSession.rs"]
mod __VTRAWProcessingSession;
#[cfg(feature = "VTSession")]
#[path = "VTSession.rs"]
mod __VTSession;
#[cfg(feature = "VTUtilities")]
#[path = "VTUtilities.rs"]
mod __VTUtilities;
#[cfg(feature = "VTVideoEncoderList")]
#[path = "VTVideoEncoderList.rs"]
mod __VTVideoEncoderList;

#[cfg(feature = "VTBase")]
pub use self::__VTBase::VTInt32Point;
#[cfg(feature = "VTBase")]
pub use self::__VTBase::VTInt32Size;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTAlphaChannelMode_PremultipliedAlpha;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTAlphaChannelMode_StraightAlpha;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCameraCalibrationExtrinsicOriginSource_StereoCameraSystemBaseline;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCameraCalibrationLensAlgorithmKind_ParametricLens;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCameraCalibrationLensDomain_Color;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCameraCalibrationLensRole_Left;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCameraCalibrationLensRole_Mono;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCameraCalibrationLensRole_Right;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPreset_Balanced;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPreset_HighQuality;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPreset_HighSpeed;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPreset_VideoConferencing;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyCameraCalibrationKey_ExtrinsicOrientationQuaternion;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyCameraCalibrationKey_ExtrinsicOriginSource;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyCameraCalibrationKey_IntrinsicMatrix;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyCameraCalibrationKey_IntrinsicMatrixProjectionOffset;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyCameraCalibrationKey_IntrinsicMatrixReferenceDimensions;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyCameraCalibrationKey_LensAlgorithmKind;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyCameraCalibrationKey_LensDistortions;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyCameraCalibrationKey_LensDomain;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyCameraCalibrationKey_LensFrameAdjustmentsPolynomialX;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyCameraCalibrationKey_LensFrameAdjustmentsPolynomialY;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyCameraCalibrationKey_LensIdentifier;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyCameraCalibrationKey_LensRole;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyCameraCalibrationKey_RadialAngleLimit;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_AllowFrameReordering;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_AllowOpenGOP;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_AllowTemporalCompression;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_AlphaChannelMode;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_AspectRatio16x9;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_AverageBitRate;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_BaseLayerBitRateFraction;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_BaseLayerFrameRate;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_BaseLayerFrameRateFraction;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_CalculateMeanSquaredError;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_CameraCalibrationDataLensCollection;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_CleanAperture;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_ColorPrimaries;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_ConstantBitRate;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_ContentLightLevelInfo;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_DataRateLimits;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_Depth;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_EnableLTR;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_EncoderID;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_EstimatedAverageBytesPerFrame;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_ExpectedDuration;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_ExpectedFrameRate;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_FieldCount;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_FieldDetail;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_GammaLevel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_H264EntropyMode;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_HDRMetadataInsertionMode;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_HasLeftStereoEyeView;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_HasRightStereoEyeView;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_HeroEye;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_HorizontalDisparityAdjustment;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_HorizontalFieldOfView;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_ICCProfile;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MVHEVCLeftAndRightViewIDs;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MVHEVCVideoLayerIDs;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MVHEVCViewIDs;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MasteringDisplayColorVolume;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MaxAllowedFrameQP;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MaxFrameDelayCount;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MaxH264SliceBytes;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MaxKeyFrameInterval;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MaximizePowerEfficiency;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MaximumRealTimeFrameRate;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MinAllowedFrameQP;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MoreFramesAfterEnd;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MoreFramesBeforeStart;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_MultiPassStorage;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_NumberOfPendingFrames;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_OutputBitDepth;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_PixelAspectRatio;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_PixelBufferPoolIsShared;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_PixelTransferProperties;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_PreserveAlphaChannel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_PreserveDynamicHDRMetadata;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_ProfileLevel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_ProgressiveScan;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_ProjectionKind;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_Quality;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_RealTime;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_RecommendedParallelizationLimit;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumDuration;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumFrameCount;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_ReferenceBufferCount;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_SourceFrameCount;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_SpatialAdaptiveQPLevel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_StereoCameraBaseline;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_SuggestedLookAheadFrameCount;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_SupportedPresetDictionaries;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_SupportsBaseFrameQP;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_TargetQualityForAlpha;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_TransferFunction;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_UsingGPURegistryID;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_VBVBufferDuration;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_VBVInitialDelayPercentage;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_VBVMaxBitRate;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_VariableBitRate;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_VideoEncoderPixelBufferAttributes;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_ViewPackingKind;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTCompressionPropertyKey_YCbCrMatrix;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTEncodeFrameOptionKey_AcknowledgedLTRTokens;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTEncodeFrameOptionKey_BaseFrameQP;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTEncodeFrameOptionKey_ForceKeyFrame;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTEncodeFrameOptionKey_ForceLTRRefresh;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTH264EntropyMode_CABAC;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTH264EntropyMode_CAVLC;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTHDRMetadataInsertionMode_Auto;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTHDRMetadataInsertionMode_None;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTHDRMetadataInsertionMode_RequestSDRRangePreservation;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTHeroEye_Left;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTHeroEye_Right;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H263_Profile0_Level10;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H263_Profile0_Level45;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H263_Profile3_Level45;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Baseline_1_3;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Baseline_3_0;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Baseline_3_1;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Baseline_3_2;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Baseline_4_0;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Baseline_4_1;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Baseline_4_2;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Baseline_5_0;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Baseline_5_1;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Baseline_5_2;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Baseline_AutoLevel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_ConstrainedBaseline_AutoLevel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_ConstrainedHigh_AutoLevel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Extended_5_0;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Extended_AutoLevel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_High_3_0;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_High_3_1;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_High_3_2;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_High_4_0;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_High_4_1;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_High_4_2;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_High_5_0;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_High_5_1;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_High_5_2;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_High_AutoLevel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Main_3_0;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Main_3_1;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Main_3_2;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Main_4_0;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Main_4_1;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Main_4_2;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Main_5_0;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Main_5_1;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Main_5_2;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_H264_Main_AutoLevel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_HEVC_Main10_AutoLevel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_HEVC_Main42210_AutoLevel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_HEVC_Main_AutoLevel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_HEVC_Monochrome10_AutoLevel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_HEVC_Monochrome_AutoLevel;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_MP4V_AdvancedSimple_L0;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_MP4V_AdvancedSimple_L1;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_MP4V_AdvancedSimple_L2;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_MP4V_AdvancedSimple_L3;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_MP4V_AdvancedSimple_L4;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_MP4V_Main_L2;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_MP4V_Main_L3;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_MP4V_Main_L4;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_MP4V_Simple_L0;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_MP4V_Simple_L1;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_MP4V_Simple_L2;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProfileLevel_MP4V_Simple_L3;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProjectionKind_Equirectangular;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProjectionKind_HalfEquirectangular;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProjectionKind_ParametricImmersive;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTProjectionKind_Rectilinear;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTQPModulationLevel_Default;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTQPModulationLevel_Disable;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTSampleAttachmentKey_QualityMetrics;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTSampleAttachmentKey_RequireLTRAcknowledgementToken;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTSampleAttachmentQualityMetricsKey_ChromaBlueMeanSquaredError;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTSampleAttachmentQualityMetricsKey_ChromaRedMeanSquaredError;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTSampleAttachmentQualityMetricsKey_LumaMeanSquaredError;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTUnlimitedFrameDelayCount;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTVideoEncoderSpecification_EnableHardwareAcceleratedVideoEncoder;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTVideoEncoderSpecification_EnableLowLatencyRateControl;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTVideoEncoderSpecification_PreferredEncoderGPURegistryID;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTVideoEncoderSpecification_RequireHardwareAcceleratedVideoEncoder;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTVideoEncoderSpecification_RequiredEncoderGPURegistryID;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTViewPackingKind_OverUnder;
#[cfg(feature = "VTCompressionProperties")]
pub use self::__VTCompressionProperties::kVTViewPackingKind_SideBySide;
#[cfg(feature = "VTCompressionSession")]
pub use self::__VTCompressionSession::kVTVideoEncoderSpecification_EncoderID;
#[cfg(all(
    feature = "VTCompressionSession",
    feature = "VTErrors",
    feature = "objc2-core-media"
))]
pub use self::__VTCompressionSession::VTCompressionOutputCallback;
#[cfg(all(
    feature = "VTCompressionSession",
    feature = "VTErrors",
    feature = "block2",
    feature = "objc2-core-media"
))]
pub use self::__VTCompressionSession::VTCompressionOutputHandler;
#[cfg(feature = "VTCompressionSession")]
pub use self::__VTCompressionSession::VTCompressionSession;
#[cfg(feature = "VTCompressionSession")]
pub use self::__VTCompressionSession::VTCompressionSessionBeginPass;
#[cfg(all(feature = "VTCompressionSession", feature = "objc2-core-media"))]
pub use self::__VTCompressionSession::VTCompressionSessionCompleteFrames;
#[cfg(all(
    feature = "VTCompressionSession",
    feature = "VTErrors",
    feature = "objc2-core-media"
))]
pub use self::__VTCompressionSession::VTCompressionSessionCreate;
#[cfg(all(
    feature = "VTCompressionSession",
    feature = "VTErrors",
    feature = "objc2-core-media",
    feature = "objc2-core-video"
))]
pub use self::__VTCompressionSession::VTCompressionSessionEncodeFrame;
#[cfg(all(
    feature = "VTCompressionSession",
    feature = "VTErrors",
    feature = "block2",
    feature = "objc2-core-media",
    feature = "objc2-core-video"
))]
pub use self::__VTCompressionSession::VTCompressionSessionEncodeFrameWithOutputHandler;
#[cfg(all(
    feature = "VTCompressionSession",
    feature = "VTErrors",
    feature = "objc2-core-media"
))]
pub use self::__VTCompressionSession::VTCompressionSessionEncodeMultiImageFrame;
#[cfg(all(
    feature = "VTCompressionSession",
    feature = "VTErrors",
    feature = "block2",
    feature = "objc2-core-media"
))]
pub use self::__VTCompressionSession::VTCompressionSessionEncodeMultiImageFrameWithOutputHandler;
#[cfg(feature = "VTCompressionSession")]
pub use self::__VTCompressionSession::VTCompressionSessionEndPass;
#[cfg(all(feature = "VTCompressionSession", feature = "objc2-core-video"))]
pub use self::__VTCompressionSession::VTCompressionSessionGetPixelBufferPool;
#[cfg(all(feature = "VTCompressionSession", feature = "objc2-core-media"))]
pub use self::__VTCompressionSession::VTCompressionSessionGetTimeRangesForNextPass;
#[cfg(feature = "VTCompressionSession")]
pub use self::__VTCompressionSession::VTCompressionSessionInvalidate;
#[cfg(feature = "VTCompressionSession")]
pub use self::__VTCompressionSession::VTCompressionSessionOptionFlags;
#[cfg(feature = "VTCompressionSession")]
pub use self::__VTCompressionSession::VTCompressionSessionPrepareToEncodeFrames;
#[cfg(feature = "VTCompressionSession")]
pub use self::__VTCompressionSession::VTIsStereoMVHEVCEncodeSupported;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_AllowBitstreamToChangeFrameDimensions;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_ContentHasInterframeDependencies;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_DecoderProducesRAWOutput;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_DeinterlaceMode;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_FieldMode;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_GeneratePerFrameHDRDisplayMetadata;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_MaxOutputPresentationTimeStampOfFramesBeingDecoded;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_MaximizePowerEfficiency;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_MinOutputPresentationTimeStampOfFramesBeingDecoded;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_NumberOfFramesBeingDecoded;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_OnlyTheseFrames;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_OutputPoolRequestedMinimumBufferCount;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_PixelBufferPool;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_PixelBufferPoolIsShared;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_PixelFormatsWithReducedResolutionSupport;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_PixelTransferProperties;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_PropagatePerFrameHDRDisplayMetadata;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_RealTime;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_ReducedCoefficientDecode;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_ReducedFrameDelivery;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_ReducedResolutionDecode;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_RequestRAWOutput;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_RequestedMVHEVCVideoLayerIDs;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_SuggestedQualityOfServiceTiers;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_SupportedPixelFormatsOrderedByPerformance;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_SupportedPixelFormatsOrderedByQuality;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_ThreadCount;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_UsingGPURegistryID;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionPropertyKey_UsingHardwareAcceleratedVideoDecoder;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionProperty_DeinterlaceMode_Temporal;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionProperty_DeinterlaceMode_VerticalFilter;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionProperty_FieldMode_BothFields;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionProperty_FieldMode_BottomFieldOnly;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionProperty_FieldMode_DeinterlaceFields;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionProperty_FieldMode_SingleField;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionProperty_FieldMode_TopFieldOnly;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionProperty_OnlyTheseFrames_AllFrames;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionProperty_OnlyTheseFrames_IFrames;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionProperty_OnlyTheseFrames_KeyFrames;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionProperty_OnlyTheseFrames_NonDroppableFrames;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionProperty_TemporalLevelLimit;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionResolutionKey_Height;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTDecompressionResolutionKey_Width;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTVideoDecoderSpecification_EnableHardwareAcceleratedVideoDecoder;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTVideoDecoderSpecification_PreferredDecoderGPURegistryID;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTVideoDecoderSpecification_RequireHardwareAcceleratedVideoDecoder;
#[cfg(feature = "VTDecompressionProperties")]
pub use self::__VTDecompressionProperties::kVTVideoDecoderSpecification_RequiredDecoderGPURegistryID;
#[cfg(all(
    feature = "VTDecompressionSession",
    feature = "VTErrors",
    feature = "block2",
    feature = "objc2-core-media",
    feature = "objc2-core-video"
))]
pub use self::__VTDecompressionSession::VTDecompressionMultiImageCapableOutputHandler;
#[cfg(all(
    feature = "VTDecompressionSession",
    feature = "VTErrors",
    feature = "objc2-core-media",
    feature = "objc2-core-video"
))]
pub use self::__VTDecompressionSession::VTDecompressionOutputCallback;
#[cfg(all(
    feature = "VTDecompressionSession",
    feature = "VTErrors",
    feature = "objc2-core-media",
    feature = "objc2-core-video"
))]
pub use self::__VTDecompressionSession::VTDecompressionOutputCallbackRecord;
#[cfg(all(
    feature = "VTDecompressionSession",
    feature = "VTErrors",
    feature = "block2",
    feature = "objc2-core-media",
    feature = "objc2-core-video"
))]
pub use self::__VTDecompressionSession::VTDecompressionOutputHandler;
#[cfg(all(
    feature = "VTDecompressionSession",
    feature = "VTErrors",
    feature = "objc2-core-media"
))]
pub use self::__VTDecompressionSession::VTDecompressionOutputMultiImageCallback;
#[cfg(feature = "VTDecompressionSession")]
pub use self::__VTDecompressionSession::VTDecompressionSession;
#[cfg(all(feature = "VTDecompressionSession", feature = "objc2-core-media"))]
pub use self::__VTDecompressionSession::VTDecompressionSessionCanAcceptFormatDescription;
#[cfg(all(feature = "VTDecompressionSession", feature = "objc2-core-video"))]
pub use self::__VTDecompressionSession::VTDecompressionSessionCopyBlackPixelBuffer;
#[cfg(all(
    feature = "VTDecompressionSession",
    feature = "VTErrors",
    feature = "objc2-core-media",
    feature = "objc2-core-video"
))]
pub use self::__VTDecompressionSession::VTDecompressionSessionCreate;
#[cfg(all(
    feature = "VTDecompressionSession",
    feature = "VTErrors",
    feature = "objc2-core-media"
))]
pub use self::__VTDecompressionSession::VTDecompressionSessionDecodeFrame;
#[cfg(all(
    feature = "VTDecompressionSession",
    feature = "VTErrors",
    feature = "block2",
    feature = "objc2-core-media",
    feature = "objc2-core-video"
))]
pub use self::__VTDecompressionSession::VTDecompressionSessionDecodeFrameWithMultiImageCapableOutputHandler;
#[cfg(all(
    feature = "VTDecompressionSession",
    feature = "VTErrors",
    feature = "block2",
    feature = "objc2-core-media",
    feature = "objc2-core-video"
))]
pub use self::__VTDecompressionSession::VTDecompressionSessionDecodeFrameWithOutputHandler;
#[cfg(feature = "VTDecompressionSession")]
pub use self::__VTDecompressionSession::VTDecompressionSessionFinishDelayedFrames;
#[cfg(feature = "VTDecompressionSession")]
pub use self::__VTDecompressionSession::VTDecompressionSessionInvalidate;
#[cfg(all(
    feature = "VTDecompressionSession",
    feature = "VTErrors",
    feature = "objc2-core-media"
))]
pub use self::__VTDecompressionSession::VTDecompressionSessionSetMultiImageCallback;
#[cfg(feature = "VTDecompressionSession")]
pub use self::__VTDecompressionSession::VTDecompressionSessionWaitForAsynchronousFrames;
#[cfg(all(feature = "VTDecompressionSession", feature = "objc2-core-media"))]
pub use self::__VTDecompressionSession::VTIsHardwareDecodeSupported;
#[cfg(feature = "VTDecompressionSession")]
pub use self::__VTDecompressionSession::VTIsStereoMVHEVCDecodeSupported;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTAllocationFailedErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTColorCorrectionImageRotationFailedErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTColorCorrectionPixelTransferFailedErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTColorSyncTransformConvertFailedErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTCouldNotCreateColorCorrectionDataErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTCouldNotCreateInstanceErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTCouldNotFindExtensionErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTCouldNotFindTemporalFilterErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTCouldNotFindVideoDecoderErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTCouldNotFindVideoEncoderErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTCouldNotOutputTaggedBufferGroupErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTExtensionConflictErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTExtensionDisabledErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTFormatDescriptionChangeNotSupportedErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTFrameSiloInvalidTimeRangeErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTFrameSiloInvalidTimeStampErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTImageRotationNotSupportedErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTInsufficientSourceColorDataErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTInvalidSessionErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTMultiPassStorageIdentifierMismatchErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTMultiPassStorageInvalidErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTParameterErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTPixelRotationNotSupportedErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTPixelTransferNotPermittedErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTPixelTransferNotSupportedErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTPropertyNotSupportedErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTPropertyReadOnlyErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTSessionMalfunctionErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoDecoderAuthorizationErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoDecoderBadDataErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoDecoderCallbackMessagingErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoDecoderMalfunctionErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoDecoderNeedsRosettaErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoDecoderNotAvailableNowErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoDecoderReferenceMissingErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoDecoderRemovedErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoDecoderUnknownErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoDecoderUnsupportedDataFormatErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoEncoderAuthorizationErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoEncoderMVHEVCVideoLayerIDsMismatchErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoEncoderMalfunctionErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoEncoderNeedsRosettaErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::kVTVideoEncoderNotAvailableNowErr;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::VTDecodeFrameFlags;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::VTDecodeInfoFlags;
#[cfg(feature = "VTErrors")]
pub use self::__VTErrors::VTEncodeInfoFlags;
#[cfg(all(feature = "VTFrameProcessor", feature = "objc2"))]
pub use self::__VTFrameProcessor::VTFrameProcessor;
#[cfg(all(feature = "VTFrameProcessorConfiguration", feature = "objc2"))]
pub use self::__VTFrameProcessorConfiguration::VTFrameProcessorConfiguration;
#[cfg(all(feature = "VTFrameProcessorErrors", feature = "objc2"))]
pub use self::__VTFrameProcessorErrors::VTFrameProcessorError;
#[cfg(all(feature = "VTFrameProcessorErrors", feature = "objc2-foundation"))]
pub use self::__VTFrameProcessorErrors::VTFrameProcessorErrorDomain;
#[cfg(all(feature = "VTFrameProcessorFrame", feature = "objc2"))]
pub use self::__VTFrameProcessorFrame::VTFrameProcessorFrame;
#[cfg(all(feature = "VTFrameProcessorFrame", feature = "objc2"))]
pub use self::__VTFrameProcessorFrame::VTFrameProcessorOpticalFlow;
#[cfg(all(feature = "VTFrameProcessorParameters", feature = "objc2"))]
pub use self::__VTFrameProcessorParameters::VTFrameProcessorParameters;
#[cfg(all(feature = "VTFrameProcessor_FrameRateConversion", feature = "objc2"))]
pub use self::__VTFrameProcessor_FrameRateConversion::VTFrameRateConversionConfiguration;
#[cfg(all(feature = "VTFrameProcessor_FrameRateConversion", feature = "objc2"))]
pub use self::__VTFrameProcessor_FrameRateConversion::VTFrameRateConversionConfigurationQualityPrioritization;
#[cfg(all(feature = "VTFrameProcessor_FrameRateConversion", feature = "objc2"))]
pub use self::__VTFrameProcessor_FrameRateConversion::VTFrameRateConversionConfigurationRevision;
#[cfg(all(feature = "VTFrameProcessor_FrameRateConversion", feature = "objc2"))]
pub use self::__VTFrameProcessor_FrameRateConversion::VTFrameRateConversionParameters;
#[cfg(all(feature = "VTFrameProcessor_FrameRateConversion", feature = "objc2"))]
pub use self::__VTFrameProcessor_FrameRateConversion::VTFrameRateConversionParametersSubmissionMode;
#[cfg(all(
    feature = "VTFrameProcessor_LowLatencyFrameInterpolation",
    feature = "objc2"
))]
pub use self::__VTFrameProcessor_LowLatencyFrameInterpolation::VTLowLatencyFrameInterpolationConfiguration;
#[cfg(all(
    feature = "VTFrameProcessor_LowLatencyFrameInterpolation",
    feature = "objc2"
))]
pub use self::__VTFrameProcessor_LowLatencyFrameInterpolation::VTLowLatencyFrameInterpolationParameters;
#[cfg(all(
    feature = "VTFrameProcessor_LowLatencySuperResolutionScaler",
    feature = "objc2"
))]
pub use self::__VTFrameProcessor_LowLatencySuperResolutionScaler::VTLowLatencySuperResolutionScalerConfiguration;
#[cfg(all(
    feature = "VTFrameProcessor_LowLatencySuperResolutionScaler",
    feature = "objc2"
))]
pub use self::__VTFrameProcessor_LowLatencySuperResolutionScaler::VTLowLatencySuperResolutionScalerParameters;
#[cfg(all(feature = "VTFrameProcessor_MotionBlur", feature = "objc2"))]
pub use self::__VTFrameProcessor_MotionBlur::VTMotionBlurConfiguration;
#[cfg(all(feature = "VTFrameProcessor_MotionBlur", feature = "objc2"))]
pub use self::__VTFrameProcessor_MotionBlur::VTMotionBlurConfigurationQualityPrioritization;
#[cfg(all(feature = "VTFrameProcessor_MotionBlur", feature = "objc2"))]
pub use self::__VTFrameProcessor_MotionBlur::VTMotionBlurConfigurationRevision;
#[cfg(all(feature = "VTFrameProcessor_MotionBlur", feature = "objc2"))]
pub use self::__VTFrameProcessor_MotionBlur::VTMotionBlurParameters;
#[cfg(all(feature = "VTFrameProcessor_MotionBlur", feature = "objc2"))]
pub use self::__VTFrameProcessor_MotionBlur::VTMotionBlurParametersSubmissionMode;
#[cfg(all(feature = "VTFrameProcessor_OpticalFlow", feature = "objc2"))]
pub use self::__VTFrameProcessor_OpticalFlow::VTOpticalFlowConfiguration;
#[cfg(all(feature = "VTFrameProcessor_OpticalFlow", feature = "objc2"))]
pub use self::__VTFrameProcessor_OpticalFlow::VTOpticalFlowConfigurationQualityPrioritization;
#[cfg(all(feature = "VTFrameProcessor_OpticalFlow", feature = "objc2"))]
pub use self::__VTFrameProcessor_OpticalFlow::VTOpticalFlowConfigurationRevision;
#[cfg(all(feature = "VTFrameProcessor_OpticalFlow", feature = "objc2"))]
pub use self::__VTFrameProcessor_OpticalFlow::VTOpticalFlowParameters;
#[cfg(all(feature = "VTFrameProcessor_OpticalFlow", feature = "objc2"))]
pub use self::__VTFrameProcessor_OpticalFlow::VTOpticalFlowParametersSubmissionMode;
#[cfg(all(feature = "VTFrameProcessor_SuperResolutionScaler", feature = "objc2"))]
pub use self::__VTFrameProcessor_SuperResolutionScaler::VTSuperResolutionScalerConfiguration;
#[cfg(all(feature = "VTFrameProcessor_SuperResolutionScaler", feature = "objc2"))]
pub use self::__VTFrameProcessor_SuperResolutionScaler::VTSuperResolutionScalerConfigurationInputType;
#[cfg(all(feature = "VTFrameProcessor_SuperResolutionScaler", feature = "objc2"))]
pub use self::__VTFrameProcessor_SuperResolutionScaler::VTSuperResolutionScalerConfigurationModelStatus;
#[cfg(all(feature = "VTFrameProcessor_SuperResolutionScaler", feature = "objc2"))]
pub use self::__VTFrameProcessor_SuperResolutionScaler::VTSuperResolutionScalerConfigurationQualityPrioritization;
#[cfg(all(feature = "VTFrameProcessor_SuperResolutionScaler", feature = "objc2"))]
pub use self::__VTFrameProcessor_SuperResolutionScaler::VTSuperResolutionScalerConfigurationRevision;
#[cfg(all(feature = "VTFrameProcessor_SuperResolutionScaler", feature = "objc2"))]
pub use self::__VTFrameProcessor_SuperResolutionScaler::VTSuperResolutionScalerParameters;
#[cfg(all(feature = "VTFrameProcessor_SuperResolutionScaler", feature = "objc2"))]
pub use self::__VTFrameProcessor_SuperResolutionScaler::VTSuperResolutionScalerParametersSubmissionMode;
#[cfg(all(feature = "VTFrameProcessor_TemporalNoiseFilter", feature = "objc2"))]
pub use self::__VTFrameProcessor_TemporalNoiseFilter::VTTemporalNoiseFilterConfiguration;
#[cfg(all(feature = "VTFrameProcessor_TemporalNoiseFilter", feature = "objc2"))]
pub use self::__VTFrameProcessor_TemporalNoiseFilter::VTTemporalNoiseFilterParameters;
#[cfg(feature = "VTFrameSilo")]
pub use self::__VTFrameSilo::VTFrameSilo;
#[cfg(all(feature = "VTFrameSilo", feature = "objc2-core-media"))]
pub use self::__VTFrameSilo::VTFrameSiloAddSampleBuffer;
#[cfg(all(
    feature = "VTFrameSilo",
    feature = "block2",
    feature = "objc2-core-media"
))]
pub use self::__VTFrameSilo::VTFrameSiloCallBlockForEachSampleBuffer;
#[cfg(all(feature = "VTFrameSilo", feature = "objc2-core-media"))]
pub use self::__VTFrameSilo::VTFrameSiloCallFunctionForEachSampleBuffer;
#[cfg(all(feature = "VTFrameSilo", feature = "objc2-core-media"))]
pub use self::__VTFrameSilo::VTFrameSiloCreate;
#[cfg(feature = "VTFrameSilo")]
pub use self::__VTFrameSilo::VTFrameSiloGetProgressOfCurrentPass;
#[cfg(all(feature = "VTFrameSilo", feature = "objc2-core-media"))]
pub use self::__VTFrameSilo::VTFrameSiloSetTimeRangesForNextPass;
#[cfg(feature = "VTHDRPerFrameMetadataGenerationSession")]
pub use self::__VTHDRPerFrameMetadataGenerationSession::kVTHDRPerFrameMetadataGenerationHDRFormatType_DolbyVision;
#[cfg(feature = "VTHDRPerFrameMetadataGenerationSession")]
pub use self::__VTHDRPerFrameMetadataGenerationSession::kVTHDRPerFrameMetadataGenerationOptionsKey_HDRFormats;
#[cfg(feature = "VTHDRPerFrameMetadataGenerationSession")]
pub use self::__VTHDRPerFrameMetadataGenerationSession::VTHDRPerFrameMetadataGenerationHDRFormatType;
#[cfg(feature = "VTHDRPerFrameMetadataGenerationSession")]
pub use self::__VTHDRPerFrameMetadataGenerationSession::VTHDRPerFrameMetadataGenerationSession;
#[cfg(all(
    feature = "VTHDRPerFrameMetadataGenerationSession",
    feature = "objc2-core-video"
))]
pub use self::__VTHDRPerFrameMetadataGenerationSession::VTHDRPerFrameMetadataGenerationSessionAttachMetadata;
#[cfg(feature = "VTHDRPerFrameMetadataGenerationSession")]
pub use self::__VTHDRPerFrameMetadataGenerationSession::VTHDRPerFrameMetadataGenerationSessionCreate;
#[cfg(feature = "VTMotionEstimationSession")]
pub use self::__VTMotionEstimationSession::VTMotionEstimationFrameFlags;
#[cfg(feature = "VTMotionEstimationSession")]
pub use self::__VTMotionEstimationSession::VTMotionEstimationInfoFlags;
#[cfg(all(
    feature = "VTMotionEstimationSession",
    feature = "block2",
    feature = "objc2-core-video"
))]
pub use self::__VTMotionEstimationSession::VTMotionEstimationOutputHandler;
#[cfg(feature = "VTMotionEstimationSession")]
pub use self::__VTMotionEstimationSession::VTMotionEstimationSession;
#[cfg(feature = "VTMotionEstimationSession")]
pub use self::__VTMotionEstimationSession::VTMotionEstimationSessionCompleteFrames;
#[cfg(feature = "VTMotionEstimationSession")]
pub use self::__VTMotionEstimationSession::VTMotionEstimationSessionCopySourcePixelBufferAttributes;
#[cfg(feature = "VTMotionEstimationSession")]
pub use self::__VTMotionEstimationSession::VTMotionEstimationSessionCreate;
#[cfg(all(
    feature = "VTMotionEstimationSession",
    feature = "block2",
    feature = "objc2-core-video"
))]
pub use self::__VTMotionEstimationSession::VTMotionEstimationSessionEstimateMotionVectors;
#[cfg(feature = "VTMotionEstimationSession")]
pub use self::__VTMotionEstimationSession::VTMotionEstimationSessionInvalidate;
#[cfg(feature = "VTMotionEstimationSessionProperties")]
pub use self::__VTMotionEstimationSessionProperties::kVTMotionEstimationSessionCreationOption_DetectTrueMotion;
#[cfg(feature = "VTMotionEstimationSessionProperties")]
pub use self::__VTMotionEstimationSessionProperties::kVTMotionEstimationSessionCreationOption_Label;
#[cfg(feature = "VTMotionEstimationSessionProperties")]
pub use self::__VTMotionEstimationSessionProperties::kVTMotionEstimationSessionCreationOption_MotionVectorSize;
#[cfg(feature = "VTMotionEstimationSessionProperties")]
pub use self::__VTMotionEstimationSessionProperties::kVTMotionEstimationSessionCreationOption_UseMultiPassSearch;
#[cfg(feature = "VTMultiPassStorage")]
pub use self::__VTMultiPassStorage::kVTMultiPassStorageCreationOption_DoNotDelete;
#[cfg(feature = "VTMultiPassStorage")]
pub use self::__VTMultiPassStorage::VTMultiPassStorage;
#[cfg(feature = "VTMultiPassStorage")]
pub use self::__VTMultiPassStorage::VTMultiPassStorageClose;
#[cfg(all(feature = "VTMultiPassStorage", feature = "objc2-core-media"))]
pub use self::__VTMultiPassStorage::VTMultiPassStorageCreate;
#[cfg(feature = "VTPixelRotationProperties")]
pub use self::__VTPixelRotationProperties::kVTPixelRotationPropertyKey_FlipHorizontalOrientation;
#[cfg(feature = "VTPixelRotationProperties")]
pub use self::__VTPixelRotationProperties::kVTPixelRotationPropertyKey_FlipVerticalOrientation;
#[cfg(feature = "VTPixelRotationProperties")]
pub use self::__VTPixelRotationProperties::kVTPixelRotationPropertyKey_Rotation;
#[cfg(feature = "VTPixelRotationProperties")]
pub use self::__VTPixelRotationProperties::kVTRotation_0;
#[cfg(feature = "VTPixelRotationProperties")]
pub use self::__VTPixelRotationProperties::kVTRotation_180;
#[cfg(feature = "VTPixelRotationProperties")]
pub use self::__VTPixelRotationProperties::kVTRotation_CCW90;
#[cfg(feature = "VTPixelRotationProperties")]
pub use self::__VTPixelRotationProperties::kVTRotation_CW90;
#[cfg(feature = "VTPixelRotationSession")]
pub use self::__VTPixelRotationSession::VTPixelRotationSession;
#[cfg(feature = "VTPixelRotationSession")]
pub use self::__VTPixelRotationSession::VTPixelRotationSessionCreate;
#[cfg(feature = "VTPixelRotationSession")]
pub use self::__VTPixelRotationSession::VTPixelRotationSessionInvalidate;
#[cfg(all(feature = "VTPixelRotationSession", feature = "objc2-core-video"))]
pub use self::__VTPixelRotationSession::VTPixelRotationSessionRotateImage;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTDownsamplingMode_Average;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTDownsamplingMode_Decimate;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTPixelTransferPropertyKey_DestinationCleanAperture;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTPixelTransferPropertyKey_DestinationColorPrimaries;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTPixelTransferPropertyKey_DestinationICCProfile;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTPixelTransferPropertyKey_DestinationPixelAspectRatio;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTPixelTransferPropertyKey_DestinationTransferFunction;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTPixelTransferPropertyKey_DestinationYCbCrMatrix;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTPixelTransferPropertyKey_DownsamplingMode;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTPixelTransferPropertyKey_RealTime;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTPixelTransferPropertyKey_ScalingMode;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTScalingMode_CropSourceToCleanAperture;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTScalingMode_Letterbox;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTScalingMode_Normal;
#[cfg(feature = "VTPixelTransferProperties")]
pub use self::__VTPixelTransferProperties::kVTScalingMode_Trim;
#[cfg(feature = "VTPixelTransferSession")]
pub use self::__VTPixelTransferSession::VTPixelTransferSession;
#[cfg(feature = "VTPixelTransferSession")]
pub use self::__VTPixelTransferSession::VTPixelTransferSessionCreate;
#[cfg(feature = "VTPixelTransferSession")]
pub use self::__VTPixelTransferSession::VTPixelTransferSessionInvalidate;
#[cfg(all(feature = "VTPixelTransferSession", feature = "objc2-core-video"))]
pub use self::__VTPixelTransferSession::VTPixelTransferSessionTransferImage;
#[cfg(feature = "VTProfessionalVideoWorkflow")]
pub use self::__VTProfessionalVideoWorkflow::VTRegisterProfessionalVideoWorkflowVideoDecoders;
#[cfg(feature = "VTProfessionalVideoWorkflow")]
pub use self::__VTProfessionalVideoWorkflow::VTRegisterProfessionalVideoWorkflowVideoEncoders;
#[cfg(feature = "VTRAWProcessingProperties")]
pub use self::__VTRAWProcessingProperties::kVTRAWProcessingPropertyKey_MetadataForSidecarFile;
#[cfg(feature = "VTRAWProcessingProperties")]
pub use self::__VTRAWProcessingProperties::kVTRAWProcessingPropertyKey_MetalDeviceRegistryID;
#[cfg(feature = "VTRAWProcessingProperties")]
pub use self::__VTRAWProcessingProperties::kVTRAWProcessingPropertyKey_OutputColorAttachments;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameterListElement_Description;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameterListElement_Label;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameterListElement_ListElementID;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameterValueType_Boolean;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameterValueType_Float;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameterValueType_Integer;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameterValueType_List;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameterValueType_SubGroup;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameter_CameraValue;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameter_CurrentValue;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameter_Description;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameter_Enabled;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameter_InitialValue;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameter_Key;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameter_ListArray;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameter_MaximumValue;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameter_MinimumValue;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameter_Name;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameter_NeutralValue;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameter_SubGroup;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::kVTRAWProcessingParameter_ValueType;
#[cfg(all(
    feature = "VTRAWProcessingSession",
    feature = "block2",
    feature = "objc2-core-video"
))]
pub use self::__VTRAWProcessingSession::VTRAWProcessingOutputHandler;
#[cfg(all(feature = "VTRAWProcessingSession", feature = "block2"))]
pub use self::__VTRAWProcessingSession::VTRAWProcessingParameterChangeHandler;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::VTRAWProcessingSession;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::VTRAWProcessingSessionCompleteFrames;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::VTRAWProcessingSessionCopyProcessingParameters;
#[cfg(all(feature = "VTRAWProcessingSession", feature = "objc2-core-media"))]
pub use self::__VTRAWProcessingSession::VTRAWProcessingSessionCreate;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::VTRAWProcessingSessionInvalidate;
#[cfg(all(
    feature = "VTRAWProcessingSession",
    feature = "block2",
    feature = "objc2-core-video"
))]
pub use self::__VTRAWProcessingSession::VTRAWProcessingSessionProcessFrame;
#[cfg(all(feature = "VTRAWProcessingSession", feature = "block2"))]
pub use self::__VTRAWProcessingSession::VTRAWProcessingSessionSetParameterChangedHander;
#[cfg(feature = "VTRAWProcessingSession")]
pub use self::__VTRAWProcessingSession::VTRAWProcessingSessionSetProcessingParameters;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::kVTPropertyDocumentationKey;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::kVTPropertyReadWriteStatusKey;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::kVTPropertyReadWriteStatus_ReadOnly;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::kVTPropertyReadWriteStatus_ReadWrite;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::kVTPropertyShouldBeSerializedKey;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::kVTPropertySupportedValueListKey;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::kVTPropertySupportedValueMaximumKey;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::kVTPropertySupportedValueMinimumKey;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::kVTPropertyTypeKey;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::kVTPropertyType_Boolean;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::kVTPropertyType_Enumeration;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::kVTPropertyType_Number;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::VTSession;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::VTSessionCopyProperty;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::VTSessionCopySerializableProperties;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::VTSessionCopySupportedPropertyDictionary;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::VTSessionSetProperties;
#[cfg(feature = "VTSession")]
pub use self::__VTSession::VTSessionSetProperty;
#[cfg(feature = "VTUtilities")]
pub use self::__VTUtilities::kVTExtensionProperties_CodecNameKey;
#[cfg(feature = "VTUtilities")]
pub use self::__VTUtilities::kVTExtensionProperties_ContainingBundleNameKey;
#[cfg(feature = "VTUtilities")]
pub use self::__VTUtilities::kVTExtensionProperties_ContainingBundleURLKey;
#[cfg(feature = "VTUtilities")]
pub use self::__VTUtilities::kVTExtensionProperties_ExtensionIdentifierKey;
#[cfg(feature = "VTUtilities")]
pub use self::__VTUtilities::kVTExtensionProperties_ExtensionNameKey;
#[cfg(feature = "VTUtilities")]
pub use self::__VTUtilities::kVTExtensionProperties_ExtensionURLKey;
#[cfg(all(feature = "VTUtilities", feature = "objc2-core-media"))]
pub use self::__VTUtilities::VTCopyRAWProcessorExtensionProperties;
#[cfg(all(feature = "VTUtilities", feature = "objc2-core-media"))]
pub use self::__VTUtilities::VTCopyVideoDecoderExtensionProperties;
#[cfg(all(
    feature = "VTUtilities",
    feature = "objc2-core-graphics",
    feature = "objc2-core-video"
))]
pub use self::__VTUtilities::VTCreateCGImageFromCVPixelBuffer;
#[cfg(feature = "VTUtilities")]
pub use self::__VTUtilities::VTExtensionPropertiesKey;
#[cfg(all(feature = "VTUtilities", feature = "objc2-core-media"))]
pub use self::__VTUtilities::VTRegisterSupplementalVideoDecoderIfAvailable;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::kVTVideoEncoderListOption_IncludeStandardDefinitionDVEncoders;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::kVTVideoEncoderList_CodecName;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::kVTVideoEncoderList_CodecType;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::kVTVideoEncoderList_DisplayName;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::kVTVideoEncoderList_EncoderID;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::kVTVideoEncoderList_EncoderName;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::kVTVideoEncoderList_GPURegistryID;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::kVTVideoEncoderList_InstanceLimit;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::kVTVideoEncoderList_IsHardwareAccelerated;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::kVTVideoEncoderList_PerformanceRating;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::kVTVideoEncoderList_QualityRating;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::kVTVideoEncoderList_SupportedSelectionProperties;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::kVTVideoEncoderList_SupportsFrameReordering;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::kVTVideoEncoderList_SupportsMultiPass;
#[cfg(all(feature = "VTVideoEncoderList", feature = "objc2-core-media"))]
pub use self::__VTVideoEncoderList::VTCopySupportedPropertyDictionaryForEncoder;
#[cfg(feature = "VTVideoEncoderList")]
pub use self::__VTVideoEncoderList::VTCopyVideoEncoderList;
