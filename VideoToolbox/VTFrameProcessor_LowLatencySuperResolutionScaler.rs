//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
#[cfg(feature = "objc2-foundation")]
use objc2_foundation::*;

use crate::*;

#[cfg(feature = "objc2")]
extern_class!(
    /// Creates an object which is used to configure VTFrameProcessor for Low Latency Super Resolution Scaler processing.
    ///
    ///
    /// VTLowLatencySuperResolutionScalerConfiguration is used to configure a VTFrameProcessor.  This interface can also queried for important operating details, like the pixel buffer attributes required for frames submitted to the processor.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtlowlatencysuperresolutionscalerconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct VTLowLatencySuperResolutionScalerConfiguration;
);

#[cfg(feature = "objc2")]
unsafe impl Send for VTLowLatencySuperResolutionScalerConfiguration {}

#[cfg(feature = "objc2")]
unsafe impl Sync for VTLowLatencySuperResolutionScalerConfiguration {}

#[cfg(feature = "objc2")]
extern_conformance!(
    unsafe impl NSObjectProtocol for VTLowLatencySuperResolutionScalerConfiguration {}
);

#[cfg(all(feature = "VTFrameProcessorConfiguration", feature = "objc2"))]
extern_conformance!(
    unsafe impl VTFrameProcessorConfiguration for VTLowLatencySuperResolutionScalerConfiguration {}
);

#[cfg(feature = "objc2")]
impl VTLowLatencySuperResolutionScalerConfiguration {
    extern_methods!(
        /// Creates a new VTLowLatencySuperResolutionScalerConfiguration with specified frame width and height.
        ///
        ///
        /// Parameter `frameWidth`: Width of source frame in pixels.
        ///
        ///
        /// Parameter `frameHeight`: Height of source frame in pixels.
        ///
        ///
        /// Parameter `scaleFactor`: The scale factor to be applied.  This must be a supported value returned by supportedScaleFactorsForFrameWidth:frameHeight.
        #[unsafe(method(initWithFrameWidth:frameHeight:scaleFactor:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrameWidth_frameHeight_scaleFactor(
            this: Allocated<Self>,
            frame_width: NSInteger,
            frame_height: NSInteger,
            scale_factor: c_float,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Width of source frame in pixels.
        #[unsafe(method(frameWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn frameWidth(&self) -> NSInteger;

        /// Height of source frame in pixels.
        #[unsafe(method(frameHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn frameHeight(&self) -> NSInteger;

        #[cfg(feature = "objc2-foundation")]
        /// list of pixel formats for source frames for the current configuration
        #[unsafe(method(frameSupportedPixelFormats))]
        #[unsafe(method_family = none)]
        pub unsafe fn frameSupportedPixelFormats(&self) -> Retained<NSArray<NSNumber>>;

        #[cfg(feature = "objc2-foundation")]
        /// returns a pixelBufferAttributes dictionary describing requirements for pixelBuffers used as source and reference frames
        #[unsafe(method(sourcePixelBufferAttributes))]
        #[unsafe(method_family = none)]
        pub unsafe fn sourcePixelBufferAttributes(
            &self,
        ) -> Retained<NSDictionary<NSString, AnyObject>>;

        #[cfg(feature = "objc2-foundation")]
        /// returns a pixelBufferAttributes dictionary describing requirements for pixelBuffers used as destination frames
        #[unsafe(method(destinationPixelBufferAttributes))]
        #[unsafe(method_family = none)]
        pub unsafe fn destinationPixelBufferAttributes(
            &self,
        ) -> Retained<NSDictionary<NSString, AnyObject>>;

        /// Returns the scale factor that the configuration was initialized with.
        #[unsafe(method(scaleFactor))]
        #[unsafe(method_family = none)]
        pub unsafe fn scaleFactor(&self) -> c_float;

        #[cfg(feature = "objc2-core-media")]
        /// returns the maximum dimensions for a sourceFrame for the processor
        #[unsafe(method(maximumDimensions))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumDimensions() -> CMVideoDimensions;

        #[cfg(feature = "objc2-core-media")]
        /// returns the minimum dimensions for a sourceFrame for the processor
        #[unsafe(method(minimumDimensions))]
        #[unsafe(method_family = none)]
        pub unsafe fn minimumDimensions() -> CMVideoDimensions;

        /// reports whether this processor is supported on the current config.
        #[unsafe(method(isSupported))]
        #[unsafe(method_family = none)]
        pub unsafe fn isSupported() -> bool;

        #[cfg(feature = "objc2-foundation")]
        /// Returns the supported scale factors for the provided input dimensions.
        ///
        ///
        /// returns an array of supported scale factors values, or an empty list if the dimensions are unsupported.
        #[unsafe(method(supportedScaleFactorsForFrameWidth:frameHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedScaleFactorsForFrameWidth_frameHeight(
            frame_width: NSInteger,
            frame_height: NSInteger,
        ) -> Retained<NSArray<NSNumber>>;
    );
}

#[cfg(feature = "objc2")]
extern_class!(
    /// VTLowLatencySuperResolutionScalerParameters object contains both input and output parameters needed for the Low Latency Super Resolution Scaler Frame Processor. This object is used in the processWithParameters call of VTFrameProcessor class.
    ///
    ///
    /// VTLowLatencySuperResolutionScalerParameters are frame level parameters.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtlowlatencysuperresolutionscalerparameters?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct VTLowLatencySuperResolutionScalerParameters;
);

#[cfg(feature = "objc2")]
extern_conformance!(
    unsafe impl NSObjectProtocol for VTLowLatencySuperResolutionScalerParameters {}
);

#[cfg(all(feature = "VTFrameProcessorParameters", feature = "objc2"))]
extern_conformance!(
    unsafe impl VTFrameProcessorParameters for VTLowLatencySuperResolutionScalerParameters {}
);

#[cfg(feature = "objc2")]
impl VTLowLatencySuperResolutionScalerParameters {
    extern_methods!(
        #[cfg(feature = "VTFrameProcessorFrame")]
        /// Creates a new VTLowLatencySuperResolutionScalerParameters object.
        ///
        ///
        /// Parameter `sourceFrame`: Current source frame. Must be non nil.
        ///
        ///
        /// Parameter `destinationFrame`: User allocated pixel buffer that will receive the results.  Must be non nil.
        #[unsafe(method(initWithSourceFrame:destinationFrame:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithSourceFrame_destinationFrame(
            this: Allocated<Self>,
            source_frame: &VTFrameProcessorFrame,
            destination_frame: &VTFrameProcessorFrame,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "VTFrameProcessorFrame")]
        /// sourceFrame Current source frame. Must be non nil
        #[unsafe(method(sourceFrame))]
        #[unsafe(method_family = none)]
        pub unsafe fn sourceFrame(&self) -> Retained<VTFrameProcessorFrame>;

        #[cfg(feature = "VTFrameProcessorFrame")]
        /// VTFrameProcessorFrame that contains user allocated pixel buffer that will receive the results.
        #[unsafe(method(destinationFrame))]
        #[unsafe(method_family = none)]
        pub unsafe fn destinationFrame(&self) -> Retained<VTFrameProcessorFrame>;
    );
}
