//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
#[cfg(feature = "objc2-foundation")]
use objc2_foundation::*;

use crate::*;

#[cfg(feature = "objc2")]
extern_class!(
    /// A configuration object to initiate VTFrameProcessor and use Temporal Noise Filter processor.
    ///
    ///
    /// The class properties of VTTemporalNoiseFilterConfiguration help to identify the capabilities of Temporal Noise Filter Processor on the current platform, prior to initiating a session.
    /// The availability of Temporal Noise Filter processor in the current platform can be confirmed by checking the VTTemporalNoiseFilterConfiguration.isSupported class property.
    /// Verify the processor's capability to process source frames by ensuring that the dimensions are no less than VTTemporalNoiseFilterConfiguration.minimumDimensions and no greater than VTTemporalNoiseFilterConfiguration.maximumDimensions.
    /// Use the instance properties such as frameSupportedPixelFormats, sourcePixelBufferAttributes, and destinationPixelBufferAttributes to ensure that the input and output pixel buffer formats and attributes of the processor align with the client's specific requirements.
    /// The properties previousFrameCount and nextFrameCount represent the maximum number of preceding and subsequent reference frames, used in the processing of a source frame, to achieve optimum noise reduction quality.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vttemporalnoisefilterconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct VTTemporalNoiseFilterConfiguration;
);

#[cfg(feature = "objc2")]
unsafe impl Send for VTTemporalNoiseFilterConfiguration {}

#[cfg(feature = "objc2")]
unsafe impl Sync for VTTemporalNoiseFilterConfiguration {}

#[cfg(feature = "objc2")]
extern_conformance!(
    unsafe impl NSObjectProtocol for VTTemporalNoiseFilterConfiguration {}
);

#[cfg(all(feature = "VTFrameProcessorConfiguration", feature = "objc2"))]
extern_conformance!(
    unsafe impl VTFrameProcessorConfiguration for VTTemporalNoiseFilterConfiguration {}
);

#[cfg(feature = "objc2")]
impl VTTemporalNoiseFilterConfiguration {
    extern_methods!(
        /// Creates a new VTTemporalNoiseConfiguration with specified width and height.
        ///
        ///
        /// Parameter `frameWidth`: Width of source frame in pixels.
        ///
        ///
        /// Parameter `frameHeight`: Height of source frame in pixels.
        #[unsafe(method(initWithFrameWidth:frameHeight:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrameWidth_frameHeight(
            this: Allocated<Self>,
            frame_width: NSInteger,
            frame_height: NSInteger,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Width of source frame in pixels.
        #[unsafe(method(frameWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn frameWidth(&self) -> NSInteger;

        /// Height of source frame in pixels.
        #[unsafe(method(frameHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn frameHeight(&self) -> NSInteger;

        #[cfg(feature = "objc2-foundation")]
        /// List of supported pixel formats for source frames.
        #[unsafe(method(frameSupportedPixelFormats))]
        #[unsafe(method_family = none)]
        pub unsafe fn frameSupportedPixelFormats(&self) -> Retained<NSArray<NSNumber>>;

        #[cfg(feature = "objc2-foundation")]
        /// Supported pixel buffer attributes for source frames.
        #[unsafe(method(sourcePixelBufferAttributes))]
        #[unsafe(method_family = none)]
        pub unsafe fn sourcePixelBufferAttributes(
            &self,
        ) -> Retained<NSDictionary<NSString, AnyObject>>;

        #[cfg(feature = "objc2-foundation")]
        /// Supported pixel buffer attributes for destination frames.
        #[unsafe(method(destinationPixelBufferAttributes))]
        #[unsafe(method_family = none)]
        pub unsafe fn destinationPixelBufferAttributes(
            &self,
        ) -> Retained<NSDictionary<NSString, AnyObject>>;

        /// Maximum number of future reference frames used to process a source frame.
        #[unsafe(method(nextFrameCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn nextFrameCount(&self) -> NSInteger;

        /// Maximum number of past reference frames used to process a source frame.
        #[unsafe(method(previousFrameCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn previousFrameCount(&self) -> NSInteger;

        #[cfg(feature = "objc2-core-media")]
        /// The maximum dimensions of a source frame, supported by the processor.
        #[unsafe(method(maximumDimensions))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumDimensions() -> CMVideoDimensions;

        #[cfg(feature = "objc2-core-media")]
        /// The minimum dimensions of a source frame, supported by the processor.
        #[unsafe(method(minimumDimensions))]
        #[unsafe(method_family = none)]
        pub unsafe fn minimumDimensions() -> CMVideoDimensions;

        /// reports whether this processor is supported
        #[unsafe(method(isSupported))]
        #[unsafe(method_family = none)]
        pub unsafe fn isSupported() -> bool;
    );
}

#[cfg(feature = "objc2")]
extern_class!(
    /// VTTemporalNoiseFilterParameters object encapsulates the frame-level parameters necessary for processing a source frame using Temporal Noise Filter processor.
    ///
    ///
    /// This object is intended for sending input parameters into the processWithParameters method of the VTFrameProcessor class.
    /// Temporal Noise Filter processor utilizes past and future reference frames, provided in presentation time order, to reduce noise from the source frame. The previousFrameCount and nextFrameCount properties in VTTemporalNoiseFilterConfiguration represent the maximum number of past and future reference frames that can be used by the processor to achieve optimum noise reduction quality. The number of reference frames provided shall depend on their availability, but at a minimum, one reference frame, either past or future, must be provided.
    /// The parameter destinationFrame stores the output frame that is returned to the caller upon the successful completion of the processWithParameters operation.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vttemporalnoisefilterparameters?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct VTTemporalNoiseFilterParameters;
);

#[cfg(feature = "objc2")]
extern_conformance!(
    unsafe impl NSObjectProtocol for VTTemporalNoiseFilterParameters {}
);

#[cfg(all(feature = "VTFrameProcessorParameters", feature = "objc2"))]
extern_conformance!(
    unsafe impl VTFrameProcessorParameters for VTTemporalNoiseFilterParameters {}
);

#[cfg(feature = "objc2")]
impl VTTemporalNoiseFilterParameters {
    extern_methods!(
        #[cfg(all(feature = "VTFrameProcessorFrame", feature = "objc2-foundation"))]
        /// Creates a new VTTemporalNoiseFilterParameters object.
        ///
        ///
        /// Parameter `sourceFrame`: Current source frame. Must be non nil.
        ///
        ///
        /// Parameter `nextFrames`: Future reference frames in presentation time order to be used for processing the source frame. The number of frames can vary from 0 to the number specified by the nextFrameCount property in VTTemporalNoiseFilterConfiguration.
        ///
        ///
        /// Parameter `previousFrames`: Past reference frames in presentation time order to be used for processing the source frame. The number of frames can vary from 0 to the number specified by the previousFrameCount property in VTTemporalNoiseFilterConfiguration.
        ///
        ///
        /// Parameter `destinationFrame`: User allocated pixel buffer that will receive the output frame. The pixel format of the destinationFrame must match with that of the sourceFrame.
        ///
        ///
        /// Parameter `filterStrength`: Used to control strength of the noise filtering. The value can range from the minimum strength of 0.0 to the maximum strength of 1.0. Change in filter strength causes the processor to flush all frames in the queue prior to processing the source frame.
        ///
        ///
        /// Parameter `discontinuity`: Marks sequence discontinuity, forcing the processor to reset prior to processing the source frame.
        #[unsafe(method(initWithSourceFrame:nextFrames:previousFrames:destinationFrame:filterStrength:discontinuity:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithSourceFrame_nextFrames_previousFrames_destinationFrame_filterStrength_discontinuity(
            this: Allocated<Self>,
            source_frame: &VTFrameProcessorFrame,
            next_frames: Option<&NSArray<VTFrameProcessorFrame>>,
            previous_frames: Option<&NSArray<VTFrameProcessorFrame>>,
            destination_frame: &VTFrameProcessorFrame,
            filter_strength: c_float,
            discontinuity: Boolean,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "VTFrameProcessorFrame")]
        /// Current source frame. Must be non-nil.
        #[unsafe(method(sourceFrame))]
        #[unsafe(method_family = none)]
        pub unsafe fn sourceFrame(&self) -> Retained<VTFrameProcessorFrame>;

        #[cfg(all(feature = "VTFrameProcessorFrame", feature = "objc2-foundation"))]
        /// Future reference frames in presentation time order to be used for processing the source frame. The number of frames can vary from 0 to the number specified by the nextFrameCount property in VTTemporalNoiseFilterConfiguration.
        #[unsafe(method(nextFrames))]
        #[unsafe(method_family = none)]
        pub unsafe fn nextFrames(&self) -> Option<Retained<NSArray<VTFrameProcessorFrame>>>;

        #[cfg(all(feature = "VTFrameProcessorFrame", feature = "objc2-foundation"))]
        /// Past reference frames in presentation time order to be used for processing the source frame. The number of frames can vary from 0 to the number specified by the previousFrameCount property in VTTemporalNoiseFilterConfiguration.
        #[unsafe(method(previousFrames))]
        #[unsafe(method_family = none)]
        pub unsafe fn previousFrames(&self) -> Option<Retained<NSArray<VTFrameProcessorFrame>>>;

        /// Parameter used to control strength of the noise filtering. The value can range from the minimum strength of 0.0 to the maximum strength of 1.0. Change in filter strength causes the processor to flush all frames in the queue prior to processing the source frame.
        #[unsafe(method(filterStrength))]
        #[unsafe(method_family = none)]
        pub unsafe fn filterStrength(&self) -> c_float;

        /// Setter for [`filterStrength`][Self::filterStrength].
        #[unsafe(method(setFilterStrength:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFilterStrength(&self, filter_strength: c_float);

        /// Marks sequence discontinuity, forcing the processor to reset prior to processing the source frame.
        #[unsafe(method(discontinuity))]
        #[unsafe(method_family = none)]
        pub unsafe fn discontinuity(&self) -> Boolean;

        /// Setter for [`discontinuity`][Self::discontinuity].
        #[unsafe(method(setDiscontinuity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDiscontinuity(&self, discontinuity: Boolean);

        #[cfg(feature = "VTFrameProcessorFrame")]
        /// VTFrameProcessorFrame that contains user allocated pixel buffer that will receive the output frame.
        #[unsafe(method(destinationFrame))]
        #[unsafe(method_family = none)]
        pub unsafe fn destinationFrame(&self) -> Retained<VTFrameProcessorFrame>;
    );
}
