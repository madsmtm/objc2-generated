//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-foundation")]
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtframeprocessorerrordomain?language=objc)
    #[cfg(feature = "objc2-foundation")]
    pub static VTFrameProcessorErrorDomain: Option<&'static NSErrorDomain>;
}

/// VTFrameProcessor  error codes.
///
/// These error codes are returned in the NSError object in the event a method fails.
///
/// Returned if the processor failed for unknown reason.
///
/// Returned if the processor failed due to an unsupported resolution.
///
/// Returned if the session is used to process frames without being started.
///
/// Returned if a startSessionWithConfiguration call is made on a session which has already been started.
///
/// Returned if a fatal error is encoutnered during processing.
///
/// Returned if processing failed and current session should be stopped.
///
/// Returned if the session failed to initialize the processing pipeline.
///
/// Returned to indicate that one or more frames is in a format which is not supproted by the processor.
///
/// Returned if the session or processor is unable to allocate required memory.
///
/// Returned if the specifed revision is not supported by the configured processor.
///
/// Returned if the processor encountered an issue preventing it from processing the provided frame.
///
/// Returned if one of the provided parameters is not valid.
///
/// Returned if one of the provided VTFrameProcessorFrame objects has a PTS which is not supported by the processor, either invalid or out-of-order.
///
/// Returned if download of a required model asset for the processor failed
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtframeprocessorerror?language=objc)
// NS_ERROR_ENUM
#[cfg(feature = "objc2")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct VTFrameProcessorError(pub NSInteger);
#[cfg(feature = "objc2")]
impl VTFrameProcessorError {
    #[doc(alias = "VTFrameProcessorUnknownError")]
    pub const UnknownError: Self = Self(-19730);
    #[doc(alias = "VTFrameProcessorUnsupportedResolution")]
    pub const UnsupportedResolution: Self = Self(-19731);
    #[doc(alias = "VTFrameProcessorSessionNotStarted")]
    pub const SessionNotStarted: Self = Self(-19732);
    #[doc(alias = "VTFrameProcessorSessionAlreadyActive")]
    pub const SessionAlreadyActive: Self = Self(-19733);
    #[doc(alias = "VTFrameProcessorFatalError")]
    pub const FatalError: Self = Self(-19734);
    #[doc(alias = "VTFrameProcessorSessionLevelError")]
    pub const SessionLevelError: Self = Self(-19735);
    #[doc(alias = "VTFrameProcessorInitializationFailed")]
    pub const InitializationFailed: Self = Self(-19736);
    #[doc(alias = "VTFrameProcessorUnsupportedInput")]
    pub const UnsupportedInput: Self = Self(-19737);
    #[doc(alias = "VTFrameProcessorMemoryAllocationFailure")]
    pub const MemoryAllocationFailure: Self = Self(-19738);
    #[doc(alias = "VTFrameProcessorRevisionNotSupported")]
    pub const RevisionNotSupported: Self = Self(-19739);
    #[doc(alias = "VTFrameProcessorProcessingError")]
    pub const ProcessingError: Self = Self(-19740);
    #[doc(alias = "VTFrameProcessorInvalidParameterError")]
    pub const InvalidParameterError: Self = Self(-19741);
    #[doc(alias = "VTFrameProcessorInvalidFrameTiming")]
    pub const InvalidFrameTiming: Self = Self(-19742);
    #[doc(alias = "VTFrameProcessorAssetDownloadFailed")]
    pub const AssetDownloadFailed: Self = Self(-19743);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for VTFrameProcessorError {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for VTFrameProcessorError {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}
