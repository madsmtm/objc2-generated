//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
#[cfg(feature = "objc2-foundation")]
use objc2_foundation::*;

use crate::*;

#[cfg(feature = "objc2")]
extern_protocol!(
    /// The VTFrameProcessorConfiguration protocol describes the configuration of a processor to be used during a video processing session.
    ///
    ///
    /// VTFrameProcessorConfiguration protocol conformance is used to start an frame processing session.  These properties can be  queried on an implementation conforming to VTFrameProcessorConfiguration without starting a session.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videotoolbox/vtframeprocessorconfiguration?language=objc)
    #[cfg(feature = "objc2")]
    pub unsafe trait VTFrameProcessorConfiguration: NSObjectProtocol {
        /// Returns a Boolean indicating whether the processor supported on the current config.
        #[unsafe(method(processorSupported))]
        #[unsafe(method_family = none)]
        unsafe fn processorSupported() -> Boolean;

        #[cfg(feature = "objc2-foundation")]
        /// Returns a list of supported pixel formats for the current configuration
        ///
        /// This property is not atomic.
        #[unsafe(method(frameSupportedPixelFormats))]
        #[unsafe(method_family = none)]
        unsafe fn frameSupportedPixelFormats(&self) -> Retained<NSArray<NSNumber>>;

        #[cfg(feature = "objc2-foundation")]
        /// Returns a dictionary of CVPixelBuffer attributes which source and reference frames passed to the processor must conform to.
        ///
        /// This property is not atomic.
        #[unsafe(method(sourcePixelBufferAttributes))]
        #[unsafe(method_family = none)]
        unsafe fn sourcePixelBufferAttributes(&self) -> Retained<NSDictionary>;

        #[cfg(feature = "objc2-foundation")]
        /// Returns a dictionary of CVPixelBuffer attributes which output frames passed to the processor must conform to.
        ///
        /// This property is not atomic.
        #[unsafe(method(destinationPixelBufferAttributes))]
        #[unsafe(method_family = none)]
        unsafe fn destinationPixelBufferAttributes(&self) -> Retained<NSDictionary>;

        /// returns the number of "next" frames that this processor requires for processing.
        ///
        /// This property is not atomic.
        #[optional]
        #[unsafe(method(nextFrameCount))]
        #[unsafe(method_family = none)]
        unsafe fn nextFrameCount(&self) -> NSInteger;

        /// returns the number of "previous" frames that this processor requires for processing.
        ///
        /// This property is not atomic.
        #[optional]
        #[unsafe(method(previousFrameCount))]
        #[unsafe(method_family = none)]
        unsafe fn previousFrameCount(&self) -> NSInteger;

        #[cfg(feature = "objc2-core-media")]
        /// returns the maximum dimension for a sourceFrame for the processor
        #[optional]
        #[unsafe(method(maximumDimensions))]
        #[unsafe(method_family = none)]
        unsafe fn maximumDimensions() -> CMVideoDimensions;

        #[cfg(feature = "objc2-core-media")]
        /// returns the minimum dimension for a sourceFrame for the processor
        #[optional]
        #[unsafe(method(minimumDimensions))]
        #[unsafe(method_family = none)]
        unsafe fn minimumDimensions() -> CMVideoDimensions;
    }
);
