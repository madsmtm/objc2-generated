//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/imagecapturecore/icrunloopmode?language=objc)
    #[deprecated = "ICRunLoopMode has been deprecated and may break in future releases."]
    pub static ICRunLoopMode: Option<&'static NSString>;
}

extern "C" {
    /// Type representing EXIF Orientation tag value
    ///
    /// The meaning of this value is defined by the EXIF specification. Here is what the letter F would look like if it were tagged correctly and displayed by a program that ignores the orientation tag (thus showing the stored image):
    ///
    /// 1             2             3             4
    ///
    /// 8888888       8888888            88       88
    /// 88                 88            88       88
    /// 8888             8888          8888       8888
    /// 88                 88            88       88
    /// 88                 88       8888888       8888888
    ///
    /// 5             6             7             8
    ///
    /// 8888888888    88                    88    8888888888
    /// 88  88        88  88            88  88        88  88
    /// 88            8888888888    8888888888            88
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/imagecapturecore/icerrordomain?language=objc)
    pub static ICErrorDomain: Option<&'static NSErrorDomain>;
}

/// [Apple's documentation](https://developer.apple.com/documentation/imagecapturecore/icexiforientationtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ICEXIFOrientationType(pub NSUInteger);
impl ICEXIFOrientationType {
    #[doc(alias = "ICEXIFOrientation1")]
    pub const Orientation1: Self = Self(1);
    #[doc(alias = "ICEXIFOrientation2")]
    pub const Orientation2: Self = Self(2);
    #[doc(alias = "ICEXIFOrientation3")]
    pub const Orientation3: Self = Self(3);
    #[doc(alias = "ICEXIFOrientation4")]
    pub const Orientation4: Self = Self(4);
    #[doc(alias = "ICEXIFOrientation5")]
    pub const Orientation5: Self = Self(5);
    #[doc(alias = "ICEXIFOrientation6")]
    pub const Orientation6: Self = Self(6);
    #[doc(alias = "ICEXIFOrientation7")]
    pub const Orientation7: Self = Self(7);
    #[doc(alias = "ICEXIFOrientation8")]
    pub const Orientation8: Self = Self(8);
}

unsafe impl Encode for ICEXIFOrientationType {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for ICEXIFOrientationType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/imagecapturecore/icreturncodeoffset?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ICReturnCodeOffset(pub NSInteger);
impl ICReturnCodeOffset {
    #[doc(alias = "ICReturnCodeThumbnailOffset")]
    pub const ThumbnailOffset: Self = Self(-21000);
    #[doc(alias = "ICReturnCodeMetadataOffset")]
    pub const MetadataOffset: Self = Self(-21050);
    #[doc(alias = "ICReturnCodeDownloadOffset")]
    pub const DownloadOffset: Self = Self(-21100);
    #[doc(alias = "ICReturnCodeDeleteOffset")]
    pub const DeleteOffset: Self = Self(-21150);
    #[doc(alias = "ICReturnCodeExFATOffset")]
    pub const ExFATOffset: Self = Self(-21200);
    #[doc(alias = "ICReturnCodePTPOffset")]
    pub const PTPOffset: Self = Self(-21250);
    #[doc(alias = "ICReturnCodeSystemOffset")]
    pub const SystemOffset: Self = Self(-21300);
    #[doc(alias = "ICReturnCodeDeviceOffset")]
    pub const DeviceOffset: Self = Self(-21350);
    #[doc(alias = "ICReturnCodeDeviceConnection")]
    pub const DeviceConnection: Self = Self(-21400);
    #[doc(alias = "ICReturnCodeObjectOffset")]
    pub const ObjectOffset: Self = Self(-21450);
}

unsafe impl Encode for ICReturnCodeOffset {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for ICReturnCodeOffset {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/imagecapturecore/icreturnthumbnailerrorcode?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ICReturnThumbnailErrorCode(pub NSInteger);
impl ICReturnThumbnailErrorCode {
    #[doc(alias = "ICReturnThumbnailNotAvailable")]
    pub const NotAvailable: Self = Self(-21000);
    #[doc(alias = "ICReturnThumbnailAlreadyFetching")]
    pub const AlreadyFetching: Self = Self(-20999);
    #[doc(alias = "ICReturnThumbnailCanceled")]
    pub const Canceled: Self = Self(-20098);
    #[doc(alias = "ICReturnThumbnailInvalid")]
    pub const Invalid: Self = Self(-20097);
}

unsafe impl Encode for ICReturnThumbnailErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for ICReturnThumbnailErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/imagecapturecore/icreturnmetadataerrorcode?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ICReturnMetadataErrorCode(pub NSInteger);
impl ICReturnMetadataErrorCode {
    #[doc(alias = "ICReturnMetadataNotAvailable")]
    pub const NotAvailable: Self = Self(-20150);
    #[doc(alias = "ICReturnMetadataAlreadyFetching")]
    pub const AlreadyFetching: Self = Self(-20149);
    #[doc(alias = "ICReturnMetadataCanceled")]
    pub const Canceled: Self = Self(-20148);
    #[doc(alias = "ICReturnMetadataInvalid")]
    pub const Invalid: Self = Self(-20147);
}

unsafe impl Encode for ICReturnMetadataErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for ICReturnMetadataErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/imagecapturecore/icreturnconnectionerrorcode?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ICReturnConnectionErrorCode(pub NSInteger);
impl ICReturnConnectionErrorCode {
    #[doc(alias = "ICReturnConnectionDriverExited")]
    pub const DriverExited: Self = Self(-21350);
    #[doc(alias = "ICReturnConnectionClosedSessionSuddenly")]
    pub const ClosedSessionSuddenly: Self = Self(-21349);
    #[doc(alias = "ICReturnConnectionEjectedSuddenly")]
    pub const EjectedSuddenly: Self = Self(-21348);
    #[doc(alias = "ICReturnConnectionSessionAlreadyOpen")]
    pub const SessionAlreadyOpen: Self = Self(-21347);
    #[doc(alias = "ICReturnConnectionEjectFailed")]
    pub const EjectFailed: Self = Self(-21346);
    #[doc(alias = "ICReturnConnectionFailedToOpen")]
    pub const FailedToOpen: Self = Self(-21345);
    #[doc(alias = "ICReturnConnectionFailedToOpenDevice")]
    pub const FailedToOpenDevice: Self = Self(-21344);
    #[doc(alias = "ICReturnConnectionNotAuthorizedToOpenDevice")]
    pub const NotAuthorizedToOpenDevice: Self = Self(-21343);
}

unsafe impl Encode for ICReturnConnectionErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for ICReturnConnectionErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/imagecapturecore/icreturnptpdeviceerrorcode?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ICReturnPTPDeviceErrorCode(pub NSInteger);
impl ICReturnPTPDeviceErrorCode {
    #[doc(alias = "ICReturnPTPFailedToSendCommand")]
    pub const FailedToSendCommand: Self = Self(-21250);
    #[doc(alias = "ICReturnPTPNotAuthorizedToSendCommand")]
    pub const NotAuthorizedToSendCommand: Self = Self(-21249);
}

unsafe impl Encode for ICReturnPTPDeviceErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for ICReturnPTPDeviceErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/imagecapturecore/icreturndownloaderrorcode?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ICReturnDownloadErrorCode(pub NSInteger);
impl ICReturnDownloadErrorCode {
    #[doc(alias = "ICReturnDownloadPathInvalid")]
    pub const PathInvalid: Self = Self(-21100);
    #[doc(alias = "ICReturnDownloadFileWritable")]
    pub const FileWritable: Self = Self(-21099);
}

unsafe impl Encode for ICReturnDownloadErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for ICReturnDownloadErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/imagecapturecore/iclegacyreturncode?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ICLegacyReturnCode(pub NSInteger);
impl ICLegacyReturnCode {
    #[doc(alias = "ICLegacyReturnCodeCommunicationErr")]
    pub const CommunicationErr: Self = Self(-9900);
    #[doc(alias = "ICLegacyReturnCodeDeviceNotFoundErr")]
    pub const DeviceNotFoundErr: Self = Self(-9901);
    #[doc(alias = "ICLegacyReturnCodeDeviceNotOpenErr")]
    pub const DeviceNotOpenErr: Self = Self(-9902);
    #[doc(alias = "ICLegacyReturnCodeFileCorruptedErr")]
    pub const FileCorruptedErr: Self = Self(-9903);
    #[doc(alias = "ICLegacyReturnCodeIOPendingErr")]
    pub const IOPendingErr: Self = Self(-9904);
    #[doc(alias = "ICLegacyReturnCodeInvalidObjectErr")]
    pub const InvalidObjectErr: Self = Self(-9905);
    #[doc(alias = "ICLegacyReturnCodeInvalidPropertyErr")]
    pub const InvalidPropertyErr: Self = Self(-9906);
    #[doc(alias = "ICLegacyReturnCodeIndexOutOfRangeErr")]
    pub const IndexOutOfRangeErr: Self = Self(-9907);
    #[doc(alias = "ICLegacyReturnCodePropertyTypeNotFoundErr")]
    pub const PropertyTypeNotFoundErr: Self = Self(-9908);
    #[doc(alias = "ICLegacyReturnCodeCannotYieldDevice")]
    pub const CannotYieldDevice: Self = Self(-9909);
    #[doc(alias = "ICLegacyReturnCodeDataTypeNotFoundErr")]
    pub const DataTypeNotFoundErr: Self = Self(-9910);
    #[doc(alias = "ICLegacyReturnCodeDeviceMemoryAllocationErr")]
    pub const DeviceMemoryAllocationErr: Self = Self(-9911);
    #[doc(alias = "ICLegacyReturnCodeDeviceInternalErr")]
    pub const DeviceInternalErr: Self = Self(-9912);
    #[doc(alias = "ICLegacyReturnCodeDeviceInvalidParamErr")]
    pub const DeviceInvalidParamErr: Self = Self(-9913);
    #[doc(alias = "ICLegacyReturnCodeDeviceAlreadyOpenErr")]
    pub const DeviceAlreadyOpenErr: Self = Self(-9914);
    #[doc(alias = "ICLegacyReturnCodeDeviceLocationIDNotFoundErr")]
    pub const DeviceLocationIDNotFoundErr: Self = Self(-9915);
    #[doc(alias = "ICLegacyReturnCodeDeviceGUIDNotFoundErr")]
    pub const DeviceGUIDNotFoundErr: Self = Self(-9916);
    #[doc(alias = "ICLegacyReturnCodeDeviceIOServicePathNotFoundErr")]
    pub const DeviceIOServicePathNotFoundErr: Self = Self(-9917);
    #[doc(alias = "ICLegacyReturnCodeDeviceUnsupportedErr")]
    pub const DeviceUnsupportedErr: Self = Self(-9918);
    #[doc(alias = "ICLegacyReturnCodeFrameworkInternalErr")]
    pub const FrameworkInternalErr: Self = Self(-9919);
    #[doc(alias = "ICLegacyReturnCodeExtensionInternalErr")]
    pub const ExtensionInternalErr: Self = Self(-9920);
    #[doc(alias = "ICLegacyReturnCodeInvalidSessionErr")]
    pub const InvalidSessionErr: Self = Self(-9921);
}

unsafe impl Encode for ICLegacyReturnCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for ICLegacyReturnCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/imagecapturecore/icreturncode?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ICReturnCode(pub NSInteger);
impl ICReturnCode {
    #[doc(alias = "ICReturnSuccess")]
    pub const Success: Self = Self(0);
    #[doc(alias = "ICReturnInvalidParam")]
    pub const InvalidParam: Self = Self(-9922);
    #[doc(alias = "ICReturnCommunicationTimedOut")]
    pub const CommunicationTimedOut: Self = Self(-9923);
    #[doc(alias = "ICReturnScanOperationCanceled")]
    pub const ScanOperationCanceled: Self = Self(-9924);
    #[doc(alias = "ICReturnScannerInUseByLocalUser")]
    pub const ScannerInUseByLocalUser: Self = Self(-9925);
    #[doc(alias = "ICReturnScannerInUseByRemoteUser")]
    pub const ScannerInUseByRemoteUser: Self = Self(-9926);
    #[doc(alias = "ICReturnDeviceFailedToOpenSession")]
    pub const DeviceFailedToOpenSession: Self = Self(-9927);
    #[doc(alias = "ICReturnDeviceFailedToCloseSession")]
    pub const DeviceFailedToCloseSession: Self = Self(-9928);
    #[doc(alias = "ICReturnScannerFailedToSelectFunctionalUnit")]
    pub const ScannerFailedToSelectFunctionalUnit: Self = Self(-9929);
    #[doc(alias = "ICReturnScannerFailedToCompleteOverviewScan")]
    pub const ScannerFailedToCompleteOverviewScan: Self = Self(-9930);
    #[doc(alias = "ICReturnScannerFailedToCompleteScan")]
    pub const ScannerFailedToCompleteScan: Self = Self(-9931);
    #[doc(alias = "ICReturnReceivedUnsolicitedScannerStatusInfo")]
    pub const ReceivedUnsolicitedScannerStatusInfo: Self = Self(-9932);
    #[doc(alias = "ICReturnReceivedUnsolicitedScannerErrorInfo")]
    pub const ReceivedUnsolicitedScannerErrorInfo: Self = Self(-9933);
    #[doc(alias = "ICReturnDownloadFailed")]
    pub const DownloadFailed: Self = Self(-9934);
    #[doc(alias = "ICReturnUploadFailed")]
    pub const UploadFailed: Self = Self(-9935);
    #[doc(alias = "ICReturnFailedToCompletePassThroughCommand")]
    pub const FailedToCompletePassThroughCommand: Self = Self(-9936);
    #[doc(alias = "ICReturnDownloadCanceled")]
    pub const DownloadCanceled: Self = Self(-9937);
    #[doc(alias = "ICReturnFailedToEnabeTethering")]
    pub const FailedToEnabeTethering: Self = Self(-9938);
    #[doc(alias = "ICReturnFailedToDisabeTethering")]
    pub const FailedToDisabeTethering: Self = Self(-9939);
    #[doc(alias = "ICReturnFailedToCompleteSendMessageRequest")]
    pub const FailedToCompleteSendMessageRequest: Self = Self(-9940);
    #[doc(alias = "ICReturnDeleteFilesFailed")]
    pub const DeleteFilesFailed: Self = Self(-9941);
    #[doc(alias = "ICReturnDeleteFilesCanceled")]
    pub const DeleteFilesCanceled: Self = Self(-9942);
    #[doc(alias = "ICReturnDeviceIsPasscodeLocked")]
    pub const DeviceIsPasscodeLocked: Self = Self(-9943);
    #[doc(alias = "ICReturnDeviceFailedToTakePicture")]
    pub const DeviceFailedToTakePicture: Self = Self(-9944);
    #[doc(alias = "ICReturnDeviceSoftwareNotInstalled")]
    pub const DeviceSoftwareNotInstalled: Self = Self(-9945);
    #[doc(alias = "ICReturnDeviceSoftwareIsBeingInstalled")]
    pub const DeviceSoftwareIsBeingInstalled: Self = Self(-9946);
    #[doc(alias = "ICReturnDeviceSoftwareInstallationCompleted")]
    pub const DeviceSoftwareInstallationCompleted: Self = Self(-9947);
    #[doc(alias = "ICReturnDeviceSoftwareInstallationCanceled")]
    pub const DeviceSoftwareInstallationCanceled: Self = Self(-9948);
    #[doc(alias = "ICReturnDeviceSoftwareInstallationFailed")]
    pub const DeviceSoftwareInstallationFailed: Self = Self(-9949);
    #[doc(alias = "ICReturnDeviceSoftwareNotAvailable")]
    pub const DeviceSoftwareNotAvailable: Self = Self(-9950);
    #[doc(alias = "ICReturnDeviceCouldNotPair")]
    pub const DeviceCouldNotPair: Self = Self(-9951);
    #[doc(alias = "ICReturnDeviceCouldNotUnpair")]
    pub const DeviceCouldNotUnpair: Self = Self(-9952);
    #[doc(alias = "ICReturnDeviceNeedsCredentials")]
    pub const DeviceNeedsCredentials: Self = Self(-9953);
    #[doc(alias = "ICReturnDeviceIsBusyEnumerating")]
    pub const DeviceIsBusyEnumerating: Self = Self(-9954);
    #[doc(alias = "ICReturnDeviceCommandGeneralFailure")]
    pub const DeviceCommandGeneralFailure: Self = Self(-9955);
    #[doc(alias = "ICReturnDeviceFailedToCompleteTransfer")]
    pub const DeviceFailedToCompleteTransfer: Self = Self(-9956);
    #[doc(alias = "ICReturnDeviceFailedToSendData")]
    pub const DeviceFailedToSendData: Self = Self(-9957);
    #[doc(alias = "ICReturnSessionNotOpened")]
    pub const SessionNotOpened: Self = Self(-9958);
    #[doc(alias = "ICReturnExFATVolumeInvalid")]
    pub const ExFATVolumeInvalid: Self = Self(21200);
    #[doc(alias = "ICReturnMultiErrorDictionary")]
    pub const MultiErrorDictionary: Self = Self(-30000);
}

unsafe impl Encode for ICReturnCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for ICReturnCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/imagecapturecore/icreturnobjecterrorcode?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ICReturnObjectErrorCode(pub NSInteger);
impl ICReturnObjectErrorCode {
    #[doc(alias = "ICReturnCodeObjectDoesNotExist")]
    pub const CodeObjectDoesNotExist: Self = Self(-21450);
    #[doc(alias = "ICReturnCodeObjectDataOffsetInvalid")]
    pub const CodeObjectDataOffsetInvalid: Self = Self(-21449);
    #[doc(alias = "ICReturnCodeObjectCouldNotBeRead")]
    pub const CodeObjectCouldNotBeRead: Self = Self(-21448);
    #[doc(alias = "ICReturnCodeObjectDataEmpty")]
    pub const CodeObjectDataEmpty: Self = Self(-21447);
    #[doc(alias = "ICReturnCodeObjectDataRequestTooLarge")]
    pub const CodeObjectDataRequestTooLarge: Self = Self(-21446);
}

unsafe impl Encode for ICReturnObjectErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for ICReturnObjectErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}
