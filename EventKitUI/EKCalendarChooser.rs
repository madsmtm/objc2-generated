//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-event-kit")]
use objc2_event_kit::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-ui-kit")]
use objc2_ui_kit::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/eventkitui/ekcalendarchooserselectionstyle?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct EKCalendarChooserSelectionStyle(pub NSInteger);
impl EKCalendarChooserSelectionStyle {
    #[doc(alias = "EKCalendarChooserSelectionStyleSingle")]
    pub const Single: Self = Self(0);
    #[doc(alias = "EKCalendarChooserSelectionStyleMultiple")]
    pub const Multiple: Self = Self(1);
}

unsafe impl Encode for EKCalendarChooserSelectionStyle {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for EKCalendarChooserSelectionStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/eventkitui/ekcalendarchooserdisplaystyle?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct EKCalendarChooserDisplayStyle(pub NSInteger);
impl EKCalendarChooserDisplayStyle {
    #[doc(alias = "EKCalendarChooserDisplayAllCalendars")]
    pub const AllCalendars: Self = Self(0);
    #[doc(alias = "EKCalendarChooserDisplayWritableCalendarsOnly")]
    pub const WritableCalendarsOnly: Self = Self(1);
}

unsafe impl Encode for EKCalendarChooserDisplayStyle {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for EKCalendarChooserDisplayStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/eventkitui/ekcalendarchooser?language=objc)
    #[unsafe(super(UIViewController, UIResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-ui-kit")]
    pub struct EKCalendarChooser;
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl NSCoding for EKCalendarChooser {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl NSObjectProtocol for EKCalendarChooser {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIAppearanceContainer for EKCalendarChooser {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIContentContainer for EKCalendarChooser {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIFocusEnvironment for EKCalendarChooser {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIResponderStandardEditActions for EKCalendarChooser {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UITraitEnvironment for EKCalendarChooser {}
);

#[cfg(feature = "objc2-ui-kit")]
impl EKCalendarChooser {
    extern_methods!(
        #[cfg(feature = "objc2-event-kit")]
        #[unsafe(method(initWithSelectionStyle:displayStyle:eventStore:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithSelectionStyle_displayStyle_eventStore(
            this: Allocated<Self>,
            selection_style: EKCalendarChooserSelectionStyle,
            display_style: EKCalendarChooserDisplayStyle,
            event_store: &EKEventStore,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-event-kit")]
        #[unsafe(method(initWithSelectionStyle:displayStyle:entityType:eventStore:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithSelectionStyle_displayStyle_entityType_eventStore(
            this: Allocated<Self>,
            style: EKCalendarChooserSelectionStyle,
            display_style: EKCalendarChooserDisplayStyle,
            entity_type: EKEntityType,
            event_store: &EKEventStore,
        ) -> Retained<Self>;

        #[unsafe(method(selectionStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn selectionStyle(&self) -> EKCalendarChooserSelectionStyle;

        #[unsafe(method(delegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn EKCalendarChooserDelegate>>>;

        /// Setter for [`delegate`][Self::delegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        #[unsafe(method(setDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn EKCalendarChooserDelegate>>,
        );

        #[unsafe(method(showsDoneButton))]
        #[unsafe(method_family = none)]
        pub unsafe fn showsDoneButton(&self) -> bool;

        /// Setter for [`showsDoneButton`][Self::showsDoneButton].
        #[unsafe(method(setShowsDoneButton:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setShowsDoneButton(&self, shows_done_button: bool);

        #[unsafe(method(showsCancelButton))]
        #[unsafe(method_family = none)]
        pub unsafe fn showsCancelButton(&self) -> bool;

        /// Setter for [`showsCancelButton`][Self::showsCancelButton].
        #[unsafe(method(setShowsCancelButton:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setShowsCancelButton(&self, shows_cancel_button: bool);

        #[cfg(feature = "objc2-event-kit")]
        #[unsafe(method(selectedCalendars))]
        #[unsafe(method_family = none)]
        pub unsafe fn selectedCalendars(&self) -> Retained<NSSet<EKCalendar>>;

        #[cfg(feature = "objc2-event-kit")]
        /// Setter for [`selectedCalendars`][Self::selectedCalendars].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setSelectedCalendars:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSelectedCalendars(&self, selected_calendars: &NSSet<EKCalendar>);
    );
}

/// Methods declared on superclass `UIViewController`.
#[cfg(feature = "objc2-ui-kit")]
impl EKCalendarChooser {
    extern_methods!(
        #[unsafe(method(initWithNibName:bundle:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithNibName_bundle(
            this: Allocated<Self>,
            nib_name_or_nil: Option<&NSString>,
            nib_bundle_or_nil: Option<&NSBundle>,
        ) -> Retained<Self>;

        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "objc2-ui-kit")]
impl EKCalendarChooser {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/eventkitui/ekcalendarchooserdelegate?language=objc)
    pub unsafe trait EKCalendarChooserDelegate: NSObjectProtocol {
        #[cfg(feature = "objc2-ui-kit")]
        #[optional]
        #[unsafe(method(calendarChooserSelectionDidChange:))]
        #[unsafe(method_family = none)]
        unsafe fn calendarChooserSelectionDidChange(&self, calendar_chooser: &EKCalendarChooser);

        #[cfg(feature = "objc2-ui-kit")]
        #[optional]
        #[unsafe(method(calendarChooserDidFinish:))]
        #[unsafe(method_family = none)]
        unsafe fn calendarChooserDidFinish(&self, calendar_chooser: &EKCalendarChooser);

        #[cfg(feature = "objc2-ui-kit")]
        #[optional]
        #[unsafe(method(calendarChooserDidCancel:))]
        #[unsafe(method_family = none)]
        unsafe fn calendarChooserDidCancel(&self, calendar_chooser: &EKCalendarChooser);
    }
);
