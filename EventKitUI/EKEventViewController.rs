//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-event-kit")]
use objc2_event_kit::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-ui-kit")]
use objc2_ui_kit::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/eventkitui/ekeventviewaction?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct EKEventViewAction(pub NSInteger);
impl EKEventViewAction {
    #[doc(alias = "EKEventViewActionDone")]
    pub const Done: Self = Self(0);
    #[doc(alias = "EKEventViewActionResponded")]
    pub const Responded: Self = Self(1);
    #[doc(alias = "EKEventViewActionDeleted")]
    pub const Deleted: Self = Self(2);
}

unsafe impl Encode for EKEventViewAction {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for EKEventViewAction {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/eventkitui/ekeventviewcontroller?language=objc)
    #[unsafe(super(UIViewController, UIResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-ui-kit")]
    pub struct EKEventViewController;
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl NSCoding for EKEventViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl NSObjectProtocol for EKEventViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIAppearanceContainer for EKEventViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIContentContainer for EKEventViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIFocusEnvironment for EKEventViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIResponderStandardEditActions for EKEventViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UITraitEnvironment for EKEventViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
impl EKEventViewController {
    extern_methods!(
        #[unsafe(method(delegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(&self) -> Option<Retained<ProtocolObject<dyn EKEventViewDelegate>>>;

        /// Setter for [`delegate`][Self::delegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        #[unsafe(method(setDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn EKEventViewDelegate>>,
        );

        #[cfg(feature = "objc2-event-kit")]
        /// Specifies the event to view.
        ///
        /// You must set this prior to displaying the view controller.
        #[unsafe(method(event))]
        #[unsafe(method_family = none)]
        pub unsafe fn event(&self) -> Option<Retained<EKEvent>>;

        #[cfg(feature = "objc2-event-kit")]
        /// Setter for [`event`][Self::event].
        #[unsafe(method(setEvent:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEvent(&self, event: Option<&EKEvent>);

        /// Determines whether Edit button can be shown.
        ///
        /// Note that even if this is enabled, the edit button may not appear if this event
        /// is in a read-only calendar, such as a subscribed calendar. It may also not appear
        /// if the event was not created by the current user (i.e. it's an event they were
        /// invited to). And lastly, if the event was never saved, the edit button will not
        /// appear.
        #[unsafe(method(allowsEditing))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsEditing(&self) -> bool;

        /// Setter for [`allowsEditing`][Self::allowsEditing].
        #[unsafe(method(setAllowsEditing:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsEditing(&self, allows_editing: bool);

        /// Determines whether event can be shown in calendar day view preview.
        ///
        /// This option only affects calendar invites at present. If the event is an invite,
        /// and this option is set, a table cell will appear that allows the user to preview
        /// the event along with their other events for the day.
        #[unsafe(method(allowsCalendarPreview))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsCalendarPreview(&self) -> bool;

        /// Setter for [`allowsCalendarPreview`][Self::allowsCalendarPreview].
        #[unsafe(method(setAllowsCalendarPreview:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsCalendarPreview(&self, allows_calendar_preview: bool);
    );
}

/// Methods declared on superclass `UIViewController`.
#[cfg(feature = "objc2-ui-kit")]
impl EKEventViewController {
    extern_methods!(
        #[unsafe(method(initWithNibName:bundle:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithNibName_bundle(
            this: Allocated<Self>,
            nib_name_or_nil: Option<&NSString>,
            nib_bundle_or_nil: Option<&NSBundle>,
        ) -> Retained<Self>;

        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "objc2-ui-kit")]
impl EKEventViewController {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}

extern_protocol!(
    /// View controller to view event detail.
    ///
    /// You can use this view controller to display the details of an event. You
    /// can also optionally choose to allow the user to edit the event by displaying
    /// an edit button. While you can use this view controller to display events that
    /// have not been saved, the edit button will not appear in this situation. If
    /// you have pushed this view controller onto a navigation controller stack, and
    /// the underlying event gets deleted, this controller will remove itself from
    /// the stack and clear its event property.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/eventkitui/ekeventviewdelegate?language=objc)
    pub unsafe trait EKEventViewDelegate: NSObjectProtocol {
        #[cfg(feature = "objc2-ui-kit")]
        /// Called to let delegate know that an action has occurred that should cause the
        /// controller to be dismissed.
        ///
        /// If the user taps a button which deletes the event, or responds to an invite, this
        /// method is called on the delegate so that the delegate can decide to dismiss
        /// the view controller. When presented in a popover, it also reports when the Done
        /// button is pressed.
        ///
        ///
        /// Parameter `controller`: the controller in question
        ///
        /// Parameter `action`: the action that is triggering the dismissal
        #[unsafe(method(eventViewController:didCompleteWithAction:))]
        #[unsafe(method_family = none)]
        unsafe fn eventViewController_didCompleteWithAction(
            &self,
            controller: &EKEventViewController,
            action: EKEventViewAction,
        );
    }
);
