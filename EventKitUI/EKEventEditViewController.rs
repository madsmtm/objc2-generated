//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-event-kit")]
use objc2_event_kit::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-ui-kit")]
use objc2_ui_kit::*;

use crate::*;

/// Represents actions that should cause the edit view controller to be dismissed
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/eventkitui/ekeventeditviewaction?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct EKEventEditViewAction(pub NSInteger);
impl EKEventEditViewAction {
    #[doc(alias = "EKEventEditViewActionCanceled")]
    pub const Canceled: Self = Self(0);
    #[doc(alias = "EKEventEditViewActionSaved")]
    pub const Saved: Self = Self(1);
    #[doc(alias = "EKEventEditViewActionDeleted")]
    pub const Deleted: Self = Self(2);
    #[doc(alias = "EKEventEditViewActionCancelled")]
    pub const Cancelled: Self = Self(EKEventEditViewAction::Canceled.0);
}

unsafe impl Encode for EKEventEditViewAction {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for EKEventEditViewAction {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/eventkitui/ekeventeditviewcontroller?language=objc)
    #[unsafe(super(UINavigationController, UIViewController, UIResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-ui-kit")]
    pub struct EKEventEditViewController;
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl NSCoding for EKEventEditViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl NSObjectProtocol for EKEventEditViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIAppearanceContainer for EKEventEditViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIContentContainer for EKEventEditViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIFocusEnvironment for EKEventEditViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIResponderStandardEditActions for EKEventEditViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UITraitEnvironment for EKEventEditViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
impl EKEventEditViewController {
    extern_methods!(
        #[unsafe(method(editViewDelegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn editViewDelegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn EKEventEditViewDelegate>>>;

        /// Setter for [`editViewDelegate`][Self::editViewDelegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        #[unsafe(method(setEditViewDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEditViewDelegate(
            &self,
            edit_view_delegate: Option<&ProtocolObject<dyn EKEventEditViewDelegate>>,
        );

        #[cfg(feature = "objc2-event-kit")]
        /// The event store to use to save events.
        ///
        /// You must set this before presenting the view controller.
        #[unsafe(method(eventStore))]
        #[unsafe(method_family = none)]
        pub unsafe fn eventStore(&self) -> Option<Retained<EKEventStore>>;

        #[cfg(feature = "objc2-event-kit")]
        /// Setter for [`eventStore`][Self::eventStore].
        #[unsafe(method(setEventStore:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEventStore(&self, event_store: Option<&EKEventStore>);

        #[cfg(feature = "objc2-event-kit")]
        /// The event to edit.
        ///
        /// You must set this before presenting the view controller. You can leave
        /// it set to nil and a new event will be created for you. If you pass an event
        /// here and it does not belong to the event store (if set) an exception will be
        /// raised.
        #[unsafe(method(event))]
        #[unsafe(method_family = none)]
        pub unsafe fn event(&self) -> Option<Retained<EKEvent>>;

        #[cfg(feature = "objc2-event-kit")]
        /// Setter for [`event`][Self::event].
        #[unsafe(method(setEvent:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEvent(&self, event: Option<&EKEvent>);

        /// Ends the editing session discarding any changes to the event.
        ///
        /// This method simulates the user tapping the Cancel button. The delegate will not
        /// receive the eventEditViewController:didCompleteWithAction: message, so you are
        /// responsible for dismissing the controller after calling this method.
        #[unsafe(method(cancelEditing))]
        #[unsafe(method_family = none)]
        pub unsafe fn cancelEditing(&self);
    );
}

/// Methods declared on superclass `UINavigationController`.
#[cfg(feature = "objc2-ui-kit")]
impl EKEventEditViewController {
    extern_methods!(
        #[unsafe(method(initWithNavigationBarClass:toolbarClass:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithNavigationBarClass_toolbarClass(
            this: Allocated<Self>,
            navigation_bar_class: Option<&AnyClass>,
            toolbar_class: Option<&AnyClass>,
        ) -> Retained<Self>;

        #[unsafe(method(initWithRootViewController:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithRootViewController(
            this: Allocated<Self>,
            root_view_controller: &UIViewController,
        ) -> Retained<Self>;

        #[unsafe(method(initWithNibName:bundle:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithNibName_bundle(
            this: Allocated<Self>,
            nib_name_or_nil: Option<&NSString>,
            nib_bundle_or_nil: Option<&NSBundle>,
        ) -> Retained<Self>;

        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "objc2-ui-kit")]
impl EKEventEditViewController {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}

extern_protocol!(
    /// View controller to create/edit events.
    ///
    /// You can present this view controller to create a new event or edit an existing
    /// event. You should present it modally. To create a new event, you can either pass
    /// nil for the event parameter or pass a partially constructed event. If the event
    /// you pass has no calendar set, the default calendar as set in Settings will be used.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/eventkitui/ekeventeditviewdelegate?language=objc)
    pub unsafe trait EKEventEditViewDelegate: NSObjectProtocol {
        #[cfg(feature = "objc2-ui-kit")]
        /// Called to let delegate know the controller is done editing.
        ///
        /// When the user presses Cancel, presses Done, or deletes the event, this method
        /// is called. Your delegate is responsible for dismissing the controller. If the editing
        /// session is terminated programmatically using cancelEditing,
        /// this method will not be called.
        ///
        ///
        /// Parameter `controller`: the controller in question
        ///
        /// Parameter `action`: the action that is causing the dismissal
        #[unsafe(method(eventEditViewController:didCompleteWithAction:))]
        #[unsafe(method_family = none)]
        unsafe fn eventEditViewController_didCompleteWithAction(
            &self,
            controller: &EKEventEditViewController,
            action: EKEventEditViewAction,
        );

        #[cfg(all(feature = "objc2-event-kit", feature = "objc2-ui-kit"))]
        /// Allows you to supply your own default calendar for new events.
        ///
        /// This delegate method allows you to control what the editor chooses for the default calendar
        /// if it needs to fill in a calendar. This might be necessary if you either don't pass an initial
        /// event to the view controller, or you do, but you did not supply a calendar. In these cases, we
        /// we set the calendar to a default. If this is not implemented by the delegate, the controller
        /// will use the store's defaultCalendarForNewEvents.
        #[optional]
        #[unsafe(method(eventEditViewControllerDefaultCalendarForNewEvents:))]
        #[unsafe(method_family = none)]
        unsafe fn eventEditViewControllerDefaultCalendarForNewEvents(
            &self,
            controller: &EKEventEditViewController,
        ) -> Retained<EKCalendar>;
    }
);
