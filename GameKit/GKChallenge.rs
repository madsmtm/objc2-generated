//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkchallengestate?language=objc)
// NS_ENUM
#[deprecated]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct GKChallengeState(pub NSInteger);
impl GKChallengeState {
    #[doc(alias = "GKChallengeStateInvalid")]
    #[deprecated]
    pub const Invalid: Self = Self(0);
    #[doc(alias = "GKChallengeStatePending")]
    #[deprecated]
    pub const Pending: Self = Self(1);
    #[doc(alias = "GKChallengeStateCompleted")]
    #[deprecated]
    pub const Completed: Self = Self(2);
    #[doc(alias = "GKChallengeStateDeclined")]
    #[deprecated]
    pub const Declined: Self = Self(3);
}

unsafe impl Encode for GKChallengeState {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for GKChallengeState {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkchallenge?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[deprecated]
    pub struct GKChallenge;
);

extern_conformance!(
    unsafe impl NSCoding for GKChallenge {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for GKChallenge {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for GKChallenge {}
);

impl GKChallenge {
    extern_methods!(
        #[cfg(feature = "block2")]
        /// Query challenges for the current game issued to the local player -- equivalent GKChallenge objects are not guaranteed to be pointer equivalent across calls, but equal GKChallenge objects will have equal hashes
        #[deprecated]
        #[unsafe(method(loadReceivedChallengesWithCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn loadReceivedChallengesWithCompletionHandler(
            completion_handler: Option<
                &block2::DynBlock<dyn Fn(*mut NSArray<GKChallenge>, *mut NSError)>,
            >,
        );

        /// Any GKChallenge object to be declined must be in a state of GKChallengeStatePending in order to be successfully cancelled
        #[deprecated]
        #[unsafe(method(decline))]
        #[unsafe(method_family = none)]
        pub unsafe fn decline(&self);

        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
        /// The GKPlayer who issued the challenge
        #[unsafe(method(issuingPlayer))]
        #[unsafe(method_family = none)]
        pub unsafe fn issuingPlayer(&self) -> Option<Retained<GKPlayer>>;

        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer"))]
        /// The GKPlayer who has received the challenge
        #[unsafe(method(receivingPlayer))]
        #[unsafe(method_family = none)]
        pub unsafe fn receivingPlayer(&self) -> Option<Retained<GKPlayer>>;

        /// Current state of the challenge
        #[deprecated]
        #[unsafe(method(state))]
        #[unsafe(method_family = none)]
        pub unsafe fn state(&self) -> GKChallengeState;

        /// Date the challenge was issued
        #[deprecated]
        #[unsafe(method(issueDate))]
        #[unsafe(method_family = none)]
        pub unsafe fn issueDate(&self) -> Retained<NSDate>;

        /// Date the challenge was completed or aborted
        #[deprecated]
        #[unsafe(method(completionDate))]
        #[unsafe(method_family = none)]
        pub unsafe fn completionDate(&self) -> Option<Retained<NSDate>>;

        /// The message sent to receivers of this challenge
        #[deprecated]
        #[unsafe(method(message))]
        #[unsafe(method_family = none)]
        pub unsafe fn message(&self) -> Option<Retained<NSString>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl GKChallenge {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

/// Obsoleted.
impl GKChallenge {
    extern_methods!(
        /// * This property is obsolete. **
        #[deprecated]
        #[unsafe(method(issuingPlayerID))]
        #[unsafe(method_family = none)]
        pub unsafe fn issuingPlayerID(&self) -> Option<Retained<NSString>>;

        /// * This property is obsolete. **
        #[deprecated]
        #[unsafe(method(receivingPlayerID))]
        #[unsafe(method_family = none)]
        pub unsafe fn receivingPlayerID(&self) -> Option<Retained<NSString>>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkscorechallenge?language=objc)
    #[unsafe(super(GKChallenge, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[deprecated]
    pub struct GKScoreChallenge;
);

extern_conformance!(
    unsafe impl NSCoding for GKScoreChallenge {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for GKScoreChallenge {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for GKScoreChallenge {}
);

impl GKScoreChallenge {
    extern_methods!(
        #[cfg(feature = "GKScore")]
        /// The score to meet to satisfy this challenge
        #[deprecated]
        #[unsafe(method(score))]
        #[unsafe(method_family = none)]
        pub unsafe fn score(&self) -> Option<Retained<GKScore>>;

        #[cfg(feature = "GKLeaderboardEntry")]
        /// The leaderboard entry to meet to satisfy this challenge
        #[unsafe(method(leaderboardEntry))]
        #[unsafe(method_family = none)]
        pub unsafe fn leaderboardEntry(&self) -> Option<Retained<GKLeaderboardEntry>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl GKScoreChallenge {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkachievementchallenge?language=objc)
    #[unsafe(super(GKChallenge, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[deprecated]
    pub struct GKAchievementChallenge;
);

extern_conformance!(
    unsafe impl NSCoding for GKAchievementChallenge {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for GKAchievementChallenge {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for GKAchievementChallenge {}
);

impl GKAchievementChallenge {
    extern_methods!(
        #[cfg(feature = "GKAchievement")]
        /// The achievement to achieve to satisfy this challenge
        #[deprecated]
        #[unsafe(method(achievement))]
        #[unsafe(method_family = none)]
        pub unsafe fn achievement(&self) -> Option<Retained<GKAchievement>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl GKAchievementChallenge {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

/// GKChallenge.
/// Use the following category methods to issue GKScoreChallenges and GKAchievementChallenges to an array of playerIDs. Players may not issue challenges to themselves nor to non-friends. Please see the GameKit reference documentation for further details on these methods.
#[cfg(feature = "GKScore")]
impl GKScore {
    extern_methods!(
        #[cfg(feature = "block2")]
        /// Use this alternative to reportScores:withCompletionHandler: to allow only certain specific challenges to be completed. Pass nil to avoid completing any challenges.
        #[deprecated]
        #[unsafe(method(reportScores:withEligibleChallenges:withCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn reportScores_withEligibleChallenges_withCompletionHandler(
            scores: &NSArray<GKScore>,
            challenges: &NSArray<GKChallenge>,
            completion_handler: Option<&block2::DynBlock<dyn Fn(*mut NSError)>>,
        );

        #[cfg(all(feature = "GKLeaderboardScore", feature = "block2"))]
        #[deprecated]
        #[unsafe(method(reportLeaderboardScores:withEligibleChallenges:withCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn reportLeaderboardScores_withEligibleChallenges_withCompletionHandler(
            scores: &NSArray<GKLeaderboardScore>,
            challenges: &NSArray<GKChallenge>,
            completion_handler: Option<&block2::DynBlock<dyn Fn(*mut NSError)>>,
        );
    );
}

/// GKChallenge.
#[cfg(feature = "GKAchievement")]
impl GKAchievement {
    extern_methods!(
        #[cfg(all(feature = "GKBasePlayer", feature = "GKPlayer", feature = "block2"))]
        /// Given a list of players, return a subset of that list containing only players that are eligible to receive a challenge for the achievement.
        #[deprecated]
        #[unsafe(method(selectChallengeablePlayers:withCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn selectChallengeablePlayers_withCompletionHandler(
            &self,
            players: &NSArray<GKPlayer>,
            completion_handler: Option<
                &block2::DynBlock<dyn Fn(*mut NSArray<GKPlayer>, *mut NSError)>,
            >,
        );

        #[cfg(feature = "block2")]
        /// Use this alternative to reportAchievements:withCompletionHandler: to allow only certain specific challenges to be completed. Pass nil to avoid completing any challenges.
        #[deprecated]
        #[unsafe(method(reportAchievements:withEligibleChallenges:withCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn reportAchievements_withEligibleChallenges_withCompletionHandler(
            achievements: &NSArray<GKAchievement>,
            challenges: &NSArray<GKChallenge>,
            completion_handler: Option<&block2::DynBlock<dyn Fn(*mut NSError)>>,
        );
    );
}

/// GKChallengeObsoleted.
#[cfg(feature = "GKScore")]
impl GKScore {
    extern_methods!(
        /// * This method is obsolete. It will never be invoked and its implementation does nothing**
        #[deprecated]
        #[unsafe(method(issueChallengeToPlayers:message:))]
        #[unsafe(method_family = none)]
        pub unsafe fn issueChallengeToPlayers_message(
            &self,
            player_i_ds: Option<&NSArray<NSString>>,
            message: Option<&NSString>,
        );
    );
}

/// GKChallengeObsoleted.
#[cfg(feature = "GKAchievement")]
impl GKAchievement {
    extern_methods!(
        /// * This method is obsolete. It will never be invoked and its implementation does nothing**
        #[deprecated]
        #[unsafe(method(issueChallengeToPlayers:message:))]
        #[unsafe(method_family = none)]
        pub unsafe fn issueChallengeToPlayers_message(
            &self,
            player_i_ds: Option<&NSArray<NSString>>,
            message: Option<&NSString>,
        );

        #[cfg(feature = "block2")]
        /// * This method is obsolete. It will never be invoked and its implementation does nothing**
        #[deprecated = "This method is obsolete."]
        #[unsafe(method(selectChallengeablePlayerIDs:withCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn selectChallengeablePlayerIDs_withCompletionHandler(
            &self,
            player_i_ds: Option<&NSArray<NSString>>,
            completion_handler: Option<
                &block2::DynBlock<dyn Fn(*mut NSArray<NSString>, *mut NSError)>,
            >,
        );
    );
}

/// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkchallengecomposecompletionblock?language=objc)
#[cfg(all(feature = "block2", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
pub type GKChallengeComposeCompletionBlock =
    *mut block2::DynBlock<dyn Fn(NonNull<NSViewController>, Bool, *mut NSArray<NSString>)>;

/// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkchallengecomposehandler?language=objc)
#[cfg(all(
    feature = "GKBasePlayer",
    feature = "GKPlayer",
    feature = "block2",
    feature = "objc2-app-kit"
))]
#[cfg(target_os = "macos")]
pub type GKChallengeComposeHandler =
    *mut block2::DynBlock<dyn Fn(NonNull<NSViewController>, Bool, *mut NSArray<GKPlayer>)>;

/// GKChallengeUI.
#[cfg(feature = "GKScore")]
impl GKScore {
    extern_methods!(
        #[cfg(all(
            feature = "GKBasePlayer",
            feature = "GKPlayer",
            feature = "block2",
            feature = "objc2-app-kit"
        ))]
        #[cfg(target_os = "macos")]
        #[deprecated]
        #[unsafe(method(challengeComposeControllerWithMessage:players:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn challengeComposeControllerWithMessage_players_completionHandler(
            &self,
            message: Option<&NSString>,
            players: Option<&NSArray<GKPlayer>>,
            completion_handler: GKChallengeComposeCompletionBlock,
            mtm: MainThreadMarker,
        ) -> Retained<NSViewController>;

        #[cfg(all(
            feature = "GKBasePlayer",
            feature = "GKPlayer",
            feature = "block2",
            feature = "objc2-app-kit"
        ))]
        #[cfg(target_os = "macos")]
        #[deprecated]
        #[unsafe(method(challengeComposeControllerWithMessage:players:completion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn challengeComposeControllerWithMessage_players_completion(
            &self,
            message: Option<&NSString>,
            players: Option<&NSArray<GKPlayer>>,
            completion_handler: GKChallengeComposeHandler,
            mtm: MainThreadMarker,
        ) -> Retained<NSViewController>;
    );
}

/// GKChallengeUI.
#[cfg(feature = "GKLeaderboardEntry")]
impl GKLeaderboardEntry {
    extern_methods!(
        #[cfg(all(
            feature = "GKBasePlayer",
            feature = "GKPlayer",
            feature = "block2",
            feature = "objc2-app-kit"
        ))]
        #[cfg(target_os = "macos")]
        #[deprecated]
        #[unsafe(method(challengeComposeControllerWithMessage:players:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn challengeComposeControllerWithMessage_players_completionHandler(
            &self,
            message: Option<&NSString>,
            players: Option<&NSArray<GKPlayer>>,
            completion_handler: GKChallengeComposeCompletionBlock,
            mtm: MainThreadMarker,
        ) -> Retained<NSViewController>;

        #[cfg(all(
            feature = "GKBasePlayer",
            feature = "GKPlayer",
            feature = "block2",
            feature = "objc2-app-kit"
        ))]
        #[cfg(target_os = "macos")]
        #[deprecated]
        #[unsafe(method(challengeComposeControllerWithMessage:players:completion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn challengeComposeControllerWithMessage_players_completion(
            &self,
            message: Option<&NSString>,
            players: Option<&NSArray<GKPlayer>>,
            completion_handler: GKChallengeComposeHandler,
            mtm: MainThreadMarker,
        ) -> Retained<NSViewController>;
    );
}

/// GKChallengeUI.
#[cfg(feature = "GKAchievement")]
impl GKAchievement {
    extern_methods!(
        #[cfg(all(
            feature = "GKBasePlayer",
            feature = "GKPlayer",
            feature = "block2",
            feature = "objc2-app-kit"
        ))]
        #[cfg(target_os = "macos")]
        #[deprecated]
        #[unsafe(method(challengeComposeControllerWithMessage:players:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn challengeComposeControllerWithMessage_players_completionHandler(
            &self,
            message: Option<&NSString>,
            players: &NSArray<GKPlayer>,
            completion_handler: GKChallengeComposeCompletionBlock,
            mtm: MainThreadMarker,
        ) -> Retained<NSViewController>;

        #[cfg(all(
            feature = "GKBasePlayer",
            feature = "GKPlayer",
            feature = "block2",
            feature = "objc2-app-kit"
        ))]
        #[cfg(target_os = "macos")]
        #[deprecated]
        #[unsafe(method(challengeComposeControllerWithMessage:players:completion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn challengeComposeControllerWithMessage_players_completion(
            &self,
            message: Option<&NSString>,
            players: &NSArray<GKPlayer>,
            completion_handler: GKChallengeComposeHandler,
            mtm: MainThreadMarker,
        ) -> Retained<NSViewController>;
    );
}

/// GKChallengeObsoletedUI.
#[cfg(feature = "GKScore")]
impl GKScore {
    extern_methods!(
        #[cfg(all(feature = "block2", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        /// * This method is obsolete. Calling this method does nothing and will return nil **
        #[unsafe(method(challengeComposeControllerWithPlayers:message:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn challengeComposeControllerWithPlayers_message_completionHandler(
            &self,
            player_i_ds: Option<&NSArray<NSString>>,
            message: Option<&NSString>,
            completion_handler: GKChallengeComposeCompletionBlock,
            mtm: MainThreadMarker,
        ) -> Option<Retained<NSViewController>>;
    );
}

/// GKChallengeObsoletedUI.
#[cfg(feature = "GKAchievement")]
impl GKAchievement {
    extern_methods!(
        #[cfg(all(feature = "block2", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        /// * This method is obsolete. Calling this method does nothing and will return nil **
        #[unsafe(method(challengeComposeControllerWithPlayers:message:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn challengeComposeControllerWithPlayers_message_completionHandler(
            &self,
            player_i_ds: Option<&NSArray<NSString>>,
            message: Option<&NSString>,
            completion_handler: GKChallengeComposeCompletionBlock,
            mtm: MainThreadMarker,
        ) -> Option<Retained<NSViewController>>;
    );
}
