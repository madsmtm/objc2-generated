//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/gamekit/gkgameactivitydefinition?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct GKGameActivityDefinition;
);

unsafe impl Send for GKGameActivityDefinition {}

unsafe impl Sync for GKGameActivityDefinition {}

extern_conformance!(
    unsafe impl NSObjectProtocol for GKGameActivityDefinition {}
);

impl GKGameActivityDefinition {
    extern_methods!(
        /// The developer defined identifier for a given game activity.
        #[unsafe(method(identifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn identifier(&self) -> Retained<NSString>;

        /// The group identifier for the activity, if one exists.
        #[unsafe(method(groupIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn groupIdentifier(&self) -> Option<Retained<NSString>>;

        /// A short title for the game activity.
        #[unsafe(method(title))]
        #[unsafe(method_family = none)]
        pub unsafe fn title(&self) -> Retained<NSString>;

        /// A more detailed description of the game activity.
        #[unsafe(method(details))]
        #[unsafe(method_family = none)]
        pub unsafe fn details(&self) -> Option<Retained<NSString>>;

        /// Default properties defined by the developer for this type of game activity.
        #[unsafe(method(defaultProperties))]
        #[unsafe(method_family = none)]
        pub unsafe fn defaultProperties(&self) -> Retained<NSDictionary<NSString, NSString>>;

        /// A fallback URL that can be used to construct a game-specific URL for players to share or join, if the joining device does not support the default URL.
        #[unsafe(method(fallbackURL))]
        #[unsafe(method_family = none)]
        pub unsafe fn fallbackURL(&self) -> Option<Retained<NSURL>>;

        /// Whether the activity can be joined by others via a party code.
        /// - SeeAlso: ``-[GKGameActivityListener player:wantsToPlayGameActivity:completionHandler:]`` where you can receive and handle game activities that players want to play in a party with friends.
        #[unsafe(method(supportsPartyCode))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportsPartyCode(&self) -> bool;

        /// The maximum number of participants that can join the activity. Returns nil when no maximum is set (unlimited players) or when player range is undefined. When not nil, the value is always greater than or equal to `minPlayers`.
        #[unsafe(method(maxPlayers))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxPlayers(&self) -> Option<Retained<NSNumber>>;

        /// The minimum number of participants that can join the activity.
        #[unsafe(method(minPlayers))]
        #[unsafe(method_family = none)]
        pub unsafe fn minPlayers(&self) -> Option<Retained<NSNumber>>;

        /// True if the activity supports an unlimited number of players. False if maxPlayers is set to a defined limit or if no player range is provided.
        #[unsafe(method(supportsUnlimitedPlayers))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportsUnlimitedPlayers(&self) -> bool;

        #[cfg(feature = "GKGameActivityPlayStyle")]
        /// The play style of the game activity.
        #[unsafe(method(playStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn playStyle(&self) -> GKGameActivityPlayStyle;

        #[cfg(feature = "GKReleaseState")]
        /// The release state of the game activity definition in App Store Connect.
        #[unsafe(method(releaseState))]
        #[unsafe(method_family = none)]
        pub unsafe fn releaseState(&self) -> GKReleaseState;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(all(feature = "GKAchievementDescription", feature = "block2"))]
        /// Loads all associated achievements that have defined deep links to this game activity definition.
        #[unsafe(method(loadAchievementDescriptionsWithCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn loadAchievementDescriptionsWithCompletionHandler(
            &self,
            completion_handler: &block2::DynBlock<
                dyn Fn(*mut NSArray<GKAchievementDescription>, *mut NSError),
            >,
        );

        #[cfg(all(feature = "GKLeaderboard", feature = "block2"))]
        /// Loads all associated leaderboards that have defined deep links to this game activity definition.
        #[unsafe(method(loadLeaderboardsWithCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn loadLeaderboardsWithCompletionHandler(
            &self,
            completion_handler: &block2::DynBlock<
                dyn Fn(*mut NSArray<GKLeaderboard>, *mut NSError),
            >,
        );

        #[cfg(all(feature = "block2", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        /// Asynchronously load the image. Error will be nil on success.
        #[unsafe(method(loadImageWithCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn loadImageWithCompletionHandler(
            &self,
            completion_handler: &block2::DynBlock<dyn Fn(*mut NSImage, *mut NSError)>,
        );
    );
}

/// Methods declared on superclass `NSObject`.
impl GKGameActivityDefinition {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

/// State.
impl GKGameActivityDefinition {
    extern_methods!(
        #[cfg(feature = "block2")]
        /// Loads all the game activity definitions for the current game.
        #[unsafe(method(loadGameActivityDefinitionsWithCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn loadGameActivityDefinitionsWithCompletionHandler(
            completion_handler: &block2::DynBlock<
                dyn Fn(*mut NSArray<GKGameActivityDefinition>, *mut NSError),
            >,
        );

        #[cfg(feature = "block2")]
        /// Loads game activity definitions with the supplied App Store Connect identifiers.
        #[unsafe(method(loadGameActivityDefinitionsWithIDs:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn loadGameActivityDefinitionsWithIDs_completionHandler(
            activity_definition_i_ds: Option<&NSArray<NSString>>,
            completion_handler: &block2::DynBlock<
                dyn Fn(*mut NSArray<GKGameActivityDefinition>, *mut NSError),
            >,
        );
    );
}
