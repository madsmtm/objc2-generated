//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationcalloutinfodidchangenotification?language=objc)
    pub static MKAnnotationCalloutInfoDidChangeNotification: &'static NSString;
}

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationviewdragstate?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MKAnnotationViewDragState(pub NSUInteger);
impl MKAnnotationViewDragState {
    #[doc(alias = "MKAnnotationViewDragStateNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "MKAnnotationViewDragStateStarting")]
    pub const Starting: Self = Self(1);
    #[doc(alias = "MKAnnotationViewDragStateDragging")]
    pub const Dragging: Self = Self(2);
    #[doc(alias = "MKAnnotationViewDragStateCanceling")]
    pub const Canceling: Self = Self(3);
    #[doc(alias = "MKAnnotationViewDragStateEnding")]
    pub const Ending: Self = Self(4);
}

unsafe impl Encode for MKAnnotationViewDragState {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MKAnnotationViewDragState {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkfeaturedisplaypriority?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
pub type MKFeatureDisplayPriority = c_float;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkfeaturedisplaypriorityrequired?language=objc)
pub static MKFeatureDisplayPriorityRequired: MKFeatureDisplayPriority = 1000 as _;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkfeaturedisplayprioritydefaulthigh?language=objc)
pub static MKFeatureDisplayPriorityDefaultHigh: MKFeatureDisplayPriority = 750 as _;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkfeaturedisplayprioritydefaultlow?language=objc)
pub static MKFeatureDisplayPriorityDefaultLow: MKFeatureDisplayPriority = 250 as _;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationviewzpriority?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
pub type MKAnnotationViewZPriority = c_float;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationviewzprioritymax?language=objc)
pub static MKAnnotationViewZPriorityMax: MKAnnotationViewZPriority = 1000 as _;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationviewzprioritydefaultselected?language=objc)
pub static MKAnnotationViewZPriorityDefaultSelected: MKAnnotationViewZPriority = 1000 as _;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationviewzprioritydefaultunselected?language=objc)
pub static MKAnnotationViewZPriorityDefaultUnselected: MKAnnotationViewZPriority = 500 as _;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationviewzprioritymin?language=objc)
pub static MKAnnotationViewZPriorityMin: MKAnnotationViewZPriority = 0 as _;

/// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationviewcollisionmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MKAnnotationViewCollisionMode(pub NSInteger);
impl MKAnnotationViewCollisionMode {
    #[doc(alias = "MKAnnotationViewCollisionModeRectangle")]
    pub const Rectangle: Self = Self(0);
    #[doc(alias = "MKAnnotationViewCollisionModeCircle")]
    pub const Circle: Self = Self(1);
    #[doc(alias = "MKAnnotationViewCollisionModeNone")]
    pub const None: Self = Self(2);
}

unsafe impl Encode for MKAnnotationViewCollisionMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for MKAnnotationViewCollisionMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationview?language=objc)
    #[unsafe(super(NSView, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    pub struct MKAnnotationView;
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAccessibility for MKAnnotationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAccessibilityElementProtocol for MKAnnotationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAnimatablePropertyContainer for MKAnnotationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAppearanceCustomization for MKAnnotationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSCoding for MKAnnotationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSDraggingDestination for MKAnnotationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSObjectProtocol for MKAnnotationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSUserInterfaceItemIdentification for MKAnnotationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl MKAnnotationView {
    extern_methods!(
        #[cfg(feature = "MKAnnotation")]
        #[unsafe(method(initWithAnnotation:reuseIdentifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithAnnotation_reuseIdentifier(
            this: Allocated<Self>,
            annotation: Option<&ProtocolObject<dyn MKAnnotation>>,
            reuse_identifier: Option<&NSString>,
        ) -> Retained<Self>;

        /// # Safety
        ///
        /// `a_decoder` possibly has further requirements.
        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(reuseIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn reuseIdentifier(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(prepareForReuse))]
        #[unsafe(method_family = none)]
        pub unsafe fn prepareForReuse(&self);

        #[unsafe(method(prepareForDisplay))]
        #[unsafe(method_family = none)]
        pub unsafe fn prepareForDisplay(&self);

        #[cfg(feature = "MKAnnotation")]
        #[unsafe(method(annotation))]
        #[unsafe(method_family = none)]
        pub unsafe fn annotation(&self) -> Option<Retained<ProtocolObject<dyn MKAnnotation>>>;

        #[cfg(feature = "MKAnnotation")]
        /// Setter for [`annotation`][Self::annotation].
        #[unsafe(method(setAnnotation:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAnnotation(&self, annotation: Option<&ProtocolObject<dyn MKAnnotation>>);

        #[unsafe(method(image))]
        #[unsafe(method_family = none)]
        pub unsafe fn image(&self) -> Option<Retained<NSImage>>;

        /// Setter for [`image`][Self::image].
        #[unsafe(method(setImage:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setImage(&self, image: Option<&NSImage>);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(centerOffset))]
        #[unsafe(method_family = none)]
        pub unsafe fn centerOffset(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`centerOffset`][Self::centerOffset].
        #[unsafe(method(setCenterOffset:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCenterOffset(&self, center_offset: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(accessoryOffset))]
        #[unsafe(method_family = none)]
        pub unsafe fn accessoryOffset(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`accessoryOffset`][Self::accessoryOffset].
        #[unsafe(method(setAccessoryOffset:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAccessoryOffset(&self, accessory_offset: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(calloutOffset))]
        #[unsafe(method_family = none)]
        pub unsafe fn calloutOffset(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`calloutOffset`][Self::calloutOffset].
        #[unsafe(method(setCalloutOffset:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCalloutOffset(&self, callout_offset: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(leftCalloutOffset))]
        #[unsafe(method_family = none)]
        pub unsafe fn leftCalloutOffset(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`leftCalloutOffset`][Self::leftCalloutOffset].
        #[unsafe(method(setLeftCalloutOffset:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setLeftCalloutOffset(&self, left_callout_offset: CGPoint);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(rightCalloutOffset))]
        #[unsafe(method_family = none)]
        pub unsafe fn rightCalloutOffset(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`rightCalloutOffset`][Self::rightCalloutOffset].
        #[unsafe(method(setRightCalloutOffset:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRightCalloutOffset(&self, right_callout_offset: CGPoint);

        #[unsafe(method(isEnabled))]
        #[unsafe(method_family = none)]
        pub unsafe fn isEnabled(&self) -> bool;

        /// Setter for [`isEnabled`][Self::isEnabled].
        #[unsafe(method(setEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEnabled(&self, enabled: bool);

        #[unsafe(method(isHighlighted))]
        #[unsafe(method_family = none)]
        pub unsafe fn isHighlighted(&self) -> bool;

        /// Setter for [`isHighlighted`][Self::isHighlighted].
        #[unsafe(method(setHighlighted:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setHighlighted(&self, highlighted: bool);

        #[unsafe(method(isSelected))]
        #[unsafe(method_family = none)]
        pub unsafe fn isSelected(&self) -> bool;

        /// Setter for [`isSelected`][Self::isSelected].
        #[unsafe(method(setSelected:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSelected(&self, selected: bool);

        #[unsafe(method(setSelected:animated:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSelected_animated(&self, selected: bool, animated: bool);

        #[unsafe(method(canShowCallout))]
        #[unsafe(method_family = none)]
        pub unsafe fn canShowCallout(&self) -> bool;

        /// Setter for [`canShowCallout`][Self::canShowCallout].
        #[unsafe(method(setCanShowCallout:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCanShowCallout(&self, can_show_callout: bool);

        #[unsafe(method(leftCalloutAccessoryView))]
        #[unsafe(method_family = none)]
        pub unsafe fn leftCalloutAccessoryView(&self) -> Option<Retained<NSView>>;

        /// Setter for [`leftCalloutAccessoryView`][Self::leftCalloutAccessoryView].
        #[unsafe(method(setLeftCalloutAccessoryView:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setLeftCalloutAccessoryView(
            &self,
            left_callout_accessory_view: Option<&NSView>,
        );

        #[unsafe(method(rightCalloutAccessoryView))]
        #[unsafe(method_family = none)]
        pub unsafe fn rightCalloutAccessoryView(&self) -> Option<Retained<NSView>>;

        /// Setter for [`rightCalloutAccessoryView`][Self::rightCalloutAccessoryView].
        #[unsafe(method(setRightCalloutAccessoryView:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRightCalloutAccessoryView(
            &self,
            right_callout_accessory_view: Option<&NSView>,
        );

        #[unsafe(method(detailCalloutAccessoryView))]
        #[unsafe(method_family = none)]
        pub unsafe fn detailCalloutAccessoryView(&self) -> Option<Retained<NSView>>;

        /// Setter for [`detailCalloutAccessoryView`][Self::detailCalloutAccessoryView].
        #[unsafe(method(setDetailCalloutAccessoryView:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDetailCalloutAccessoryView(
            &self,
            detail_callout_accessory_view: Option<&NSView>,
        );

        #[unsafe(method(isDraggable))]
        #[unsafe(method_family = none)]
        pub unsafe fn isDraggable(&self) -> bool;

        /// Setter for [`isDraggable`][Self::isDraggable].
        #[unsafe(method(setDraggable:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDraggable(&self, draggable: bool);

        #[unsafe(method(dragState))]
        #[unsafe(method_family = none)]
        pub unsafe fn dragState(&self) -> MKAnnotationViewDragState;

        /// Setter for [`dragState`][Self::dragState].
        #[unsafe(method(setDragState:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDragState(&self, drag_state: MKAnnotationViewDragState);

        #[unsafe(method(setDragState:animated:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDragState_animated(
            &self,
            new_drag_state: MKAnnotationViewDragState,
            animated: bool,
        );

        #[unsafe(method(clusteringIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn clusteringIdentifier(&self) -> Option<Retained<NSString>>;

        /// Setter for [`clusteringIdentifier`][Self::clusteringIdentifier].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setClusteringIdentifier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setClusteringIdentifier(&self, clustering_identifier: Option<&NSString>);

        #[unsafe(method(clusterAnnotationView))]
        #[unsafe(method_family = none)]
        pub unsafe fn clusterAnnotationView(&self) -> Option<Retained<MKAnnotationView>>;

        #[unsafe(method(displayPriority))]
        #[unsafe(method_family = none)]
        pub unsafe fn displayPriority(&self) -> MKFeatureDisplayPriority;

        /// Setter for [`displayPriority`][Self::displayPriority].
        #[unsafe(method(setDisplayPriority:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDisplayPriority(&self, display_priority: MKFeatureDisplayPriority);

        #[unsafe(method(zPriority))]
        #[unsafe(method_family = none)]
        pub unsafe fn zPriority(&self) -> MKAnnotationViewZPriority;

        /// Setter for [`zPriority`][Self::zPriority].
        #[unsafe(method(setZPriority:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setZPriority(&self, z_priority: MKAnnotationViewZPriority);

        #[unsafe(method(selectedZPriority))]
        #[unsafe(method_family = none)]
        pub unsafe fn selectedZPriority(&self) -> MKAnnotationViewZPriority;

        /// Setter for [`selectedZPriority`][Self::selectedZPriority].
        #[unsafe(method(setSelectedZPriority:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSelectedZPriority(&self, selected_z_priority: MKAnnotationViewZPriority);

        #[unsafe(method(collisionMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn collisionMode(&self) -> MKAnnotationViewCollisionMode;

        /// Setter for [`collisionMode`][Self::collisionMode].
        #[unsafe(method(setCollisionMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCollisionMode(&self, collision_mode: MKAnnotationViewCollisionMode);
    );
}

/// Methods declared on superclass `NSView`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl MKAnnotationView {
    extern_methods!(
        #[unsafe(method(initWithFrame:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame_rect: NSRect) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSResponder`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl MKAnnotationView {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl MKAnnotationView {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}
