//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-metal-performance-shaders")]
use objc2_metal_performance_shaders::*;

use crate::*;

/// The flattening mode for returned indices with max-pooling.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshadersgraph/mpsgraphpoolingreturnindicesmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPSGraphPoolingReturnIndicesMode(pub NSUInteger);
impl MPSGraphPoolingReturnIndicesMode {
    /// No indices returned.
    #[doc(alias = "MPSGraphPoolingReturnIndicesNone")]
    pub const None: Self = Self(0);
    /// Returns indices flattened in inner most (last) dimension.
    #[doc(alias = "MPSGraphPoolingReturnIndicesGlobalFlatten1D")]
    pub const GlobalFlatten1D: Self = Self(1);
    /// Returns indices flattened in 2 innermost dimensions. eg: HW in NCHW.
    #[doc(alias = "MPSGraphPoolingReturnIndicesGlobalFlatten2D")]
    pub const GlobalFlatten2D: Self = Self(2);
    /// Returns indices flattened in 3 innernost dimensions. eg: HWC in NHWC.
    #[doc(alias = "MPSGraphPoolingReturnIndicesGlobalFlatten3D")]
    pub const GlobalFlatten3D: Self = Self(3);
    /// Returns indices flattened in 4 innermost dimensions.
    #[doc(alias = "MPSGraphPoolingReturnIndicesGlobalFlatten4D")]
    pub const GlobalFlatten4D: Self = Self(4);
    /// Returns indices within pooling window, flattened in inner most dimension.
    #[doc(alias = "MPSGraphPoolingReturnIndicesLocalFlatten1D")]
    pub const LocalFlatten1D: Self = Self(5);
    /// Returns indices within pooling window, flattened in 2 innermost dimensions. eg: HW in NCHW.
    #[doc(alias = "MPSGraphPoolingReturnIndicesLocalFlatten2D")]
    pub const LocalFlatten2D: Self = Self(6);
    /// Returns indices within pooling window, flattened in 3 innernost dimensions. eg: HWC in NHWC.
    #[doc(alias = "MPSGraphPoolingReturnIndicesLocalFlatten3D")]
    pub const LocalFlatten3D: Self = Self(7);
    /// Returns indices within pooling window, flattened in 4 innermost dimensions.
    #[doc(alias = "MPSGraphPoolingReturnIndicesLocalFlatten4D")]
    pub const LocalFlatten4D: Self = Self(8);
}

unsafe impl Encode for MPSGraphPoolingReturnIndicesMode {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPSGraphPoolingReturnIndicesMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// The class that defines the parameters for a 2D pooling operation.
    ///
    /// Use this descriptor with the following methods:
    /// - ``MPSGraph/maxPooling2DWithSourceTensor:descriptor:name:``
    /// - ``MPSGraph/maxPooling2DReturnIndicesWithSourceTensor:descriptor:name:``
    /// - ``MPSGraph/maxPooling2DGradientWithGradientTensor:sourceTensor:descriptor:name:``
    /// - ``MPSGraph/maxPooling2DGradientWithGradientTensor:indicesTensor:outputShape:descriptor:name:``
    /// - ``MPSGraph/maxPooling2DGradientWithGradientTensor:indicesTensor:outputShapeTensor:descriptor:name:``
    /// - ``MPSGraph/avgPooling2DWithSourceTensor:descriptor:name:``
    /// - ``MPSGraph/avgPooling2DGradientWithGradientTensor:sourceTensor:descriptor:name:``
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshadersgraph/mpsgraphpooling2dopdescriptor?language=objc)
    #[unsafe(super(MPSGraphObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPSGraphCore")]
    pub struct MPSGraphPooling2DOpDescriptor;
);

#[cfg(feature = "MPSGraphCore")]
extern_conformance!(
    unsafe impl NSCopying for MPSGraphPooling2DOpDescriptor {}
);

#[cfg(feature = "MPSGraphCore")]
unsafe impl CopyingHelper for MPSGraphPooling2DOpDescriptor {
    type Result = Self;
}

#[cfg(feature = "MPSGraphCore")]
extern_conformance!(
    unsafe impl NSObjectProtocol for MPSGraphPooling2DOpDescriptor {}
);

#[cfg(feature = "MPSGraphCore")]
impl MPSGraphPooling2DOpDescriptor {
    extern_methods!(
        /// Defines the pooling window size for the width dimension.
        #[unsafe(method(kernelWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn kernelWidth(&self) -> NSUInteger;

        /// Setter for [`kernelWidth`][Self::kernelWidth].
        #[unsafe(method(setKernelWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setKernelWidth(&self, kernel_width: NSUInteger);

        /// Defines the pooling window size for the height dimension.
        #[unsafe(method(kernelHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn kernelHeight(&self) -> NSUInteger;

        /// Setter for [`kernelHeight`][Self::kernelHeight].
        #[unsafe(method(setKernelHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setKernelHeight(&self, kernel_height: NSUInteger);

        /// Defines the stride for the width dimension.
        ///
        /// Default value: 1.
        #[unsafe(method(strideInX))]
        #[unsafe(method_family = none)]
        pub unsafe fn strideInX(&self) -> NSUInteger;

        /// Setter for [`strideInX`][Self::strideInX].
        #[unsafe(method(setStrideInX:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setStrideInX(&self, stride_in_x: NSUInteger);

        /// Defines the stride for the height dimension.
        ///
        /// Default value: 1.
        #[unsafe(method(strideInY))]
        #[unsafe(method_family = none)]
        pub unsafe fn strideInY(&self) -> NSUInteger;

        /// Setter for [`strideInY`][Self::strideInY].
        #[unsafe(method(setStrideInY:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setStrideInY(&self, stride_in_y: NSUInteger);

        /// Defines the dilation rate for the width dimension.
        ///
        /// Default value: 1.
        #[unsafe(method(dilationRateInX))]
        #[unsafe(method_family = none)]
        pub unsafe fn dilationRateInX(&self) -> NSUInteger;

        /// Setter for [`dilationRateInX`][Self::dilationRateInX].
        #[unsafe(method(setDilationRateInX:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDilationRateInX(&self, dilation_rate_in_x: NSUInteger);

        /// Defines the dilation rate for the height dimension.
        ///
        /// Default value: 1.
        #[unsafe(method(dilationRateInY))]
        #[unsafe(method_family = none)]
        pub unsafe fn dilationRateInY(&self) -> NSUInteger;

        /// Setter for [`dilationRateInY`][Self::dilationRateInY].
        #[unsafe(method(setDilationRateInY:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDilationRateInY(&self, dilation_rate_in_y: NSUInteger);

        /// Defines the explicit padding value for the width dimension to add before the data.
        ///
        /// Default value: 0.
        #[unsafe(method(paddingLeft))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingLeft(&self) -> NSUInteger;

        /// Setter for [`paddingLeft`][Self::paddingLeft].
        #[unsafe(method(setPaddingLeft:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingLeft(&self, padding_left: NSUInteger);

        /// Defines the explicit padding value for the width dimension to add after the data.
        ///
        /// Default value: 0.
        #[unsafe(method(paddingRight))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingRight(&self) -> NSUInteger;

        /// Setter for [`paddingRight`][Self::paddingRight].
        #[unsafe(method(setPaddingRight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingRight(&self, padding_right: NSUInteger);

        /// Defines the explicit padding value for the height dimension to add before the data.
        ///
        /// Default value: 0.
        #[unsafe(method(paddingTop))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingTop(&self) -> NSUInteger;

        /// Setter for [`paddingTop`][Self::paddingTop].
        #[unsafe(method(setPaddingTop:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingTop(&self, padding_top: NSUInteger);

        /// Defines the explicit padding value for the height dimension to add after the data.
        ///
        /// Default value: 0.
        #[unsafe(method(paddingBottom))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingBottom(&self) -> NSUInteger;

        /// Setter for [`paddingBottom`][Self::paddingBottom].
        #[unsafe(method(setPaddingBottom:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingBottom(&self, padding_bottom: NSUInteger);

        /// Defines what kind of padding graph applies to the operation.
        ///
        /// Default value: `MPSGraphPaddingStyleExplicit`.
        #[unsafe(method(paddingStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingStyle(&self) -> MPSGraphPaddingStyle;

        /// Setter for [`paddingStyle`][Self::paddingStyle].
        #[unsafe(method(setPaddingStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingStyle(&self, padding_style: MPSGraphPaddingStyle);

        /// Defines the data layout of the input data in the forward pass. See: ``MPSGraphTensorNamedDataLayout``.
        #[unsafe(method(dataLayout))]
        #[unsafe(method_family = none)]
        pub unsafe fn dataLayout(&self) -> MPSGraphTensorNamedDataLayout;

        /// Setter for [`dataLayout`][Self::dataLayout].
        #[unsafe(method(setDataLayout:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDataLayout(&self, data_layout: MPSGraphTensorNamedDataLayout);

        /// Defines the mode for returned indices of maximum values within each pooling window.
        /// Use this in conjunction with ``MPSGraph/maxPooling2DReturnIndicesWithSourceTensor:descriptor:name:`` API.
        /// If `returnIndicesMode = MPSGraphPoolingReturnIndicesNone` then only the first result
        /// MPSGraph returns from ``MPSGraph/maxPooling2DReturnIndicesWithSourceTensor:descriptor:name:``
        /// will be valid and using the second result will assert.
        /// Default value: `MPSGraphPoolingReturnIndicesNone`.
        #[unsafe(method(returnIndicesMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn returnIndicesMode(&self) -> MPSGraphPoolingReturnIndicesMode;

        /// Setter for [`returnIndicesMode`][Self::returnIndicesMode].
        #[unsafe(method(setReturnIndicesMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setReturnIndicesMode(
            &self,
            return_indices_mode: MPSGraphPoolingReturnIndicesMode,
        );

        #[cfg(feature = "objc2-metal-performance-shaders")]
        /// Defines the data type for returned indices.
        /// Use this in conjunction with ``MPSGraph/maxPooling2DReturnIndicesWithSourceTensor:descriptor:name:`` API.
        /// Currently MPSGraph supports the following datatypes: `MPSDataTypeInt32`.
        /// Default value: `MPSDataTypeInt32`.
        #[unsafe(method(returnIndicesDataType))]
        #[unsafe(method_family = none)]
        pub unsafe fn returnIndicesDataType(&self) -> MPSDataType;

        #[cfg(feature = "objc2-metal-performance-shaders")]
        /// Setter for [`returnIndicesDataType`][Self::returnIndicesDataType].
        #[unsafe(method(setReturnIndicesDataType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setReturnIndicesDataType(&self, return_indices_data_type: MPSDataType);

        /// Affects how the graph computes the output size.
        ///
        /// if set to `YES` then output size is computed by rounding up instead of down when dividing input size by stride.
        /// Default value: `NO`.
        #[unsafe(method(ceilMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn ceilMode(&self) -> bool;

        /// Setter for [`ceilMode`][Self::ceilMode].
        #[unsafe(method(setCeilMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCeilMode(&self, ceil_mode: bool);

        /// Defines a mode for average pooling, where samples outside the input tensor count as zeroes in the average computation.
        ///
        /// Otherwise the result is sum over samples divided by number of samples that didn't come from padding.
        /// Default value: `NO`.
        #[unsafe(method(includeZeroPadToAverage))]
        #[unsafe(method_family = none)]
        pub unsafe fn includeZeroPadToAverage(&self) -> bool;

        /// Setter for [`includeZeroPadToAverage`][Self::includeZeroPadToAverage].
        #[unsafe(method(setIncludeZeroPadToAverage:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setIncludeZeroPadToAverage(&self, include_zero_pad_to_average: bool);

        /// Creates a 2D pooling descriptor with given values.
        ///
        /// - Parameters:
        /// - kernelWidth: See `kernelWidth` property.
        /// - kernelHeight: See `kernelHeight` property.
        /// - strideInX: See `strideInX` property.
        /// - strideInY: See `strideInY` property.
        /// - dilationRateInX: See `dilationRateInX` property.
        /// - dilationRateInY: See `dilationRateInY` property.
        /// - paddingLeft: See `paddingLeft` property.
        /// - paddingRight: See `paddingRight` property.
        /// - paddingTop: See `paddingTop` property.
        /// - paddingBottom: See `paddingBottom` property.
        /// - paddingStyle: See `paddingStyle` property.
        /// - dataLayout: See `dataLayout` property.
        /// - Returns: The descriptor on autoreleasepool.
        #[unsafe(method(descriptorWithKernelWidth:kernelHeight:strideInX:strideInY:dilationRateInX:dilationRateInY:paddingLeft:paddingRight:paddingTop:paddingBottom:paddingStyle:dataLayout:))]
        #[unsafe(method_family = none)]
        pub unsafe fn descriptorWithKernelWidth_kernelHeight_strideInX_strideInY_dilationRateInX_dilationRateInY_paddingLeft_paddingRight_paddingTop_paddingBottom_paddingStyle_dataLayout(
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_x: NSUInteger,
            stride_in_y: NSUInteger,
            dilation_rate_in_x: NSUInteger,
            dilation_rate_in_y: NSUInteger,
            padding_left: NSUInteger,
            padding_right: NSUInteger,
            padding_top: NSUInteger,
            padding_bottom: NSUInteger,
            padding_style: MPSGraphPaddingStyle,
            data_layout: MPSGraphTensorNamedDataLayout,
        ) -> Option<Retained<Self>>;

        /// Creates a 2D pooling descriptor with given values.
        ///
        /// - Parameters:
        /// - kernelWidth: See `kernelWidth` property.
        /// - kernelHeight: See `kernelHeight`` property.
        /// - strideInX: See `strideInX` property.
        /// - strideInY: See `strideInY` property.
        /// - paddingStyle: See `paddingStyle` property.
        /// - dataLayout: See `dataLayout` property.
        /// - Returns: The descriptor on autoreleasepool.
        #[unsafe(method(descriptorWithKernelWidth:kernelHeight:strideInX:strideInY:paddingStyle:dataLayout:))]
        #[unsafe(method_family = none)]
        pub unsafe fn descriptorWithKernelWidth_kernelHeight_strideInX_strideInY_paddingStyle_dataLayout(
            kernel_width: NSUInteger,
            kernel_height: NSUInteger,
            stride_in_x: NSUInteger,
            stride_in_y: NSUInteger,
            padding_style: MPSGraphPaddingStyle,
            data_layout: MPSGraphTensorNamedDataLayout,
        ) -> Option<Retained<Self>>;

        /// Sets the explicit padding values and sets padding style to explicit.
        ///
        /// - Parameters:
        /// - paddingLeft: See `paddingLeft` property.
        /// - paddingRight: See `paddingRight` property.
        /// - paddingTop: See `paddingTop` property.
        /// - paddingBottom: See `paddingBottom` property.
        #[unsafe(method(setExplicitPaddingWithPaddingLeft:paddingRight:paddingTop:paddingBottom:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setExplicitPaddingWithPaddingLeft_paddingRight_paddingTop_paddingBottom(
            &self,
            padding_left: NSUInteger,
            padding_right: NSUInteger,
            padding_top: NSUInteger,
            padding_bottom: NSUInteger,
        );
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "MPSGraphCore")]
impl MPSGraphPooling2DOpDescriptor {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// The class that defines the parameters for a 4D pooling operation.
    ///
    /// Use this descriptor with the following methods:
    /// - ``MPSGraph/maxPooling4DWithSourceTensor:descriptor:name:``
    /// - ``MPSGraph/maxPooling4DReturnIndicesWithSourceTensor:descriptor:name:``
    /// - ``MPSGraph/maxPooling4DGradientWithGradientTensor:sourceTensor:descriptor:name:``
    /// - ``MPSGraph/maxPooling4DGradientWithGradientTensor:indicesTensor:outputShape:descriptor:name:``
    /// - ``MPSGraph/maxPooling4DGradientWithGradientTensor:indicesTensor:outputShapeTensor:descriptor:name:``
    /// - ``MPSGraph/avgPooling4DWithSourceTensor:descriptor:name:``
    /// - ``MPSGraph/avgPooling4DGradientWithGradientTensor:sourceTensor:descriptor:name:``
    /// - ``MPSGraph/L2NormPooling4DWithSourceTensor:descriptor:name:``
    /// - ``MPSGraph/L2NormPooling4DGradientWithGradientTensor:sourceTensor:descriptor:name:``
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalperformanceshadersgraph/mpsgraphpooling4dopdescriptor?language=objc)
    #[unsafe(super(MPSGraphObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPSGraphCore")]
    pub struct MPSGraphPooling4DOpDescriptor;
);

#[cfg(feature = "MPSGraphCore")]
extern_conformance!(
    unsafe impl NSCopying for MPSGraphPooling4DOpDescriptor {}
);

#[cfg(feature = "MPSGraphCore")]
unsafe impl CopyingHelper for MPSGraphPooling4DOpDescriptor {
    type Result = Self;
}

#[cfg(feature = "MPSGraphCore")]
extern_conformance!(
    unsafe impl NSObjectProtocol for MPSGraphPooling4DOpDescriptor {}
);

#[cfg(feature = "MPSGraphCore")]
impl MPSGraphPooling4DOpDescriptor {
    extern_methods!(
        /// Defines the pooling window size.
        ///
        /// Must be four numbers, one for each spatial dimension, fastest running index last.
        #[unsafe(method(kernelSizes))]
        #[unsafe(method_family = none)]
        pub unsafe fn kernelSizes(&self) -> Retained<NSArray<NSNumber>>;

        /// Setter for [`kernelSizes`][Self::kernelSizes].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setKernelSizes:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setKernelSizes(&self, kernel_sizes: &NSArray<NSNumber>);

        /// Defines strides for spatial dimensions. Must be four numbers, one for each spatial dimension, fastest running index last.
        ///
        /// Default value: `
        /// @
        /// [
        /// @
        /// 1,
        /// @
        /// 1,
        /// @
        /// 1,
        /// @
        /// 1 ]`
        #[unsafe(method(strides))]
        #[unsafe(method_family = none)]
        pub unsafe fn strides(&self) -> Retained<NSArray<NSNumber>>;

        /// Setter for [`strides`][Self::strides].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setStrides:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setStrides(&self, strides: &NSArray<NSNumber>);

        /// Defines dilation rates for spatial dimensions. Must be four numbers, one for each spatial dimension, fastest running index last.
        ///
        /// Default value: `
        /// @
        /// [
        /// @
        /// 1,
        /// @
        /// 1,
        /// @
        /// 1,
        /// @
        /// 1 ]`
        #[unsafe(method(dilationRates))]
        #[unsafe(method_family = none)]
        pub unsafe fn dilationRates(&self) -> Retained<NSArray<NSNumber>>;

        /// Setter for [`dilationRates`][Self::dilationRates].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setDilationRates:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDilationRates(&self, dilation_rates: &NSArray<NSNumber>);

        /// Defines padding values for spatial dimensions which must be eight numbers, two for each spatial dimension.
        ///
        /// For example `paddingValues[0]` defines the explicit padding
        /// amount before the first spatial dimension (slowest running index of spatial dimensions),
        /// `paddingValues[1]` defines the padding amount after the first spatial dimension etc.
        /// Used only when `paddingStyle = MPSGraphPaddingStyleExplicit`.
        /// Default value: `
        /// @
        /// [
        /// @
        /// 0,
        /// @
        /// 0,
        /// @
        /// 0,
        /// @
        /// 0,
        /// @
        /// 0,
        /// @
        /// 0,
        /// @
        /// 0,
        /// @
        /// 0 ]`
        #[unsafe(method(paddingValues))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingValues(&self) -> Retained<NSArray<NSNumber>>;

        /// Setter for [`paddingValues`][Self::paddingValues].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setPaddingValues:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingValues(&self, padding_values: &NSArray<NSNumber>);

        /// Defines what kind of padding graph applies to the operation.
        ///
        /// Default value: `MPSGraphPaddingStyleExplicit`.
        #[unsafe(method(paddingStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingStyle(&self) -> MPSGraphPaddingStyle;

        /// Setter for [`paddingStyle`][Self::paddingStyle].
        #[unsafe(method(setPaddingStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingStyle(&self, padding_style: MPSGraphPaddingStyle);

        /// Affects how MPSGraph computes the output size: if set to `YES` then output size is
        /// computed by rounding up instead of down when dividing input size by stride.
        ///
        /// Default value: `NO`.
        #[unsafe(method(ceilMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn ceilMode(&self) -> bool;

        /// Setter for [`ceilMode`][Self::ceilMode].
        #[unsafe(method(setCeilMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCeilMode(&self, ceil_mode: bool);

        /// Defines a mode for average pooling, where samples outside the input tensor count as
        /// zeroes in the average computation.
        ///
        /// Otherwise the result is sum over samples divided by
        /// number of samples that didn't come from padding.
        /// Default value: `NO`.
        #[unsafe(method(includeZeroPadToAverage))]
        #[unsafe(method_family = none)]
        pub unsafe fn includeZeroPadToAverage(&self) -> bool;

        /// Setter for [`includeZeroPadToAverage`][Self::includeZeroPadToAverage].
        #[unsafe(method(setIncludeZeroPadToAverage:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setIncludeZeroPadToAverage(&self, include_zero_pad_to_average: bool);

        /// Defines the mode for returned indices of maximum values within each pooling window.
        ///
        /// Use this in conjunction with ``MPSGraph/maxPooling4DReturnIndicesWithSourceTensor:descriptor:name:`` API.
        /// If `returnIndicesMode = MPSGraphPoolingReturnIndicesNone` then only the first result
        /// MPSGraph returns from ``MPSGraph/maxPooling4DReturnIndicesWithSourceTensor:descriptor:name:``
        /// will be valid and using the second result will assert.
        /// Default value: `MPSGraphPoolingReturnIndicesNone`.
        #[unsafe(method(returnIndicesMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn returnIndicesMode(&self) -> MPSGraphPoolingReturnIndicesMode;

        /// Setter for [`returnIndicesMode`][Self::returnIndicesMode].
        #[unsafe(method(setReturnIndicesMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setReturnIndicesMode(
            &self,
            return_indices_mode: MPSGraphPoolingReturnIndicesMode,
        );

        #[cfg(feature = "objc2-metal-performance-shaders")]
        /// Defines the data type for returned indices.
        ///
        /// Use this in conjunction with ``MPSGraph/maxPooling4DReturnIndicesWithSourceTensor:descriptor:name:`` API.
        /// Currently MPSGraph supports the following datatypes: `MPSDataTypeInt32`.
        /// Default value: `MPSDataTypeInt32`.
        #[unsafe(method(returnIndicesDataType))]
        #[unsafe(method_family = none)]
        pub unsafe fn returnIndicesDataType(&self) -> MPSDataType;

        #[cfg(feature = "objc2-metal-performance-shaders")]
        /// Setter for [`returnIndicesDataType`][Self::returnIndicesDataType].
        #[unsafe(method(setReturnIndicesDataType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setReturnIndicesDataType(&self, return_indices_data_type: MPSDataType);

        /// Creates a 4D pooling descriptor with given values.
        ///
        /// - Parameters:
        /// - kernelSizes: See `kernelSizes` property.
        /// - strides: See `strides` property.
        /// - dilationRates: See `dilationRates` property.
        /// - paddingValues: See `paddingValues` property.
        /// - paddingStyle: See `paddingStyle` property.
        /// - Returns: The descriptor on autoreleasepool.
        #[unsafe(method(descriptorWithKernelSizes:strides:dilationRates:paddingValues:paddingStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn descriptorWithKernelSizes_strides_dilationRates_paddingValues_paddingStyle(
            kernel_sizes: &NSArray<NSNumber>,
            strides: &NSArray<NSNumber>,
            dilation_rates: &NSArray<NSNumber>,
            padding_values: &NSArray<NSNumber>,
            padding_style: MPSGraphPaddingStyle,
        ) -> Option<Retained<Self>>;

        /// Creates a 4D pooling descriptor with default values.
        ///
        /// - Parameters:
        /// - kernelSizes: See `kernelSizes` property.
        /// - paddingStyle: See `paddingStyle` property.
        /// - Returns: The descriptor on autoreleasepool.
        #[unsafe(method(descriptorWithKernelSizes:paddingStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn descriptorWithKernelSizes_paddingStyle(
            kernel_sizes: &NSArray<NSNumber>,
            padding_style: MPSGraphPaddingStyle,
        ) -> Option<Retained<Self>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "MPSGraphCore")]
impl MPSGraphPooling4DOpDescriptor {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

/// MPSGraphPoolingOps.
#[cfg(all(feature = "MPSGraph", feature = "MPSGraphCore"))]
impl MPSGraph {
    extern_methods!(
        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a 2D max-pooling operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - source: A 2D Image source as tensor - must be of rank=4. The layout is defined by `descriptor.dataLayout`.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates, paddings and layouts.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object
        #[unsafe(method(maxPooling2DWithSourceTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxPooling2DWithSourceTensor_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            descriptor: &MPSGraphPooling2DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a 2D max-pooling operation and returns the result tensor and the corresponding indices tensor.
        ///
        /// In order to Computes the indices, `returnIndicesMode` of the descriptor must be set. The datatype of indices tensor can be set
        /// using `returnIndicesDataType`.
        /// If `returnIndicesMode = MPSGraphPoolingReturnIndicesNone` then only the first result
        /// MPSGraph returns will be valid and using the second result will assert.
        ///
        /// - Parameters:
        /// - source: A 2D Image source as tensor - must be of rank=4. The layout is defined by `descriptor.dataLayout`.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates, paddings and layouts.
        /// - name: The name for the operation.
        /// - Returns: An array of two MPSGraphTensors. The first tensor holds the result of max pool and the second tensor holds the corresponding indices
        #[unsafe(method(maxPooling2DReturnIndicesWithSourceTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxPooling2DReturnIndicesWithSourceTensor_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            descriptor: &MPSGraphPooling2DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a max-pooling gradient operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - gradient: A 2D input gradient tensor - must be of rank=4. The layout is defined by `descriptor.dataLayout`.
        /// - source: The input tensor for the forward pass.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates, paddings and layouts.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object
        #[unsafe(method(maxPooling2DGradientWithGradientTensor:sourceTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxPooling2DGradientWithGradientTensor_sourceTensor_descriptor_name(
            &self,
            gradient: &MPSGraphTensor,
            source: &MPSGraphTensor,
            descriptor: &MPSGraphPooling2DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a max-pooling gradient operation and returns the result tensor.
        ///
        /// With this API MPSGraph computes the max-pooling gradient efficiently by reusing the indices from the forward API instead of recomputing them.
        /// The descriptor must set `returnIndicesMode` and `returnIndicesDataType` to the same value as that set by the forward pass.
        ///
        /// - Parameters:
        /// - gradient: A 2D input gradient tensor - must be of rank=4. The layout is defined by `descriptor.dataLayout`.
        /// - indices: The indices tensor returned from ``MPSGraph/maxPooling2DReturnIndicesWithSourceTensor:descriptor:name:``.
        /// - outputShape: The shape of the destination gradient.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates, paddings and layouts.
        /// - name: The name for the operation.
        /// - Returns: Destination gradient tensor.
        #[unsafe(method(maxPooling2DGradientWithGradientTensor:indicesTensor:outputShape:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxPooling2DGradientWithGradientTensor_indicesTensor_outputShape_descriptor_name(
            &self,
            gradient: &MPSGraphTensor,
            indices: &MPSGraphTensor,
            output_shape: &MPSShape,
            descriptor: &MPSGraphPooling2DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a max-pooling gradient operation and returns the result tensor.
        ///
        /// With this API MPSGraph computes the max-pooling gradient efficiently by reusing the indices from the forward API instead of recomputing them.
        /// The descriptor must set `returnIndicesMode` and `returnIndicesDataType` to the same value as that set by the forward pass.
        ///
        /// - Parameters:
        /// - gradient: A 2D input gradient tensor - must be of rank=4. The layout is defined by `descriptor.dataLayout`.
        /// - indices: The indices tensor returned from ``MPSGraph/maxPooling2DReturnIndicesWithSourceTensor:descriptor:name:``.
        /// - outputShape: A tensor containing the shape of the destination gradient.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates, paddings and layouts.
        /// - name: The name for the operation.
        /// - Returns: Destination gradient tensor.
        #[unsafe(method(maxPooling2DGradientWithGradientTensor:indicesTensor:outputShapeTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxPooling2DGradientWithGradientTensor_indicesTensor_outputShapeTensor_descriptor_name(
            &self,
            gradient: &MPSGraphTensor,
            indices: &MPSGraphTensor,
            output_shape: &MPSGraphTensor,
            descriptor: &MPSGraphPooling2DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a 2D average-pooling operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - source: A 2D Image source as tensor - must be of rank=4. The layout is defined by `descriptor.dataLayout`.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates, paddings and layouts.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object
        #[unsafe(method(avgPooling2DWithSourceTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn avgPooling2DWithSourceTensor_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            descriptor: &MPSGraphPooling2DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a 2D average pooling gradient operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - gradient: A 2D input gradient tensor - must be of rank=4. The layout is defined by `descriptor.dataLayout`.
        /// - source: The input tensor for the forward pass.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates, paddings and layouts.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object
        #[unsafe(method(avgPooling2DGradientWithGradientTensor:sourceTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn avgPooling2DGradientWithGradientTensor_sourceTensor_descriptor_name(
            &self,
            gradient: &MPSGraphTensor,
            source: &MPSGraphTensor,
            descriptor: &MPSGraphPooling2DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a 4D max-pooling operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - source: A source tensor.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates and paddings.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object
        #[unsafe(method(maxPooling4DWithSourceTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxPooling4DWithSourceTensor_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            descriptor: &MPSGraphPooling4DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a 4D max-pooling operation and returns the result tensor and the corresponding indices tensor.
        ///
        /// In order to Computes the indices, `returnIndicesMode` of the descriptor must be set. The datatype of indices tensor can be set
        /// using `returnIndicesDataType`.
        /// If `returnIndicesMode = MPSGraphPoolingReturnIndicesNone` then only the first result
        /// MPSGraph returns will be valid and using the second result will assert.
        ///
        /// - Parameters:
        /// - source: The source tensor on which pooling will be performed.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates and paddings.
        /// - name: The name for the operation.
        /// - Returns: An array of two MPSGraphTensors. The first tensor holds the result of max pool and the second tensor holds the corresponding indices.
        #[unsafe(method(maxPooling4DReturnIndicesWithSourceTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxPooling4DReturnIndicesWithSourceTensor_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            descriptor: &MPSGraphPooling4DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<NSArray<MPSGraphTensor>>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a max-pooling gradient operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - gradient: An input gradient tensor.
        /// - source: The input tensor for the forward pass.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates and paddings.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object.
        #[unsafe(method(maxPooling4DGradientWithGradientTensor:sourceTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxPooling4DGradientWithGradientTensor_sourceTensor_descriptor_name(
            &self,
            gradient: &MPSGraphTensor,
            source: &MPSGraphTensor,
            descriptor: &MPSGraphPooling4DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(all(
            feature = "MPSGraphTensor",
            feature = "objc2-metal-performance-shaders"
        ))]
        /// Creates a max-pooling gradient operation and returns the result tensor.
        ///
        /// With this API MPSGraph computes the max-pooling gradient efficiently by reusing the indices from the forward API instead of recomputing them.
        /// The descriptor must set `returnIndicesMode` and `returnIndicesDataType` to the same value as that set by the forward pass.
        ///
        /// - Parameters:
        /// - gradient: An input gradient tensor.
        /// - indices: Indices tensor returned from ``MPSGraph/maxPooling4DReturnIndicesWithSourceTensor:descriptor:name:``.
        /// - outputShape: The shape of the destination gradient.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates, paddings and layouts.
        /// - name: The name for the operation.
        /// - Returns: Destination gradient tensor.
        #[unsafe(method(maxPooling4DGradientWithGradientTensor:indicesTensor:outputShape:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxPooling4DGradientWithGradientTensor_indicesTensor_outputShape_descriptor_name(
            &self,
            gradient: &MPSGraphTensor,
            indices: &MPSGraphTensor,
            output_shape: &MPSShape,
            descriptor: &MPSGraphPooling4DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a max-pooling gradient operation and returns the result tensor.
        ///
        /// With this API MPSGraph computes the max-pooling gradient efficiently by reusing the indices from the forward API instead of recomputing them.
        /// The descriptor must set `returnIndicesMode` and `returnIndicesDataType` to the same value as that set by the forward pass.
        ///
        /// - Parameters:
        /// - gradient: An input gradient tensor.
        /// - indices: The indices tensor returned from ``MPSGraph/maxPooling4DReturnIndicesWithSourceTensor:descriptor:name:``.
        /// - outputShape: A tensor containing the shape of the destination gradient.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates, paddings and layouts.
        /// - name: The name for the operation.
        /// - Returns: Destination gradient tensor.
        #[unsafe(method(maxPooling4DGradientWithGradientTensor:indicesTensor:outputShapeTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxPooling4DGradientWithGradientTensor_indicesTensor_outputShapeTensor_descriptor_name(
            &self,
            gradient: &MPSGraphTensor,
            indices: &MPSGraphTensor,
            output_shape: &MPSGraphTensor,
            descriptor: &MPSGraphPooling4DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a 4D average pooling operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - source: A source tensor.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates and paddings.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object
        #[unsafe(method(avgPooling4DWithSourceTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn avgPooling4DWithSourceTensor_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            descriptor: &MPSGraphPooling4DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates an average pooling gradient operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - gradient: An input gradient tensor.
        /// - source: The input tensor for the forward pass.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates and paddings.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object.
        #[unsafe(method(avgPooling4DGradientWithGradientTensor:sourceTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn avgPooling4DGradientWithGradientTensor_sourceTensor_descriptor_name(
            &self,
            gradient: &MPSGraphTensor,
            source: &MPSGraphTensor,
            descriptor: &MPSGraphPooling4DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a 4D L2-norm pooling operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - source: A source tensor.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates and paddings.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object
        #[unsafe(method(L2NormPooling4DWithSourceTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn L2NormPooling4DWithSourceTensor_descriptor_name(
            &self,
            source: &MPSGraphTensor,
            descriptor: &MPSGraphPooling4DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;

        #[cfg(feature = "MPSGraphTensor")]
        /// Creates a L2-Norm pooling gradient operation and returns the result tensor.
        ///
        /// - Parameters:
        /// - gradient: An input gradient tensor.
        /// - source: The input tensor for the forward pass.
        /// - descriptor: A pooling operation descriptor that specifies pooling window sizes, strides, dilation rates and paddings.
        /// - name: The name for the operation.
        /// - Returns: A valid MPSGraphTensor object.
        #[unsafe(method(L2NormPooling4DGradientWithGradientTensor:sourceTensor:descriptor:name:))]
        #[unsafe(method_family = none)]
        pub unsafe fn L2NormPooling4DGradientWithGradientTensor_sourceTensor_descriptor_name(
            &self,
            gradient: &MPSGraphTensor,
            source: &MPSGraphTensor,
            descriptor: &MPSGraphPooling4DOpDescriptor,
            name: Option<&NSString>,
        ) -> Retained<MPSGraphTensor>;
    );
}
