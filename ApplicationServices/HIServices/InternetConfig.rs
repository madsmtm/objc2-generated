//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-services")]
use objc2_core_services::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicreservedkey?language=objc)
pub const kICReservedKey: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pkICReservedKey\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicarchieall?language=objc)
pub const kICArchieAll: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pArchieAll\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicarchiepreferred?language=objc)
pub const kICArchiePreferred: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pArchiePreferred\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kiccharacterset?language=objc)
pub const kICCharacterSet: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pCharacterSet\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicdocumentfont?language=objc)
pub const kICDocumentFont: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pDocumentFont\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicdownloadfolder?language=objc)
pub const kICDownloadFolder: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pDownloadFolder\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicemail?language=objc)
pub const kICEmail: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pEmail\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicftphost?language=objc)
pub const kICFTPHost: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pFTPHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicftpproxyaccount?language=objc)
pub const kICFTPProxyAccount: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pFTPProxyAccount\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicftpproxyhost?language=objc)
pub const kICFTPProxyHost: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pFTPProxyHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicftpproxypassword?language=objc)
pub const kICFTPProxyPassword: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pFTPProxyPassword\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicftpproxyuser?language=objc)
pub const kICFTPProxyUser: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pFTPProxyUser\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicfingerhost?language=objc)
pub const kICFingerHost: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pFingerHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicgopherhost?language=objc)
pub const kICGopherHost: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pGopherHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicgopherproxy?language=objc)
pub const kICGopherProxy: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pGopherProxy\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kichttpproxyhost?language=objc)
pub const kICHTTPProxyHost: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pHTTPProxyHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kichelper?language=objc)
pub const kICHelper: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pHelper\xA5\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kichelperdesc?language=objc)
pub const kICHelperDesc: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pHelperDesc\xA5\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kichelperlist?language=objc)
pub const kICHelperList: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pHelperList\xA5\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicirchost?language=objc)
pub const kICIRCHost: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pIRCHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicinfomacall?language=objc)
pub const kICInfoMacAll: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pInfoMacAll\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicinfomacpreferred?language=objc)
pub const kICInfoMacPreferred: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pInfoMacPreferred\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicldapsearchbase?language=objc)
pub const kICLDAPSearchbase: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pLDAPSearchbase\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicldapserver?language=objc)
pub const kICLDAPServer: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pLDAPServer\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kiclistfont?language=objc)
pub const kICListFont: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pListFont\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmacsearchhost?language=objc)
pub const kICMacSearchHost: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pMacSearchHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmailaccount?language=objc)
pub const kICMailAccount: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pMailAccount\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmailheaders?language=objc)
pub const kICMailHeaders: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pMailHeaders\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmailpassword?language=objc)
pub const kICMailPassword: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pMailPassword\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmapping?language=objc)
pub const kICMapping: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pMapping\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicnntphost?language=objc)
pub const kICNNTPHost: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pNNTPHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicntphost?language=objc)
pub const kICNTPHost: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pNTPHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicnewmaildialog?language=objc)
pub const kICNewMailDialog: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pNewMailDialog\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicnewmailflashicon?language=objc)
pub const kICNewMailFlashIcon: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pNewMailFlashIcon\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicnewmailplaysound?language=objc)
pub const kICNewMailPlaySound: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pNewMailPlaySound\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicnewmailsoundname?language=objc)
pub const kICNewMailSoundName: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pNewMailSoundName\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicnewsauthpassword?language=objc)
pub const kICNewsAuthPassword: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pNewsAuthPassword\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicnewsauthusername?language=objc)
pub const kICNewsAuthUsername: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pNewsAuthUsername\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicnewsheaders?language=objc)
pub const kICNewsHeaders: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pNewsHeaders\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicnoproxydomains?language=objc)
pub const kICNoProxyDomains: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pNoProxyDomains\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicorganization?language=objc)
pub const kICOrganization: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pOrganization\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicphhost?language=objc)
pub const kICPhHost: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pPhHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicplan?language=objc)
pub const kICPlan: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pPlan\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicprinterfont?language=objc)
pub const kICPrinterFont: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pPrinterFont\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicquotingstring?language=objc)
pub const kICQuotingString: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pQuotingString\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicrealname?language=objc)
pub const kICRealName: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pRealName\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicrtspproxyhost?language=objc)
pub const kICRTSPProxyHost: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pRTSPProxyHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicsmtphost?language=objc)
pub const kICSMTPHost: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pSMTPHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicscreenfont?language=objc)
pub const kICScreenFont: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pScreenFont\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicservices?language=objc)
pub const kICServices: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pServices\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicsignature?language=objc)
pub const kICSignature: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pSignature\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicsnailmailaddress?language=objc)
pub const kICSnailMailAddress: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pSnailMailAddress\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicsockshost?language=objc)
pub const kICSocksHost: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pSocksHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kictelnethost?language=objc)
pub const kICTelnetHost: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pTelnetHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicumichall?language=objc)
pub const kICUMichAll: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pUMichAll\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicumichpreferred?language=objc)
pub const kICUMichPreferred: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pUMichPreferred\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicuseftpproxy?language=objc)
pub const kICUseFTPProxy: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pUseFTPProxy\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicusegopherproxy?language=objc)
pub const kICUseGopherProxy: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pUseGopherProxy\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicusehttpproxy?language=objc)
pub const kICUseHTTPProxy: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pUseHTTPProxy\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicusepassiveftp?language=objc)
pub const kICUsePassiveFTP: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pUsePassiveFTP\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicusertspproxy?language=objc)
pub const kICUseRTSPProxy: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pUseRTSPProxy\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicusesocks?language=objc)
pub const kICUseSocks: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pUseSocks\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicwaisgateway?language=objc)
pub const kICWAISGateway: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pWAISGateway\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicwwwhomepage?language=objc)
pub const kICWWWHomePage: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pWWWHomePage\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicwebbackgroundcolour?language=objc)
pub const kICWebBackgroundColour: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pWebBackgroundColour\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicwebreadcolor?language=objc)
pub const kICWebReadColor: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\p646F6777\xA5WebReadColor\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicwebsearchpageprefs?language=objc)
pub const kICWebSearchPagePrefs: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pWebSearchPagePrefs\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicwebtextcolor?language=objc)
pub const kICWebTextColor: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pWebTextColor\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicwebunderlinelinks?language=objc)
pub const kICWebUnderlineLinks: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\p646F6777\xA5WebUnderlineLinks\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicwebunreadcolor?language=objc)
pub const kICWebUnreadColor: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"\\p646F6777\xA5WebUnreadColor\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicwhoishost?language=objc)
pub const kICWhoisHost: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"\\pWhoisHost\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icprefnotfounderr?language=objc)
pub const icPrefNotFoundErr: c_int = -666;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icpermerr?language=objc)
pub const icPermErr: c_int = -667;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icprefdataerr?language=objc)
pub const icPrefDataErr: c_int = -668;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icinternalerr?language=objc)
pub const icInternalErr: c_int = -669;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/ictruncatederr?language=objc)
pub const icTruncatedErr: c_int = -670;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icnomorewriterserr?language=objc)
pub const icNoMoreWritersErr: c_int = -671;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icnothingtooverrideerr?language=objc)
pub const icNothingToOverrideErr: c_int = -672;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icnourlerr?language=objc)
pub const icNoURLErr: c_int = -673;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icconfignotfounderr?language=objc)
pub const icConfigNotFoundErr: c_int = -674;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icconfiginappropriateerr?language=objc)
pub const icConfigInappropriateErr: c_int = -675;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icprofilenotfounderr?language=objc)
pub const icProfileNotFoundErr: c_int = -676;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/ictoomanyprofileserr?language=objc)
pub const icTooManyProfilesErr: c_int = -677;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kiccomponentinterfaceversion0?language=objc)
pub const kICComponentInterfaceVersion0: c_uint = 0x00000000;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kiccomponentinterfaceversion1?language=objc)
pub const kICComponentInterfaceVersion1: c_uint = 0x00010000;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kiccomponentinterfaceversion2?language=objc)
pub const kICComponentInterfaceVersion2: c_uint = 0x00020000;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kiccomponentinterfaceversion3?language=objc)
pub const kICComponentInterfaceVersion3: c_uint = 0x00030000;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kiccomponentinterfaceversion4?language=objc)
pub const kICComponentInterfaceVersion4: c_uint = 0x00040000;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kiccomponentinterfaceversion?language=objc)
pub const kICComponentInterfaceVersion: c_uint = kICComponentInterfaceVersion4;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/opaqueicinstance?language=objc)
#[repr(C)]
#[derive(Debug)]
pub struct OpaqueICInstance {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for OpaqueICInstance {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("OpaqueICInstance", &[]));
}

/// **********************************************************************************************
/// opaque type for preference reference
/// **********************************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icinstance?language=objc)
pub type ICInstance = *mut OpaqueICInstance;

/// **********************************************************************************************
/// preference attributes type, bit number constants, and mask constants
/// **********************************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icattr?language=objc)
pub type ICAttr = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicattrlockedbit?language=objc)
pub const kICAttrLockedBit: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicattrvolatilebit?language=objc)
pub const kICAttrVolatileBit: c_uint = 1;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicattrnochange?language=objc)
pub const kICAttrNoChange: c_uint = 0xFFFFFFFF;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicattrlockedmask?language=objc)
pub const kICAttrLockedMask: c_uint = 0x00000001;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicattrvolatilemask?language=objc)
pub const kICAttrVolatileMask: c_uint = 0x00000002;

/// **********************************************************************************************
/// permissions for use with ICBegin
/// **********************************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icperm?language=objc)
pub type ICPerm = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icnoperm?language=objc)
pub const icNoPerm: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icreadonlyperm?language=objc)
pub const icReadOnlyPerm: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icreadwriteperm?language=objc)
pub const icReadWritePerm: c_uint = 2;

/// **********************************************************************************************
/// profile IDs
/// **********************************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icprofileid?language=objc)
pub type ICProfileID = i32;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icprofileidptr?language=objc)
pub type ICProfileIDPtr = *mut ICProfileID;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicnilprofileid?language=objc)
pub const kICNilProfileID: c_uint = 0;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicnouserinteractionbit?language=objc)
pub const kICNoUserInteractionBit: c_uint = 0;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicnouserinteractionmask?language=objc)
pub const kICNoUserInteractionMask: c_uint = 0x00000001;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicfiletype?language=objc)
pub const kICFileType: c_uint = 0x49434170;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kiccreator?language=objc)
pub const kICCreator: c_uint = 0x49434170;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kinterneteventclass?language=objc)
pub const kInternetEventClass: c_uint = 0x4755524c;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kaegeturl?language=objc)
pub const kAEGetURL: c_uint = 0x4755524c;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kaefetchurl?language=objc)
pub const kAEFetchURL: c_uint = 0x4655524c;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/keyaeattaching?language=objc)
pub const keyAEAttaching: c_uint = 0x41746368;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kiceditpreferenceeventclass?language=objc)
pub const kICEditPreferenceEventClass: c_uint = 0x49434170;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kiceditpreferenceevent?language=objc)
pub const kICEditPreferenceEvent: c_uint = 0x49434170;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/keyiceditpreferencedestination?language=objc)
pub const keyICEditPreferenceDestination: c_uint = 0x64657374;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kiccomponentversion?language=objc)
pub const kICComponentVersion: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicnumversion?language=objc)
pub const kICNumVersion: c_uint = 1;

/// **********************************************************************************************
/// types and constants for use with kICDocumentFont, et. al.
/// **********************************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icfontrecord?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ICFontRecord {
    pub size: i16,
    pub face: Style,
    pub pad: c_char,
    pub font: Str255,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for ICFontRecord {
    const ENCODING: Encoding = Encoding::Struct(
        "ICFontRecord",
        &[
            <i16>::ENCODING,
            <Style>::ENCODING,
            <c_char>::ENCODING,
            <Str255>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for ICFontRecord {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icfontrecordptr?language=objc)
pub type ICFontRecordPtr = *mut ICFontRecord;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icfontrecordhandle?language=objc)
pub type ICFontRecordHandle = *mut ICFontRecordPtr;

/// **********************************************************************************************
/// types and constants for use with kICCharacterSet, et. al.
/// **********************************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icchartable?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ICCharTable {
    pub netToMac: [c_uchar; 256],
    pub macToNet: [c_uchar; 256],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for ICCharTable {
    const ENCODING: Encoding = Encoding::Struct(
        "ICCharTable",
        &[<[c_uchar; 256]>::ENCODING, <[c_uchar; 256]>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for ICCharTable {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icchartableptr?language=objc)
pub type ICCharTablePtr = *mut ICCharTable;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icchartablehandle?language=objc)
pub type ICCharTableHandle = *mut ICCharTablePtr;

/// **********************************************************************************************
/// types and constants for use with kICHelper, et. al.
/// **********************************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icappspec?language=objc)
#[repr(C, packed(2))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ICAppSpec {
    pub fCreator: OSType,
    pub name: Str63,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for ICAppSpec {
    const ENCODING: Encoding =
        Encoding::Struct("ICAppSpec", &[<OSType>::ENCODING, <Str63>::ENCODING]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for ICAppSpec {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icappspecptr?language=objc)
pub type ICAppSpecPtr = *mut ICAppSpec;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icappspechandle?language=objc)
pub type ICAppSpecHandle = *mut ICAppSpecPtr;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icappspeclist?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ICAppSpecList {
    pub numberOfItems: i16,
    pub appSpecs: [ICAppSpec; 1],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for ICAppSpecList {
    const ENCODING: Encoding = Encoding::Struct(
        "ICAppSpecList",
        &[<i16>::ENCODING, <[ICAppSpec; 1]>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for ICAppSpecList {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icappspeclistptr?language=objc)
pub type ICAppSpecListPtr = *mut ICAppSpecList;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icappspeclisthandle?language=objc)
pub type ICAppSpecListHandle = *mut ICAppSpecListPtr;

/// **********************************************************************************************
/// types and constants for use with ICMapFilename, et. al.
/// **********************************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icmapentryflags?language=objc)
pub type ICMapEntryFlags = i32;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icfixedlength?language=objc)
pub type ICFixedLength = i16;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icmapentry?language=objc)
#[repr(C, packed(2))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ICMapEntry {
    pub totalLength: i16,
    pub fixedLength: ICFixedLength,
    pub version: i16,
    pub fileType: OSType,
    pub fileCreator: OSType,
    pub postCreator: OSType,
    pub flags: ICMapEntryFlags,
    pub extension: Str255,
    pub creatorAppName: Str255,
    pub postAppName: Str255,
    pub MIMEType: Str255,
    pub entryName: Str255,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for ICMapEntry {
    const ENCODING: Encoding = Encoding::Struct(
        "ICMapEntry",
        &[
            <i16>::ENCODING,
            <ICFixedLength>::ENCODING,
            <i16>::ENCODING,
            <OSType>::ENCODING,
            <OSType>::ENCODING,
            <OSType>::ENCODING,
            <ICMapEntryFlags>::ENCODING,
            <Str255>::ENCODING,
            <Str255>::ENCODING,
            <Str255>::ENCODING,
            <Str255>::ENCODING,
            <Str255>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for ICMapEntry {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icmapentryptr?language=objc)
pub type ICMapEntryPtr = *mut ICMapEntry;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icmapentryhandle?language=objc)
pub type ICMapEntryHandle = *mut ICMapEntryPtr;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmapfixedlength?language=objc)
pub const kICMapFixedLength: c_uint = 22;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmapbinarybit?language=objc)
pub const kICMapBinaryBit: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmapresourceforkbit?language=objc)
pub const kICMapResourceForkBit: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmapdataforkbit?language=objc)
pub const kICMapDataForkBit: c_uint = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmappostbit?language=objc)
pub const kICMapPostBit: c_uint = 3;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmapnotincomingbit?language=objc)
pub const kICMapNotIncomingBit: c_uint = 4;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmapnotoutgoingbit?language=objc)
pub const kICMapNotOutgoingBit: c_uint = 5;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmapbinarymask?language=objc)
pub const kICMapBinaryMask: c_uint = 0x00000001;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmapresourceforkmask?language=objc)
pub const kICMapResourceForkMask: c_uint = 0x00000002;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmapdataforkmask?language=objc)
pub const kICMapDataForkMask: c_uint = 0x00000004;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmappostmask?language=objc)
pub const kICMapPostMask: c_uint = 0x00000008;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmapnotincomingmask?language=objc)
pub const kICMapNotIncomingMask: c_uint = 0x00000010;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicmapnotoutgoingmask?language=objc)
pub const kICMapNotOutgoingMask: c_uint = 0x00000020;

/// **********************************************************************************************
/// types and constants for use with kICServices, et. al.
/// **********************************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icserviceentryflags?language=objc)
pub type ICServiceEntryFlags = i16;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icserviceentry?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ICServiceEntry {
    pub name: Str255,
    pub port: i16,
    pub flags: ICServiceEntryFlags,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for ICServiceEntry {
    const ENCODING: Encoding = Encoding::Struct(
        "ICServiceEntry",
        &[
            <Str255>::ENCODING,
            <i16>::ENCODING,
            <ICServiceEntryFlags>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for ICServiceEntry {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icserviceentryptr?language=objc)
pub type ICServiceEntryPtr = *mut ICServiceEntry;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icserviceentryhandle?language=objc)
pub type ICServiceEntryHandle = *mut ICServiceEntryPtr;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicservicestcpbit?language=objc)
pub const kICServicesTCPBit: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicservicesudpbit?language=objc)
pub const kICServicesUDPBit: c_uint = 1;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicservicestcpmask?language=objc)
pub const kICServicesTCPMask: c_uint = 0x00000001;
/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/kicservicesudpmask?language=objc)
pub const kICServicesUDPMask: c_uint = 0x00000002;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icservices?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ICServices {
    pub count: i16,
    pub services: [ICServiceEntry; 1],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for ICServices {
    const ENCODING: Encoding = Encoding::Struct(
        "ICServices",
        &[<i16>::ENCODING, <[ICServiceEntry; 1]>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for ICServices {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icservicesptr?language=objc)
pub type ICServicesPtr = *mut ICServices;

/// [Apple's documentation](https://developer.apple.com/documentation/applicationservices/icserviceshandle?language=objc)
pub type ICServicesHandle = *mut ICServicesPtr;

extern "C-unwind" {
    /// **********************************************************************************************
    ///
    /// FUNCTIONS
    ///
    /// What do the annotations after each API mean?
    /// --------------------------------------------
    ///
    /// [r1] Requires IC 1.1 or higher.
    /// [r2] Requires IC 1.2 or higher.
    /// [r3] Requires IC 2.0 or higher.
    /// [r4] Requires IC 2.5 or higher.
    ///
    /// IMPORTANT:
    ///
    /// In IC 2.5, instances automatically use the default configuration.
    /// You no longer need to configure an instance explicitly, except
    /// if your code might run with an older version of IC.  So the following
    /// notes only apply to IC 2.0 and earlier.
    ///
    /// [c1]  You must have specified a configuration before calling this routine.
    ///
    /// [c2]  You must have specified the default configuration before calling this
    /// routine.
    ///
    /// [c3]  You do not need to specify a configuration before calling this routine.
    ///
    /// [b1]  You must be inside a Begin/End pair when calling this routine.
    ///
    /// [b2]  You must be inside a Begin/End read/write pair when calling this routine.
    ///
    /// [b3]  You do not need to be inside a Begin/End pair when calling this routine.
    ///
    /// [b4]  If you are getting or setting multiple preferences, you should make this
    /// call inside a Begin/End pair. If you do not make this call inside a Begin/End
    /// pair, the call will automatically do it for you.
    ///
    /// [b5]  It is illegal to call this routine inside a Begin/End pair.
    ///
    /// **********************************************************************************************
    ///
    /// # Safety
    ///
    /// `inst` must be a valid pointer.
    #[deprecated]
    pub fn ICStart(inst: *mut ICInstance, signature: OSType) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// `inst` must be a valid pointer.
    #[deprecated]
    pub fn ICStop(inst: ICInstance) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `version` must be a valid pointer.
    #[deprecated]
    pub fn ICGetVersion(inst: ICInstance, which_version: c_long, version: *mut u32) -> OSStatus;
}

/// # Safety
///
/// - `inst` must be a valid pointer.
/// - `name` might not allow `None`.
#[deprecated]
#[inline]
pub unsafe extern "C-unwind" fn ICGetConfigName(
    inst: ICInstance,
    longname: bool,
    name: Option<&mut Str255>,
) -> OSStatus {
    extern "C-unwind" {
        fn ICGetConfigName(
            inst: ICInstance,
            longname: Boolean,
            name: Option<&mut Str255>,
        ) -> OSStatus;
    }
    unsafe { ICGetConfigName(inst, longname as _, name) }
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `seed` must be a valid pointer.
    #[deprecated]
    pub fn ICGetSeed(inst: ICInstance, seed: *mut c_long) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `perm` must be a valid pointer.
    #[deprecated]
    pub fn ICGetPerm(inst: ICInstance, perm: *mut ICPerm) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// `inst` must be a valid pointer.
    #[deprecated]
    pub fn ICBegin(inst: ICInstance, perm: ICPerm) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `key` must be a valid pointer.
    /// - `attr` must be a valid pointer.
    /// - `buf` must be a valid pointer.
    /// - `size` must be a valid pointer.
    #[deprecated]
    pub fn ICGetPref(
        inst: ICInstance,
        key: ConstStr255Param,
        attr: *mut ICAttr,
        buf: *mut c_void,
        size: *mut c_long,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `key` must be a valid pointer.
    /// - `buf` must be a valid pointer.
    #[deprecated]
    pub fn ICSetPref(
        inst: ICInstance,
        key: ConstStr255Param,
        attr: ICAttr,
        buf: *const c_void,
        size: c_long,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `key` must be a valid pointer.
    /// - `attr` must be a valid pointer.
    /// - `prefh` must be a valid pointer.
    #[deprecated]
    pub fn ICFindPrefHandle(
        inst: ICInstance,
        key: ConstStr255Param,
        attr: *mut ICAttr,
        prefh: Handle,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `key` must be a valid pointer.
    /// - `attr` must be a valid pointer.
    /// - `prefh` must be a valid pointer.
    #[deprecated]
    pub fn ICGetPrefHandle(
        inst: ICInstance,
        key: ConstStr255Param,
        attr: *mut ICAttr,
        prefh: *mut Handle,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `key` must be a valid pointer.
    /// - `prefh` must be a valid pointer.
    #[deprecated]
    pub fn ICSetPrefHandle(
        inst: ICInstance,
        key: ConstStr255Param,
        attr: ICAttr,
        prefh: Handle,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `count` must be a valid pointer.
    #[deprecated]
    pub fn ICCountPref(inst: ICInstance, count: *mut c_long) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `key` might not allow `None`.
    #[deprecated]
    pub fn ICGetIndPref(inst: ICInstance, index: c_long, key: Option<&mut Str255>) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `key` must be a valid pointer.
    #[deprecated]
    pub fn ICDeletePref(inst: ICInstance, key: ConstStr255Param) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// `inst` must be a valid pointer.
    #[deprecated]
    pub fn ICEnd(inst: ICInstance) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `key` must be a valid pointer.
    /// - `pref_h` must be a valid pointer.
    #[deprecated]
    pub fn ICGetDefaultPref(inst: ICInstance, key: ConstStr255Param, pref_h: Handle) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `key` must be a valid pointer.
    #[deprecated]
    pub fn ICEditPreferences(inst: ICInstance, key: ConstStr255Param) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `hint` must be a valid pointer.
    /// - `data` must be a valid pointer.
    /// - `sel_start` must be a valid pointer.
    /// - `sel_end` must be a valid pointer.
    #[deprecated]
    pub fn ICLaunchURL(
        inst: ICInstance,
        hint: ConstStr255Param,
        data: *const c_void,
        len: c_long,
        sel_start: *mut c_long,
        sel_end: *mut c_long,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `hint` must be a valid pointer.
    /// - `data` must be a valid pointer.
    /// - `sel_start` must be a valid pointer.
    /// - `sel_end` must be a valid pointer.
    /// - `url` must be a valid pointer.
    #[deprecated]
    pub fn ICParseURL(
        inst: ICInstance,
        hint: ConstStr255Param,
        data: *const c_void,
        len: c_long,
        sel_start: *mut c_long,
        sel_end: *mut c_long,
        url: Handle,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `url_h` must be a valid pointer.
    /// - `the_event` must be a valid pointer.
    #[cfg(feature = "objc2-core-services")]
    #[deprecated]
    pub fn ICCreateGURLEvent(
        inst: ICInstance,
        helper_creator: OSType,
        url_h: Handle,
        the_event: *mut AppleEvent,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `the_event` must be a valid pointer.
    #[cfg(feature = "objc2-core-services")]
    #[deprecated]
    pub fn ICSendGURLEvent(inst: ICInstance, the_event: *mut AppleEvent) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `filename` must be a valid pointer.
    /// - `entry` must be a valid pointer.
    #[deprecated]
    pub fn ICMapFilename(
        inst: ICInstance,
        filename: ConstStr255Param,
        entry: *mut ICMapEntry,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `filename` must be a valid pointer.
    /// - `entry` must be a valid pointer.
    #[deprecated]
    pub fn ICMapTypeCreator(
        inst: ICInstance,
        f_type: OSType,
        f_creator: OSType,
        filename: ConstStr255Param,
        entry: *mut ICMapEntry,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `entries` must be a valid pointer.
    /// - `filename` must be a valid pointer.
    /// - `entry` must be a valid pointer.
    #[deprecated]
    pub fn ICMapEntriesFilename(
        inst: ICInstance,
        entries: Handle,
        filename: ConstStr255Param,
        entry: *mut ICMapEntry,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `entries` must be a valid pointer.
    /// - `filename` must be a valid pointer.
    /// - `entry` must be a valid pointer.
    #[deprecated]
    pub fn ICMapEntriesTypeCreator(
        inst: ICInstance,
        entries: Handle,
        f_type: OSType,
        f_creator: OSType,
        filename: ConstStr255Param,
        entry: *mut ICMapEntry,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `entries` must be a valid pointer.
    /// - `count` must be a valid pointer.
    #[deprecated]
    pub fn ICCountMapEntries(inst: ICInstance, entries: Handle, count: *mut c_long) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `entries` must be a valid pointer.
    /// - `pos` must be a valid pointer.
    /// - `entry` must be a valid pointer.
    #[deprecated]
    pub fn ICGetIndMapEntry(
        inst: ICInstance,
        entries: Handle,
        index: c_long,
        pos: *mut c_long,
        entry: *mut ICMapEntry,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `entries` must be a valid pointer.
    /// - `entry` must be a valid pointer.
    #[deprecated]
    pub fn ICGetMapEntry(
        inst: ICInstance,
        entries: Handle,
        pos: c_long,
        entry: *mut ICMapEntry,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `entries` must be a valid pointer.
    /// - `entry` must be a valid pointer.
    #[deprecated]
    pub fn ICSetMapEntry(
        inst: ICInstance,
        entries: Handle,
        pos: c_long,
        entry: *const ICMapEntry,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `entries` must be a valid pointer.
    #[deprecated]
    pub fn ICDeleteMapEntry(inst: ICInstance, entries: Handle, pos: c_long) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `entries` must be a valid pointer.
    /// - `entry` must be a valid pointer.
    #[deprecated]
    pub fn ICAddMapEntry(inst: ICInstance, entries: Handle, entry: *const ICMapEntry) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `current_id` must be a valid pointer.
    #[deprecated]
    pub fn ICGetCurrentProfile(inst: ICInstance, current_id: *mut ICProfileID) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// `inst` must be a valid pointer.
    #[deprecated]
    pub fn ICSetCurrentProfile(inst: ICInstance, new_id: ICProfileID) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `count` must be a valid pointer.
    #[deprecated]
    pub fn ICCountProfiles(inst: ICInstance, count: *mut c_long) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `this_id` must be a valid pointer.
    #[deprecated]
    pub fn ICGetIndProfile(inst: ICInstance, index: c_long, this_id: *mut ICProfileID) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `name` might not allow `None`.
    #[deprecated]
    pub fn ICGetProfileName(
        inst: ICInstance,
        this_id: ICProfileID,
        name: Option<&mut Str255>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `name` must be a valid pointer.
    #[deprecated]
    pub fn ICSetProfileName(
        inst: ICInstance,
        this_id: ICProfileID,
        name: ConstStr255Param,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// - `inst` must be a valid pointer.
    /// - `new_id` must be a valid pointer.
    #[deprecated]
    pub fn ICAddProfile(
        inst: ICInstance,
        prototype_id: ICProfileID,
        new_id: *mut ICProfileID,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// `inst` must be a valid pointer.
    #[deprecated]
    pub fn ICDeleteProfile(inst: ICInstance, this_id: ICProfileID) -> OSStatus;
}
