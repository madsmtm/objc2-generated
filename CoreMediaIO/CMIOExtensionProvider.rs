//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "dispatch2")]
use dispatch2::*;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// The CoreMediaIO extension info dictionary key.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensioninfodictionarykey?language=objc)
    pub static CMIOExtensionInfoDictionaryKey: &'static NSString;
}

extern "C" {
    /// A key contained in the Info.plist that specifies the mach service name.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionmachservicenamekey?language=objc)
    pub static CMIOExtensionMachServiceNameKey: &'static NSString;
}

extern_class!(
    /// A CMIOExtensionProviderProperties describes CoreMediaIO extension provider properties.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionproviderproperties?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CMIOExtensionProviderProperties;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for CMIOExtensionProviderProperties {}
);

impl CMIOExtensionProviderProperties {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "CMIOExtensionProperties")]
        /// Return a provider properties instance.
        ///
        /// Parameter `propertiesDictionary`: The dictionary of properties.
        ///
        /// Returns: A CMIOExtensionProviderProperties instance.
        ///
        /// # Safety
        ///
        /// `properties_dictionary` generic generic should be of the correct type.
        #[unsafe(method(providerPropertiesWithDictionary:))]
        #[unsafe(method_family = none)]
        pub unsafe fn providerPropertiesWithDictionary(
            properties_dictionary: &NSDictionary<CMIOExtensionProperty, CMIOExtensionPropertyState>,
        ) -> Retained<Self>;

        #[cfg(feature = "CMIOExtensionProperties")]
        /// Initialize a provider properties instance.
        ///
        /// Parameter `propertiesDictionary`: The dictionary of properties.
        ///
        /// Returns: A CMIOExtensionProviderProperties instance.
        ///
        /// # Safety
        ///
        /// `properties_dictionary` generic generic should be of the correct type.
        #[unsafe(method(initWithDictionary:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDictionary(
            this: Allocated<Self>,
            properties_dictionary: &NSDictionary<CMIOExtensionProperty, CMIOExtensionPropertyState>,
        ) -> Retained<Self>;

        /// The provider name.
        ///
        /// The property key is CMIOExtensionPropertyProviderName.
        #[unsafe(method(name))]
        #[unsafe(method_family = none)]
        pub unsafe fn name(&self) -> Option<Retained<NSString>>;

        /// Setter for [`name`][Self::name].
        #[unsafe(method(setName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setName(&self, name: Option<&NSString>);

        /// The provider manufacturer.
        ///
        /// The property key is CMIOExtensionPropertyProviderManufacturer.
        #[unsafe(method(manufacturer))]
        #[unsafe(method_family = none)]
        pub unsafe fn manufacturer(&self) -> Option<Retained<NSString>>;

        /// Setter for [`manufacturer`][Self::manufacturer].
        #[unsafe(method(setManufacturer:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setManufacturer(&self, manufacturer: Option<&NSString>);

        #[cfg(feature = "CMIOExtensionProperties")]
        /// Set the property value.
        ///
        /// Parameter `propertyState`: The property state.
        ///
        /// Parameter `property`: The property key.
        ///
        /// Setting nil to propertyState does remove the property.
        ///
        /// # Safety
        ///
        /// `property_state` generic should be of the correct type.
        #[unsafe(method(setPropertyState:forProperty:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPropertyState_forProperty(
            &self,
            property_state: Option<&CMIOExtensionPropertyState>,
            property: &CMIOExtensionProperty,
        );

        #[cfg(feature = "CMIOExtensionProperties")]
        /// The dictionary of properties.
        ///
        /// The dictionary containing all keys and values.
        #[unsafe(method(propertiesDictionary))]
        #[unsafe(method_family = none)]
        pub unsafe fn propertiesDictionary(
            &self,
        ) -> Retained<NSDictionary<CMIOExtensionProperty, CMIOExtensionPropertyState>>;

        #[cfg(feature = "CMIOExtensionProperties")]
        /// Setter for [`propertiesDictionary`][Self::propertiesDictionary].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        ///
        /// # Safety
        ///
        /// `properties_dictionary` generic generic should be of the correct type.
        #[unsafe(method(setPropertiesDictionary:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPropertiesDictionary(
            &self,
            properties_dictionary: &NSDictionary<CMIOExtensionProperty, CMIOExtensionPropertyState>,
        );
    );
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionprovidersource?language=objc)
    pub unsafe trait CMIOExtensionProviderSource: NSObjectProtocol {
        #[cfg(feature = "CMIOExtensionProperties")]
        /// Connect a client to the provider.
        ///
        /// Parameter `client`: The client.
        ///
        /// Parameter `outError`: An error return on failure.
        ///
        /// Returns: Return YES is the connection is accepted, NO otherwise.
        #[unsafe(method(connectClient:error:_))]
        #[unsafe(method_family = none)]
        unsafe fn connectClient_error(
            &self,
            client: &CMIOExtensionClient,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "CMIOExtensionProperties")]
        /// Disconnect a client from the provider.
        ///
        /// Parameter `client`: The client.
        #[unsafe(method(disconnectClient:))]
        #[unsafe(method_family = none)]
        unsafe fn disconnectClient(&self, client: &CMIOExtensionClient);

        #[cfg(feature = "CMIOExtensionProperties")]
        /// The set of available properties.
        ///
        /// The availableProperties should not change during the life cycle of the associated provider.
        #[unsafe(method(availableProperties))]
        #[unsafe(method_family = none)]
        unsafe fn availableProperties(&self) -> Retained<NSSet<CMIOExtensionProperty>>;

        #[cfg(feature = "CMIOExtensionProperties")]
        /// Get the state of properties.
        ///
        /// Parameter `properties`: The addresses of properties from which to get the state.
        ///
        /// Parameter `outError`: An error return on failure.
        ///
        /// Returns: A provider properties instance containing the properties states.
        #[unsafe(method(providerPropertiesForProperties:error:_))]
        #[unsafe(method_family = none)]
        unsafe fn providerPropertiesForProperties_error(
            &self,
            properties: &NSSet<CMIOExtensionProperty>,
        ) -> Result<Retained<CMIOExtensionProviderProperties>, Retained<NSError>>;

        /// Set the provider properties.
        ///
        /// Parameter `providerProperties`: The provider properties instance containing the properties states.
        ///
        /// Parameter `outError`: An error return on failure.
        ///
        /// Returns: Return YES on success, NO otherwise.
        ///
        /// The property attributes associated with a property state are always nil in setter.
        /// In case of error, it is highly advisable to pass more detailed information regarding the property or properties that failed in the localizedDescription of the NSError.
        #[unsafe(method(setProviderProperties:error:_))]
        #[unsafe(method_family = none)]
        unsafe fn setProviderProperties_error(
            &self,
            provider_properties: &CMIOExtensionProviderProperties,
        ) -> Result<(), Retained<NSError>>;
    }
);

extern_class!(
    /// A CMIOExtensionProvider describes a CoreMediaIO extension provider.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionprovider?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CMIOExtensionProvider;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for CMIOExtensionProvider {}
);

impl CMIOExtensionProvider {
    extern_methods!(
        /// Starts the CoreMediaIO Extension machinery.
        #[unsafe(method(startServiceWithProvider:))]
        #[unsafe(method_family = none)]
        pub unsafe fn startServiceWithProvider(provider: &CMIOExtensionProvider);

        /// Stops the CoreMediaIO Extension machinery.
        ///
        /// This should only be called in very rare circumstances.  For example, if an extension is present on a system and there is no possible way that it would ever create a device instance. It is suggested that this be called as soon as possible in the provider's lifecycle, and that the provider's ignoreSIGTERM method be called first. After calling this method the extension should exit.
        #[unsafe(method(stopServiceWithProvider:))]
        #[unsafe(method_family = none)]
        pub unsafe fn stopServiceWithProvider(provider: &CMIOExtensionProvider);

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "dispatch2")]
        /// Returns a provider instance.
        ///
        /// Parameter `source`: The provider source.
        ///
        /// Parameter `clientQueue`: The client dispatch queue, or nil for the default dispatch queue.
        ///
        /// Returns: A CMIOExtensionProvider instance.
        #[unsafe(method(providerWithSource:clientQueue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn providerWithSource_clientQueue(
            source: &ProtocolObject<dyn CMIOExtensionProviderSource>,
            client_queue: Option<&DispatchQueue>,
        ) -> Retained<Self>;

        #[cfg(feature = "dispatch2")]
        /// Initialize a provider instance.
        ///
        /// Parameter `source`: The provider source.
        ///
        /// Parameter `clientQueue`: The client dispatch queue, or nil for the default dispatch queue.
        ///
        /// Returns: A CMIOExtensionProvider instance.
        #[unsafe(method(initWithSource:clientQueue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithSource_clientQueue(
            this: Allocated<Self>,
            source: &ProtocolObject<dyn CMIOExtensionProviderSource>,
            client_queue: Option<&DispatchQueue>,
        ) -> Retained<Self>;

        /// The provider source.
        #[unsafe(method(source))]
        #[unsafe(method_family = none)]
        pub unsafe fn source(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn CMIOExtensionProviderSource>>>;

        #[cfg(feature = "dispatch2")]
        /// The dispatch queue on which source methods from the provider/device/stream will be called.
        #[unsafe(method(clientQueue))]
        #[unsafe(method_family = none)]
        pub unsafe fn clientQueue(&self) -> Retained<DispatchQueue>;

        #[cfg(feature = "CMIOExtensionProperties")]
        /// The array of connected clients.
        ///
        /// This property is key-value observable.
        #[unsafe(method(connectedClients))]
        #[unsafe(method_family = none)]
        pub unsafe fn connectedClients(&self) -> Retained<NSArray<CMIOExtensionClient>>;

        #[cfg(feature = "CMIOExtensionDevice")]
        /// The devices array of the provider.
        ///
        /// This property is not key-value observable.
        #[unsafe(method(devices))]
        #[unsafe(method_family = none)]
        pub unsafe fn devices(&self) -> Retained<NSArray<CMIOExtensionDevice>>;

        #[cfg(feature = "CMIOExtensionDevice")]
        /// Add a device to the provider devices array.
        ///
        /// Parameter `device`: The device to be added to the provider devices array.
        ///
        /// Parameter `outError`: An error return on failure.
        ///
        /// Returns: Return YES on success, NO otherwise.
        #[unsafe(method(addDevice:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn addDevice_error(
            &self,
            device: &CMIOExtensionDevice,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "CMIOExtensionDevice")]
        /// Remove a device from the provider devices array.
        ///
        /// Parameter `device`: The device to be removed from the provider devices array.
        ///
        /// Parameter `outError`: An error return on failure.
        ///
        /// Returns: Return YES on success, NO otherwise.
        #[unsafe(method(removeDevice:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn removeDevice_error(
            &self,
            device: &CMIOExtensionDevice,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "CMIOExtensionProperties")]
        /// Notify client(s) of device properties changes.
        ///
        /// Parameter `propertyStates`: The dictionary of properties having changed.
        ///
        /// # Safety
        ///
        /// `property_states` generic generic should be of the correct type.
        #[unsafe(method(notifyPropertiesChanged:))]
        #[unsafe(method_family = none)]
        pub unsafe fn notifyPropertiesChanged(
            &self,
            property_states: &NSDictionary<CMIOExtensionProperty, CMIOExtensionPropertyState>,
        );
    );
}

/// SignalHandling.
impl CMIOExtensionProvider {
    extern_methods!(
        /// Directs provider class to ignore the SIGTERM signal.
        ///
        /// Call this method if your provider handles SIGTERM signals; NOTE: if so, your handler must call exit.
        #[unsafe(method(ignoreSIGTERM))]
        #[unsafe(method_family = none)]
        pub unsafe fn ignoreSIGTERM();
    );
}
