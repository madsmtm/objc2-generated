//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// A CMIOExtensionDeviceProperties describes a CoreMediaIO extension device properties.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensiondeviceproperties?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CMIOExtensionDeviceProperties;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for CMIOExtensionDeviceProperties {}
);

impl CMIOExtensionDeviceProperties {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "CMIOExtensionProperties")]
        /// Return a device properties instance.
        ///
        /// Parameter `propertiesDictionary`: The dictionary of properties.
        ///
        /// Returns: A CMIOExtensionDeviceProperties instance.
        #[unsafe(method(devicePropertiesWithDictionary:))]
        #[unsafe(method_family = none)]
        pub unsafe fn devicePropertiesWithDictionary(
            properties_dictionary: &NSDictionary<CMIOExtensionProperty, CMIOExtensionPropertyState>,
        ) -> Retained<Self>;

        #[cfg(feature = "CMIOExtensionProperties")]
        /// Initialize a device properties instance.
        ///
        /// Parameter `propertiesDictionary`: The dictionary of properties.
        ///
        /// Returns: A CMIOExtensionDeviceProperties instance.
        #[unsafe(method(initWithDictionary:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDictionary(
            this: Allocated<Self>,
            properties_dictionary: &NSDictionary<CMIOExtensionProperty, CMIOExtensionPropertyState>,
        ) -> Retained<Self>;

        /// The device model.
        ///
        /// The property key is CMIOExtensionPropertyDeviceModel.
        #[unsafe(method(model))]
        #[unsafe(method_family = none)]
        pub unsafe fn model(&self) -> Option<Retained<NSString>>;

        /// Setter for [`model`][Self::model].
        #[unsafe(method(setModel:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setModel(&self, model: Option<&NSString>);

        /// Indicates whether the device is suspended.
        ///
        /// The property key is CMIOExtensionPropertyDeviceIsSuspended.
        #[unsafe(method(suspended))]
        #[unsafe(method_family = none)]
        pub unsafe fn suspended(&self) -> Option<Retained<NSNumber>>;

        /// Setter for [`suspended`][Self::suspended].
        #[unsafe(method(setSuspended:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSuspended(&self, suspended: Option<&NSNumber>);

        /// The transport type of the receiver (e.g. USB, PCI, etc) whose value correspond to the audio transport type ( kIOAudioDeviceTransportType... ) defined in
        /// <IOKit
        /// /audio/IOAudioTypes.h>.
        ///
        /// The property key is CMIOExtensionPropertyDeviceTransportType.
        #[unsafe(method(transportType))]
        #[unsafe(method_family = none)]
        pub unsafe fn transportType(&self) -> Option<Retained<NSNumber>>;

        /// Setter for [`transportType`][Self::transportType].
        #[unsafe(method(setTransportType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTransportType(&self, transport_type: Option<&NSNumber>);

        /// The device linked CoreAudio device UID.
        ///
        /// The property key is CMIOExtensionPropertyDeviceLinkedCoreAudioDeviceUID.
        #[unsafe(method(linkedCoreAudioDeviceUID))]
        #[unsafe(method_family = none)]
        pub unsafe fn linkedCoreAudioDeviceUID(&self) -> Option<Retained<NSString>>;

        /// Setter for [`linkedCoreAudioDeviceUID`][Self::linkedCoreAudioDeviceUID].
        #[unsafe(method(setLinkedCoreAudioDeviceUID:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setLinkedCoreAudioDeviceUID(
            &self,
            linked_core_audio_device_uid: Option<&NSString>,
        );

        #[cfg(feature = "CMIOExtensionProperties")]
        /// Set the property value.
        ///
        /// Parameter `propertyState`: The property state.
        ///
        /// Parameter `property`: The property key.
        ///
        /// Setting nil to propertyState does remove the property.
        #[unsafe(method(setPropertyState:forProperty:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPropertyState_forProperty(
            &self,
            property_state: Option<&CMIOExtensionPropertyState>,
            property: &CMIOExtensionProperty,
        );

        #[cfg(feature = "CMIOExtensionProperties")]
        /// The dictionary of properties.
        ///
        /// The dictionary containing all keys and values.
        #[unsafe(method(propertiesDictionary))]
        #[unsafe(method_family = none)]
        pub unsafe fn propertiesDictionary(
            &self,
        ) -> Retained<NSDictionary<CMIOExtensionProperty, CMIOExtensionPropertyState>>;

        #[cfg(feature = "CMIOExtensionProperties")]
        /// Setter for [`propertiesDictionary`][Self::propertiesDictionary].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setPropertiesDictionary:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPropertiesDictionary(
            &self,
            properties_dictionary: &NSDictionary<CMIOExtensionProperty, CMIOExtensionPropertyState>,
        );
    );
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensiondevicesource?language=objc)
    pub unsafe trait CMIOExtensionDeviceSource: NSObjectProtocol {
        #[cfg(feature = "CMIOExtensionProperties")]
        /// The set of available properties.
        ///
        /// The availableProperties should not change during the life cycle of the associated device.
        #[unsafe(method(availableProperties))]
        #[unsafe(method_family = none)]
        unsafe fn availableProperties(&self) -> Retained<NSSet<CMIOExtensionProperty>>;

        #[cfg(feature = "CMIOExtensionProperties")]
        /// Get the state of properties.
        ///
        /// Parameter `properties`: The addresses of properties from which to get the state.
        ///
        /// Parameter `outError`: An error return on failure.
        ///
        /// Returns: A device properties instance containing the properties states.
        #[unsafe(method(devicePropertiesForProperties:error:_))]
        #[unsafe(method_family = none)]
        unsafe fn devicePropertiesForProperties_error(
            &self,
            properties: &NSSet<CMIOExtensionProperty>,
        ) -> Result<Retained<CMIOExtensionDeviceProperties>, Retained<NSError>>;

        /// Set the provider properties.
        ///
        /// Parameter `deviceProperties`: The device properties instance containing the properties states.
        ///
        /// Parameter `outError`: An error return on failure.
        ///
        /// Returns: Return YES on success, NO otherwise.
        ///
        /// The property attributes associated with a property state are always nil in setter.
        /// In case of error, it is highly advisable to pass more detailed information regarding the property or properties that failed in the localizedDescription of the NSError.
        #[unsafe(method(setDeviceProperties:error:_))]
        #[unsafe(method_family = none)]
        unsafe fn setDeviceProperties_error(
            &self,
            device_properties: &CMIOExtensionDeviceProperties,
        ) -> Result<(), Retained<NSError>>;
    }
);

extern_class!(
    /// A CMIOExtensionDevice describes a device.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensiondevice?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CMIOExtensionDevice;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for CMIOExtensionDevice {}
);

impl CMIOExtensionDevice {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns a device instance.
        ///
        /// Parameter `localizedName`: The localized name of the device.
        ///
        /// Parameter `deviceID`: The device id (as a UUID).
        ///
        /// Parameter `legacyDeviceID`: The device identifier as a string (for backward compatibility with existing CMIO DAL clients, it may differ from deviceID.UUIDString). May be nil if your device has no compatibility requirements.
        ///
        /// Parameter `source`: The device source, a client instantiated object for the device that conforms to the CMIOExtensionDeviceSource protocol.
        ///
        /// Returns: A CMIOExtensionDevice instance.
        #[unsafe(method(deviceWithLocalizedName:deviceID:legacyDeviceID:source:))]
        #[unsafe(method_family = none)]
        pub unsafe fn deviceWithLocalizedName_deviceID_legacyDeviceID_source(
            localized_name: &NSString,
            device_id: &NSUUID,
            legacy_device_id: Option<&NSString>,
            source: &ProtocolObject<dyn CMIOExtensionDeviceSource>,
        ) -> Retained<Self>;

        /// Initialize a device instance.
        ///
        /// Parameter `localizedName`: The localized name of the device.
        ///
        /// Parameter `deviceID`: The device id (as a UUID).
        ///
        /// Parameter `legacyDeviceID`: The device identifier as a string (for backward compatibility with existing CMIO DAL clients, it may differ from deviceID.UUIDString). May be nil if your device has no compatibility requirements.
        ///
        /// Parameter `source`: The device source, a client instantiated object for the device that conforms to the CMIOExtensionDeviceSource protocol.
        ///
        /// Returns: A CMIOExtensionDevice instance.
        #[unsafe(method(initWithLocalizedName:deviceID:legacyDeviceID:source:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithLocalizedName_deviceID_legacyDeviceID_source(
            this: Allocated<Self>,
            localized_name: &NSString,
            device_id: &NSUUID,
            legacy_device_id: Option<&NSString>,
            source: &ProtocolObject<dyn CMIOExtensionDeviceSource>,
        ) -> Retained<Self>;

        /// Returns a device instance.
        ///
        /// Parameter `localizedName`: The localized name of the device.
        ///
        /// Parameter `deviceID`: The device unique identifier.
        ///
        /// Parameter `source`: The device source, a client instantiated object for the device that conforms to the CMIOExtensionDeviceSource protocol.
        ///
        /// Returns: A CMIOExtensionDevice instance.
        #[unsafe(method(deviceWithLocalizedName:deviceID:source:))]
        #[unsafe(method_family = none)]
        pub unsafe fn deviceWithLocalizedName_deviceID_source(
            localized_name: &NSString,
            device_id: &NSUUID,
            source: &ProtocolObject<dyn CMIOExtensionDeviceSource>,
        ) -> Retained<Self>;

        /// Initialize a device instance.
        ///
        /// Parameter `localizedName`: The localized name of the device.
        ///
        /// Parameter `deviceID`: The device unique identifier.
        ///
        /// Parameter `source`: The device source, a client instantiated object for the device that conforms to the CMIOExtensionDeviceSource protocol.
        ///
        /// Returns: A CMIOExtensionDevice instance.
        #[unsafe(method(initWithLocalizedName:deviceID:source:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithLocalizedName_deviceID_source(
            this: Allocated<Self>,
            localized_name: &NSString,
            device_id: &NSUUID,
            source: &ProtocolObject<dyn CMIOExtensionDeviceSource>,
        ) -> Retained<Self>;

        /// The localized name of the device.
        #[unsafe(method(localizedName))]
        #[unsafe(method_family = none)]
        pub unsafe fn localizedName(&self) -> Retained<NSString>;

        /// The device identifier as UUID.
        #[unsafe(method(deviceID))]
        #[unsafe(method_family = none)]
        pub unsafe fn deviceID(&self) -> Retained<NSUUID>;

        /// The device identifier as a string (for backward compatibility with AVCaptureDevice.uniqueIdentifier)
        #[unsafe(method(legacyDeviceID))]
        #[unsafe(method_family = none)]
        pub unsafe fn legacyDeviceID(&self) -> Retained<NSString>;

        /// The device source.
        #[unsafe(method(source))]
        #[unsafe(method_family = none)]
        pub unsafe fn source(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn CMIOExtensionDeviceSource>>>;

        #[cfg(feature = "CMIOExtensionStream")]
        /// The streams array of the device.
        ///
        /// This property is not key-value observable.
        #[unsafe(method(streams))]
        #[unsafe(method_family = none)]
        pub unsafe fn streams(&self) -> Retained<NSArray<CMIOExtensionStream>>;

        #[cfg(feature = "CMIOExtensionStream")]
        /// Add a stream to the device streams array.
        ///
        /// Parameter `stream`: The stream to be added to the device streams array.
        ///
        /// Parameter `outError`: An error return on failure.
        ///
        /// Returns: Return YES on success, NO otherwise.
        #[unsafe(method(addStream:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn addStream_error(
            &self,
            stream: &CMIOExtensionStream,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "CMIOExtensionStream")]
        /// Remove a stream from the device streams array.
        ///
        /// Parameter `stream`: The stream to be removed from the device streams array.
        ///
        /// Parameter `outError`: An error return on failure.
        ///
        /// Returns: Return YES on success, NO otherwise.
        #[unsafe(method(removeStream:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn removeStream_error(
            &self,
            stream: &CMIOExtensionStream,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "CMIOExtensionProperties")]
        /// Notify client(s) of device properties changes.
        ///
        /// Parameter `propertyStates`: The dictionary of properties having changed.
        #[unsafe(method(notifyPropertiesChanged:))]
        #[unsafe(method_family = none)]
        pub unsafe fn notifyPropertiesChanged(
            &self,
            property_states: &NSDictionary<CMIOExtensionProperty, CMIOExtensionPropertyState>,
        );
    );
}
