//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;

use crate::*;

/// CMIOStream is the base class for all objects that represent a stream of data on a CMIO device.
///
/// CMIOStream is a subclass of CMIOObject and can contain CMIOControls.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmiostreamid?language=objc)
#[cfg(feature = "CMIOHardwareObject")]
pub type CMIOStreamID = CMIOObjectID;

/// Clients register a CMIODeviceStreamQueueAlteredProc when invoking CMIOStreamCopyBufferQueue() to specify a routine for the stream to call when it alters its
/// buffer queue. Input streams invoke it following the insertion of a buffer into the queue, and output streams will invoke it upon removal.
///
/// Parameter `streamID`: The stream whose queue has been altered
///
/// Parameter `token`: The token which was inserted / removed
///
/// Parameter `refCon`: A pointer to client data established when the proc was registered via CMIOStreamCopyBufferQueue().
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmiodevicestreamqueuealteredproc?language=objc)
#[cfg(feature = "CMIOHardwareObject")]
pub type CMIODeviceStreamQueueAlteredProc =
    Option<unsafe extern "C-unwind" fn(CMIOStreamID, *mut c_void, *mut c_void)>;

/// This structure is returned in response to the kCMIOStreamPropertyDeck property queries.
/// Field: mStatus
/// The CMIO Deck Status constant that changed.
/// Field: mState
/// If kCMIODeckStatusOpcode == mStatus, this can be used to determine more specific status. The values are CMIO Deck State constants.
/// Field: mState2
/// if kCMIODeckStatusOpcode == mStatus, this can be used to determine more specific status. The values are device specific.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmiostreamdeck?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CMIOStreamDeck {
    pub mStatus: u32,
    pub mState: u32,
    pub mState2: u32,
}

unsafe impl Encode for CMIOStreamDeck {
    const ENCODING: Encoding = Encoding::Struct(
        "CMIOStreamDeck",
        &[<u32>::ENCODING, <u32>::ENCODING, <u32>::ENCODING],
    );
}

unsafe impl RefEncode for CMIOStreamDeck {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreamclassid?language=objc)
pub const kCMIOStreamClassID: c_uint = 0x61737472;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreamunknown?language=objc)
#[cfg(feature = "CMIOHardwareObject")]
pub const kCMIOStreamUnknown: c_uint = kCMIOObjectUnknown;

/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstatusbusy?language=objc)
pub const kCMIODeckStatusBusy: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstatuslocal?language=objc)
pub const kCMIODeckStatusLocal: c_uint = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstatusnotthreaded?language=objc)
pub const kCMIODeckStatusNotThreaded: c_uint = 3;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstatustapeinserted?language=objc)
pub const kCMIODeckStatusTapeInserted: c_uint = 4;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstatusopcode?language=objc)
pub const kCMIODeckStatusOpcode: c_uint = 5;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstatussearchingfordevice?language=objc)
pub const kCMIODeckStatusSearchingForDevice: c_uint = 6;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstatusnodevice?language=objc)
pub const kCMIODeckStatusNoDevice: c_uint = 7;

/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstatestop?language=objc)
pub const kCMIODeckStateStop: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstateplay?language=objc)
pub const kCMIODeckStatePlay: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstatepause?language=objc)
pub const kCMIODeckStatePause: c_uint = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstateplayslow?language=objc)
pub const kCMIODeckStatePlaySlow: c_uint = 3;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstatereverseslow?language=objc)
pub const kCMIODeckStateReverseSlow: c_uint = 4;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstateplayreverse?language=objc)
pub const kCMIODeckStatePlayReverse: c_uint = 5;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstatefastforward?language=objc)
pub const kCMIODeckStateFastForward: c_uint = 6;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckstatefastrewind?language=objc)
pub const kCMIODeckStateFastRewind: c_uint = 7;

/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttlereversehighspeed?language=objc)
pub const kCMIODeckShuttleReverseHighSpeed: c_int = -10;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttlereversefastest?language=objc)
pub const kCMIODeckShuttleReverseFastest: c_int = -9;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttlereversefaster?language=objc)
pub const kCMIODeckShuttleReverseFaster: c_int = -8;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttlereversefast?language=objc)
pub const kCMIODeckShuttleReverseFast: c_int = -7;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttlereverse1x?language=objc)
pub const kCMIODeckShuttleReverse1x: c_int = -6;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttlereverseslow3?language=objc)
pub const kCMIODeckShuttleReverseSlow3: c_int = -5;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttlereverseslow2?language=objc)
pub const kCMIODeckShuttleReverseSlow2: c_int = -4;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttlereverseslow1?language=objc)
pub const kCMIODeckShuttleReverseSlow1: c_int = -3;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttlereverseslowest?language=objc)
pub const kCMIODeckShuttleReverseSlowest: c_int = -2;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttleplaypreviousframe?language=objc)
pub const kCMIODeckShuttlePlayPreviousFrame: c_int = -1;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttlepause?language=objc)
pub const kCMIODeckShuttlePause: c_int = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttleplaynextframe?language=objc)
pub const kCMIODeckShuttlePlayNextFrame: c_int = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttleplayslowest?language=objc)
pub const kCMIODeckShuttlePlaySlowest: c_int = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttleplayslow1?language=objc)
pub const kCMIODeckShuttlePlaySlow1: c_int = 3;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttleplayslow2?language=objc)
pub const kCMIODeckShuttlePlaySlow2: c_int = 4;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttleplayslow3?language=objc)
pub const kCMIODeckShuttlePlaySlow3: c_int = 5;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttleplay1x?language=objc)
pub const kCMIODeckShuttlePlay1x: c_int = 6;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttleplayfast?language=objc)
pub const kCMIODeckShuttlePlayFast: c_int = 7;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttleplayfaster?language=objc)
pub const kCMIODeckShuttlePlayFaster: c_int = 8;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttleplayfastest?language=objc)
pub const kCMIODeckShuttlePlayFastest: c_int = 9;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiodeckshuttleplayhighspeed?language=objc)
pub const kCMIODeckShuttlePlayHighSpeed: c_int = 10;

/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertydirection?language=objc)
pub const kCMIOStreamPropertyDirection: c_uint = 0x73646972;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyterminaltype?language=objc)
pub const kCMIOStreamPropertyTerminalType: c_uint = 0x7465726d;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertystartingchannel?language=objc)
pub const kCMIOStreamPropertyStartingChannel: c_uint = 0x7363686e;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertylatency?language=objc)
pub const kCMIOStreamPropertyLatency: c_uint = 0x6c746e63;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyformatdescription?language=objc)
pub const kCMIOStreamPropertyFormatDescription: c_uint = 0x70667420;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyformatdescriptions?language=objc)
pub const kCMIOStreamPropertyFormatDescriptions: c_uint = 0x70667461;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertystillimage?language=objc)
pub const kCMIOStreamPropertyStillImage: c_uint = 0x73746d67;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertystillimageformatdescriptions?language=objc)
pub const kCMIOStreamPropertyStillImageFormatDescriptions: c_uint = 0x73746674;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyframerate?language=objc)
pub const kCMIOStreamPropertyFrameRate: c_uint = 0x6e667274;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyminimumframerate?language=objc)
pub const kCMIOStreamPropertyMinimumFrameRate: c_uint = 0x6d667274;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyframerates?language=objc)
pub const kCMIOStreamPropertyFrameRates: c_uint = 0x6e667223;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyframerateranges?language=objc)
pub const kCMIOStreamPropertyFrameRateRanges: c_uint = 0x66727267;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertynodatatimeoutinmsec?language=objc)
pub const kCMIOStreamPropertyNoDataTimeoutInMSec: c_uint = 0x706d6e31;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertydevicesynctimeoutinmsec?language=objc)
pub const kCMIOStreamPropertyDeviceSyncTimeoutInMSec: c_uint = 0x706d6e32;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertynodataeventcount?language=objc)
pub const kCMIOStreamPropertyNoDataEventCount: c_uint = 0x706d6e33;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyoutputbufferunderruncount?language=objc)
pub const kCMIOStreamPropertyOutputBufferUnderrunCount: c_uint = 0x706d6f75;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyoutputbufferrepeatcount?language=objc)
pub const kCMIOStreamPropertyOutputBufferRepeatCount: c_uint = 0x706d6f72;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyoutputbufferqueuesize?language=objc)
pub const kCMIOStreamPropertyOutputBufferQueueSize: c_uint = 0x706d6f71;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyoutputbuffersrequiredforstartup?language=objc)
pub const kCMIOStreamPropertyOutputBuffersRequiredForStartup: c_uint = 0x706d6f73;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyoutputbuffersneededforthrottledplayback?language=objc)
pub const kCMIOStreamPropertyOutputBuffersNeededForThrottledPlayback: c_uint = 0x6d696666;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyfirstoutputpresentationtimestamp?language=objc)
pub const kCMIOStreamPropertyFirstOutputPresentationTimeStamp: c_uint = 0x706f7074;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyendofdata?language=objc)
pub const kCMIOStreamPropertyEndOfData: c_uint = 0x706d6564;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyclock?language=objc)
pub const kCMIOStreamPropertyClock: c_uint = 0x706d636c;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertycanprocessdeckcommand?language=objc)
pub const kCMIOStreamPropertyCanProcessDeckCommand: c_uint = 0x70646364;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertydeck?language=objc)
pub const kCMIOStreamPropertyDeck: c_uint = 0x6465636b;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertydeckframenumber?language=objc)
pub const kCMIOStreamPropertyDeckFrameNumber: c_uint = 0x74636f64;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertydeckdropness?language=objc)
pub const kCMIOStreamPropertyDeckDropness: c_uint = 0x64726f70;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertydeckthreaded?language=objc)
pub const kCMIOStreamPropertyDeckThreaded: c_uint = 0x74687264;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertydecklocal?language=objc)
pub const kCMIOStreamPropertyDeckLocal: c_uint = 0x6c6f636c;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertydeckcueing?language=objc)
pub const kCMIOStreamPropertyDeckCueing: c_uint = 0x63756563;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyinitialpresentationtimestampforlinkedandsyncedaudio?language=objc)
pub const kCMIOStreamPropertyInitialPresentationTimeStampForLinkedAndSyncedAudio: c_uint =
    0x69706c73;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertyscheduledoutputnotificationproc?language=objc)
pub const kCMIOStreamPropertyScheduledOutputNotificationProc: c_uint = 0x736f6e70;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertypreferredformatdescription?language=objc)
pub const kCMIOStreamPropertyPreferredFormatDescription: c_uint = 0x70726664;
/// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/kcmiostreampropertypreferredframerate?language=objc)
pub const kCMIOStreamPropertyPreferredFrameRate: c_uint = 0x70726672;

extern "C-unwind" {
    /// Gets the CMSimpleQueue of the specified CMIOStream and registers a 'queue altered' callback function to be invoked when the stream alters the queue.
    /// The stream will only invoke the most recent callback function registered. To unregister the existing callback function, pass NULL as the queueAlteredProc.
    ///
    /// Parameter `streamID`: The CMIOStream to create the CMSimpleQueue.
    ///
    /// Parameter `queueAlteredProc`: Routine to be invoked when the stream alters the queue for insertions (input streams) and removals (output streams).
    /// Set this value to NULL to unregister any existing callbacks.
    ///
    /// Parameter `queueAlteredRefCon`: The client refCon to pass back when the queue altered proc is invoked.
    ///
    /// Parameter `queue`: The CMSimpleQueue to fill (for input streams) or to drain (for output streams).
    /// If the return value is non-NULL, the client will need to release the queue when done with it.
    ///
    /// Returns: An OSStatus indicating success or failure.
    ///
    /// # Safety
    ///
    /// - `queue_altered_proc` must be implemented correctly.
    /// - `queue_altered_ref_con` must be a valid pointer.
    /// - `queue` must be a valid pointer.
    #[cfg(all(feature = "CMIOHardwareObject", feature = "objc2-core-media"))]
    pub fn CMIOStreamCopyBufferQueue(
        stream_id: CMIOStreamID,
        queue_altered_proc: CMIODeviceStreamQueueAlteredProc,
        queue_altered_ref_con: *mut c_void,
        queue: *mut *mut CMSimpleQueue,
    ) -> OSStatus;
}

impl CMIOStreamDeck {
    /// Sends a generic deck play command to the specified CMIOStream, instructing its associated deck to play.
    ///
    /// Parameter `streamID`: The CMIOStream whose deck controls are being manipulated.
    ///
    /// Returns: An OSStatus indicating success or failure.
    #[doc(alias = "CMIOStreamDeckPlay")]
    #[cfg(feature = "CMIOHardwareObject")]
    #[inline]
    pub unsafe fn play(stream_id: CMIOStreamID) -> OSStatus {
        extern "C-unwind" {
            fn CMIOStreamDeckPlay(stream_id: CMIOStreamID) -> OSStatus;
        }
        unsafe { CMIOStreamDeckPlay(stream_id) }
    }

    /// Sends a generic deck stop command to the specified CMIOStream, instructing the associated deck to stop.
    ///
    /// Parameter `streamID`: The CMIOStream whose deck controls are being manipulated.
    ///
    /// Returns: An OSStatus indicating success or failure.
    #[doc(alias = "CMIOStreamDeckStop")]
    #[cfg(feature = "CMIOHardwareObject")]
    #[inline]
    pub unsafe fn stop(stream_id: CMIOStreamID) -> OSStatus {
        extern "C-unwind" {
            fn CMIOStreamDeckStop(stream_id: CMIOStreamID) -> OSStatus;
        }
        unsafe { CMIOStreamDeckStop(stream_id) }
    }

    /// Sends a generic deck jog command to the specified CMIOStream, instructing the associated deck to wind at the specified speed.
    ///
    /// Parameter `streamID`: The CMIOStream whose deck controls are being manipulated.
    ///
    /// Parameter `speed`: One of the CMIO Deck Shuttle Speed constants to specify the speed of movement of the associated deck.
    ///
    /// Returns: An OSStatus indicating success or failure.
    #[doc(alias = "CMIOStreamDeckJog")]
    #[cfg(feature = "CMIOHardwareObject")]
    #[inline]
    pub unsafe fn jog(stream_id: CMIOStreamID, speed: i32) -> OSStatus {
        extern "C-unwind" {
            fn CMIOStreamDeckJog(stream_id: CMIOStreamID, speed: i32) -> OSStatus;
        }
        unsafe { CMIOStreamDeckJog(stream_id, speed) }
    }

    /// Sends a generic deck cue-to command to the specified CMIOStream, instructing the associated deck to seek to a specific point.
    ///
    /// Parameter `streamID`: The CMIOStream whose deck controls are being manipulated.
    ///
    /// Parameter `frameNumber`: The desired frame number that the deck should cue to.
    ///
    /// Parameter `playOnCue`: An indicator that the deck should start playing when the cue-to point is reached.
    ///
    /// Returns: An OSStatus indicating success or failure.
    #[doc(alias = "CMIOStreamDeckCueTo")]
    #[cfg(feature = "CMIOHardwareObject")]
    #[inline]
    pub unsafe fn cue_to(
        stream_id: CMIOStreamID,
        frame_number: u64,
        play_on_cue: bool,
    ) -> OSStatus {
        extern "C-unwind" {
            fn CMIOStreamDeckCueTo(
                stream_id: CMIOStreamID,
                frame_number: u64,
                play_on_cue: Boolean,
            ) -> OSStatus;
        }
        unsafe { CMIOStreamDeckCueTo(stream_id, frame_number, play_on_cue as _) }
    }
}

extern "C-unwind" {
    /// Creates a clock object that can be vended by kCMIOStreamPropertyClock, and driven
    /// by CMIOStreamClockPostTimingEvent.
    ///
    /// Parameter `allocator`: Used to allocate the memory for the clock.
    ///
    /// Parameter `sourceIdentifier`: An opaque reference to the entity that is driving the clock. This value is used internally to determine if two CMIO Device Clocks have the same hardware source, and
    /// thus determine whether or not they will drift relative to one another. This parameter is used in the following way: if a device supports multiple active streams that
    /// are internally clocked by a common source, then instead of sharing one clock between each stream, a clock per stream can be created with the sourceIdentifier for each
    /// clock set to be the same value.
    ///
    /// Parameter `getTimeCallMinimumInterval`: If the clock is queried for its current time more often than this interval, an interpolated value will be returned.
    ///
    /// Parameter `numberOfEventsForRateSmoothing`: The number of events to use for rate smoothing; must be > 0.
    ///
    /// Parameter `numberOfAveragesForRateSmoothing`: The number of averages used for rate smoothing; if 0, the default smoothing algorithm is used.
    ///
    /// Parameter `clock`: Receives the created clock. When the clock is no longer needed, CMIOStreamClockInvalidate should be called, followed by CFRelease.
    ///
    /// Returns: An OSStatus indicating success or failure.
    ///
    /// # Safety
    ///
    /// - `source_identifier` must be a valid pointer.
    /// - `clock` must be a valid pointer.
    #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-media"))]
    pub fn CMIOStreamClockCreate(
        allocator: Option<&CFAllocator>,
        clock_name: Option<&CFString>,
        source_identifier: *const c_void,
        get_time_call_minimum_interval: CMTime,
        number_of_events_for_rate_smoothing: u32,
        number_of_averages_for_rate_smoothing: u32,
        clock: *mut *const CFType,
    ) -> OSStatus;
}

/// Used to drive a clock created by CMIOStreamClockCreate.
///
/// A CMIO Stream Clock is driven by events that occur on the stream. These events have a "stream time" value, and a host time value. For example, a camera might be set to
/// capture images at a rate of 29.97 frames per second. This rate is determined by the camera's clocking circuitry, which is not synchronized to the computer's host clock.
/// Every time a frame comes in, the CMIO device driver increments the event time by 1/29.97, and calls this routine with the host time for when that frame was captured.
///
/// Parameter `eventTime`: Time when the event occurred, on the stream's timeline.
///
/// Parameter `hostTime`: The host time at which the event occurred.
///
/// Parameter `resynchronize`: If true, indicates that a device has experienced a disruption in its data stream, and a new anchor point for measuring time is created.
///
/// Parameter `clock`: The CMIO Device Clock returned by CMIOStreamClockCreate.
///
/// Returns: An OSStatus indicating success or failure.
///
/// # Safety
///
/// - `clock` should be of the correct type.
/// - `clock` might not allow `None`.
#[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-media"))]
#[inline]
pub unsafe extern "C-unwind" fn CMIOStreamClockPostTimingEvent(
    event_time: CMTime,
    host_time: u64,
    resynchronize: bool,
    clock: Option<&CFType>,
) -> OSStatus {
    extern "C-unwind" {
        fn CMIOStreamClockPostTimingEvent(
            event_time: CMTime,
            host_time: u64,
            resynchronize: Boolean,
            clock: Option<&CFType>,
        ) -> OSStatus;
    }
    unsafe { CMIOStreamClockPostTimingEvent(event_time, host_time, resynchronize as _, clock) }
}

extern "C-unwind" {
    /// Indicates that a clock is no longer valid.
    ///
    /// Since a CMIO Stream Clock is a reference counted object, it may be retained by clients for longer than its valid (for example, the device is stopped). When a device is no
    /// longer going to be posting events for a clock, it needs to call this routine, followed by CFRelease. After this point, any clients that query the clock for the current
    /// time will get kCMTimeInvalid.
    ///
    /// Parameter `clock`: The CMIO Stream Clock returned by CMIOStreamClockCreate.
    ///
    /// Returns: An OSStatus indicating success or failure.
    ///
    /// # Safety
    ///
    /// - `clock` should be of the correct type.
    /// - `clock` might not allow `None`.
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CMIOStreamClockInvalidate(clock: Option<&CFType>) -> OSStatus;
}

extern "C-unwind" {
    /// Converts a host time value to the equivalent time on a device's clock.
    ///
    /// Parameter `hostTime`: The host time value to convert.
    ///
    /// Parameter `clock`: The device clock object returned by CMIOStreamClockCreate.
    ///
    /// Returns: The time on clock that is equivalent to the given hosttime.
    ///
    /// # Safety
    ///
    /// - `clock` should be of the correct type.
    /// - `clock` might not allow `None`.
    #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-media"))]
    pub fn CMIOStreamClockConvertHostTimeToDeviceTime(
        host_time: u64,
        clock: Option<&CFType>,
    ) -> CMTime;
}

/// Callback used to notify a client when a buffer was output.
///
///
///
/// Clients register a CMIOStreamScheduledOutputNotificationProc using kCMIOStreamPropertyScheduledOutputNotificationProc.
/// The procedure is called when the stream determines when a particular buffer was output.
///
/// Parameter `sequenceNumberOfBufferThatWasOutput`: The sequence number of the buffer that was output
///
/// Parameter `outputHostTime`: The host time that buffer was output
///
/// Parameter `scheduledOutputNotificationRefCon`: A pointer to client data, established when the proc was registered using kCMIOStreamPropertyScheduledOutputNotificationProc
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmiostreamscheduledoutputnotificationproc?language=objc)
pub type CMIOStreamScheduledOutputNotificationProc =
    Option<unsafe extern "C-unwind" fn(u64, u64, *mut c_void)>;

/// The payload for kCMIOStreamPropertyScheduledOutputNotificationProc.
/// Field: scheduledOutputNotificationProc
/// The procedure to call when a buffer was output
/// Field: scheduledOutputNotificationRefCon
/// A pointer to client data that will be passed to the scheduledOutputNotificationProc
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmiostreamscheduledoutputnotificationprocandrefcon?language=objc)
#[repr(C, packed(4))]
#[allow(unpredictable_function_pointer_comparisons)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CMIOStreamScheduledOutputNotificationProcAndRefCon {
    pub scheduledOutputNotificationProc: CMIOStreamScheduledOutputNotificationProc,
    pub scheduledOutputNotificationRefCon: *mut c_void,
}

unsafe impl Encode for CMIOStreamScheduledOutputNotificationProcAndRefCon {
    const ENCODING: Encoding = Encoding::Struct(
        "CMIOStreamScheduledOutputNotificationProcAndRefCon",
        &[
            <CMIOStreamScheduledOutputNotificationProc>::ENCODING,
            <*mut c_void>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for CMIOStreamScheduledOutputNotificationProcAndRefCon {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg(feature = "CMIOHardwareObject")]
    #[deprecated = "renamed to `CMIOStreamDeck::play`"]
    pub fn CMIOStreamDeckPlay(stream_id: CMIOStreamID) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CMIOHardwareObject")]
    #[deprecated = "renamed to `CMIOStreamDeck::stop`"]
    pub fn CMIOStreamDeckStop(stream_id: CMIOStreamID) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "CMIOHardwareObject")]
    #[deprecated = "renamed to `CMIOStreamDeck::jog`"]
    pub fn CMIOStreamDeckJog(stream_id: CMIOStreamID, speed: i32) -> OSStatus;
}

#[cfg(feature = "CMIOHardwareObject")]
#[deprecated = "renamed to `CMIOStreamDeck::cue_to`"]
#[inline]
pub unsafe extern "C-unwind" fn CMIOStreamDeckCueTo(
    stream_id: CMIOStreamID,
    frame_number: u64,
    play_on_cue: bool,
) -> OSStatus {
    extern "C-unwind" {
        fn CMIOStreamDeckCueTo(
            stream_id: CMIOStreamID,
            frame_number: u64,
            play_on_cue: Boolean,
        ) -> OSStatus;
    }
    unsafe { CMIOStreamDeckCueTo(stream_id, frame_number, play_on_cue as _) }
}
