//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

/// CMIOExtensionProperty string constants
///
/// The CMIOExtensionProperty string constants indicates a property key.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionproperty?language=objc)
// NS_TYPED_ENUM
pub type CMIOExtensionProperty = NSString;

extern "C" {
    /// The key for the provider property name.
    ///
    /// The property state for CMIOExtensionPropertyProviderName is a string with a readonly attribute.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertyprovidername?language=objc)
    pub static CMIOExtensionPropertyProviderName: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the provider property manufacturer.
    ///
    /// The property state for CMIOExtensionPropertyProviderManufacturer is a string with a readonly attribute.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertyprovidermanufacturer?language=objc)
    pub static CMIOExtensionPropertyProviderManufacturer: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the device property model.
    ///
    /// The property state for CMIOExtensionPropertyDeviceModel is a string with a readonly attribute.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertydevicemodel?language=objc)
    pub static CMIOExtensionPropertyDeviceModel: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the device property IsSuspended, this key indicates if the device is currently suspended.
    ///
    /// For example, the user might close the clamshell of the device. While suspended the device still responds
    /// to all requests just as if it were active, but the stream(s) will not provide any data.
    /// The property state for CMIOExtensionPropertyDeviceIsSuspended is a number as boolean with a readonly attribute.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertydeviceissuspended?language=objc)
    pub static CMIOExtensionPropertyDeviceIsSuspended: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the device property transport type.
    ///
    /// The property state for CMIOExtensionPropertyDeviceTransportType is a number whose value correspond to the audio transport type ( kIOAudioDeviceTransportType... ) defined in
    /// <IOKit
    /// /audio/IOAudioTypes.h> and with a readonly attribute.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertydevicetransporttype?language=objc)
    pub static CMIOExtensionPropertyDeviceTransportType: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the device property linked CoreAudio device UID.
    ///
    /// The property state for CMIOExtensionPropertyDeviceLinkedCoreAudioDeviceUID is a string with a readonly attribute.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertydevicelinkedcoreaudiodeviceuid?language=objc)
    pub static CMIOExtensionPropertyDeviceLinkedCoreAudioDeviceUID: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the device property that specifies if a device can be the default input device.
    ///
    /// The property state for CMIOExtensionPropertyDeviceCanBeDefaultInputDevice is a number representing a boolean value.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertydevicecanbedefaultinputdevice?language=objc)
    pub static CMIOExtensionPropertyDeviceCanBeDefaultInputDevice: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the device property that specifies if a device can be the default output device.
    ///
    /// The property state for CMIOExtensionPropertyDeviceCanBeDefaultOutputDevice is a number representing a boolean value.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertydevicecanbedefaultoutputdevice?language=objc)
    pub static CMIOExtensionPropertyDeviceCanBeDefaultOutputDevice: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the readonly device property indicating the number of frames of latency in the CMIOExtensionDevice.
    ///
    /// The property state for CMIOExtensionPropertyDeviceLatency is a number containing the number of frames of latency in the CMIOExtensionDevice. Note that input and output latency may differ. Further, the CMIOExtensionDevice's CMIOExtensionStreams may have additional latency so they should be queried as well. If both the device and the stream say they have latency, then the total latency for the stream is the device latency summed with the stream latency. This property translates to the kCMIODevicePropertyLatency property.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertydevicelatency?language=objc)
    pub static CMIOExtensionPropertyDeviceLatency: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the stream property active format index.
    ///
    /// The property state for CMIOExtensionPropertyStreamActiveFormatIndex is a number.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertystreamactiveformatindex?language=objc)
    pub static CMIOExtensionPropertyStreamActiveFormatIndex: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the stream property frame duration.
    ///
    /// The property state for CMIOExtensionPropertyStreamFrameDuration needs to be a dictionary representing a CMTime struct that is consistent with the frame duration specification provided by the current active format.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertystreamframeduration?language=objc)
    pub static CMIOExtensionPropertyStreamFrameDuration: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the stream property maximum frame duration.
    ///
    /// The property state for CMIOExtensionPropertyStreamMaxFrameDuration needs to be a dictionary representing a CMTime struct.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertystreammaxframeduration?language=objc)
    pub static CMIOExtensionPropertyStreamMaxFrameDuration: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the sink stream property buffer queue size.
    ///
    /// The property state for CMIOExtensionPropertyStreamSinkBufferQueueSize is a number. This property translates to the kCMIOStreamPropertyOutputBufferQueueSize property.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertystreamsinkbufferqueuesize?language=objc)
    pub static CMIOExtensionPropertyStreamSinkBufferQueueSize: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the sink stream property for number of buffers required for startup.
    ///
    /// The property state for CMIOExtensionPropertyStreamSinkBuffersRequiredForStartup is a number. This property translates to the kCMIOStreamPropertyOutputBuffersRequiredForStartup property.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertystreamsinkbuffersrequiredforstartup?language=objc)
    pub static CMIOExtensionPropertyStreamSinkBuffersRequiredForStartup:
        &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the sink stream property buffer underrun count.
    ///
    /// A number that is incremented every time a stream's buffers are not being serviced fast enough.
    /// The property state for CMIOExtensionPropertyStreamSinkBufferUnderrunCount is a number with a readonly attribute. This property translates to the kCMIOStreamPropertyOutputBufferUnderrunCount property.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertystreamsinkbufferunderruncount?language=objc)
    pub static CMIOExtensionPropertyStreamSinkBufferUnderrunCount: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the sink stream property end of data.
    ///
    /// The property state for CMIOExtensionPropertyStreamSinkEndOfData is a number, 1 means that the stream has reached the end and a value of 0 means that more data is (or will be) available. This property translates to the kCMIOStreamPropertyEndOfData property.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertystreamsinkendofdata?language=objc)
    pub static CMIOExtensionPropertyStreamSinkEndOfData: &'static CMIOExtensionProperty;
}

extern "C" {
    /// The key for the readonly stream property indicating the number of frames of latency in the CMIOExtensionStream.
    ///
    /// The property state for CMIOExtensionPropertyStreamLatency is a number containing the number of frames of latency in the CMIOExtensionStream. Note that the owning CMIOExtensionDevice may have additional latency so it should be queried as well. If both the device and the stream say they have latency, then the total latency for the stream is the device latency summed with the stream latency. This property translates to the kCMIOStreamPropertyLatency property.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertystreamlatency?language=objc)
    pub static CMIOExtensionPropertyStreamLatency: &'static CMIOExtensionProperty;
}

extern_class!(
    /// A CMIOExtensionPropertyAttributes describes attributes of a property's value.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertyattributes?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CMIOExtensionPropertyAttributes<ObjectType: ?Sized = AnyObject>;
);

impl<ObjectType: ?Sized + Message> CMIOExtensionPropertyAttributes<ObjectType> {
    /// Unchecked conversion of the generic parameter.
    ///
    /// # Safety
    ///
    /// The generic must be valid to reinterpret as the given type.
    #[inline]
    pub unsafe fn cast_unchecked<NewObjectType: ?Sized + Message>(
        &self,
    ) -> &CMIOExtensionPropertyAttributes<NewObjectType> {
        unsafe { &*((self as *const Self).cast()) }
    }
}

extern_conformance!(
    unsafe impl<ObjectType: ?Sized + NSCoding> NSCoding
        for CMIOExtensionPropertyAttributes<ObjectType>
    {
    }
);

extern_conformance!(
    unsafe impl<ObjectType: ?Sized> NSCopying for CMIOExtensionPropertyAttributes<ObjectType> {}
);

unsafe impl<ObjectType: ?Sized + Message> CopyingHelper
    for CMIOExtensionPropertyAttributes<ObjectType>
{
    type Result = Self;
}

extern_conformance!(
    unsafe impl<ObjectType: ?Sized> NSObjectProtocol for CMIOExtensionPropertyAttributes<ObjectType> {}
);

extern_conformance!(
    unsafe impl<ObjectType: ?Sized + NSSecureCoding> NSSecureCoding
        for CMIOExtensionPropertyAttributes<ObjectType>
    {
    }
);

impl<ObjectType: Message> CMIOExtensionPropertyAttributes<ObjectType> {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns a property attributes instance.
        ///
        /// Parameter `minValue`: The minimum value of the property.
        ///
        /// Parameter `maxValue`: The maximum value of the property.
        ///
        /// Parameter `validValues`: The array of valid values.
        ///
        /// Parameter `readOnly`: A readOnly flag.
        ///
        /// Returns: A CMIOExtensionPropertyAttributes instance that describes the attributes of a property.
        ///
        /// Property attributes may contain a minValue in which case the property is bounded by a minimum value.
        /// Property attributes may contain a maxValue in which case the property is bounded by a maximum value.
        /// Property attributes may contain both minValue and maxValue in which case the property is bounded within a range.
        /// Property attributes may contain a validValues in which case the property is discrete and can only have a certain set of value.
        /// If a property does not have a minValue/maxValue/validValues attributes, the property can have any value.
        #[unsafe(method(propertyAttributesWithMinValue:maxValue:validValues:readOnly:))]
        #[unsafe(method_family = none)]
        pub unsafe fn propertyAttributesWithMinValue_maxValue_validValues_readOnly(
            min_value: Option<&ObjectType>,
            max_value: Option<&ObjectType>,
            valid_values: Option<&NSArray<ObjectType>>,
            read_only: bool,
        ) -> Retained<Self>;

        /// Initialize a property attributes instance.
        ///
        /// Parameter `minValue`: The minimum value of the property.
        ///
        /// Parameter `maxValue`: The maximum value of the property.
        ///
        /// Parameter `validValues`: The array of valid values.
        ///
        /// Parameter `readOnly`: A readOnly flag.
        ///
        /// Returns: A CMIOExtensionPropertyAttributes instance that describes the attributes of a property.
        ///
        /// Property attributes may contain a minValue in which case the property is bounded by a minimum value.
        /// Property attributes may contain a maxValue in which case the property is bounded by a maximum value.
        /// Property attributes may contain both minValue and maxValue in which case the property is bounded within a range.
        /// Property attributes may contain a validValues in which case the property is discrete and can only have a certain set of value.
        /// If a property does not have a minValue/maxValue/validValues attributes, the property can have any value.
        #[unsafe(method(initWithMinValue:maxValue:validValues:readOnly:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithMinValue_maxValue_validValues_readOnly(
            this: Allocated<Self>,
            min_value: Option<&ObjectType>,
            max_value: Option<&ObjectType>,
            valid_values: Option<&NSArray<ObjectType>>,
            read_only: bool,
        ) -> Retained<Self>;

        /// The class property representing a readOnly property attribute with no minValue/maxValue/validValues.
        #[unsafe(method(readOnlyPropertyAttribute))]
        #[unsafe(method_family = none)]
        pub unsafe fn readOnlyPropertyAttribute() -> Retained<CMIOExtensionPropertyAttributes>;

        /// The minimum value of a property.
        #[unsafe(method(minValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn minValue(&self) -> Option<Retained<ObjectType>>;

        /// The maximum value of a property.
        #[unsafe(method(maxValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxValue(&self) -> Option<Retained<ObjectType>>;

        /// An array of valid values.
        #[unsafe(method(validValues))]
        #[unsafe(method_family = none)]
        pub unsafe fn validValues(&self) -> Option<Retained<NSArray<ObjectType>>>;

        /// The readOnly flag attribute.
        #[unsafe(method(isReadOnly))]
        #[unsafe(method_family = none)]
        pub unsafe fn isReadOnly(&self) -> bool;
    );
}

extern_class!(
    /// A CMIOExtensionPropertyState describes a property state.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionpropertystate?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CMIOExtensionPropertyState<ObjectType: ?Sized = AnyObject>;
);

impl<ObjectType: ?Sized + Message> CMIOExtensionPropertyState<ObjectType> {
    /// Unchecked conversion of the generic parameter.
    ///
    /// # Safety
    ///
    /// The generic must be valid to reinterpret as the given type.
    #[inline]
    pub unsafe fn cast_unchecked<NewObjectType: ?Sized + Message>(
        &self,
    ) -> &CMIOExtensionPropertyState<NewObjectType> {
        unsafe { &*((self as *const Self).cast()) }
    }
}

extern_conformance!(
    unsafe impl<ObjectType: ?Sized + NSCoding> NSCoding for CMIOExtensionPropertyState<ObjectType> {}
);

extern_conformance!(
    unsafe impl<ObjectType: ?Sized> NSCopying for CMIOExtensionPropertyState<ObjectType> {}
);

unsafe impl<ObjectType: ?Sized + Message> CopyingHelper for CMIOExtensionPropertyState<ObjectType> {
    type Result = Self;
}

extern_conformance!(
    unsafe impl<ObjectType: ?Sized> NSObjectProtocol for CMIOExtensionPropertyState<ObjectType> {}
);

extern_conformance!(
    unsafe impl<ObjectType: ?Sized + NSSecureCoding> NSSecureCoding
        for CMIOExtensionPropertyState<ObjectType>
    {
    }
);

impl<ObjectType: Message> CMIOExtensionPropertyState<ObjectType> {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns a property state instance.
        ///
        /// Parameter `value`: The value associated with a property state.
        ///
        /// Returns: A CMIOExtensionPropertyState instance with a nil attributes.
        #[unsafe(method(propertyStateWithValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn propertyStateWithValue(value: Option<&ObjectType>) -> Retained<Self>;

        /// Returns a property state instance.
        ///
        /// Parameter `value`: The value associated with a property state.
        ///
        /// Parameter `attributes`: The property attributes associated with a property state.
        ///
        /// Returns: A CMIOExtensionPropertyState instance.
        ///
        /// A nil property attributes defaults to a read/write property that doesn't have a minValue/maxValue/validValues.
        /// The supported value types are NSDictionary/NSArray/NSString/NSData/NSNumber.
        #[unsafe(method(propertyStateWithValue:attributes:))]
        #[unsafe(method_family = none)]
        pub unsafe fn propertyStateWithValue_attributes(
            value: Option<&ObjectType>,
            attributes: Option<&CMIOExtensionPropertyAttributes<ObjectType>>,
        ) -> Retained<Self>;

        /// Initialize a property state instance.
        ///
        /// Parameter `value`: The value associated with a property state.
        ///
        /// Returns: A CMIOExtensionPropertyState instance.
        ///
        /// A nil property attributes defaults to a read/write property that doesn't have a minValue/maxValue/validValues.
        /// The supported value types are NSDictionary/NSArray/NSString/NSData/NSNumber.
        #[unsafe(method(initWithValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithValue(
            this: Allocated<Self>,
            value: Option<&ObjectType>,
        ) -> Retained<Self>;

        /// Initialize a property state instance.
        ///
        /// Parameter `value`: The value associated with a property state.
        ///
        /// Parameter `attributes`: The property attributes associated with a property state.
        ///
        /// Returns: A CMIOExtensionPropertyState instance.
        ///
        /// A nil property attributes defaults to a read/write property that doesn't have a minValue/maxValue/validValues.
        /// The supported value types are NSDictionary/NSArray/NSString/NSData/NSNumber.
        #[unsafe(method(initWithValue:attributes:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithValue_attributes(
            this: Allocated<Self>,
            value: Option<&ObjectType>,
            attributes: Option<&CMIOExtensionPropertyAttributes<ObjectType>>,
        ) -> Retained<Self>;

        /// The value of the property.
        #[unsafe(method(value))]
        #[unsafe(method_family = none)]
        pub unsafe fn value(&self) -> Option<Retained<ObjectType>>;

        /// The property attributes of the property.
        #[unsafe(method(attributes))]
        #[unsafe(method_family = none)]
        pub unsafe fn attributes(
            &self,
        ) -> Option<Retained<CMIOExtensionPropertyAttributes<ObjectType>>>;
    );
}

extern_class!(
    /// A CMIOExtensionStreamCustomClockProperties describes the parameters used to create a custom clock on the host side (as opposed to the stream using hosttime or a linked Core Audio clock.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionstreamcustomclockconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CMIOExtensionStreamCustomClockConfiguration;
);

extern_conformance!(
    unsafe impl NSCoding for CMIOExtensionStreamCustomClockConfiguration {}
);

extern_conformance!(
    unsafe impl NSCopying for CMIOExtensionStreamCustomClockConfiguration {}
);

unsafe impl CopyingHelper for CMIOExtensionStreamCustomClockConfiguration {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for CMIOExtensionStreamCustomClockConfiguration {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for CMIOExtensionStreamCustomClockConfiguration {}
);

impl CMIOExtensionStreamCustomClockConfiguration {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "objc2-core-media")]
        /// Return a custom clock configuration instance.
        ///
        /// Parameter `clockName`: The name of the clock being specified.
        ///
        /// Parameter `sourceIdentifier`: An unique identifier that is used to indicate the entity that is driving the clock. This value is used internally to determine if two custom clocks have the same hardware source, and thus determine whether or not they will drift relative to one another. This parameter is used in the following way: if a device supports multiple active streams that are internally clocked by a common source, then instead of sharing one clock between each stream, a clock per stream can be configured with the sourceIdentifier for each clock set to be the same value.
        ///
        /// Parameter `getTimeCallMinimumInterval`: If the clock is queried for its current time more often than this interval, an interpolated value will be returned.
        ///
        /// Parameter `numberOfEventsForRateSmoothing`: The number of events to use for rate smoothing; must be > 0.
        ///
        /// Parameter `numberOfAveragesForRateSmoothing`: The number of averages used for rate smoothing; if 0, the default smoothing algorithm is used.
        ///
        /// Returns: A CMIOExtensionStreamCustomClockConfiguration instance.
        #[unsafe(method(customClockConfigurationWithClockName:sourceIdentifier:getTimeCallMinimumInterval:numberOfEventsForRateSmoothing:numberOfAveragesForRateSmoothing:))]
        #[unsafe(method_family = none)]
        pub unsafe fn customClockConfigurationWithClockName_sourceIdentifier_getTimeCallMinimumInterval_numberOfEventsForRateSmoothing_numberOfAveragesForRateSmoothing(
            clock_name: &NSString,
            source_identifier: &NSUUID,
            get_time_call_minimum_interval: CMTime,
            number_of_events_for_rate_smoothing: u32,
            number_of_averages_for_rate_smoothing: u32,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-media")]
        /// Initialize a custom clock configuration instance.
        ///
        /// Parameter `clockName`: The name of the clock being specified.
        ///
        /// Parameter `sourceIdentifier`: An unique identifier that is used to indicate the entity that is driving the clock. This value is used internally to determine if two custom clocks have the same hardware source, and thus determine whether or not they will drift relative to one another. This parameter is used in the following way: if a device supports multiple active streams that are internally clocked by a common source, then instead of sharing one clock between each stream, a clock per stream can be configured with the sourceIdentifier for each clock set to be the same value.
        ///
        /// Parameter `getTimeCallMinimumInterval`: If the clock is queried for its current time more often than this interval, an interpolated value will be returned.
        ///
        /// Parameter `numberOfEventsForRateSmoothing`: The number of events to use for rate smoothing; must be > 0.
        ///
        /// Parameter `numberOfAveragesForRateSmoothing`: The number of averages used for rate smoothing; if 0, the default smoothing algorithm is used.
        ///
        /// Returns: A CMIOExtensionStreamCustomClockConfiguration instance.
        #[unsafe(method(initWithClockName:sourceIdentifier:getTimeCallMinimumInterval:numberOfEventsForRateSmoothing:numberOfAveragesForRateSmoothing:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithClockName_sourceIdentifier_getTimeCallMinimumInterval_numberOfEventsForRateSmoothing_numberOfAveragesForRateSmoothing(
            this: Allocated<Self>,
            clock_name: &NSString,
            source_identifier: &NSUUID,
            get_time_call_minimum_interval: CMTime,
            number_of_events_for_rate_smoothing: u32,
            number_of_averages_for_rate_smoothing: u32,
        ) -> Retained<Self>;

        /// The name of the clock.
        #[unsafe(method(clockName))]
        #[unsafe(method_family = none)]
        pub unsafe fn clockName(&self) -> Retained<NSString>;

        /// The identifier of the entity driving the clock.
        ///
        /// An unique identifier that is used to indicate the entity that is driving the clock. This value is used internally to determine if two custom clocks have the same hardware source, and thus determine whether or not they will drift relative to one another. This parameter is used in the following way: if a device supports multiple active streams that are internally clocked by a common source, then instead of sharing one clock between each stream, a clock per stream can be configured with the sourceIdentifier for each clock set to be the same value.
        #[unsafe(method(sourceIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn sourceIdentifier(&self) -> Retained<NSUUID>;

        #[cfg(feature = "objc2-core-media")]
        /// If the clock is queried for its current time more often than this interval, an interpolated value will be returned.
        #[unsafe(method(getTimeCallMinimumInterval))]
        #[unsafe(method_family = none)]
        pub unsafe fn getTimeCallMinimumInterval(&self) -> CMTime;

        /// The number of events to use for rate smoothing; will be > 0.
        #[unsafe(method(numberOfEventsForRateSmoothing))]
        #[unsafe(method_family = none)]
        pub unsafe fn numberOfEventsForRateSmoothing(&self) -> u32;

        /// The number of averages used for rate smoothing; 0 indicates that the default smoothing algorithm is used.
        #[unsafe(method(numberOfAveragesForRateSmoothing))]
        #[unsafe(method_family = none)]
        pub unsafe fn numberOfAveragesForRateSmoothing(&self) -> u32;
    );
}

extern_class!(
    /// A CMIOExtensionStreamFormat describes a stream format.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionstreamformat?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CMIOExtensionStreamFormat;
);

extern_conformance!(
    unsafe impl NSCoding for CMIOExtensionStreamFormat {}
);

extern_conformance!(
    unsafe impl NSCopying for CMIOExtensionStreamFormat {}
);

unsafe impl CopyingHelper for CMIOExtensionStreamFormat {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for CMIOExtensionStreamFormat {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for CMIOExtensionStreamFormat {}
);

impl CMIOExtensionStreamFormat {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "objc2-core-media")]
        /// Returns a stream format instance.
        ///
        /// Parameter `formatDescription`: The format description of the samples delivered by the stream.
        ///
        /// Parameter `maxFrameDuration`: The maximum frame duration.
        ///
        /// Parameter `minFrameDuration`: The minimum frame duration.
        ///
        /// Parameter `validFrameDurations`: The list of valid CMTime as dictionaries. If nil the full range between min and max is valid. The CMTime in dictionary format are made with CMTimeCopyAsDictionary.
        ///
        /// Returns: A CMIOExtensionStreamFormat instance that describes the stream format.
        ///
        /// A frame duration is the reciprocal of a frame rate.
        /// If a CMIOExtensionStreamFormat's validFrameDurations property is not nil and not empty, the frame duration are discrete and can only have a certain set of value. Current frame duration and maximum frame duration can be changed with the properties CMIOExtensionPropertyStreamFrameDuration and CMIOExtensionPropertyStreamMaxFrameDuration.
        #[unsafe(method(streamFormatWithFormatDescription:maxFrameDuration:minFrameDuration:validFrameDurations:))]
        #[unsafe(method_family = none)]
        pub unsafe fn streamFormatWithFormatDescription_maxFrameDuration_minFrameDuration_validFrameDurations(
            format_description: &CMFormatDescription,
            max_frame_duration: CMTime,
            min_frame_duration: CMTime,
            valid_frame_durations: Option<&NSArray<NSDictionary>>,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-media")]
        /// Initialize a stream format instance.
        ///
        /// Parameter `formatDescription`: The format description of the samples delivered by the stream.
        ///
        /// Parameter `maxFrameDuration`: The maximum frame duration.
        ///
        /// Parameter `minFrameDuration`: The minimum frame duration.
        ///
        /// Parameter `validFrameDurations`: The list of valid CMTime as dictionaries if nil the full range between min and max is valid. The CMTime in dictionary format are made with CMTimeCopyAsDictionary.
        ///
        /// Returns: A CMIOExtensionStreamFormat instance that describes the stream format.
        ///
        /// A frame duration is the reciprocal of a frame rate.
        /// If a CMIOExtensionStreamFormat's validFrameDurations property is not nil and not empty, the frame duration are discrete and can only have a certain set of value. Current frame duration and maximum frame duration can be changed with the properties CMIOExtensionPropertyStreamFrameDuration and CMIOExtensionPropertyStreamMaxFrameDuration.
        #[unsafe(method(initWithFormatDescription:maxFrameDuration:minFrameDuration:validFrameDurations:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFormatDescription_maxFrameDuration_minFrameDuration_validFrameDurations(
            this: Allocated<Self>,
            format_description: &CMFormatDescription,
            max_frame_duration: CMTime,
            min_frame_duration: CMTime,
            valid_frame_durations: Option<&NSArray<NSDictionary>>,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-media")]
        /// The format description of the samples delivered by the stream.
        #[unsafe(method(formatDescription))]
        #[unsafe(method_family = none)]
        pub unsafe fn formatDescription(&self) -> Retained<CMFormatDescription>;

        #[cfg(feature = "objc2-core-media")]
        /// The minimum frame duration (AKA maximum frame rate).
        #[unsafe(method(minFrameDuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn minFrameDuration(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        /// The maximum frame duration (AKA minimum frame rate).
        #[unsafe(method(maxFrameDuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxFrameDuration(&self) -> CMTime;

        /// The valid frame durations as an array of CMTime as dictionaries. The CMTime in dictionary format are made with CMTimeCopyAsDictionary.
        #[unsafe(method(validFrameDurations))]
        #[unsafe(method_family = none)]
        pub unsafe fn validFrameDurations(&self) -> Option<Retained<NSArray<NSDictionary>>>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionscheduledoutput?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CMIOExtensionScheduledOutput;
);

extern_conformance!(
    unsafe impl NSCoding for CMIOExtensionScheduledOutput {}
);

extern_conformance!(
    unsafe impl NSCopying for CMIOExtensionScheduledOutput {}
);

unsafe impl CopyingHelper for CMIOExtensionScheduledOutput {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for CMIOExtensionScheduledOutput {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for CMIOExtensionScheduledOutput {}
);

impl CMIOExtensionScheduledOutput {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Return a stream scheduled output instance.
        ///
        /// Parameter `sequenceNumber`: The buffer sequence number that was output.
        ///
        /// Parameter `hostTimeInNanoseconds`: The host time in nanoseconds when the buffer was output.
        ///
        /// Returns: A CMIOExtensionScheduledOutput instance that describes the state of the stream.
        #[unsafe(method(scheduledOutputWithSequenceNumber:hostTimeInNanoseconds:))]
        #[unsafe(method_family = none)]
        pub unsafe fn scheduledOutputWithSequenceNumber_hostTimeInNanoseconds(
            sequence_number: u64,
            host_time_in_nanoseconds: u64,
        ) -> Retained<Self>;

        /// Initialize a stream scheduled output instance.
        ///
        /// Parameter `sequenceNumber`: The buffer sequence number that was output.
        ///
        /// Parameter `hostTimeInNanoseconds`: The host time in nanoseconds when the buffer was output.
        ///
        /// Returns: A CMIOExtensionScheduledOutput instance that describes the state of the stream.
        #[unsafe(method(initWithSequenceNumber:hostTimeInNanoseconds:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithSequenceNumber_hostTimeInNanoseconds(
            this: Allocated<Self>,
            sequence_number: u64,
            host_time_in_nanoseconds: u64,
        ) -> Retained<Self>;

        /// The buffer sequence number that was output.
        #[unsafe(method(sequenceNumber))]
        #[unsafe(method_family = none)]
        pub unsafe fn sequenceNumber(&self) -> u64;

        /// The host time in nanoseconds when the buffer was output.
        #[unsafe(method(hostTimeInNanoseconds))]
        #[unsafe(method_family = none)]
        pub unsafe fn hostTimeInNanoseconds(&self) -> u64;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coremediaio/cmioextensionclient?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CMIOExtensionClient;
);

extern_conformance!(
    unsafe impl NSCopying for CMIOExtensionClient {}
);

unsafe impl CopyingHelper for CMIOExtensionClient {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for CMIOExtensionClient {}
);

impl CMIOExtensionClient {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// The client unique identifier.
        #[unsafe(method(clientID))]
        #[unsafe(method_family = none)]
        pub unsafe fn clientID(&self) -> Retained<NSUUID>;

        /// The client's signing identifier.
        #[unsafe(method(signingID))]
        #[unsafe(method_family = none)]
        pub unsafe fn signingID(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "libc")]
        /// The pid of the client application.
        #[unsafe(method(pid))]
        #[unsafe(method_family = none)]
        pub unsafe fn pid(&self) -> libc::pid_t;
    );
}
