//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nspdfpaneloptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSPDFPanelOptions(pub NSInteger);
bitflags::bitflags! {
    impl NSPDFPanelOptions: NSInteger {
        #[doc(alias = "NSPDFPanelShowsPaperSize")]
        const ShowsPaperSize = 1<<2;
        #[doc(alias = "NSPDFPanelShowsOrientation")]
        const ShowsOrientation = 1<<3;
        #[doc(alias = "NSPDFPanelRequestsParentDirectory")]
        const RequestsParentDirectory = 1<<24;
    }
}

unsafe impl Encode for NSPDFPanelOptions {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for NSPDFPanelOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nspdfpanel?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSPDFPanel;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for NSPDFPanel {}
);

impl NSPDFPanel {
    extern_methods!(
        #[unsafe(method(panel))]
        #[unsafe(method_family = none)]
        pub unsafe fn panel(mtm: MainThreadMarker) -> Retained<NSPDFPanel>;

        #[cfg(all(feature = "NSResponder", feature = "NSViewController"))]
        #[unsafe(method(accessoryController))]
        #[unsafe(method_family = none)]
        pub unsafe fn accessoryController(&self) -> Option<Retained<NSViewController>>;

        #[cfg(all(feature = "NSResponder", feature = "NSViewController"))]
        /// Setter for [`accessoryController`][Self::accessoryController].
        #[unsafe(method(setAccessoryController:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAccessoryController(
            &self,
            accessory_controller: Option<&NSViewController>,
        );

        #[unsafe(method(options))]
        #[unsafe(method_family = none)]
        pub unsafe fn options(&self) -> NSPDFPanelOptions;

        /// Setter for [`options`][Self::options].
        #[unsafe(method(setOptions:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOptions(&self, options: NSPDFPanelOptions);

        #[unsafe(method(defaultFileName))]
        #[unsafe(method_family = none)]
        pub unsafe fn defaultFileName(&self) -> Retained<NSString>;

        /// Setter for [`defaultFileName`][Self::defaultFileName].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setDefaultFileName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDefaultFileName(&self, default_file_name: &NSString);

        #[cfg(all(
            feature = "NSPDFInfo",
            feature = "NSResponder",
            feature = "NSWindow",
            feature = "block2"
        ))]
        #[unsafe(method(beginSheetWithPDFInfo:modalForWindow:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn beginSheetWithPDFInfo_modalForWindow_completionHandler(
            &self,
            pdf_info: &NSPDFInfo,
            doc_window: Option<&NSWindow>,
            completion_handler: &block2::DynBlock<dyn Fn(NSInteger)>,
        );
    );
}

/// Methods declared on superclass `NSObject`.
impl NSPDFPanel {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}
