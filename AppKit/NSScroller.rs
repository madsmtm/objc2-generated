//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsusablescrollerparts?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSUsableScrollerParts(pub NSUInteger);
impl NSUsableScrollerParts {
    #[doc(alias = "NSNoScrollerParts")]
    pub const NoScrollerParts: Self = Self(0);
    #[doc(alias = "NSOnlyScrollerArrows")]
    #[deprecated = "Scroller arrows are not used anymore."]
    pub const OnlyScrollerArrows: Self = Self(1);
    #[doc(alias = "NSAllScrollerParts")]
    pub const AllScrollerParts: Self = Self(2);
}

unsafe impl Encode for NSUsableScrollerParts {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSUsableScrollerParts {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsscrollerpart?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSScrollerPart(pub NSUInteger);
impl NSScrollerPart {
    #[doc(alias = "NSScrollerNoPart")]
    pub const NoPart: Self = Self(0);
    #[doc(alias = "NSScrollerDecrementPage")]
    pub const DecrementPage: Self = Self(1);
    #[doc(alias = "NSScrollerKnob")]
    pub const Knob: Self = Self(2);
    #[doc(alias = "NSScrollerIncrementPage")]
    pub const IncrementPage: Self = Self(3);
    #[doc(alias = "NSScrollerDecrementLine")]
    #[deprecated = "Scroller arrows are not used anymore."]
    pub const DecrementLine: Self = Self(4);
    #[doc(alias = "NSScrollerIncrementLine")]
    #[deprecated = "Scroller arrows are not used anymore."]
    pub const IncrementLine: Self = Self(5);
    #[doc(alias = "NSScrollerKnobSlot")]
    pub const KnobSlot: Self = Self(6);
}

unsafe impl Encode for NSScrollerPart {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSScrollerPart {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsscrollerstyle?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSScrollerStyle(pub NSInteger);
impl NSScrollerStyle {
    #[doc(alias = "NSScrollerStyleLegacy")]
    pub const Legacy: Self = Self(0);
    #[doc(alias = "NSScrollerStyleOverlay")]
    pub const Overlay: Self = Self(1);
}

unsafe impl Encode for NSScrollerStyle {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for NSScrollerStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsscrollerknobstyle?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSScrollerKnobStyle(pub NSInteger);
impl NSScrollerKnobStyle {
    #[doc(alias = "NSScrollerKnobStyleDefault")]
    pub const Default: Self = Self(0);
    #[doc(alias = "NSScrollerKnobStyleDark")]
    pub const Dark: Self = Self(1);
    #[doc(alias = "NSScrollerKnobStyleLight")]
    pub const Light: Self = Self(2);
}

unsafe impl Encode for NSScrollerKnobStyle {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for NSScrollerKnobStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsscroller?language=objc)
    #[unsafe(super(NSControl, NSView, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "NSControl", feature = "NSResponder", feature = "NSView"))]
    pub struct NSScroller;
);

#[cfg(all(
    feature = "NSAccessibilityProtocols",
    feature = "NSControl",
    feature = "NSResponder",
    feature = "NSView"
))]
extern_conformance!(
    unsafe impl NSAccessibility for NSScroller {}
);

#[cfg(all(
    feature = "NSAccessibilityProtocols",
    feature = "NSControl",
    feature = "NSResponder",
    feature = "NSView"
))]
extern_conformance!(
    unsafe impl NSAccessibilityElementProtocol for NSScroller {}
);

#[cfg(all(
    feature = "NSAnimation",
    feature = "NSControl",
    feature = "NSResponder",
    feature = "NSView"
))]
extern_conformance!(
    unsafe impl NSAnimatablePropertyContainer for NSScroller {}
);

#[cfg(all(
    feature = "NSAppearance",
    feature = "NSControl",
    feature = "NSResponder",
    feature = "NSView"
))]
extern_conformance!(
    unsafe impl NSAppearanceCustomization for NSScroller {}
);

#[cfg(all(feature = "NSControl", feature = "NSResponder", feature = "NSView"))]
extern_conformance!(
    unsafe impl NSCoding for NSScroller {}
);

#[cfg(all(
    feature = "NSControl",
    feature = "NSDragging",
    feature = "NSResponder",
    feature = "NSView"
))]
extern_conformance!(
    unsafe impl NSDraggingDestination for NSScroller {}
);

#[cfg(all(feature = "NSControl", feature = "NSResponder", feature = "NSView"))]
extern_conformance!(
    unsafe impl NSObjectProtocol for NSScroller {}
);

#[cfg(all(
    feature = "NSControl",
    feature = "NSResponder",
    feature = "NSUserInterfaceItemIdentification",
    feature = "NSView"
))]
extern_conformance!(
    unsafe impl NSUserInterfaceItemIdentification for NSScroller {}
);

#[cfg(all(feature = "NSControl", feature = "NSResponder", feature = "NSView"))]
impl NSScroller {
    extern_methods!(
        #[unsafe(method(isCompatibleWithOverlayScrollers))]
        #[unsafe(method_family = none)]
        pub unsafe fn isCompatibleWithOverlayScrollers(mtm: MainThreadMarker) -> bool;

        #[cfg(all(feature = "NSCell", feature = "objc2-core-foundation"))]
        #[unsafe(method(scrollerWidthForControlSize:scrollerStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollerWidthForControlSize_scrollerStyle(
            control_size: NSControlSize,
            scroller_style: NSScrollerStyle,
            mtm: MainThreadMarker,
        ) -> CGFloat;

        #[unsafe(method(preferredScrollerStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn preferredScrollerStyle(mtm: MainThreadMarker) -> NSScrollerStyle;

        #[unsafe(method(scrollerStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollerStyle(&self) -> NSScrollerStyle;

        /// Setter for [`scrollerStyle`][Self::scrollerStyle].
        #[unsafe(method(setScrollerStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setScrollerStyle(&self, scroller_style: NSScrollerStyle);

        #[unsafe(method(knobStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn knobStyle(&self) -> NSScrollerKnobStyle;

        /// Setter for [`knobStyle`][Self::knobStyle].
        #[unsafe(method(setKnobStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setKnobStyle(&self, knob_style: NSScrollerKnobStyle);

        #[unsafe(method(rectForPart:))]
        #[unsafe(method_family = none)]
        pub unsafe fn rectForPart(&self, part_code: NSScrollerPart) -> NSRect;

        #[unsafe(method(checkSpaceForParts))]
        #[unsafe(method_family = none)]
        pub unsafe fn checkSpaceForParts(&self);

        #[unsafe(method(usableParts))]
        #[unsafe(method_family = none)]
        pub unsafe fn usableParts(&self) -> NSUsableScrollerParts;

        #[cfg(feature = "NSCell")]
        #[unsafe(method(controlSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn controlSize(&self) -> NSControlSize;

        #[cfg(feature = "NSCell")]
        /// Setter for [`controlSize`][Self::controlSize].
        #[unsafe(method(setControlSize:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setControlSize(&self, control_size: NSControlSize);

        #[unsafe(method(drawKnob))]
        #[unsafe(method_family = none)]
        pub unsafe fn drawKnob(&self);

        #[unsafe(method(drawKnobSlotInRect:highlight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn drawKnobSlotInRect_highlight(&self, slot_rect: NSRect, flag: bool);

        #[unsafe(method(testPart:))]
        #[unsafe(method_family = none)]
        pub unsafe fn testPart(&self, point: NSPoint) -> NSScrollerPart;

        #[cfg(feature = "NSEvent")]
        #[unsafe(method(trackKnob:))]
        #[unsafe(method_family = none)]
        pub unsafe fn trackKnob(&self, event: &NSEvent);

        #[unsafe(method(hitPart))]
        #[unsafe(method_family = none)]
        pub unsafe fn hitPart(&self) -> NSScrollerPart;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(knobProportion))]
        #[unsafe(method_family = none)]
        pub unsafe fn knobProportion(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`knobProportion`][Self::knobProportion].
        #[unsafe(method(setKnobProportion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setKnobProportion(&self, knob_proportion: CGFloat);
    );
}

/// Methods declared on superclass `NSControl`.
#[cfg(all(feature = "NSControl", feature = "NSResponder", feature = "NSView"))]
impl NSScroller {
    extern_methods!(
        #[unsafe(method(initWithFrame:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame_rect: NSRect) -> Retained<Self>;

        /// # Safety
        ///
        /// `coder` possibly has further requirements.
        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    );
}

/// Methods declared on superclass `NSResponder`.
#[cfg(all(feature = "NSControl", feature = "NSResponder", feature = "NSView"))]
impl NSScroller {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(all(feature = "NSControl", feature = "NSResponder", feature = "NSView"))]
impl NSScroller {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nspreferredscrollerstyledidchangenotification?language=objc)
    pub static NSPreferredScrollerStyleDidChangeNotification: &'static NSNotificationName;
}

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsscrollarrowposition?language=objc)
// NS_ENUM
#[deprecated = "Scroller arrows are not used anymore."]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSScrollArrowPosition(pub NSUInteger);
impl NSScrollArrowPosition {
    #[doc(alias = "NSScrollerArrowsMaxEnd")]
    pub const ScrollerArrowsMaxEnd: Self = Self(0);
    #[doc(alias = "NSScrollerArrowsMinEnd")]
    pub const ScrollerArrowsMinEnd: Self = Self(1);
    #[doc(alias = "NSScrollerArrowsDefaultSetting")]
    pub const ScrollerArrowsDefaultSetting: Self = Self(0);
    #[doc(alias = "NSScrollerArrowsNone")]
    pub const ScrollerArrowsNone: Self = Self(2);
}

unsafe impl Encode for NSScrollArrowPosition {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSScrollArrowPosition {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nsscrollerarrow?language=objc)
// NS_ENUM
#[deprecated = "Scroller arrows are not used anymore."]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSScrollerArrow(pub NSUInteger);
impl NSScrollerArrow {
    #[doc(alias = "NSScrollerIncrementArrow")]
    pub const IncrementArrow: Self = Self(0);
    #[doc(alias = "NSScrollerDecrementArrow")]
    pub const DecrementArrow: Self = Self(1);
}

unsafe impl Encode for NSScrollerArrow {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSScrollerArrow {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// NSDeprecated.
#[cfg(all(feature = "NSControl", feature = "NSResponder", feature = "NSView"))]
impl NSScroller {
    extern_methods!(
        #[cfg(all(feature = "NSCell", feature = "objc2-core-foundation"))]
        #[deprecated = "Use +scrollerWidthForControlSize:scrollerStyle: instead"]
        #[unsafe(method(scrollerWidthForControlSize:))]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollerWidthForControlSize(
            control_size: NSControlSize,
            mtm: MainThreadMarker,
        ) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[deprecated = "Use +scrollerWidthForControlSize:scrollerStyle: instead"]
        #[unsafe(method(scrollerWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollerWidth(mtm: MainThreadMarker) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[deprecated]
        #[unsafe(method(setFloatValue:knobProportion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFloatValue_knobProportion(&self, value: c_float, proportion: CGFloat);

        #[deprecated = "Has had no effect since 10.7"]
        #[unsafe(method(arrowsPosition))]
        #[unsafe(method_family = none)]
        pub unsafe fn arrowsPosition(&self) -> NSScrollArrowPosition;

        /// Setter for [`arrowsPosition`][Self::arrowsPosition].
        #[deprecated = "Has had no effect since 10.7"]
        #[unsafe(method(setArrowsPosition:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setArrowsPosition(&self, arrows_position: NSScrollArrowPosition);

        #[cfg(feature = "NSCell")]
        #[deprecated = "Has had no effect since 10.7"]
        #[unsafe(method(controlTint))]
        #[unsafe(method_family = none)]
        pub unsafe fn controlTint(&self) -> NSControlTint;

        #[cfg(feature = "NSCell")]
        /// Setter for [`controlTint`][Self::controlTint].
        #[deprecated = "Has had no effect since 10.7"]
        #[unsafe(method(setControlTint:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setControlTint(&self, control_tint: NSControlTint);

        #[deprecated = "Has had no effect since 10.7"]
        #[unsafe(method(highlight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn highlight(&self, flag: bool);

        #[cfg(feature = "NSEvent")]
        #[deprecated = "Not invoked since 10.7"]
        #[unsafe(method(trackScrollButtons:))]
        #[unsafe(method_family = none)]
        pub unsafe fn trackScrollButtons(&self, event: &NSEvent);

        #[deprecated = "Not invoked on any macOS version"]
        #[unsafe(method(drawParts))]
        #[unsafe(method_family = none)]
        pub unsafe fn drawParts(&self);

        #[deprecated = "Scrollers don't have arrows as of 10.7"]
        #[unsafe(method(drawArrow:highlight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn drawArrow_highlight(&self, which_arrow: NSScrollerArrow, flag: bool);
    );
}
