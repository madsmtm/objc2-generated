//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nssplitviewautosavename?language=objc)
pub type NSSplitViewAutosaveName = NSString;

/// [Apple's documentation](https://developer.apple.com/documentation/appkit/nssplitviewdividerstyle?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSSplitViewDividerStyle(pub NSInteger);
impl NSSplitViewDividerStyle {
    #[doc(alias = "NSSplitViewDividerStyleThick")]
    pub const Thick: Self = Self(1);
    #[doc(alias = "NSSplitViewDividerStyleThin")]
    pub const Thin: Self = Self(2);
    #[doc(alias = "NSSplitViewDividerStylePaneSplitter")]
    pub const PaneSplitter: Self = Self(3);
}

unsafe impl Encode for NSSplitViewDividerStyle {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for NSSplitViewDividerStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nssplitview?language=objc)
    #[unsafe(super(NSView, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "NSResponder", feature = "NSView"))]
    pub struct NSSplitView;
);

#[cfg(all(
    feature = "NSAccessibilityProtocols",
    feature = "NSResponder",
    feature = "NSView"
))]
extern_conformance!(
    unsafe impl NSAccessibility for NSSplitView {}
);

#[cfg(all(
    feature = "NSAccessibilityProtocols",
    feature = "NSResponder",
    feature = "NSView"
))]
extern_conformance!(
    unsafe impl NSAccessibilityElementProtocol for NSSplitView {}
);

#[cfg(all(feature = "NSAnimation", feature = "NSResponder", feature = "NSView"))]
extern_conformance!(
    unsafe impl NSAnimatablePropertyContainer for NSSplitView {}
);

#[cfg(all(feature = "NSAppearance", feature = "NSResponder", feature = "NSView"))]
extern_conformance!(
    unsafe impl NSAppearanceCustomization for NSSplitView {}
);

#[cfg(all(feature = "NSResponder", feature = "NSView"))]
extern_conformance!(
    unsafe impl NSCoding for NSSplitView {}
);

#[cfg(all(feature = "NSDragging", feature = "NSResponder", feature = "NSView"))]
extern_conformance!(
    unsafe impl NSDraggingDestination for NSSplitView {}
);

#[cfg(all(feature = "NSResponder", feature = "NSView"))]
extern_conformance!(
    unsafe impl NSObjectProtocol for NSSplitView {}
);

#[cfg(all(
    feature = "NSResponder",
    feature = "NSUserInterfaceItemIdentification",
    feature = "NSView"
))]
extern_conformance!(
    unsafe impl NSUserInterfaceItemIdentification for NSSplitView {}
);

#[cfg(all(feature = "NSResponder", feature = "NSView"))]
impl NSSplitView {
    extern_methods!(
        #[unsafe(method(isVertical))]
        #[unsafe(method_family = none)]
        pub unsafe fn isVertical(&self) -> bool;

        /// Setter for [`isVertical`][Self::isVertical].
        #[unsafe(method(setVertical:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setVertical(&self, vertical: bool);

        #[unsafe(method(dividerStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn dividerStyle(&self) -> NSSplitViewDividerStyle;

        /// Setter for [`dividerStyle`][Self::dividerStyle].
        #[unsafe(method(setDividerStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDividerStyle(&self, divider_style: NSSplitViewDividerStyle);

        #[unsafe(method(autosaveName))]
        #[unsafe(method_family = none)]
        pub unsafe fn autosaveName(&self) -> Option<Retained<NSSplitViewAutosaveName>>;

        /// Setter for [`autosaveName`][Self::autosaveName].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setAutosaveName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAutosaveName(&self, autosave_name: Option<&NSSplitViewAutosaveName>);

        #[unsafe(method(delegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(&self) -> Option<Retained<ProtocolObject<dyn NSSplitViewDelegate>>>;

        /// Setter for [`delegate`][Self::delegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        #[unsafe(method(setDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn NSSplitViewDelegate>>,
        );

        #[unsafe(method(drawDividerInRect:))]
        #[unsafe(method_family = none)]
        pub unsafe fn drawDividerInRect(&self, rect: NSRect);

        #[cfg(feature = "NSColor")]
        #[unsafe(method(dividerColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn dividerColor(&self) -> Retained<NSColor>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(dividerThickness))]
        #[unsafe(method_family = none)]
        pub unsafe fn dividerThickness(&self) -> CGFloat;

        #[unsafe(method(adjustSubviews))]
        #[unsafe(method_family = none)]
        pub unsafe fn adjustSubviews(&self);

        #[unsafe(method(isSubviewCollapsed:))]
        #[unsafe(method_family = none)]
        pub unsafe fn isSubviewCollapsed(&self, subview: &NSView) -> bool;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(minPossiblePositionOfDividerAtIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn minPossiblePositionOfDividerAtIndex(
            &self,
            divider_index: NSInteger,
        ) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(maxPossiblePositionOfDividerAtIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxPossiblePositionOfDividerAtIndex(
            &self,
            divider_index: NSInteger,
        ) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(setPosition:ofDividerAtIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPosition_ofDividerAtIndex(
            &self,
            position: CGFloat,
            divider_index: NSInteger,
        );

        #[cfg(feature = "NSLayoutConstraint")]
        #[unsafe(method(holdingPriorityForSubviewAtIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn holdingPriorityForSubviewAtIndex(
            &self,
            subview_index: NSInteger,
        ) -> NSLayoutPriority;

        #[cfg(feature = "NSLayoutConstraint")]
        #[unsafe(method(setHoldingPriority:forSubviewAtIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setHoldingPriority_forSubviewAtIndex(
            &self,
            priority: NSLayoutPriority,
            subview_index: NSInteger,
        );
    );
}

/// Methods declared on superclass `NSView`.
#[cfg(all(feature = "NSResponder", feature = "NSView"))]
impl NSSplitView {
    extern_methods!(
        #[unsafe(method(initWithFrame:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame_rect: NSRect) -> Retained<Self>;

        /// # Safety
        ///
        /// `coder` possibly has further requirements.
        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    );
}

/// Methods declared on superclass `NSResponder`.
#[cfg(all(feature = "NSResponder", feature = "NSView"))]
impl NSSplitView {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(all(feature = "NSResponder", feature = "NSView"))]
impl NSSplitView {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}

/// NSSplitViewArrangedSubviews.
#[cfg(all(feature = "NSResponder", feature = "NSView"))]
impl NSSplitView {
    extern_methods!(
        /// Whether or not all subviews will be added as arranged views. When NO, a subview must be explicitly added as an arrangedSubview if the view should be arranged as a split pane. When YES,
        /// `-arrangedSubviews`always be identical to
        /// `-subviews.`Defaults to YES.
        /// Setting this from YES to NO will leave all existing subviews as
        /// `-arrangedSubviews.`Setting this from NO to YES will cause
        /// `-arrangedSubviews`to become the value of
        /// `-subviews.`
        #[unsafe(method(arrangesAllSubviews))]
        #[unsafe(method_family = none)]
        pub unsafe fn arrangesAllSubviews(&self) -> bool;

        /// Setter for [`arrangesAllSubviews`][Self::arrangesAllSubviews].
        #[unsafe(method(setArrangesAllSubviews:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setArrangesAllSubviews(&self, arranges_all_subviews: bool);

        /// The list of views that are arranged as split panes in the receiver.
        /// They are a subset of
        /// `-subviews,`with potential difference in ordering. If
        /// `-arrangesAllSubviews`is YES, then
        /// `-arrangedSubviews`is identical to
        /// `-subviews.`
        #[unsafe(method(arrangedSubviews))]
        #[unsafe(method_family = none)]
        pub unsafe fn arrangedSubviews(&self) -> Retained<NSArray<NSView>>;

        /// Adds a view as arranged split pane. If the view is not a subview of the receiver, it will be added as one.
        #[unsafe(method(addArrangedSubview:))]
        #[unsafe(method_family = none)]
        pub unsafe fn addArrangedSubview(&self, view: &NSView);

        /// Adds a view as an arranged split pane list at the specific index.
        /// If the view is already an arranged split view, it will move the view the specified index (but not move the subview index).
        /// If the view is not a subview of the receiver, it will be added as one (not necessarily at the same index).
        #[unsafe(method(insertArrangedSubview:atIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn insertArrangedSubview_atIndex(&self, view: &NSView, index: NSInteger);

        /// Removes a view as arranged split pane. If
        /// `-arrangesAllSubviews`is set to NO, this does not remove the view as a subview.
        /// Removing the view as a subview (either by -[view removeFromSuperview] or setting the receiver's subviews) will automatically remove it as an arranged subview.
        #[unsafe(method(removeArrangedSubview:))]
        #[unsafe(method_family = none)]
        pub unsafe fn removeArrangedSubview(&self, view: &NSView);
    );
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nssplitviewdelegate?language=objc)
    pub unsafe trait NSSplitViewDelegate: NSObjectProtocol + MainThreadOnly {
        #[cfg(all(feature = "NSResponder", feature = "NSView"))]
        #[optional]
        #[unsafe(method(splitView:canCollapseSubview:))]
        #[unsafe(method_family = none)]
        unsafe fn splitView_canCollapseSubview(
            &self,
            split_view: &NSSplitView,
            subview: &NSView,
        ) -> bool;

        #[cfg(all(feature = "NSResponder", feature = "NSView"))]
        #[deprecated = "NSSplitView no longer supports collapsing sections via double-click. This delegate method is never called."]
        #[optional]
        #[unsafe(method(splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:))]
        #[unsafe(method_family = none)]
        unsafe fn splitView_shouldCollapseSubview_forDoubleClickOnDividerAtIndex(
            &self,
            split_view: &NSSplitView,
            subview: &NSView,
            divider_index: NSInteger,
        ) -> bool;

        #[cfg(all(
            feature = "NSResponder",
            feature = "NSView",
            feature = "objc2-core-foundation"
        ))]
        #[optional]
        #[unsafe(method(splitView:constrainMinCoordinate:ofSubviewAt:))]
        #[unsafe(method_family = none)]
        unsafe fn splitView_constrainMinCoordinate_ofSubviewAt(
            &self,
            split_view: &NSSplitView,
            proposed_minimum_position: CGFloat,
            divider_index: NSInteger,
        ) -> CGFloat;

        #[cfg(all(
            feature = "NSResponder",
            feature = "NSView",
            feature = "objc2-core-foundation"
        ))]
        #[optional]
        #[unsafe(method(splitView:constrainMaxCoordinate:ofSubviewAt:))]
        #[unsafe(method_family = none)]
        unsafe fn splitView_constrainMaxCoordinate_ofSubviewAt(
            &self,
            split_view: &NSSplitView,
            proposed_maximum_position: CGFloat,
            divider_index: NSInteger,
        ) -> CGFloat;

        #[cfg(all(
            feature = "NSResponder",
            feature = "NSView",
            feature = "objc2-core-foundation"
        ))]
        #[optional]
        #[unsafe(method(splitView:constrainSplitPosition:ofSubviewAt:))]
        #[unsafe(method_family = none)]
        unsafe fn splitView_constrainSplitPosition_ofSubviewAt(
            &self,
            split_view: &NSSplitView,
            proposed_position: CGFloat,
            divider_index: NSInteger,
        ) -> CGFloat;

        #[cfg(all(feature = "NSResponder", feature = "NSView"))]
        #[optional]
        #[unsafe(method(splitView:resizeSubviewsWithOldSize:))]
        #[unsafe(method_family = none)]
        unsafe fn splitView_resizeSubviewsWithOldSize(
            &self,
            split_view: &NSSplitView,
            old_size: NSSize,
        );

        #[cfg(all(feature = "NSResponder", feature = "NSView"))]
        #[optional]
        #[unsafe(method(splitView:shouldAdjustSizeOfSubview:))]
        #[unsafe(method_family = none)]
        unsafe fn splitView_shouldAdjustSizeOfSubview(
            &self,
            split_view: &NSSplitView,
            view: &NSView,
        ) -> bool;

        #[cfg(all(feature = "NSResponder", feature = "NSView"))]
        #[optional]
        #[unsafe(method(splitView:shouldHideDividerAtIndex:))]
        #[unsafe(method_family = none)]
        unsafe fn splitView_shouldHideDividerAtIndex(
            &self,
            split_view: &NSSplitView,
            divider_index: NSInteger,
        ) -> bool;

        #[cfg(all(feature = "NSResponder", feature = "NSView"))]
        #[optional]
        #[unsafe(method(splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:))]
        #[unsafe(method_family = none)]
        unsafe fn splitView_effectiveRect_forDrawnRect_ofDividerAtIndex(
            &self,
            split_view: &NSSplitView,
            proposed_effective_rect: NSRect,
            drawn_rect: NSRect,
            divider_index: NSInteger,
        ) -> NSRect;

        #[cfg(all(feature = "NSResponder", feature = "NSView"))]
        #[optional]
        #[unsafe(method(splitView:additionalEffectiveRectOfDividerAtIndex:))]
        #[unsafe(method_family = none)]
        unsafe fn splitView_additionalEffectiveRectOfDividerAtIndex(
            &self,
            split_view: &NSSplitView,
            divider_index: NSInteger,
        ) -> NSRect;

        #[optional]
        #[unsafe(method(splitViewWillResizeSubviews:))]
        #[unsafe(method_family = none)]
        unsafe fn splitViewWillResizeSubviews(&self, notification: &NSNotification);

        #[optional]
        #[unsafe(method(splitViewDidResizeSubviews:))]
        #[unsafe(method_family = none)]
        unsafe fn splitViewDidResizeSubviews(&self, notification: &NSNotification);
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nssplitviewwillresizesubviewsnotification?language=objc)
    pub static NSSplitViewWillResizeSubviewsNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nssplitviewdidresizesubviewsnotification?language=objc)
    pub static NSSplitViewDidResizeSubviewsNotification: &'static NSNotificationName;
}

/// NSDeprecated.
#[cfg(all(feature = "NSResponder", feature = "NSView"))]
impl NSSplitView {
    extern_methods!(
        #[deprecated]
        #[unsafe(method(setIsPaneSplitter:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setIsPaneSplitter(&self, flag: bool);

        #[deprecated]
        #[unsafe(method(isPaneSplitter))]
        #[unsafe(method_family = none)]
        pub unsafe fn isPaneSplitter(&self) -> bool;
    );
}
