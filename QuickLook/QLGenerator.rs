//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlreturnmask?language=objc)
pub const kQLReturnMask: c_uint = 0xaf00;
/// [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlreturnhasmore?language=objc)
pub const kQLReturnHasMore: c_uint = kQLReturnMask | 10;
/// This is the type of a reference to Thumbnail requests.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/qlthumbnailrequest?language=objc)
#[repr(C)]
pub struct QLThumbnailRequest {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl QLThumbnailRequest {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"__QLThumbnailRequest"> for QLThumbnailRequest {}
);

unsafe impl ConcreteType for QLThumbnailRequest {
    /// Returns the CoreFoundation type ID for QLThumbnailRequests.
    #[doc(alias = "QLThumbnailRequestGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn QLThumbnailRequestGetTypeID() -> CFTypeID;
        }
        unsafe { QLThumbnailRequestGetTypeID() }
    }
}

impl QLThumbnailRequest {
    /// Returns the url of the file for the thumbnail request.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    ///
    /// Returns: The url of the file for the thumbnail request.
    #[doc(alias = "QLThumbnailRequestCopyURL")]
    #[deprecated = "Use a QLFileThumbnailRequest in a Thumbnail Extension to provide thumbnails for your file types."]
    #[inline]
    pub unsafe fn url(&self) -> Option<CFRetained<CFURL>> {
        extern "C-unwind" {
            fn QLThumbnailRequestCopyURL(thumbnail: &QLThumbnailRequest) -> Option<NonNull<CFURL>>;
        }
        let ret = unsafe { QLThumbnailRequestCopyURL(self) };
        ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
    }

    /// Returns the desired options for the thumbnail request.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    ///
    /// Returns: The desired options for the thumbnail request.
    #[doc(alias = "QLThumbnailRequestCopyOptions")]
    #[deprecated = "Use a QLFileThumbnailRequest in a Thumbnail Extension to provide thumbnails for your file types."]
    #[inline]
    pub unsafe fn options(&self) -> Option<CFRetained<CFDictionary>> {
        extern "C-unwind" {
            fn QLThumbnailRequestCopyOptions(
                thumbnail: &QLThumbnailRequest,
            ) -> Option<NonNull<CFDictionary>>;
        }
        let ret = unsafe { QLThumbnailRequestCopyOptions(self) };
        ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
    }

    /// Returns the UTI for the thumbnail request.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    ///
    /// Returns: The UTI of the content being thumbnailed, NULL if not available.
    #[doc(alias = "QLThumbnailRequestCopyContentUTI")]
    #[deprecated = "Use a QLFileThumbnailRequest in a Thumbnail Extension to provide thumbnails for your file types."]
    #[inline]
    pub unsafe fn content_uti(&self) -> Option<CFRetained<CFString>> {
        extern "C-unwind" {
            fn QLThumbnailRequestCopyContentUTI(
                thumbnail: &QLThumbnailRequest,
            ) -> Option<NonNull<CFString>>;
        }
        let ret = unsafe { QLThumbnailRequestCopyContentUTI(self) };
        ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
    }

    /// Returns the maximum desired size (in points) for the thumbnail request.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    ///
    /// Returns: The maximum desired size (in points) for the thumbnail request.
    #[doc(alias = "QLThumbnailRequestGetMaximumSize")]
    #[deprecated = "Use a QLFileThumbnailRequest in a Thumbnail Extension to provide thumbnails for your file types."]
    #[inline]
    pub unsafe fn maximum_size(&self) -> CGSize {
        extern "C-unwind" {
            fn QLThumbnailRequestGetMaximumSize(thumbnail: &QLThumbnailRequest) -> CGSize;
        }
        unsafe { QLThumbnailRequestGetMaximumSize(self) }
    }

    /// Get the thumbnail request generator bundle.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    #[doc(alias = "QLThumbnailRequestGetGeneratorBundle")]
    #[deprecated = "Use a QLFileThumbnailRequest in a Thumbnail Extension to provide thumbnails for your file types."]
    #[inline]
    pub unsafe fn generator_bundle(&self) -> Option<CFRetained<CFBundle>> {
        extern "C-unwind" {
            fn QLThumbnailRequestGetGeneratorBundle(
                thumbnail: &QLThumbnailRequest,
            ) -> Option<NonNull<CFBundle>>;
        }
        let ret = unsafe { QLThumbnailRequestGetGeneratorBundle(self) };
        ret.map(|ret| unsafe { CFRetained::retain(ret) })
    }

    /// Store some object in thumbnail request.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    ///
    /// Parameter `object`: The object representing the document
    ///
    /// Parameter `callbacks`: Callbacks to retain/release/etc. the object.
    ///
    /// You can only call this function once per request.
    ///
    /// # Safety
    ///
    /// - `object` must be a valid pointer.
    /// - `callbacks` must be a valid pointer.
    #[doc(alias = "QLThumbnailRequestSetDocumentObject")]
    #[deprecated = "Use a QLFileThumbnailRequest in a Thumbnail Extension to provide thumbnails for your file types."]
    #[inline]
    pub unsafe fn set_document_object(
        &self,
        object: *const c_void,
        callbacks: *const CFArrayCallBacks,
    ) {
        extern "C-unwind" {
            fn QLThumbnailRequestSetDocumentObject(
                thumbnail: &QLThumbnailRequest,
                object: *const c_void,
                callbacks: *const CFArrayCallBacks,
            );
        }
        unsafe { QLThumbnailRequestSetDocumentObject(self, object, callbacks) }
    }

    /// Get the object previously stored with QLThumbnailRequestSetDocumentObject.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    ///
    /// Returns: The object representing the document
    #[doc(alias = "QLThumbnailRequestGetDocumentObject")]
    #[deprecated = "Use a QLFileThumbnailRequest in a Thumbnail Extension to provide thumbnails for your file types."]
    #[inline]
    pub unsafe fn document_object(&self) -> *const c_void {
        extern "C-unwind" {
            fn QLThumbnailRequestGetDocumentObject(thumbnail: &QLThumbnailRequest)
                -> *const c_void;
        }
        unsafe { QLThumbnailRequestGetDocumentObject(self) }
    }

    /// Sets the thumbnail request response to image.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    ///
    /// Parameter `image`: The thumbnail image response.
    ///
    /// Parameter `properties`: See possible properties below.
    ///
    /// # Safety
    ///
    /// - `image` might not allow `None`.
    /// - `properties` generics must be of the correct type.
    /// - `properties` might not allow `None`.
    #[doc(alias = "QLThumbnailRequestSetImage")]
    #[cfg(feature = "objc2-core-graphics")]
    #[deprecated = "Use a QLThumbnailReply in a Thumbnail Extension to provide thumbnails for your file types"]
    #[inline]
    pub unsafe fn set_image(&self, image: Option<&CGImage>, properties: Option<&CFDictionary>) {
        extern "C-unwind" {
            fn QLThumbnailRequestSetImage(
                thumbnail: &QLThumbnailRequest,
                image: Option<&CGImage>,
                properties: Option<&CFDictionary>,
            );
        }
        unsafe { QLThumbnailRequestSetImage(self, image, properties) }
    }

    /// Sets the thumbnail request response to image data.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    ///
    /// Parameter `data`: The thumbnail image response as data. The image format should be supported by ImageIO
    ///
    /// Parameter `properties`: See possible properties below. Additional useful properties: kCGImageSourceTypeIdentifierHint (see ImageIO documentation).
    ///
    /// # Safety
    ///
    /// - `data` might not allow `None`.
    /// - `properties` generics must be of the correct type.
    /// - `properties` might not allow `None`.
    #[doc(alias = "QLThumbnailRequestSetImageWithData")]
    #[deprecated = "Use a QLThumbnailReply in a Thumbnail Extension to provide thumbnails for your file types."]
    #[inline]
    pub unsafe fn set_image_with_data(
        &self,
        data: Option<&CFData>,
        properties: Option<&CFDictionary>,
    ) {
        extern "C-unwind" {
            fn QLThumbnailRequestSetImageWithData(
                thumbnail: &QLThumbnailRequest,
                data: Option<&CFData>,
                properties: Option<&CFDictionary>,
            );
        }
        unsafe { QLThumbnailRequestSetImageWithData(self, data, properties) }
    }

    /// Creates a graphic context to draw the thumbnail response in.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    ///
    /// Parameter `size`: Size in points of the context for the thumbnail response.
    ///
    /// Parameter `isBitmap`: True if thumbnail contents is based on bitmap. size will then be interpreted as pixels, not points.
    ///
    /// Parameter `properties`: See possible properties below.
    ///
    /// Returns: A graphic context to draw to.
    ///
    /// Once the thumbnail is fully drawn, you should call QLThumbnailRequestFlushContext().
    ///
    /// # Safety
    ///
    /// - `properties` generics must be of the correct type.
    /// - `properties` might not allow `None`.
    #[doc(alias = "QLThumbnailRequestCreateContext")]
    #[cfg(feature = "objc2-core-graphics")]
    #[deprecated = "Use a QLThumbnailReply in a Thumbnail Extension to provide thumbnails for your file types."]
    #[inline]
    pub unsafe fn context(
        &self,
        size: CGSize,
        is_bitmap: bool,
        properties: Option<&CFDictionary>,
    ) -> Option<CFRetained<CGContext>> {
        extern "C-unwind" {
            fn QLThumbnailRequestCreateContext(
                thumbnail: &QLThumbnailRequest,
                size: CGSize,
                is_bitmap: Boolean,
                properties: Option<&CFDictionary>,
            ) -> Option<NonNull<CGContext>>;
        }
        let ret =
            unsafe { QLThumbnailRequestCreateContext(self, size, is_bitmap as _, properties) };
        ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
    }

    /// Flushes the graphic context and creates the thumbnail image response.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    ///
    /// Parameter `context`: The graphic context created by QLThumbnailRequestCreateContext().
    ///
    /// # Safety
    ///
    /// `context` might not allow `None`.
    #[doc(alias = "QLThumbnailRequestFlushContext")]
    #[cfg(feature = "objc2-core-graphics")]
    #[deprecated = "Use a QLThumbnailReply in a Thumbnail Extension to provide thumbnails for your file types."]
    #[inline]
    pub unsafe fn flush_context(&self, context: Option<&CGContext>) {
        extern "C-unwind" {
            fn QLThumbnailRequestFlushContext(
                thumbnail: &QLThumbnailRequest,
                context: Option<&CGContext>,
            );
        }
        unsafe { QLThumbnailRequestFlushContext(self, context) }
    }

    /// Sets the thumbnail request response to the image contained at url.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    ///
    /// Parameter `url`: The url to the thumbnail image response.
    ///
    /// Parameter `properties`: Currently unused.
    ///
    /// # Safety
    ///
    /// - `url` might not allow `None`.
    /// - `properties` generics must be of the correct type.
    /// - `properties` might not allow `None`.
    #[doc(alias = "QLThumbnailRequestSetImageAtURL")]
    #[deprecated = "Use a QLThumbnailReply in a Thumbnail Extension to provide thumbnails for your file types."]
    #[inline]
    pub unsafe fn set_image_at_url(&self, url: Option<&CFURL>, properties: Option<&CFDictionary>) {
        extern "C-unwind" {
            fn QLThumbnailRequestSetImageAtURL(
                thumbnail: &QLThumbnailRequest,
                url: Option<&CFURL>,
                properties: Option<&CFDictionary>,
            );
        }
        unsafe { QLThumbnailRequestSetImageAtURL(self, url, properties) }
    }

    /// Sets the thumbnail request response to the image produced by the equivalent preview representation.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    ///
    /// Parameter `data`: The content data.
    ///
    /// Parameter `contentTypeUTI`: The contentTypeUTI for the preview representation.
    ///
    /// Parameter `previewProperties`: Additional properties for the preview response.
    ///
    /// Parameter `properties`: Currently unused.
    ///
    /// Currently supported UTIs are: none. This call only works if your generator is set to be run in the main thread
    ///
    /// # Safety
    ///
    /// - `data` might not allow `None`.
    /// - `content_type_uti` might not allow `None`.
    /// - `preview_properties` generics must be of the correct type.
    /// - `preview_properties` might not allow `None`.
    /// - `properties` generics must be of the correct type.
    /// - `properties` might not allow `None`.
    #[doc(alias = "QLThumbnailRequestSetThumbnailWithDataRepresentation")]
    #[deprecated = "Use a QLThumbnailReply in a Thumbnail Extension to provide thumbnails for your file types."]
    #[inline]
    pub unsafe fn set_thumbnail_with_data_representation(
        &self,
        data: Option<&CFData>,
        content_type_uti: Option<&CFString>,
        preview_properties: Option<&CFDictionary>,
        properties: Option<&CFDictionary>,
    ) {
        extern "C-unwind" {
            fn QLThumbnailRequestSetThumbnailWithDataRepresentation(
                thumbnail: &QLThumbnailRequest,
                data: Option<&CFData>,
                content_type_uti: Option<&CFString>,
                preview_properties: Option<&CFDictionary>,
                properties: Option<&CFDictionary>,
            );
        }
        unsafe {
            QLThumbnailRequestSetThumbnailWithDataRepresentation(
                self,
                data,
                content_type_uti,
                preview_properties,
                properties,
            )
        }
    }

    /// Sets the thumbnail request response to the image produced by the equivalent preview representation.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    ///
    /// Parameter `url`: The url to the preview response.
    ///
    /// Parameter `contentTypeUTI`: The contentTypeUTI for the preview representation.
    ///
    /// Parameter `properties`: Additional properties for the preview response.
    ///
    /// Currently supported UTIs are: none. This call only works if your generator is set to be run in the main thread
    ///
    /// # Safety
    ///
    /// - `url` might not allow `None`.
    /// - `content_type_uti` might not allow `None`.
    /// - `preview_properties` generics must be of the correct type.
    /// - `preview_properties` might not allow `None`.
    /// - `properties` generics must be of the correct type.
    /// - `properties` might not allow `None`.
    #[doc(alias = "QLThumbnailRequestSetThumbnailWithURLRepresentation")]
    #[deprecated = "Use a QLThumbnailReply in a Thumbnail Extension to provide thumbnails for your file types."]
    #[inline]
    pub unsafe fn set_thumbnail_with_url_representation(
        &self,
        url: Option<&CFURL>,
        content_type_uti: Option<&CFString>,
        preview_properties: Option<&CFDictionary>,
        properties: Option<&CFDictionary>,
    ) {
        extern "C-unwind" {
            fn QLThumbnailRequestSetThumbnailWithURLRepresentation(
                thumbnail: &QLThumbnailRequest,
                url: Option<&CFURL>,
                content_type_uti: Option<&CFString>,
                preview_properties: Option<&CFDictionary>,
                properties: Option<&CFDictionary>,
            );
        }
        unsafe {
            QLThumbnailRequestSetThumbnailWithURLRepresentation(
                self,
                url,
                content_type_uti,
                preview_properties,
                properties,
            )
        }
    }

    /// Returns wether the thumbnail request was cancelled or not.
    ///
    /// Parameter `thumbnail`: The thumbnail request.
    ///
    /// Returns: true if the request was cancelled.
    #[doc(alias = "QLThumbnailRequestIsCancelled")]
    #[deprecated = "Use a QLFileThumbnailRequest in a Thumbnail Extension to provide thumbnails for your file types."]
    #[inline]
    pub unsafe fn is_cancelled(&self) -> bool {
        extern "C-unwind" {
            fn QLThumbnailRequestIsCancelled(thumbnail: &QLThumbnailRequest) -> Boolean;
        }
        let ret = unsafe { QLThumbnailRequestIsCancelled(self) };
        ret != 0
    }
}

extern "C" {
    /// Value should be a CFString. The extension is used as a badge when producing an icon.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlthumbnailpropertyextensionkey?language=objc)
    #[deprecated = "Use a QLThumbnailReply in a Thumbnail Extension to provide thumbnails for your file types."]
    pub static kQLThumbnailPropertyExtensionKey: Option<&'static CFString>;
}

extern "C" {
    /// Value should be a CGImage. The badge is used when producing an icon.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlthumbnailpropertybadgeimagekey?language=objc)
    #[deprecated = "Use a QLThumbnailReply in a Thumbnail Extension to provide thumbnails for your file types."]
    pub static kQLThumbnailPropertyBadgeImageKey: Option<&'static CFString>;
}

extern "C" {
    /// Extends the security scope where Quick Look will accept to look at a file. Value is a path as CFString.
    ///
    /// Only useful when using QLThumbnailRequestSetImageAtURL() or QLThumbnailRequestSetThumbnailWithURLRepresentation().
    /// By default, Quick Look will only accept files within the current document bundle.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlthumbnailpropertybasebundlepathkey?language=objc)
    #[deprecated = "Use a QLThumbnailReply in a Thumbnail Extension to provide thumbnails for your file types."]
    pub static kQLThumbnailPropertyBaseBundlePathKey: Option<&'static CFString>;
}

/// This is the type of a reference to Preview requests.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/qlpreviewrequest?language=objc)
#[repr(C)]
pub struct QLPreviewRequest {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl QLPreviewRequest {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"__QLPreviewRequest"> for QLPreviewRequest {}
);

unsafe impl ConcreteType for QLPreviewRequest {
    /// Returns the CoreFoundation type ID for QLPreviewRequests.
    #[doc(alias = "QLPreviewRequestGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn QLPreviewRequestGetTypeID() -> CFTypeID;
        }
        unsafe { QLPreviewRequestGetTypeID() }
    }
}

extern "C" {
    /// Customizes Displayed name in the preview panel. This replaces the document's display name. Value is a CFString.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlpreviewpropertydisplaynamekey?language=objc)
    #[deprecated = "Use the title property of your QLPreviewingController in a Preview Extension."]
    pub static kQLPreviewPropertyDisplayNameKey: Option<&'static CFString>;
}

extern "C" {
    /// Gives the width (in points) of the preview. Value is a CFNumber.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlpreviewpropertywidthkey?language=objc)
    #[deprecated = "Use the preferredContentSize property of your QLPreviewingController in a Preview Extension."]
    pub static kQLPreviewPropertyWidthKey: Option<&'static CFString>;
}

extern "C" {
    /// Gives the height (in points) of the preview. Value is a CFNumber.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlpreviewpropertyheightkey?language=objc)
    #[deprecated = "Use the preferredContentSize property of your QLPreviewingController in a Preview Extension."]
    pub static kQLPreviewPropertyHeightKey: Option<&'static CFString>;
}

extern "C" {
    /// Extends the security scope where Quick Look will accept to look at a file. Value is a path as CFString.
    ///
    /// Only useful when using QLPreviewRequestSetURLRepresentation().
    /// By default, Quick Look will only accept files within the current document bundle.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlpreviewpropertybasebundlepathkey?language=objc)
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    pub static kQLPreviewPropertyBaseBundlePathKey: Option<&'static CFString>;
}

extern "C" {
    /// Gives the CFStringEncoding of the preview data if the preview type is plain text. Value is a CFNumber.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlpreviewpropertystringencodingkey?language=objc)
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    pub static kQLPreviewPropertyStringEncodingKey: Option<&'static CFString>;
}

/// [Apple's documentation](https://developer.apple.com/documentation/quicklook/qlpreviewpdfstyle?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct QLPreviewPDFStyle(pub c_uint);
impl QLPreviewPDFStyle {
    #[doc(alias = "kQLPreviewPDFStandardStyle")]
    pub const StandardStyle: Self = Self(0);
    #[doc(alias = "kQLPreviewPDFPagesWithThumbnailsOnRightStyle")]
    pub const PagesWithThumbnailsOnRightStyle: Self = Self(3);
    #[doc(alias = "kQLPreviewPDFPagesWithThumbnailsOnLeftStyle")]
    pub const PagesWithThumbnailsOnLeftStyle: Self = Self(4);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for QLPreviewPDFStyle {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for QLPreviewPDFStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// Specify the preferred way to display PDF content. Value is a CFNumber using QLPreviewPDFStyle values.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlpreviewpropertypdfstylekey?language=objc)
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    pub static kQLPreviewPropertyPDFStyleKey: Option<&'static CFString>;
}

extern "C" {
    /// Value is the same CFNumber passed by potential previous calls to generator's preview callback for the same document with kQLPreviewPropertyCursorKey.
    ///
    /// Use this value to provide more of the preview content.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlpreviewoptioncursorkey?language=objc)
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    pub static kQLPreviewOptionCursorKey: Option<&'static CFString>;
}

extern "C" {
    /// Value should be a CFNumber. This value will be used to get more of the document's preview if necessary
    /// (and if the preview genererator returns kQLReturnHasMore)
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlpreviewpropertycursorkey?language=objc)
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    pub static kQLPreviewPropertyCursorKey: Option<&'static CFString>;
}

impl QLPreviewRequest {
    /// Returns the url of the file for the preview request.
    ///
    /// Parameter `preview`: The preview request.
    ///
    /// Returns: The url of the file for the preview request.
    #[doc(alias = "QLPreviewRequestCopyURL")]
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    #[inline]
    pub unsafe fn url(&self) -> Option<CFRetained<CFURL>> {
        extern "C-unwind" {
            fn QLPreviewRequestCopyURL(preview: &QLPreviewRequest) -> Option<NonNull<CFURL>>;
        }
        let ret = unsafe { QLPreviewRequestCopyURL(self) };
        ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
    }

    /// Returns the desired options for the preview request.
    ///
    /// Parameter `preview`: The preview request.
    ///
    /// Returns: The desired options for the preview request.
    #[doc(alias = "QLPreviewRequestCopyOptions")]
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    #[inline]
    pub unsafe fn options(&self) -> Option<CFRetained<CFDictionary>> {
        extern "C-unwind" {
            fn QLPreviewRequestCopyOptions(
                preview: &QLPreviewRequest,
            ) -> Option<NonNull<CFDictionary>>;
        }
        let ret = unsafe { QLPreviewRequestCopyOptions(self) };
        ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
    }

    /// Returns the UTI for the preview request.
    ///
    /// Parameter `preview`: The preview request.
    ///
    /// Returns: The UTI of the content being previewed, NULL if not available.
    #[doc(alias = "QLPreviewRequestCopyContentUTI")]
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    #[inline]
    pub unsafe fn content_uti(&self) -> Option<CFRetained<CFString>> {
        extern "C-unwind" {
            fn QLPreviewRequestCopyContentUTI(
                preview: &QLPreviewRequest,
            ) -> Option<NonNull<CFString>>;
        }
        let ret = unsafe { QLPreviewRequestCopyContentUTI(self) };
        ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
    }

    /// Gets the preview request generator bundle.
    ///
    /// Parameter `preview`: The preview request.
    #[doc(alias = "QLPreviewRequestGetGeneratorBundle")]
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    #[inline]
    pub unsafe fn generator_bundle(&self) -> Option<CFRetained<CFBundle>> {
        extern "C-unwind" {
            fn QLPreviewRequestGetGeneratorBundle(
                preview: &QLPreviewRequest,
            ) -> Option<NonNull<CFBundle>>;
        }
        let ret = unsafe { QLPreviewRequestGetGeneratorBundle(self) };
        ret.map(|ret| unsafe { CFRetained::retain(ret) })
    }

    /// Store some object in preview request.
    ///
    /// Parameter `preview`: The preview request.
    ///
    /// Parameter `object`: The object representing the document
    ///
    /// Parameter `callbacks`: Callbacks to retain/release/etc. the object.
    ///
    /// You can only call this function once per request.
    ///
    /// # Safety
    ///
    /// - `object` must be a valid pointer.
    /// - `callbacks` must be a valid pointer.
    #[doc(alias = "QLPreviewRequestSetDocumentObject")]
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    #[inline]
    pub unsafe fn set_document_object(
        &self,
        object: *const c_void,
        callbacks: *const CFArrayCallBacks,
    ) {
        extern "C-unwind" {
            fn QLPreviewRequestSetDocumentObject(
                preview: &QLPreviewRequest,
                object: *const c_void,
                callbacks: *const CFArrayCallBacks,
            );
        }
        unsafe { QLPreviewRequestSetDocumentObject(self, object, callbacks) }
    }

    /// Get the object previously stored with QLPreviewRequestSetDocumentObject.
    ///
    /// Parameter `preview`: The preview request.
    ///
    /// Returns: The object representing the document
    #[doc(alias = "QLPreviewRequestGetDocumentObject")]
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    #[inline]
    pub unsafe fn document_object(&self) -> *const c_void {
        extern "C-unwind" {
            fn QLPreviewRequestGetDocumentObject(preview: &QLPreviewRequest) -> *const c_void;
        }
        unsafe { QLPreviewRequestGetDocumentObject(self) }
    }

    /// Returns wether the preview request was cancelled or not.
    ///
    /// Parameter `preview`: The preview request.
    ///
    /// Returns: true if the request was cancelled.
    #[doc(alias = "QLPreviewRequestIsCancelled")]
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    #[inline]
    pub unsafe fn is_cancelled(&self) -> bool {
        extern "C-unwind" {
            fn QLPreviewRequestIsCancelled(preview: &QLPreviewRequest) -> Boolean;
        }
        let ret = unsafe { QLPreviewRequestIsCancelled(self) };
        ret != 0
    }

    /// Sets the preview response with the provided data.
    ///
    /// Parameter `preview`: The preview request.
    ///
    /// Parameter `data`: The content data.
    ///
    /// Parameter `contentTypeUTI`: The contentTypeUTI for the preview representation.
    ///
    /// Parameter `properties`: Additional properties for the preview response.
    ///
    /// Currently supported UTIs are: kUTTypeImage, kUTTypePDF, kUTTypeHTML,
    /// kUTTypeXML, kUTTypePlainText, kUTTypeRTF, kUTTypeMovie, kUTTypeAudio,
    /// and "org.khronos.collada.digital-asset-exchange" (from OSX 10.9)
    ///
    /// # Safety
    ///
    /// - `data` might not allow `None`.
    /// - `content_type_uti` might not allow `None`.
    /// - `properties` generics must be of the correct type.
    /// - `properties` might not allow `None`.
    #[doc(alias = "QLPreviewRequestSetDataRepresentation")]
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    #[inline]
    pub unsafe fn set_data_representation(
        &self,
        data: Option<&CFData>,
        content_type_uti: Option<&CFString>,
        properties: Option<&CFDictionary>,
    ) {
        extern "C-unwind" {
            fn QLPreviewRequestSetDataRepresentation(
                preview: &QLPreviewRequest,
                data: Option<&CFData>,
                content_type_uti: Option<&CFString>,
                properties: Option<&CFDictionary>,
            );
        }
        unsafe { QLPreviewRequestSetDataRepresentation(self, data, content_type_uti, properties) }
    }

    /// Sets the preview request response with contents at url.
    ///
    /// Parameter `preview`: The preview request.
    ///
    /// Parameter `url`: The url to the preview response.
    ///
    /// Parameter `contentTypeUTI`: The contentTypeUTI for the preview representation.
    ///
    /// Parameter `properties`: Additional properties for the preview response.
    ///
    /// Currently supported UTIs are: kUTTypeImage, kUTTypePDF, kUTTypeHTML,
    /// kUTTypeXML, kUTTypePlainText, kUTTypeRTF, kUTTypeRTFD, kUTTypeMovie, kUTTypeAudio,
    /// and "org.khronos.collada.digital-asset-exchange" (from OSX 10.9)
    ///
    /// # Safety
    ///
    /// - `url` might not allow `None`.
    /// - `content_type_uti` might not allow `None`.
    /// - `properties` generics must be of the correct type.
    /// - `properties` might not allow `None`.
    #[doc(alias = "QLPreviewRequestSetURLRepresentation")]
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    #[inline]
    pub unsafe fn set_url_representation(
        &self,
        url: Option<&CFURL>,
        content_type_uti: Option<&CFString>,
        properties: Option<&CFDictionary>,
    ) {
        extern "C-unwind" {
            fn QLPreviewRequestSetURLRepresentation(
                preview: &QLPreviewRequest,
                url: Option<&CFURL>,
                content_type_uti: Option<&CFString>,
                properties: Option<&CFDictionary>,
            );
        }
        unsafe { QLPreviewRequestSetURLRepresentation(self, url, content_type_uti, properties) }
    }

    /// Creates a context to draw the preview in. Context should be flushed with QLPreviewRequestFlushContext()
    ///
    /// Parameter `preview`: The preview request.
    ///
    /// Parameter `size`: The size of the context.
    ///
    /// Parameter `isBitmap`: true if preview is bitmap-based.
    ///
    /// Parameter `properties`: Additional properties for the preview response.
    ///
    /// # Safety
    ///
    /// - `properties` generics must be of the correct type.
    /// - `properties` might not allow `None`.
    #[doc(alias = "QLPreviewRequestCreateContext")]
    #[cfg(feature = "objc2-core-graphics")]
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    #[inline]
    pub unsafe fn context(
        &self,
        size: CGSize,
        is_bitmap: bool,
        properties: Option<&CFDictionary>,
    ) -> Option<CFRetained<CGContext>> {
        extern "C-unwind" {
            fn QLPreviewRequestCreateContext(
                preview: &QLPreviewRequest,
                size: CGSize,
                is_bitmap: Boolean,
                properties: Option<&CFDictionary>,
            ) -> Option<NonNull<CGContext>>;
        }
        let ret = unsafe { QLPreviewRequestCreateContext(self, size, is_bitmap as _, properties) };
        ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
    }

    /// Creates a PDF context to draw the preview in, likely to be multi-pages. Context should be flushed with QLPreviewRequestFlushContext()
    ///
    /// Parameter `preview`: The preview request.
    ///
    /// Parameter `mediaBox`: The media box of the context. see CGPDFContextCreate().
    ///
    /// Parameter `auxiliaryInfo`: The PDF auxiliary info. see CGPDFContextCreate().
    ///
    /// Parameter `properties`: Additional properties for the preview response.
    ///
    /// # Safety
    ///
    /// - `media_box` must be a valid pointer.
    /// - `auxiliary_info` generics must be of the correct type.
    /// - `auxiliary_info` might not allow `None`.
    /// - `properties` generics must be of the correct type.
    /// - `properties` might not allow `None`.
    #[doc(alias = "QLPreviewRequestCreatePDFContext")]
    #[cfg(feature = "objc2-core-graphics")]
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    #[inline]
    pub unsafe fn pdf_context(
        &self,
        media_box: *const CGRect,
        auxiliary_info: Option<&CFDictionary>,
        properties: Option<&CFDictionary>,
    ) -> Option<CFRetained<CGContext>> {
        extern "C-unwind" {
            fn QLPreviewRequestCreatePDFContext(
                preview: &QLPreviewRequest,
                media_box: *const CGRect,
                auxiliary_info: Option<&CFDictionary>,
                properties: Option<&CFDictionary>,
            ) -> Option<NonNull<CGContext>>;
        }
        let ret = unsafe {
            QLPreviewRequestCreatePDFContext(self, media_box, auxiliary_info, properties)
        };
        ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
    }

    /// Flush the context and sets the preview response.
    ///
    /// Parameter `preview`: The preview request.
    ///
    /// Parameter `context`: context previously created by QLPreviewRequestCreateContext() or QLPreviewRequestCreatePDFContext().
    ///
    /// # Safety
    ///
    /// `context` might not allow `None`.
    #[doc(alias = "QLPreviewRequestFlushContext")]
    #[cfg(feature = "objc2-core-graphics")]
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    #[inline]
    pub unsafe fn flush_context(&self, context: Option<&CGContext>) {
        extern "C-unwind" {
            fn QLPreviewRequestFlushContext(
                preview: &QLPreviewRequest,
                context: Option<&CGContext>,
            );
        }
        unsafe { QLPreviewRequestFlushContext(self, context) }
    }
}

extern "C" {
    /// Gives the web content or attachment mime type. For the main data, default is text/html. Value is a CFString.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlpreviewpropertymimetypekey?language=objc)
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    pub static kQLPreviewPropertyMIMETypeKey: Option<&'static CFString>;
}

extern "C" {
    /// Gives the web content or attachment text encoding. Use IANA encodings like UTF-8. Value is a CFString.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlpreviewpropertytextencodingnamekey?language=objc)
    pub static kQLPreviewPropertyTextEncodingNameKey: Option<&'static CFString>;
}

extern "C" {
    /// Gives the attachment data. Value is a CFData.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlpreviewpropertyattachmentdatakey?language=objc)
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    pub static kQLPreviewPropertyAttachmentDataKey: Option<&'static CFString>;
}

extern "C" {
    /// Gives the list of attachments (or sub-resources). Value is a CFDictionary.
    ///
    /// Keys are the attachment ids (CFStringRef) that can be referenced with "cid:id" URL and
    /// Values are dictionaries using kQLPreviewPropertyAttachmentDataKey,
    /// kQLPreviewPropertyMIMETypeKey and kQLPreviewPropertyTextEncodingNameKey keys.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlpreviewpropertyattachmentskey?language=objc)
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    pub static kQLPreviewPropertyAttachmentsKey: Option<&'static CFString>;
}

extern "C" {
    /// Is the "cid" URL scheme.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quicklook/kqlpreviewcontentidscheme?language=objc)
    #[deprecated = "Use a QLPreviewingController in a Preview Extension to provide previews for your file types."]
    pub static kQLPreviewContentIDScheme: Option<&'static CFString>;
}

/// [Apple's documentation](https://developer.apple.com/documentation/quicklook/qlgeneratorinterfacestruct?language=objc)
#[repr(C)]
#[allow(unpredictable_function_pointer_comparisons)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct QLGeneratorInterfaceStruct {
    pub(crate) _reserved: *mut c_void,
    pub QueryInterface:
        Option<unsafe extern "C-unwind" fn(*mut c_void, REFIID, *mut LPVOID) -> HRESULT>,
    pub AddRef: Option<unsafe extern "C-unwind" fn(*mut c_void) -> ULONG>,
    pub Release: Option<unsafe extern "C-unwind" fn(*mut c_void) -> ULONG>,
    pub GenerateThumbnailForURL: Option<
        unsafe extern "C-unwind" fn(
            *mut c_void,
            *mut QLThumbnailRequest,
            *const CFURL,
            *const CFString,
            *const CFDictionary,
            CGSize,
        ) -> OSStatus,
    >,
    pub CancelThumbnailGeneration:
        Option<unsafe extern "C-unwind" fn(*mut c_void, *mut QLThumbnailRequest)>,
    pub GeneratePreviewForURL: Option<
        unsafe extern "C-unwind" fn(
            *mut c_void,
            *mut QLPreviewRequest,
            *const CFURL,
            *const CFString,
            *const CFDictionary,
        ) -> OSStatus,
    >,
    pub CancelPreviewGeneration:
        Option<unsafe extern "C-unwind" fn(*mut c_void, *mut QLPreviewRequest)>,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for QLGeneratorInterfaceStruct {
    const ENCODING: Encoding = Encoding::Struct("?", &[
        <*mut c_void>::ENCODING,
        <Option<unsafe extern "C-unwind" fn(*mut c_void,REFIID,*mut LPVOID,) -> HRESULT>>::ENCODING,
        <Option<unsafe extern "C-unwind" fn(*mut c_void,) -> ULONG>>::ENCODING,
        <Option<unsafe extern "C-unwind" fn(*mut c_void,) -> ULONG>>::ENCODING,
        <Option<unsafe extern "C-unwind" fn(*mut c_void,*mut QLThumbnailRequest,*const CFURL,*const CFString,*const CFDictionary,CGSize,) -> OSStatus>>::ENCODING,
        <Option<unsafe extern "C-unwind" fn(*mut c_void,*mut QLThumbnailRequest,)>>::ENCODING,
        <Option<unsafe extern "C-unwind" fn(*mut c_void,*mut QLPreviewRequest,*const CFURL,*const CFString,*const CFDictionary,) -> OSStatus>>::ENCODING,
        <Option<unsafe extern "C-unwind" fn(*mut c_void,*mut QLPreviewRequest,)>>::ENCODING,
    ]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for QLGeneratorInterfaceStruct {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

#[deprecated = "renamed to `QLThumbnailRequest::url`"]
#[inline]
pub unsafe extern "C-unwind" fn QLThumbnailRequestCopyURL(
    thumbnail: &QLThumbnailRequest,
) -> Option<CFRetained<CFURL>> {
    extern "C-unwind" {
        fn QLThumbnailRequestCopyURL(thumbnail: &QLThumbnailRequest) -> Option<NonNull<CFURL>>;
    }
    let ret = unsafe { QLThumbnailRequestCopyURL(thumbnail) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "renamed to `QLThumbnailRequest::options`"]
#[inline]
pub unsafe extern "C-unwind" fn QLThumbnailRequestCopyOptions(
    thumbnail: &QLThumbnailRequest,
) -> Option<CFRetained<CFDictionary>> {
    extern "C-unwind" {
        fn QLThumbnailRequestCopyOptions(
            thumbnail: &QLThumbnailRequest,
        ) -> Option<NonNull<CFDictionary>>;
    }
    let ret = unsafe { QLThumbnailRequestCopyOptions(thumbnail) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "renamed to `QLThumbnailRequest::content_uti`"]
#[inline]
pub unsafe extern "C-unwind" fn QLThumbnailRequestCopyContentUTI(
    thumbnail: &QLThumbnailRequest,
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn QLThumbnailRequestCopyContentUTI(
            thumbnail: &QLThumbnailRequest,
        ) -> Option<NonNull<CFString>>;
    }
    let ret = unsafe { QLThumbnailRequestCopyContentUTI(thumbnail) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    #[deprecated = "renamed to `QLThumbnailRequest::maximum_size`"]
    pub fn QLThumbnailRequestGetMaximumSize(thumbnail: &QLThumbnailRequest) -> CGSize;
}

#[deprecated = "renamed to `QLThumbnailRequest::generator_bundle`"]
#[inline]
pub unsafe extern "C-unwind" fn QLThumbnailRequestGetGeneratorBundle(
    thumbnail: &QLThumbnailRequest,
) -> Option<CFRetained<CFBundle>> {
    extern "C-unwind" {
        fn QLThumbnailRequestGetGeneratorBundle(
            thumbnail: &QLThumbnailRequest,
        ) -> Option<NonNull<CFBundle>>;
    }
    let ret = unsafe { QLThumbnailRequestGetGeneratorBundle(thumbnail) };
    ret.map(|ret| unsafe { CFRetained::retain(ret) })
}

extern "C-unwind" {
    #[deprecated = "renamed to `QLThumbnailRequest::set_document_object`"]
    pub fn QLThumbnailRequestSetDocumentObject(
        thumbnail: &QLThumbnailRequest,
        object: *const c_void,
        callbacks: *const CFArrayCallBacks,
    );
}

extern "C-unwind" {
    #[deprecated = "renamed to `QLThumbnailRequest::document_object`"]
    pub fn QLThumbnailRequestGetDocumentObject(thumbnail: &QLThumbnailRequest) -> *const c_void;
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-graphics")]
    #[deprecated = "renamed to `QLThumbnailRequest::set_image`"]
    pub fn QLThumbnailRequestSetImage(
        thumbnail: &QLThumbnailRequest,
        image: Option<&CGImage>,
        properties: Option<&CFDictionary>,
    );
}

extern "C-unwind" {
    #[deprecated = "renamed to `QLThumbnailRequest::set_image_with_data`"]
    pub fn QLThumbnailRequestSetImageWithData(
        thumbnail: &QLThumbnailRequest,
        data: Option<&CFData>,
        properties: Option<&CFDictionary>,
    );
}

#[cfg(feature = "objc2-core-graphics")]
#[deprecated = "renamed to `QLThumbnailRequest::context`"]
#[inline]
pub unsafe extern "C-unwind" fn QLThumbnailRequestCreateContext(
    thumbnail: &QLThumbnailRequest,
    size: CGSize,
    is_bitmap: bool,
    properties: Option<&CFDictionary>,
) -> Option<CFRetained<CGContext>> {
    extern "C-unwind" {
        fn QLThumbnailRequestCreateContext(
            thumbnail: &QLThumbnailRequest,
            size: CGSize,
            is_bitmap: Boolean,
            properties: Option<&CFDictionary>,
        ) -> Option<NonNull<CGContext>>;
    }
    let ret =
        unsafe { QLThumbnailRequestCreateContext(thumbnail, size, is_bitmap as _, properties) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-graphics")]
    #[deprecated = "renamed to `QLThumbnailRequest::flush_context`"]
    pub fn QLThumbnailRequestFlushContext(
        thumbnail: &QLThumbnailRequest,
        context: Option<&CGContext>,
    );
}

extern "C-unwind" {
    #[deprecated = "renamed to `QLThumbnailRequest::set_image_at_url`"]
    pub fn QLThumbnailRequestSetImageAtURL(
        thumbnail: &QLThumbnailRequest,
        url: Option<&CFURL>,
        properties: Option<&CFDictionary>,
    );
}

extern "C-unwind" {
    #[deprecated = "renamed to `QLThumbnailRequest::set_thumbnail_with_data_representation`"]
    pub fn QLThumbnailRequestSetThumbnailWithDataRepresentation(
        thumbnail: &QLThumbnailRequest,
        data: Option<&CFData>,
        content_type_uti: Option<&CFString>,
        preview_properties: Option<&CFDictionary>,
        properties: Option<&CFDictionary>,
    );
}

extern "C-unwind" {
    #[deprecated = "renamed to `QLThumbnailRequest::set_thumbnail_with_url_representation`"]
    pub fn QLThumbnailRequestSetThumbnailWithURLRepresentation(
        thumbnail: &QLThumbnailRequest,
        url: Option<&CFURL>,
        content_type_uti: Option<&CFString>,
        preview_properties: Option<&CFDictionary>,
        properties: Option<&CFDictionary>,
    );
}

#[deprecated = "renamed to `QLThumbnailRequest::is_cancelled`"]
#[inline]
pub unsafe extern "C-unwind" fn QLThumbnailRequestIsCancelled(
    thumbnail: &QLThumbnailRequest,
) -> bool {
    extern "C-unwind" {
        fn QLThumbnailRequestIsCancelled(thumbnail: &QLThumbnailRequest) -> Boolean;
    }
    let ret = unsafe { QLThumbnailRequestIsCancelled(thumbnail) };
    ret != 0
}

#[deprecated = "renamed to `QLPreviewRequest::url`"]
#[inline]
pub unsafe extern "C-unwind" fn QLPreviewRequestCopyURL(
    preview: &QLPreviewRequest,
) -> Option<CFRetained<CFURL>> {
    extern "C-unwind" {
        fn QLPreviewRequestCopyURL(preview: &QLPreviewRequest) -> Option<NonNull<CFURL>>;
    }
    let ret = unsafe { QLPreviewRequestCopyURL(preview) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "renamed to `QLPreviewRequest::options`"]
#[inline]
pub unsafe extern "C-unwind" fn QLPreviewRequestCopyOptions(
    preview: &QLPreviewRequest,
) -> Option<CFRetained<CFDictionary>> {
    extern "C-unwind" {
        fn QLPreviewRequestCopyOptions(preview: &QLPreviewRequest)
            -> Option<NonNull<CFDictionary>>;
    }
    let ret = unsafe { QLPreviewRequestCopyOptions(preview) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "renamed to `QLPreviewRequest::content_uti`"]
#[inline]
pub unsafe extern "C-unwind" fn QLPreviewRequestCopyContentUTI(
    preview: &QLPreviewRequest,
) -> Option<CFRetained<CFString>> {
    extern "C-unwind" {
        fn QLPreviewRequestCopyContentUTI(preview: &QLPreviewRequest) -> Option<NonNull<CFString>>;
    }
    let ret = unsafe { QLPreviewRequestCopyContentUTI(preview) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "renamed to `QLPreviewRequest::generator_bundle`"]
#[inline]
pub unsafe extern "C-unwind" fn QLPreviewRequestGetGeneratorBundle(
    preview: &QLPreviewRequest,
) -> Option<CFRetained<CFBundle>> {
    extern "C-unwind" {
        fn QLPreviewRequestGetGeneratorBundle(
            preview: &QLPreviewRequest,
        ) -> Option<NonNull<CFBundle>>;
    }
    let ret = unsafe { QLPreviewRequestGetGeneratorBundle(preview) };
    ret.map(|ret| unsafe { CFRetained::retain(ret) })
}

extern "C-unwind" {
    #[deprecated = "renamed to `QLPreviewRequest::set_document_object`"]
    pub fn QLPreviewRequestSetDocumentObject(
        preview: &QLPreviewRequest,
        object: *const c_void,
        callbacks: *const CFArrayCallBacks,
    );
}

extern "C-unwind" {
    #[deprecated = "renamed to `QLPreviewRequest::document_object`"]
    pub fn QLPreviewRequestGetDocumentObject(preview: &QLPreviewRequest) -> *const c_void;
}

#[deprecated = "renamed to `QLPreviewRequest::is_cancelled`"]
#[inline]
pub unsafe extern "C-unwind" fn QLPreviewRequestIsCancelled(preview: &QLPreviewRequest) -> bool {
    extern "C-unwind" {
        fn QLPreviewRequestIsCancelled(preview: &QLPreviewRequest) -> Boolean;
    }
    let ret = unsafe { QLPreviewRequestIsCancelled(preview) };
    ret != 0
}

extern "C-unwind" {
    #[deprecated = "renamed to `QLPreviewRequest::set_data_representation`"]
    pub fn QLPreviewRequestSetDataRepresentation(
        preview: &QLPreviewRequest,
        data: Option<&CFData>,
        content_type_uti: Option<&CFString>,
        properties: Option<&CFDictionary>,
    );
}

extern "C-unwind" {
    #[deprecated = "renamed to `QLPreviewRequest::set_url_representation`"]
    pub fn QLPreviewRequestSetURLRepresentation(
        preview: &QLPreviewRequest,
        url: Option<&CFURL>,
        content_type_uti: Option<&CFString>,
        properties: Option<&CFDictionary>,
    );
}

#[cfg(feature = "objc2-core-graphics")]
#[deprecated = "renamed to `QLPreviewRequest::context`"]
#[inline]
pub unsafe extern "C-unwind" fn QLPreviewRequestCreateContext(
    preview: &QLPreviewRequest,
    size: CGSize,
    is_bitmap: bool,
    properties: Option<&CFDictionary>,
) -> Option<CFRetained<CGContext>> {
    extern "C-unwind" {
        fn QLPreviewRequestCreateContext(
            preview: &QLPreviewRequest,
            size: CGSize,
            is_bitmap: Boolean,
            properties: Option<&CFDictionary>,
        ) -> Option<NonNull<CGContext>>;
    }
    let ret = unsafe { QLPreviewRequestCreateContext(preview, size, is_bitmap as _, properties) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[cfg(feature = "objc2-core-graphics")]
#[deprecated = "renamed to `QLPreviewRequest::pdf_context`"]
#[inline]
pub unsafe extern "C-unwind" fn QLPreviewRequestCreatePDFContext(
    preview: &QLPreviewRequest,
    media_box: *const CGRect,
    auxiliary_info: Option<&CFDictionary>,
    properties: Option<&CFDictionary>,
) -> Option<CFRetained<CGContext>> {
    extern "C-unwind" {
        fn QLPreviewRequestCreatePDFContext(
            preview: &QLPreviewRequest,
            media_box: *const CGRect,
            auxiliary_info: Option<&CFDictionary>,
            properties: Option<&CFDictionary>,
        ) -> Option<NonNull<CGContext>>;
    }
    let ret =
        unsafe { QLPreviewRequestCreatePDFContext(preview, media_box, auxiliary_info, properties) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    #[cfg(feature = "objc2-core-graphics")]
    #[deprecated = "renamed to `QLPreviewRequest::flush_context`"]
    pub fn QLPreviewRequestFlushContext(preview: &QLPreviewRequest, context: Option<&CGContext>);
}
