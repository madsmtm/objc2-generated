//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// The behavior of repetition to use when a symbol effect is animating.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymboleffectoptionsrepeatbehavior?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolEffectOptionsRepeatBehavior;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolEffectOptionsRepeatBehavior {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolEffectOptionsRepeatBehavior {}
);

unsafe impl CopyingHelper for NSSymbolEffectOptionsRepeatBehavior {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolEffectOptionsRepeatBehavior {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolEffectOptionsRepeatBehavior {}
);

impl NSSymbolEffectOptionsRepeatBehavior {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Creates and returns a repeat behavior that prefers to repeat indefinitely using periodic animations.
        /// Periodic animations play the effect at regular intervals starting and stopping each time.
        ///
        /// - Returns: A new behavior that prefers to repeat indefinitely using periodic animations.
        #[unsafe(method(behaviorPeriodic))]
        #[unsafe(method_family = none)]
        pub unsafe fn behaviorPeriodic() -> Retained<Self>;

        /// Creates and returns a repeat behavior with a preferred play count using periodic animations.
        /// Periodic animations play the effect at regular intervals starting and stopping each time.
        ///
        /// - Parameter count: The preferred number of times to play the
        /// effect. Very
        /// large or small values may be clamped.
        ///
        /// - Returns: A new behavior with the preferred
        /// play count using periodic animations.
        #[unsafe(method(behaviorPeriodicWithCount:))]
        #[unsafe(method_family = none)]
        pub unsafe fn behaviorPeriodicWithCount(count: NSInteger) -> Retained<Self>;

        /// Creates and returns a repeat behavior with a preferred repeat delay using periodic animations.
        /// Periodic animations play the effect at regular intervals starting and stopping each time.
        ///
        /// - Parameter delay: The preferred delay between repetitions,
        /// in seconds.
        ///
        /// - Returns: A new behavior that prefers to repeat indefinitely
        /// with a specified delay using periodic animations.
        #[unsafe(method(behaviorPeriodicWithDelay:))]
        #[unsafe(method_family = none)]
        pub unsafe fn behaviorPeriodicWithDelay(delay: c_double) -> Retained<Self>;

        /// Creates and returns a repeat behavior with a preferred play count and delay using periodic animations.
        /// Periodic animations play the effect at regular intervals starting and stopping each time.
        ///
        /// - Parameter count: The preferred number of times to play the
        /// effect. Very
        /// large or small values may be clamped.
        ///
        /// - Parameter delay: The preferred delay between repetitions,
        /// in seconds.
        ///
        /// - Returns: A new behavior with the preferred
        /// play count and delay using periodic animations.
        #[unsafe(method(behaviorPeriodicWithCount:delay:))]
        #[unsafe(method_family = none)]
        pub unsafe fn behaviorPeriodicWithCount_delay(
            count: NSInteger,
            delay: c_double,
        ) -> Retained<Self>;

        /// Creates and returns a repeat behavior that prefers to repeat indefinitely,
        /// using continuous animations if available.
        /// Continuous animations have an intro, a body that runs as long as the effect is enabled, and an outro.
        /// If available these animations provide a smoother animation when an effect repeats indefinitely.
        ///
        /// - Returns: A new behavior that prefers to repeat indefinitely with continuous animations.
        #[unsafe(method(behaviorContinuous))]
        #[unsafe(method_family = none)]
        pub unsafe fn behaviorContinuous() -> Retained<Self>;
    );
}

extern_class!(
    /// Options configuring how symbol effects apply to symbol views.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymboleffectoptions?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolEffectOptions;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolEffectOptions {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolEffectOptions {}
);

unsafe impl CopyingHelper for NSSymbolEffectOptions {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolEffectOptions {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolEffectOptions {}
);

impl NSSymbolEffectOptions {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// The default options.
        #[unsafe(method(options))]
        #[unsafe(method_family = none)]
        pub unsafe fn options() -> Retained<Self>;

        /// Convenience initializer that prefers to repeat indefinitely.
        #[deprecated]
        #[unsafe(method(optionsWithRepeating))]
        #[unsafe(method_family = none)]
        pub unsafe fn optionsWithRepeating_class() -> Retained<Self>;

        /// Return a copy of the options that prefers to repeat indefinitely.
        #[deprecated]
        #[unsafe(method(optionsWithRepeating))]
        #[unsafe(method_family = none)]
        pub unsafe fn optionsWithRepeating(&self) -> Retained<Self>;

        /// Convenience initializer that prefers not to repeat.
        #[unsafe(method(optionsWithNonRepeating))]
        #[unsafe(method_family = none)]
        pub unsafe fn optionsWithNonRepeating_class() -> Retained<Self>;

        /// Return a copy of the options that prefers not to repeat.
        #[unsafe(method(optionsWithNonRepeating))]
        #[unsafe(method_family = none)]
        pub unsafe fn optionsWithNonRepeating(&self) -> Retained<Self>;

        /// Convenience initializer setting a preferred repeat count.
        ///
        /// - Parameter count: The preferred number of times to play the
        /// effect. Very large or small values may be clamped.
        ///
        /// - Returns: A new options object with the preferred repeat count.
        #[deprecated]
        #[unsafe(method(optionsWithRepeatCount:))]
        #[unsafe(method_family = none)]
        pub unsafe fn optionsWithRepeatCount_class(count: NSInteger) -> Retained<Self>;

        /// Return a copy of the options setting a preferred repeat count.
        ///
        /// - Parameter count: The preferred number of times to play the
        /// effect. Very large or small values may be clamped.
        ///
        /// - Returns: A new options object with the preferred repeat count.
        #[deprecated]
        #[unsafe(method(optionsWithRepeatCount:))]
        #[unsafe(method_family = none)]
        pub unsafe fn optionsWithRepeatCount(&self, count: NSInteger) -> Retained<Self>;

        /// Convenience initializer setting the preferred speed multiplier.
        ///
        /// - Parameter speed: the preferred speed multiplier to play the effect with.
        /// The default multiplier is `1.0`. Very large or small values may
        /// be clamped.
        ///
        /// - Returns: A new instance with the preferred speed multiplier.
        #[unsafe(method(optionsWithSpeed:))]
        #[unsafe(method_family = none)]
        pub unsafe fn optionsWithSpeed_class(speed: c_double) -> Retained<Self>;

        /// Return a copy of the options setting the preferred speed multiplier.
        ///
        /// - Parameter speed: The preferred speed multiplier to play the effect with.
        /// The default multiplier is `1.0`. Very large or small values may
        /// be clamped.
        ///
        /// - Returns: A new instance with the preferred speed multiplier.
        #[unsafe(method(optionsWithSpeed:))]
        #[unsafe(method_family = none)]
        pub unsafe fn optionsWithSpeed(&self, speed: c_double) -> Retained<Self>;

        /// Convenience initializer setting a preferred repeat behavior.
        ///
        /// - Parameter behavior: The preferred behavior when the effect is repeated.
        ///
        /// - Returns: A new options object with the preferred repeat behavior.
        #[unsafe(method(optionsWithRepeatBehavior:))]
        #[unsafe(method_family = none)]
        pub unsafe fn optionsWithRepeatBehavior_class(
            behavior: &NSSymbolEffectOptionsRepeatBehavior,
        ) -> Retained<Self>;

        /// Return a copy of the options setting a preferred repeat behavior.
        ///
        /// - Parameter behavior: The preferred behavior when the effect is repeated.
        ///
        /// - Returns: A new options object with the preferred repeat behavior.
        #[unsafe(method(optionsWithRepeatBehavior:))]
        #[unsafe(method_family = none)]
        pub unsafe fn optionsWithRepeatBehavior(
            &self,
            behavior: &NSSymbolEffectOptionsRepeatBehavior,
        ) -> Retained<Self>;
    );
}

extern_class!(
    /// An abstract base class for effects that can be applied to both NSImageViews and UIImageViews that have symbol-based images.
    ///
    /// Don't use this class directly, instead use any of the concrete subclasses.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymboleffect?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolEffect;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolEffect {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolEffect {}
);

unsafe impl CopyingHelper for NSSymbolEffect {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolEffect {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolEffect {}
);

impl NSSymbolEffect {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// A symbol effect that applies the Pulse animation to
    /// symbol images.
    ///
    /// The Pulse animation fades the opacity of either all layers in
    /// the symbol, or of a subset of the layers in the symbol.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymbolpulseeffect?language=objc)
    #[unsafe(super(NSSymbolEffect, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolPulseEffect;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolPulseEffect {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolPulseEffect {}
);

unsafe impl CopyingHelper for NSSymbolPulseEffect {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolPulseEffect {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolPulseEffect {}
);

impl NSSymbolPulseEffect {
    extern_methods!(
        /// The default pulse effect, determined by the system.
        #[unsafe(method(effect))]
        #[unsafe(method_family = none)]
        pub unsafe fn effect() -> Retained<Self>;

        /// Returns a copy of the effect that only animates annotated pulse layers.
        #[unsafe(method(effectWithByLayer))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithByLayer(&self) -> Retained<Self>;

        /// Returns a copy of the effect that animates all layers of the symbol simultaneously.
        #[unsafe(method(effectWithWholeSymbol))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithWholeSymbol(&self) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSSymbolEffect`.
impl NSSymbolPulseEffect {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// A symbol effect that applies the Bounce animation to
    /// symbol images.
    ///
    /// The Bounce animation applies a transitory scaling effect to the symbol.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymbolbounceeffect?language=objc)
    #[unsafe(super(NSSymbolEffect, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolBounceEffect;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolBounceEffect {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolBounceEffect {}
);

unsafe impl CopyingHelper for NSSymbolBounceEffect {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolBounceEffect {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolBounceEffect {}
);

impl NSSymbolBounceEffect {
    extern_methods!(
        /// The default bounce effect, determined by the system.
        #[unsafe(method(effect))]
        #[unsafe(method_family = none)]
        pub unsafe fn effect() -> Retained<Self>;

        /// Convenience initializer for a bounce effect that bounces up.
        #[unsafe(method(bounceUpEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn bounceUpEffect() -> Retained<Self>;

        /// Convenience initializer for a bounce effect that bounces down.
        #[unsafe(method(bounceDownEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn bounceDownEffect() -> Retained<Self>;

        /// Returns a copy of the effect that animates incrementally, by layer.
        #[unsafe(method(effectWithByLayer))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithByLayer(&self) -> Retained<Self>;

        /// Returns a copy of the effect that animates all layers of the symbol simultaneously.
        #[unsafe(method(effectWithWholeSymbol))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithWholeSymbol(&self) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSSymbolEffect`.
impl NSSymbolBounceEffect {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// A symbol effect that applies the Variable Color
    /// animation to symbol images.
    ///
    /// The Variable Color animation replaces the opacity of variable
    /// layers in the symbol by a possibly repeating pattern that moves
    /// up and possibly back down the variable layers. It has no effect
    /// for non-variable color symbol images.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymbolvariablecoloreffect?language=objc)
    #[unsafe(super(NSSymbolEffect, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolVariableColorEffect;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolVariableColorEffect {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolVariableColorEffect {}
);

unsafe impl CopyingHelper for NSSymbolVariableColorEffect {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolVariableColorEffect {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolVariableColorEffect {}
);

impl NSSymbolVariableColorEffect {
    extern_methods!(
        /// The default variable color effect, determined by the system.
        #[unsafe(method(effect))]
        #[unsafe(method_family = none)]
        pub unsafe fn effect() -> Retained<Self>;

        /// Returns a copy of the effect that activates one layer at a time. This cancels the cumulative variant.
        #[unsafe(method(effectWithIterative))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithIterative(&self) -> Retained<Self>;

        /// Returns a copy of the effect that activates each layer until all layers are active. This cancels the iterative variant.
        #[unsafe(method(effectWithCumulative))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithCumulative(&self) -> Retained<Self>;

        /// Returns a copy of the effect that animates in reverse after fully executing. This cancels the nonReversing variant.
        #[unsafe(method(effectWithReversing))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithReversing(&self) -> Retained<Self>;

        /// Returns a copy of the effect that only animates forwards before restarting. This cancels the reversing variant.
        #[unsafe(method(effectWithNonReversing))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithNonReversing(&self) -> Retained<Self>;

        /// Returns a copy of the effect that hides layers when they are inactive.
        #[unsafe(method(effectWithHideInactiveLayers))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithHideInactiveLayers(&self) -> Retained<Self>;

        /// Returns a copy of the effect that draws layers with reduced (but non-zero)
        /// opacity when they are inactive.
        #[unsafe(method(effectWithDimInactiveLayers))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithDimInactiveLayers(&self) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSSymbolEffect`.
impl NSSymbolVariableColorEffect {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// A symbol effect that scales symbol images.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymbolscaleeffect?language=objc)
    #[unsafe(super(NSSymbolEffect, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolScaleEffect;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolScaleEffect {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolScaleEffect {}
);

unsafe impl CopyingHelper for NSSymbolScaleEffect {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolScaleEffect {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolScaleEffect {}
);

impl NSSymbolScaleEffect {
    extern_methods!(
        /// The default scaling effect, determined by the system.
        #[unsafe(method(effect))]
        #[unsafe(method_family = none)]
        pub unsafe fn effect() -> Retained<Self>;

        /// Convenience initializer to create a scale effect with a scale up level.
        #[unsafe(method(scaleUpEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn scaleUpEffect() -> Retained<Self>;

        /// Convenience initializer to create a scale effect with a scale down level.
        #[unsafe(method(scaleDownEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn scaleDownEffect() -> Retained<Self>;

        /// Returns a copy of the effect that animates incrementally, by layer.
        #[unsafe(method(effectWithByLayer))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithByLayer(&self) -> Retained<Self>;

        /// Returns a copy of the effect that animates all layers of the symbol simultaneously.
        #[unsafe(method(effectWithWholeSymbol))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithWholeSymbol(&self) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSSymbolEffect`.
impl NSSymbolScaleEffect {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// A symbol effect that applies the Appear animation to
    /// symbol images.
    ///
    /// The Appear animation makes the symbol visible either as a whole,
    /// or one motion group at a time.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymbolappeareffect?language=objc)
    #[unsafe(super(NSSymbolEffect, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolAppearEffect;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolAppearEffect {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolAppearEffect {}
);

unsafe impl CopyingHelper for NSSymbolAppearEffect {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolAppearEffect {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolAppearEffect {}
);

impl NSSymbolAppearEffect {
    extern_methods!(
        /// The default appear effect, determined by the system.
        #[unsafe(method(effect))]
        #[unsafe(method_family = none)]
        pub unsafe fn effect() -> Retained<Self>;

        /// Convenience initializer for an appear effect that appears scaling up.
        #[unsafe(method(appearUpEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn appearUpEffect() -> Retained<Self>;

        /// Convenience initializer for an appear effect that appears scaling down.
        #[unsafe(method(appearDownEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn appearDownEffect() -> Retained<Self>;

        /// Returns a copy of the effect that animates incrementally, by layer.
        #[unsafe(method(effectWithByLayer))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithByLayer(&self) -> Retained<Self>;

        /// Returns a copy of the effect that animates all layers of the symbol simultaneously.
        #[unsafe(method(effectWithWholeSymbol))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithWholeSymbol(&self) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSSymbolEffect`.
impl NSSymbolAppearEffect {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// A symbol effect that applies the Disappear animation to
    /// symbol images.
    ///
    /// The Disappear animation makes the symbol visible either as a whole,
    /// or one motion group at a time.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymboldisappeareffect?language=objc)
    #[unsafe(super(NSSymbolEffect, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolDisappearEffect;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolDisappearEffect {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolDisappearEffect {}
);

unsafe impl CopyingHelper for NSSymbolDisappearEffect {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolDisappearEffect {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolDisappearEffect {}
);

impl NSSymbolDisappearEffect {
    extern_methods!(
        /// The default disappear effect, determined by the system.
        #[unsafe(method(effect))]
        #[unsafe(method_family = none)]
        pub unsafe fn effect() -> Retained<Self>;

        /// Convenience initializer for a disappear effect that disappears scaling up.
        #[unsafe(method(disappearUpEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn disappearUpEffect() -> Retained<Self>;

        /// Convenience initializer for a disappear effect that disappears scaling down.
        #[unsafe(method(disappearDownEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn disappearDownEffect() -> Retained<Self>;

        /// Returns a copy of the effect that animates incrementally, by layer.
        #[unsafe(method(effectWithByLayer))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithByLayer(&self) -> Retained<Self>;

        /// Returns a copy of the effect that animates all layers of the symbol simultaneously.
        #[unsafe(method(effectWithWholeSymbol))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithWholeSymbol(&self) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSSymbolEffect`.
impl NSSymbolDisappearEffect {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// A symbol effect that applies the Wiggle animation to symbol images.
    ///
    /// The Wiggle animation applies a transitory translation or rotation effect
    /// to the symbol.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymbolwiggleeffect?language=objc)
    #[unsafe(super(NSSymbolEffect, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolWiggleEffect;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolWiggleEffect {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolWiggleEffect {}
);

unsafe impl CopyingHelper for NSSymbolWiggleEffect {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolWiggleEffect {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolWiggleEffect {}
);

impl NSSymbolWiggleEffect {
    extern_methods!(
        /// The default wiggle effect, determined by the system.
        #[unsafe(method(effect))]
        #[unsafe(method_family = none)]
        pub unsafe fn effect() -> Retained<Self>;

        /// Convenience initializer for a wiggle effect that
        /// rotates back and forth, starting by rotating clockwise.
        #[unsafe(method(wiggleClockwiseEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn wiggleClockwiseEffect() -> Retained<Self>;

        /// Convenience initializer for a wiggle effect that
        /// rotates back and forth, starting by rotating counter-clockwise.
        #[unsafe(method(wiggleCounterClockwiseEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn wiggleCounterClockwiseEffect() -> Retained<Self>;

        /// Convenience initializer for a wiggle effect that
        /// moves back and forth horizontally, starting by moving left.
        #[unsafe(method(wiggleLeftEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn wiggleLeftEffect() -> Retained<Self>;

        /// Convenience initializer for a wiggle effect that
        /// moves back and forth horizontally, starting by moving right.
        #[unsafe(method(wiggleRightEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn wiggleRightEffect() -> Retained<Self>;

        /// Convenience initializer for a wiggle effect that
        /// moves back and forth vertically, starting by moving up.
        #[unsafe(method(wiggleUpEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn wiggleUpEffect() -> Retained<Self>;

        /// Convenience initializer for a wiggle effect that
        /// moves back and forth vertically, starting by moving down.
        #[unsafe(method(wiggleDownEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn wiggleDownEffect() -> Retained<Self>;

        /// Convenience initializer for a wiggle effect that moves back and forth
        /// horizontally based on the current locale, starting by moving forward.
        #[unsafe(method(wiggleForwardEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn wiggleForwardEffect() -> Retained<Self>;

        /// Convenience initializer for a wiggle effect that moves back and forth
        /// horizontally based on the current locale, starting by moving backward.
        #[unsafe(method(wiggleBackwardEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn wiggleBackwardEffect() -> Retained<Self>;

        /// Convenience initializer for a wiggle effect that moves back and forth
        /// along an axis, starting by moving toward a custom angle.
        ///
        /// The angle is in degrees moving clockwise from the positive x-axis.
        #[unsafe(method(wiggleCustomAngleEffect:))]
        #[unsafe(method_family = none)]
        pub unsafe fn wiggleCustomAngleEffect(angle: c_double) -> Retained<Self>;

        /// Returns a copy of the effect that animates incrementally, by layer.
        #[unsafe(method(effectWithByLayer))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithByLayer(&self) -> Retained<Self>;

        /// Returns a copy of the effect that animates all layers of the symbol simultaneously.
        #[unsafe(method(effectWithWholeSymbol))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithWholeSymbol(&self) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSSymbolEffect`.
impl NSSymbolWiggleEffect {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// A symbol effect that applies the Rotate animation to
    /// symbol images.
    ///
    /// The Rotate animation rotates parts of a symbol around a
    /// symbol-provided anchor point.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymbolrotateeffect?language=objc)
    #[unsafe(super(NSSymbolEffect, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolRotateEffect;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolRotateEffect {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolRotateEffect {}
);

unsafe impl CopyingHelper for NSSymbolRotateEffect {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolRotateEffect {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolRotateEffect {}
);

impl NSSymbolRotateEffect {
    extern_methods!(
        /// The default rotate effect, determined by the system.
        #[unsafe(method(effect))]
        #[unsafe(method_family = none)]
        pub unsafe fn effect() -> Retained<Self>;

        /// Convenience initializer for a rotate effect that rotates clockwise.
        #[unsafe(method(rotateClockwiseEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn rotateClockwiseEffect() -> Retained<Self>;

        /// Convenience initializer for a rotate effect that rotates counter-clockwise.
        #[unsafe(method(rotateCounterClockwiseEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn rotateCounterClockwiseEffect() -> Retained<Self>;

        /// Returns a copy of the effect that animates incrementally, by layer.
        #[unsafe(method(effectWithByLayer))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithByLayer(&self) -> Retained<Self>;

        /// Returns a copy of the effect that animates all layers of the symbol simultaneously.
        #[unsafe(method(effectWithWholeSymbol))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithWholeSymbol(&self) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSSymbolEffect`.
impl NSSymbolRotateEffect {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// A symbol effect that applies the Breathe animation to
    /// symbol images.
    ///
    /// The Breathe animation smoothly scales a symbol up and down.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymbolbreatheeffect?language=objc)
    #[unsafe(super(NSSymbolEffect, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolBreatheEffect;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolBreatheEffect {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolBreatheEffect {}
);

unsafe impl CopyingHelper for NSSymbolBreatheEffect {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolBreatheEffect {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolBreatheEffect {}
);

impl NSSymbolBreatheEffect {
    extern_methods!(
        /// The default breathe effect, determined by the system.
        #[unsafe(method(effect))]
        #[unsafe(method_family = none)]
        pub unsafe fn effect() -> Retained<Self>;

        /// Convenience initializer for a breathe effect that
        /// pulses layers as they breathe.
        #[unsafe(method(breathePulseEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn breathePulseEffect() -> Retained<Self>;

        /// Convenience initializer for a breathe effect that makes
        /// the symbol breathe with no other styling.
        #[unsafe(method(breathePlainEffect))]
        #[unsafe(method_family = none)]
        pub unsafe fn breathePlainEffect() -> Retained<Self>;

        /// Returns a copy of the effect that animates incrementally, by layer.
        #[unsafe(method(effectWithByLayer))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithByLayer(&self) -> Retained<Self>;

        /// Returns a copy of the effect that animates all layers of the symbol simultaneously.
        #[unsafe(method(effectWithWholeSymbol))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithWholeSymbol(&self) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSSymbolEffect`.
impl NSSymbolBreatheEffect {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// A symbol effect that applies the DrawOn animation to symbol images.
    ///
    /// The DrawOn animation makes the symbol visible either as a whole, or
    /// one motion group at a time, animating parts of the symbol with draw data.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymboldrawoneffect?language=objc)
    #[unsafe(super(NSSymbolEffect, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolDrawOnEffect;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolDrawOnEffect {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolDrawOnEffect {}
);

unsafe impl CopyingHelper for NSSymbolDrawOnEffect {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolDrawOnEffect {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolDrawOnEffect {}
);

impl NSSymbolDrawOnEffect {
    extern_methods!(
        /// The default draw on effect, determined by the system.
        #[unsafe(method(effect))]
        #[unsafe(method_family = none)]
        pub unsafe fn effect() -> Retained<Self>;

        /// Returns a copy of the effect requesting an animation that
        /// applies separately to each motion group.
        #[unsafe(method(effectWithByLayer))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithByLayer(&self) -> Retained<Self>;

        /// Returns a copy of the effect requesting an animation that
        /// applies to all motion groups simultaneously.
        #[unsafe(method(effectWithWholeSymbol))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithWholeSymbol(&self) -> Retained<Self>;

        /// Returns a copy of the effect requesting an animation that
        /// applies separately to each motion group, where only
        /// one motion group is active at a time.
        #[unsafe(method(effectWithIndividually))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithIndividually(&self) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSSymbolEffect`.
impl NSSymbolDrawOnEffect {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// A symbol effect that applies the DrawOff animation to symbol images.
    ///
    /// The DrawOff animation makes the symbol hidden either as a whole, or
    /// one motion group at a time, animating parts of the symbol with draw data.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymboldrawoffeffect?language=objc)
    #[unsafe(super(NSSymbolEffect, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolDrawOffEffect;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolDrawOffEffect {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolDrawOffEffect {}
);

unsafe impl CopyingHelper for NSSymbolDrawOffEffect {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolDrawOffEffect {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolDrawOffEffect {}
);

impl NSSymbolDrawOffEffect {
    extern_methods!(
        /// The default draw off effect, determined by the system.
        #[unsafe(method(effect))]
        #[unsafe(method_family = none)]
        pub unsafe fn effect() -> Retained<Self>;

        /// Returns a copy of the effect requesting an animation that
        /// applies separately to each motion group.
        #[unsafe(method(effectWithByLayer))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithByLayer(&self) -> Retained<Self>;

        /// Returns a copy of the effect requesting an animation that
        /// applies to all motion groups simultaneously.
        #[unsafe(method(effectWithWholeSymbol))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithWholeSymbol(&self) -> Retained<Self>;

        /// Returns a copy of the effect requesting an animation that
        /// applies separately to each motion group, where only
        /// one motion group is active at a time.
        #[unsafe(method(effectWithIndividually))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithIndividually(&self) -> Retained<Self>;

        /// Returns a copy of the effect that animates in reverse. This cancels the nonReversed variant.
        #[unsafe(method(effectWithReversed))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithReversed(&self) -> Retained<Self>;

        /// Returns a copy of the effect that only animates forwards. This cancels the reversed variant.
        #[unsafe(method(effectWithNonReversed))]
        #[unsafe(method_family = none)]
        pub unsafe fn effectWithNonReversed(&self) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSSymbolEffect`.
impl NSSymbolDrawOffEffect {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// An abstract base class for transitions that can be applied to both NSImageViews and
    /// UIImageViews that have symbol-based images.
    ///
    /// Don't use this class directly, instead use any of the concrete subclasses.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymbolcontenttransition?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolContentTransition;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolContentTransition {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolContentTransition {}
);

unsafe impl CopyingHelper for NSSymbolContentTransition {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolContentTransition {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolContentTransition {}
);

impl NSSymbolContentTransition {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// A symbol effect applies the MagicReplace animation to
    /// symbol images.
    ///
    /// The MagicReplace effect animates common elements across
    /// symbol images.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymbolmagicreplacecontenttransition?language=objc)
    #[unsafe(super(NSSymbolContentTransition, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolMagicReplaceContentTransition;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolMagicReplaceContentTransition {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolMagicReplaceContentTransition {}
);

unsafe impl CopyingHelper for NSSymbolMagicReplaceContentTransition {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolMagicReplaceContentTransition {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolMagicReplaceContentTransition {}
);

impl NSSymbolMagicReplaceContentTransition {
    extern_methods!();
}

/// Methods declared on superclass `NSSymbolContentTransition`.
impl NSSymbolMagicReplaceContentTransition {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// A symbol effect that animates the replacement of one symbol image
    /// with another.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymbolreplacecontenttransition?language=objc)
    #[unsafe(super(NSSymbolContentTransition, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolReplaceContentTransition;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolReplaceContentTransition {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolReplaceContentTransition {}
);

unsafe impl CopyingHelper for NSSymbolReplaceContentTransition {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolReplaceContentTransition {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolReplaceContentTransition {}
);

impl NSSymbolReplaceContentTransition {
    extern_methods!(
        /// The default replace transition, determined by the system.
        #[unsafe(method(transition))]
        #[unsafe(method_family = none)]
        pub unsafe fn transition() -> Retained<Self>;

        /// Convenience initializer for a replace content transition where the initial symbol
        /// scales down as it is removed, and the new symbol scales up as it is added.
        #[unsafe(method(replaceDownUpTransition))]
        #[unsafe(method_family = none)]
        pub unsafe fn replaceDownUpTransition() -> Retained<Self>;

        /// Convenience initializer for a replace content transition where the initial symbol
        /// scales up as it is removed, and the new symbol scales up as it is added.
        #[unsafe(method(replaceUpUpTransition))]
        #[unsafe(method_family = none)]
        pub unsafe fn replaceUpUpTransition() -> Retained<Self>;

        /// Convenience initializer for a replace content transition where the initial symbol
        /// is removed with no animation, and the new symbol scales up as it is added.
        #[unsafe(method(replaceOffUpTransition))]
        #[unsafe(method_family = none)]
        pub unsafe fn replaceOffUpTransition() -> Retained<Self>;

        /// Returns a copy of the content transition that animates incrementally, by layer.
        #[unsafe(method(transitionWithByLayer))]
        #[unsafe(method_family = none)]
        pub unsafe fn transitionWithByLayer(&self) -> Retained<Self>;

        /// Returns a copy of the content transition that animates all layers of the symbol simultaneously.
        #[unsafe(method(transitionWithWholeSymbol))]
        #[unsafe(method_family = none)]
        pub unsafe fn transitionWithWholeSymbol(&self) -> Retained<Self>;

        /// Convenience initializer for a MagicReplace content transition with a configured Replace fallback.
        #[unsafe(method(magicTransitionWithFallback:))]
        #[unsafe(method_family = none)]
        pub unsafe fn magicTransitionWithFallback(
            fallback: &NSSymbolReplaceContentTransition,
        ) -> Retained<NSSymbolMagicReplaceContentTransition>;
    );
}

/// Methods declared on superclass `NSSymbolContentTransition`.
impl NSSymbolReplaceContentTransition {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// The default symbol transition, resolves to a particular transition in a
    /// context-sensitive manner.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/symbols/nssymbolautomaticcontenttransition?language=objc)
    #[unsafe(super(NSSymbolContentTransition, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSymbolAutomaticContentTransition;
);

extern_conformance!(
    unsafe impl NSCoding for NSSymbolAutomaticContentTransition {}
);

extern_conformance!(
    unsafe impl NSCopying for NSSymbolAutomaticContentTransition {}
);

unsafe impl CopyingHelper for NSSymbolAutomaticContentTransition {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for NSSymbolAutomaticContentTransition {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for NSSymbolAutomaticContentTransition {}
);

impl NSSymbolAutomaticContentTransition {
    extern_methods!(
        /// The default automatic transition, determined by the system.
        #[unsafe(method(transition))]
        #[unsafe(method_family = none)]
        pub unsafe fn transition() -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSSymbolContentTransition`.
impl NSSymbolAutomaticContentTransition {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}
