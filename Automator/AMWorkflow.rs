//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/automator/amworkflow?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AMWorkflow;
);

extern_conformance!(
    unsafe impl NSCopying for AMWorkflow {}
);

unsafe impl CopyingHelper for AMWorkflow {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for AMWorkflow {}
);

impl AMWorkflow {
    extern_methods!(
        /// # Safety
        ///
        /// `input` should be of the correct type.
        #[unsafe(method(runWorkflowAtURL:withInput:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn runWorkflowAtURL_withInput_error(
            file_url: &NSURL,
            input: Option<&AnyObject>,
        ) -> Result<Retained<AnyObject>, Retained<NSError>>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(initWithContentsOfURL:error:_))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithContentsOfURL_error(
            this: Allocated<Self>,
            file_url: &NSURL,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[unsafe(method(writeToURL:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn writeToURL_error(&self, file_url: &NSURL) -> Result<(), Retained<NSError>>;

        /// # Safety
        ///
        /// `value` should be of the correct type.
        #[unsafe(method(setValue:forVariableWithName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setValue_forVariableWithName(
            &self,
            value: Option<&AnyObject>,
            variable_name: &NSString,
        ) -> bool;

        #[unsafe(method(valueForVariableWithName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn valueForVariableWithName(
            &self,
            variable_name: &NSString,
        ) -> Option<Retained<AnyObject>>;

        #[cfg(feature = "AMAction")]
        #[unsafe(method(addAction:))]
        #[unsafe(method_family = none)]
        pub unsafe fn addAction(&self, action: &AMAction);

        #[cfg(feature = "AMAction")]
        #[unsafe(method(removeAction:))]
        #[unsafe(method_family = none)]
        pub unsafe fn removeAction(&self, action: &AMAction);

        #[cfg(feature = "AMAction")]
        #[unsafe(method(insertAction:atIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn insertAction_atIndex(&self, action: &AMAction, index: NSUInteger);

        #[unsafe(method(moveActionAtIndex:toIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn moveActionAtIndex_toIndex(
            &self,
            start_index: NSUInteger,
            end_index: NSUInteger,
        );

        #[unsafe(method(fileURL))]
        #[unsafe(method_family = none)]
        pub unsafe fn fileURL(&self) -> Option<Retained<NSURL>>;

        #[cfg(feature = "AMAction")]
        #[unsafe(method(actions))]
        #[unsafe(method_family = none)]
        pub unsafe fn actions(&self) -> Retained<NSArray<AMAction>>;

        #[unsafe(method(input))]
        #[unsafe(method_family = none)]
        pub unsafe fn input(&self) -> Option<Retained<AnyObject>>;

        /// Setter for [`input`][Self::input].
        ///
        /// # Safety
        ///
        /// `input` should be of the correct type.
        #[unsafe(method(setInput:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInput(&self, input: Option<&AnyObject>);

        #[unsafe(method(output))]
        #[unsafe(method_family = none)]
        pub unsafe fn output(&self) -> Option<Retained<AnyObject>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl AMWorkflow {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
