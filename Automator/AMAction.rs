//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/automator/amloglevel?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AMLogLevel(pub NSUInteger);
impl AMLogLevel {
    #[doc(alias = "AMLogLevelDebug")]
    pub const Debug: Self = Self(0);
    #[doc(alias = "AMLogLevelInfo")]
    pub const Info: Self = Self(1);
    #[doc(alias = "AMLogLevelWarn")]
    pub const Warn: Self = Self(2);
    #[doc(alias = "AMLogLevelError")]
    pub const Error: Self = Self(3);
}

unsafe impl Encode for AMLogLevel {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for AMLogLevel {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/automator/amaction?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AMAction;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AMAction {}
);

impl AMAction {
    extern_methods!(
        /// # Safety
        ///
        /// `dict` generic should be of the correct type.
        #[unsafe(method(initWithDefinition:fromArchive:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithDefinition_fromArchive(
            this: Allocated<Self>,
            dict: Option<&NSDictionary<NSString, AnyObject>>,
            archived: bool,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(initWithContentsOfURL:error:_))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithContentsOfURL_error(
            this: Allocated<Self>,
            file_url: &NSURL,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[unsafe(method(name))]
        #[unsafe(method_family = none)]
        pub unsafe fn name(&self) -> Retained<NSString>;

        #[unsafe(method(ignoresInput))]
        #[unsafe(method_family = none)]
        pub unsafe fn ignoresInput(&self) -> bool;

        #[unsafe(method(selectedInputType))]
        #[unsafe(method_family = none)]
        pub unsafe fn selectedInputType(&self) -> Option<Retained<NSString>>;

        /// Setter for [`selectedInputType`][Self::selectedInputType].
        #[unsafe(method(setSelectedInputType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSelectedInputType(&self, selected_input_type: Option<&NSString>);

        #[unsafe(method(selectedOutputType))]
        #[unsafe(method_family = none)]
        pub unsafe fn selectedOutputType(&self) -> Option<Retained<NSString>>;

        /// Setter for [`selectedOutputType`][Self::selectedOutputType].
        #[unsafe(method(setSelectedOutputType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSelectedOutputType(&self, selected_output_type: Option<&NSString>);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(progressValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn progressValue(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`progressValue`][Self::progressValue].
        #[unsafe(method(setProgressValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setProgressValue(&self, progress_value: CGFloat);

        /// # Safety
        ///
        /// `input` should be of the correct type.
        #[deprecated]
        #[unsafe(method(runWithInput:fromAction:error:))]
        #[unsafe(method_family = none)]
        pub unsafe fn runWithInput_fromAction_error(
            &self,
            input: Option<&AnyObject>,
            an_action: Option<&AMAction>,
            error_info: Option<&mut Option<Retained<NSDictionary<NSString, AnyObject>>>>,
        ) -> Option<Retained<AnyObject>>;

        /// # Safety
        ///
        /// `input` should be of the correct type.
        #[unsafe(method(runWithInput:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn runWithInput_error(
            &self,
            input: Option<&AnyObject>,
        ) -> Result<Retained<AnyObject>, Retained<NSError>>;

        /// # Safety
        ///
        /// `input` should be of the correct type.
        #[unsafe(method(runAsynchronouslyWithInput:))]
        #[unsafe(method_family = none)]
        pub unsafe fn runAsynchronouslyWithInput(&self, input: Option<&AnyObject>);

        #[unsafe(method(willFinishRunning))]
        #[unsafe(method_family = none)]
        pub unsafe fn willFinishRunning(&self);

        /// # Safety
        ///
        /// `error_info` generic should be of the correct type.
        #[deprecated]
        #[unsafe(method(didFinishRunningWithError:))]
        #[unsafe(method_family = none)]
        pub unsafe fn didFinishRunningWithError(
            &self,
            error_info: Option<&NSDictionary<NSString, AnyObject>>,
        );

        #[unsafe(method(finishRunningWithError:))]
        #[unsafe(method_family = none)]
        pub unsafe fn finishRunningWithError(&self, error: Option<&NSError>);

        #[unsafe(method(output))]
        #[unsafe(method_family = none)]
        pub unsafe fn output(&self) -> Option<Retained<AnyObject>>;

        /// Setter for [`output`][Self::output].
        ///
        /// # Safety
        ///
        /// `output` should be of the correct type.
        #[unsafe(method(setOutput:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutput(&self, output: Option<&AnyObject>);

        #[unsafe(method(stop))]
        #[unsafe(method_family = none)]
        pub unsafe fn stop(&self);

        #[unsafe(method(reset))]
        #[unsafe(method_family = none)]
        pub unsafe fn reset(&self);

        /// # Safety
        ///
        /// `dictionary` generic should be of the correct type.
        #[unsafe(method(writeToDictionary:))]
        #[unsafe(method_family = none)]
        pub unsafe fn writeToDictionary(
            &self,
            dictionary: &NSMutableDictionary<NSString, AnyObject>,
        );

        #[unsafe(method(opened))]
        #[unsafe(method_family = none)]
        pub unsafe fn opened(&self);

        #[unsafe(method(activated))]
        #[unsafe(method_family = none)]
        pub unsafe fn activated(&self);

        #[unsafe(method(closed))]
        #[unsafe(method_family = none)]
        pub unsafe fn closed(&self);

        #[unsafe(method(updateParameters))]
        #[unsafe(method_family = none)]
        pub unsafe fn updateParameters(&self);

        #[unsafe(method(parametersUpdated))]
        #[unsafe(method_family = none)]
        pub unsafe fn parametersUpdated(&self);

        #[unsafe(method(isStopped))]
        #[unsafe(method_family = none)]
        pub unsafe fn isStopped(&self) -> bool;
    );
}

/// Methods declared on superclass `NSObject`.
impl AMAction {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
