// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::invalid_html_tags)]

use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-location")]
use objc2_core_location::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct XCUIElementType(pub NSUInteger);
impl XCUIElementType {
    #[doc(alias = "XCUIElementTypeAny")]
    pub const Any: Self = Self(0);
    #[doc(alias = "XCUIElementTypeOther")]
    pub const Other: Self = Self(1);
    #[doc(alias = "XCUIElementTypeApplication")]
    pub const Application: Self = Self(2);
    #[doc(alias = "XCUIElementTypeGroup")]
    pub const Group: Self = Self(3);
    #[doc(alias = "XCUIElementTypeWindow")]
    pub const Window: Self = Self(4);
    #[doc(alias = "XCUIElementTypeSheet")]
    pub const Sheet: Self = Self(5);
    #[doc(alias = "XCUIElementTypeDrawer")]
    pub const Drawer: Self = Self(6);
    #[doc(alias = "XCUIElementTypeAlert")]
    pub const Alert: Self = Self(7);
    #[doc(alias = "XCUIElementTypeDialog")]
    pub const Dialog: Self = Self(8);
    #[doc(alias = "XCUIElementTypeButton")]
    pub const Button: Self = Self(9);
    #[doc(alias = "XCUIElementTypeRadioButton")]
    pub const RadioButton: Self = Self(10);
    #[doc(alias = "XCUIElementTypeRadioGroup")]
    pub const RadioGroup: Self = Self(11);
    #[doc(alias = "XCUIElementTypeCheckBox")]
    pub const CheckBox: Self = Self(12);
    #[doc(alias = "XCUIElementTypeDisclosureTriangle")]
    pub const DisclosureTriangle: Self = Self(13);
    #[doc(alias = "XCUIElementTypePopUpButton")]
    pub const PopUpButton: Self = Self(14);
    #[doc(alias = "XCUIElementTypeComboBox")]
    pub const ComboBox: Self = Self(15);
    #[doc(alias = "XCUIElementTypeMenuButton")]
    pub const MenuButton: Self = Self(16);
    #[doc(alias = "XCUIElementTypeToolbarButton")]
    pub const ToolbarButton: Self = Self(17);
    #[doc(alias = "XCUIElementTypePopover")]
    pub const Popover: Self = Self(18);
    #[doc(alias = "XCUIElementTypeKeyboard")]
    pub const Keyboard: Self = Self(19);
    #[doc(alias = "XCUIElementTypeKey")]
    pub const Key: Self = Self(20);
    #[doc(alias = "XCUIElementTypeNavigationBar")]
    pub const NavigationBar: Self = Self(21);
    #[doc(alias = "XCUIElementTypeTabBar")]
    pub const TabBar: Self = Self(22);
    #[doc(alias = "XCUIElementTypeTabGroup")]
    pub const TabGroup: Self = Self(23);
    #[doc(alias = "XCUIElementTypeToolbar")]
    pub const Toolbar: Self = Self(24);
    #[doc(alias = "XCUIElementTypeStatusBar")]
    pub const StatusBar: Self = Self(25);
    #[doc(alias = "XCUIElementTypeTable")]
    pub const Table: Self = Self(26);
    #[doc(alias = "XCUIElementTypeTableRow")]
    pub const TableRow: Self = Self(27);
    #[doc(alias = "XCUIElementTypeTableColumn")]
    pub const TableColumn: Self = Self(28);
    #[doc(alias = "XCUIElementTypeOutline")]
    pub const Outline: Self = Self(29);
    #[doc(alias = "XCUIElementTypeOutlineRow")]
    pub const OutlineRow: Self = Self(30);
    #[doc(alias = "XCUIElementTypeBrowser")]
    pub const Browser: Self = Self(31);
    #[doc(alias = "XCUIElementTypeCollectionView")]
    pub const CollectionView: Self = Self(32);
    #[doc(alias = "XCUIElementTypeSlider")]
    pub const Slider: Self = Self(33);
    #[doc(alias = "XCUIElementTypePageIndicator")]
    pub const PageIndicator: Self = Self(34);
    #[doc(alias = "XCUIElementTypeProgressIndicator")]
    pub const ProgressIndicator: Self = Self(35);
    #[doc(alias = "XCUIElementTypeActivityIndicator")]
    pub const ActivityIndicator: Self = Self(36);
    #[doc(alias = "XCUIElementTypeSegmentedControl")]
    pub const SegmentedControl: Self = Self(37);
    #[doc(alias = "XCUIElementTypePicker")]
    pub const Picker: Self = Self(38);
    #[doc(alias = "XCUIElementTypePickerWheel")]
    pub const PickerWheel: Self = Self(39);
    #[doc(alias = "XCUIElementTypeSwitch")]
    pub const Switch: Self = Self(40);
    #[doc(alias = "XCUIElementTypeToggle")]
    pub const Toggle: Self = Self(41);
    #[doc(alias = "XCUIElementTypeLink")]
    pub const Link: Self = Self(42);
    #[doc(alias = "XCUIElementTypeImage")]
    pub const Image: Self = Self(43);
    #[doc(alias = "XCUIElementTypeIcon")]
    pub const Icon: Self = Self(44);
    #[doc(alias = "XCUIElementTypeSearchField")]
    pub const SearchField: Self = Self(45);
    #[doc(alias = "XCUIElementTypeScrollView")]
    pub const ScrollView: Self = Self(46);
    #[doc(alias = "XCUIElementTypeScrollBar")]
    pub const ScrollBar: Self = Self(47);
    #[doc(alias = "XCUIElementTypeStaticText")]
    pub const StaticText: Self = Self(48);
    #[doc(alias = "XCUIElementTypeTextField")]
    pub const TextField: Self = Self(49);
    #[doc(alias = "XCUIElementTypeSecureTextField")]
    pub const SecureTextField: Self = Self(50);
    #[doc(alias = "XCUIElementTypeDatePicker")]
    pub const DatePicker: Self = Self(51);
    #[doc(alias = "XCUIElementTypeTextView")]
    pub const TextView: Self = Self(52);
    #[doc(alias = "XCUIElementTypeMenu")]
    pub const Menu: Self = Self(53);
    #[doc(alias = "XCUIElementTypeMenuItem")]
    pub const MenuItem: Self = Self(54);
    #[doc(alias = "XCUIElementTypeMenuBar")]
    pub const MenuBar: Self = Self(55);
    #[doc(alias = "XCUIElementTypeMenuBarItem")]
    pub const MenuBarItem: Self = Self(56);
    #[doc(alias = "XCUIElementTypeMap")]
    pub const Map: Self = Self(57);
    #[doc(alias = "XCUIElementTypeWebView")]
    pub const WebView: Self = Self(58);
    #[doc(alias = "XCUIElementTypeIncrementArrow")]
    pub const IncrementArrow: Self = Self(59);
    #[doc(alias = "XCUIElementTypeDecrementArrow")]
    pub const DecrementArrow: Self = Self(60);
    #[doc(alias = "XCUIElementTypeTimeline")]
    pub const Timeline: Self = Self(61);
    #[doc(alias = "XCUIElementTypeRatingIndicator")]
    pub const RatingIndicator: Self = Self(62);
    #[doc(alias = "XCUIElementTypeValueIndicator")]
    pub const ValueIndicator: Self = Self(63);
    #[doc(alias = "XCUIElementTypeSplitGroup")]
    pub const SplitGroup: Self = Self(64);
    #[doc(alias = "XCUIElementTypeSplitter")]
    pub const Splitter: Self = Self(65);
    #[doc(alias = "XCUIElementTypeRelevanceIndicator")]
    pub const RelevanceIndicator: Self = Self(66);
    #[doc(alias = "XCUIElementTypeColorWell")]
    pub const ColorWell: Self = Self(67);
    #[doc(alias = "XCUIElementTypeHelpTag")]
    pub const HelpTag: Self = Self(68);
    #[doc(alias = "XCUIElementTypeMatte")]
    pub const Matte: Self = Self(69);
    #[doc(alias = "XCUIElementTypeDockItem")]
    pub const DockItem: Self = Self(70);
    #[doc(alias = "XCUIElementTypeRuler")]
    pub const Ruler: Self = Self(71);
    #[doc(alias = "XCUIElementTypeRulerMarker")]
    pub const RulerMarker: Self = Self(72);
    #[doc(alias = "XCUIElementTypeGrid")]
    pub const Grid: Self = Self(73);
    #[doc(alias = "XCUIElementTypeLevelIndicator")]
    pub const LevelIndicator: Self = Self(74);
    #[doc(alias = "XCUIElementTypeCell")]
    pub const Cell: Self = Self(75);
    #[doc(alias = "XCUIElementTypeLayoutArea")]
    pub const LayoutArea: Self = Self(76);
    #[doc(alias = "XCUIElementTypeLayoutItem")]
    pub const LayoutItem: Self = Self(77);
    #[doc(alias = "XCUIElementTypeHandle")]
    pub const Handle: Self = Self(78);
    #[doc(alias = "XCUIElementTypeStepper")]
    pub const Stepper: Self = Self(79);
    #[doc(alias = "XCUIElementTypeTab")]
    pub const Tab: Self = Self(80);
    #[doc(alias = "XCUIElementTypeTouchBar")]
    pub const TouchBar: Self = Self(81);
    #[doc(alias = "XCUIElementTypeStatusItem")]
    pub const StatusItem: Self = Self(82);
}

unsafe impl Encode for XCUIElementType {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for XCUIElementType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuiuserinterfacesizeclass?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct XCUIUserInterfaceSizeClass(pub NSInteger);
impl XCUIUserInterfaceSizeClass {
    #[doc(alias = "XCUIUserInterfaceSizeClassUnspecified")]
    pub const Unspecified: Self = Self(0);
}

unsafe impl Encode for XCUIUserInterfaceSizeClass {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for XCUIUserInterfaceSizeClass {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_protocol!(
    /// Protocol describing the attributes exposed on user interface elements and available during query matching. These attributes represent data exposed to the Accessibility system.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributes?language=objc)
    pub unsafe trait XCUIElementAttributes: MainThreadOnly {
        /// The accessibility identifier.
        #[unsafe(method(identifier))]
        #[unsafe(method_family = none)]
        unsafe fn identifier(&self) -> Retained<NSString>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The frame of the element in the screen coordinate space.
        #[unsafe(method(frame))]
        #[unsafe(method_family = none)]
        unsafe fn frame(&self) -> CGRect;

        /// The raw value attribute of the element. Depending on the element, the actual type can vary.
        #[unsafe(method(value))]
        #[unsafe(method_family = none)]
        unsafe fn value(&self) -> Option<Retained<AnyObject>>;

        /// The title attribute of the element.
        #[unsafe(method(title))]
        #[unsafe(method_family = none)]
        unsafe fn title(&self) -> Retained<NSString>;

        /// The label attribute of the element.
        #[unsafe(method(label))]
        #[unsafe(method_family = none)]
        unsafe fn label(&self) -> Retained<NSString>;

        /// The type of the element. /seealso XCUIElementType.
        #[unsafe(method(elementType))]
        #[unsafe(method_family = none)]
        unsafe fn elementType(&self) -> XCUIElementType;

        /// Whether or not the element is enabled for user interaction.
        #[unsafe(method(isEnabled))]
        #[unsafe(method_family = none)]
        unsafe fn isEnabled(&self) -> bool;

        /// The horizontal size class of the element.
        #[unsafe(method(horizontalSizeClass))]
        #[unsafe(method_family = none)]
        unsafe fn horizontalSizeClass(&self) -> XCUIUserInterfaceSizeClass;

        /// The vertical size class of the element.
        #[unsafe(method(verticalSizeClass))]
        #[unsafe(method_family = none)]
        unsafe fn verticalSizeClass(&self) -> XCUIUserInterfaceSizeClass;

        /// The value that is displayed when the element has no value.
        #[unsafe(method(placeholderValue))]
        #[unsafe(method_family = none)]
        unsafe fn placeholderValue(&self) -> Option<Retained<NSString>>;

        /// Whether or not the element is selected.
        #[unsafe(method(isSelected))]
        #[unsafe(method_family = none)]
        unsafe fn isSelected(&self) -> bool;
    }
);

/// such as the dictionaries returned by XCUIElement.dictionaryRepresentation.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributename?language=objc)
// NS_TYPED_ENUM
pub type XCUIElementAttributeName = NSString;

extern "C" {
    /// An array of the element's children.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributenamechildren?language=objc)
    pub static XCUIElementAttributeNameChildren: &'static XCUIElementAttributeName;
}

extern "C" {
    /// The element's type, an NSNumber-wrapped XCUIElementType.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributenameelementtype?language=objc)
    pub static XCUIElementAttributeNameElementType: &'static XCUIElementAttributeName;
}

extern "C" {
    /// The element's accessibility identifier.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributenameidentifier?language=objc)
    pub static XCUIElementAttributeNameIdentifier: &'static XCUIElementAttributeName;
}

extern "C" {
    /// The element's accessibility value, an NSString or NSNumber.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributenamevalue?language=objc)
    pub static XCUIElementAttributeNameValue: &'static XCUIElementAttributeName;
}

extern "C" {
    /// The element's placeholder value.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributenameplaceholdervalue?language=objc)
    pub static XCUIElementAttributeNamePlaceholderValue: &'static XCUIElementAttributeName;
}

extern "C" {
    /// The element's title.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributenametitle?language=objc)
    pub static XCUIElementAttributeNameTitle: &'static XCUIElementAttributeName;
}

extern "C" {
    /// The element's label.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributenamelabel?language=objc)
    pub static XCUIElementAttributeNameLabel: &'static XCUIElementAttributeName;
}

extern "C" {
    /// A dictionary representation of the element's frame, as returned by CGRectCreateDictionaryRepresentation.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributenameframe?language=objc)
    pub static XCUIElementAttributeNameFrame: &'static XCUIElementAttributeName;
}

extern "C" {
    /// True if the element is enabled, false otherwise, an NSNumber-wrapped BOOL.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributenameenabled?language=objc)
    pub static XCUIElementAttributeNameEnabled: &'static XCUIElementAttributeName;
}

extern "C" {
    /// True if the element is selected, false otherwise, an NSNumber-wrapped BOOL.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributenameselected?language=objc)
    pub static XCUIElementAttributeNameSelected: &'static XCUIElementAttributeName;
}

extern "C" {
    /// True if the element is focused, false otherwise, an NSNumber-wrapped BOOL.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributenamehasfocus?language=objc)
    pub static XCUIElementAttributeNameHasFocus: &'static XCUIElementAttributeName;
}

extern "C" {
    /// The element's horizontal size class, an NSNumber-wrapped XCUIUserInterfaceSizeClass.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributenamehorizontalsizeclass?language=objc)
    pub static XCUIElementAttributeNameHorizontalSizeClass: &'static XCUIElementAttributeName;
}

extern "C" {
    /// The element's vertical size class, an NSNumber-wrapped XCUIUserInterfaceSizeClass.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementattributenameverticalsizeclass?language=objc)
    pub static XCUIElementAttributeNameVerticalSizeClass: &'static XCUIElementAttributeName;
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementtypequeryprovider?language=objc)
    pub unsafe trait XCUIElementTypeQueryProvider: MainThreadOnly {
        #[unsafe(method(touchBars))]
        #[unsafe(method_family = none)]
        unsafe fn touchBars(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(groups))]
        #[unsafe(method_family = none)]
        unsafe fn groups(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(windows))]
        #[unsafe(method_family = none)]
        unsafe fn windows(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(sheets))]
        #[unsafe(method_family = none)]
        unsafe fn sheets(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(drawers))]
        #[unsafe(method_family = none)]
        unsafe fn drawers(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(alerts))]
        #[unsafe(method_family = none)]
        unsafe fn alerts(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(dialogs))]
        #[unsafe(method_family = none)]
        unsafe fn dialogs(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(buttons))]
        #[unsafe(method_family = none)]
        unsafe fn buttons(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(radioButtons))]
        #[unsafe(method_family = none)]
        unsafe fn radioButtons(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(radioGroups))]
        #[unsafe(method_family = none)]
        unsafe fn radioGroups(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(checkBoxes))]
        #[unsafe(method_family = none)]
        unsafe fn checkBoxes(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(disclosureTriangles))]
        #[unsafe(method_family = none)]
        unsafe fn disclosureTriangles(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(popUpButtons))]
        #[unsafe(method_family = none)]
        unsafe fn popUpButtons(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(comboBoxes))]
        #[unsafe(method_family = none)]
        unsafe fn comboBoxes(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(menuButtons))]
        #[unsafe(method_family = none)]
        unsafe fn menuButtons(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(toolbarButtons))]
        #[unsafe(method_family = none)]
        unsafe fn toolbarButtons(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(popovers))]
        #[unsafe(method_family = none)]
        unsafe fn popovers(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(keyboards))]
        #[unsafe(method_family = none)]
        unsafe fn keyboards(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(keys))]
        #[unsafe(method_family = none)]
        unsafe fn keys(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(navigationBars))]
        #[unsafe(method_family = none)]
        unsafe fn navigationBars(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(tabBars))]
        #[unsafe(method_family = none)]
        unsafe fn tabBars(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(tabGroups))]
        #[unsafe(method_family = none)]
        unsafe fn tabGroups(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(toolbars))]
        #[unsafe(method_family = none)]
        unsafe fn toolbars(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(statusBars))]
        #[unsafe(method_family = none)]
        unsafe fn statusBars(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(tables))]
        #[unsafe(method_family = none)]
        unsafe fn tables(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(tableRows))]
        #[unsafe(method_family = none)]
        unsafe fn tableRows(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(tableColumns))]
        #[unsafe(method_family = none)]
        unsafe fn tableColumns(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(outlines))]
        #[unsafe(method_family = none)]
        unsafe fn outlines(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(outlineRows))]
        #[unsafe(method_family = none)]
        unsafe fn outlineRows(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(disclosedChildRows))]
        #[unsafe(method_family = none)]
        unsafe fn disclosedChildRows(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(browsers))]
        #[unsafe(method_family = none)]
        unsafe fn browsers(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(collectionViews))]
        #[unsafe(method_family = none)]
        unsafe fn collectionViews(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(sliders))]
        #[unsafe(method_family = none)]
        unsafe fn sliders(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(pageIndicators))]
        #[unsafe(method_family = none)]
        unsafe fn pageIndicators(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(progressIndicators))]
        #[unsafe(method_family = none)]
        unsafe fn progressIndicators(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(activityIndicators))]
        #[unsafe(method_family = none)]
        unsafe fn activityIndicators(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(segmentedControls))]
        #[unsafe(method_family = none)]
        unsafe fn segmentedControls(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(pickers))]
        #[unsafe(method_family = none)]
        unsafe fn pickers(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(pickerWheels))]
        #[unsafe(method_family = none)]
        unsafe fn pickerWheels(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(switches))]
        #[unsafe(method_family = none)]
        unsafe fn switches(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(toggles))]
        #[unsafe(method_family = none)]
        unsafe fn toggles(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(links))]
        #[unsafe(method_family = none)]
        unsafe fn links(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(images))]
        #[unsafe(method_family = none)]
        unsafe fn images(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(icons))]
        #[unsafe(method_family = none)]
        unsafe fn icons(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(searchFields))]
        #[unsafe(method_family = none)]
        unsafe fn searchFields(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(scrollViews))]
        #[unsafe(method_family = none)]
        unsafe fn scrollViews(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(scrollBars))]
        #[unsafe(method_family = none)]
        unsafe fn scrollBars(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(staticTexts))]
        #[unsafe(method_family = none)]
        unsafe fn staticTexts(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(textFields))]
        #[unsafe(method_family = none)]
        unsafe fn textFields(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(secureTextFields))]
        #[unsafe(method_family = none)]
        unsafe fn secureTextFields(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(datePickers))]
        #[unsafe(method_family = none)]
        unsafe fn datePickers(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(textViews))]
        #[unsafe(method_family = none)]
        unsafe fn textViews(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(menus))]
        #[unsafe(method_family = none)]
        unsafe fn menus(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(menuItems))]
        #[unsafe(method_family = none)]
        unsafe fn menuItems(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(menuBars))]
        #[unsafe(method_family = none)]
        unsafe fn menuBars(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(menuBarItems))]
        #[unsafe(method_family = none)]
        unsafe fn menuBarItems(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(maps))]
        #[unsafe(method_family = none)]
        unsafe fn maps(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(webViews))]
        #[unsafe(method_family = none)]
        unsafe fn webViews(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(steppers))]
        #[unsafe(method_family = none)]
        unsafe fn steppers(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(incrementArrows))]
        #[unsafe(method_family = none)]
        unsafe fn incrementArrows(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(decrementArrows))]
        #[unsafe(method_family = none)]
        unsafe fn decrementArrows(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(tabs))]
        #[unsafe(method_family = none)]
        unsafe fn tabs(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(timelines))]
        #[unsafe(method_family = none)]
        unsafe fn timelines(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(ratingIndicators))]
        #[unsafe(method_family = none)]
        unsafe fn ratingIndicators(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(valueIndicators))]
        #[unsafe(method_family = none)]
        unsafe fn valueIndicators(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(splitGroups))]
        #[unsafe(method_family = none)]
        unsafe fn splitGroups(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(splitters))]
        #[unsafe(method_family = none)]
        unsafe fn splitters(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(relevanceIndicators))]
        #[unsafe(method_family = none)]
        unsafe fn relevanceIndicators(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(colorWells))]
        #[unsafe(method_family = none)]
        unsafe fn colorWells(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(helpTags))]
        #[unsafe(method_family = none)]
        unsafe fn helpTags(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(mattes))]
        #[unsafe(method_family = none)]
        unsafe fn mattes(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(dockItems))]
        #[unsafe(method_family = none)]
        unsafe fn dockItems(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(rulers))]
        #[unsafe(method_family = none)]
        unsafe fn rulers(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(rulerMarkers))]
        #[unsafe(method_family = none)]
        unsafe fn rulerMarkers(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(grids))]
        #[unsafe(method_family = none)]
        unsafe fn grids(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(levelIndicators))]
        #[unsafe(method_family = none)]
        unsafe fn levelIndicators(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(cells))]
        #[unsafe(method_family = none)]
        unsafe fn cells(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(layoutAreas))]
        #[unsafe(method_family = none)]
        unsafe fn layoutAreas(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(layoutItems))]
        #[unsafe(method_family = none)]
        unsafe fn layoutItems(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(handles))]
        #[unsafe(method_family = none)]
        unsafe fn handles(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(otherElements))]
        #[unsafe(method_family = none)]
        unsafe fn otherElements(&self) -> Retained<XCUIElementQuery>;

        #[unsafe(method(statusItems))]
        #[unsafe(method_family = none)]
        unsafe fn statusItems(&self) -> Retained<XCUIElementQuery>;

        /// Returns an element that will use the query for resolution. This changes how the query is resolved
        /// at runtime; instead of evaluating against every element in the user interface, `firstMatch` stops
        /// the search as soon as a single matching element is found. This can result in significantly faster
        /// evaluation if the element is located early in a large view hierarchy but also means that multiple
        /// matches will not be detected.
        #[unsafe(method(firstMatch))]
        #[unsafe(method_family = none)]
        unsafe fn firstMatch(&self) -> Retained<XCUIElement>;
    }
);

/// Constants for use with -[XCUIElement typeKey:modifierFlags:],
/// representing keys that have no textual representation. These comprise
/// the set of control, function, and modifier keys found on most keyboards.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkey?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
pub type XCUIKeyboardKey = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeydelete?language=objc)
    pub static XCUIKeyboardKeyDelete: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyreturn?language=objc)
    pub static XCUIKeyboardKeyReturn: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyenter?language=objc)
    pub static XCUIKeyboardKeyEnter: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeytab?language=objc)
    pub static XCUIKeyboardKeyTab: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyspace?language=objc)
    pub static XCUIKeyboardKeySpace: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyescape?language=objc)
    pub static XCUIKeyboardKeyEscape: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyuparrow?language=objc)
    pub static XCUIKeyboardKeyUpArrow: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeydownarrow?language=objc)
    pub static XCUIKeyboardKeyDownArrow: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyleftarrow?language=objc)
    pub static XCUIKeyboardKeyLeftArrow: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyrightarrow?language=objc)
    pub static XCUIKeyboardKeyRightArrow: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf1?language=objc)
    pub static XCUIKeyboardKeyF1: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf2?language=objc)
    pub static XCUIKeyboardKeyF2: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf3?language=objc)
    pub static XCUIKeyboardKeyF3: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf4?language=objc)
    pub static XCUIKeyboardKeyF4: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf5?language=objc)
    pub static XCUIKeyboardKeyF5: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf6?language=objc)
    pub static XCUIKeyboardKeyF6: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf7?language=objc)
    pub static XCUIKeyboardKeyF7: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf8?language=objc)
    pub static XCUIKeyboardKeyF8: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf9?language=objc)
    pub static XCUIKeyboardKeyF9: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf10?language=objc)
    pub static XCUIKeyboardKeyF10: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf11?language=objc)
    pub static XCUIKeyboardKeyF11: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf12?language=objc)
    pub static XCUIKeyboardKeyF12: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf13?language=objc)
    pub static XCUIKeyboardKeyF13: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf14?language=objc)
    pub static XCUIKeyboardKeyF14: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf15?language=objc)
    pub static XCUIKeyboardKeyF15: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf16?language=objc)
    pub static XCUIKeyboardKeyF16: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf17?language=objc)
    pub static XCUIKeyboardKeyF17: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf18?language=objc)
    pub static XCUIKeyboardKeyF18: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyf19?language=objc)
    pub static XCUIKeyboardKeyF19: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyforwarddelete?language=objc)
    pub static XCUIKeyboardKeyForwardDelete: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyhome?language=objc)
    pub static XCUIKeyboardKeyHome: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyend?language=objc)
    pub static XCUIKeyboardKeyEnd: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeypageup?language=objc)
    pub static XCUIKeyboardKeyPageUp: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeypagedown?language=objc)
    pub static XCUIKeyboardKeyPageDown: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyclear?language=objc)
    pub static XCUIKeyboardKeyClear: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyhelp?language=objc)
    pub static XCUIKeyboardKeyHelp: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeycapslock?language=objc)
    pub static XCUIKeyboardKeyCapsLock: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyshift?language=objc)
    pub static XCUIKeyboardKeyShift: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeycontrol?language=objc)
    pub static XCUIKeyboardKeyControl: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyoption?language=objc)
    pub static XCUIKeyboardKeyOption: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeycommand?language=objc)
    pub static XCUIKeyboardKeyCommand: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyrightshift?language=objc)
    pub static XCUIKeyboardKeyRightShift: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyrightcontrol?language=objc)
    pub static XCUIKeyboardKeyRightControl: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyrightoption?language=objc)
    pub static XCUIKeyboardKeyRightOption: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeyrightcommand?language=objc)
    pub static XCUIKeyboardKeyRightCommand: &'static XCUIKeyboardKey;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeyboardkeysecondaryfn?language=objc)
    pub static XCUIKeyboardKeySecondaryFn: &'static XCUIKeyboardKey;
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuiscreenshotproviding?language=objc)
    pub unsafe trait XCUIScreenshotProviding: NSObjectProtocol + MainThreadOnly {
        /// Captures and returns a screenshot of the receiver.
        ///
        /// Equivalent to capturing a screenshot manually, e.g. if two windows are overlapping and
        /// the occluded window is captured, the front window will be visible in the screenshot.
        #[unsafe(method(screenshot))]
        #[unsafe(method_family = none)]
        unsafe fn screenshot(&self) -> Retained<XCUIScreenshot>;
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuikeymodifierflags?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct XCUIKeyModifierFlags(pub NSUInteger);
bitflags::bitflags! {
    impl XCUIKeyModifierFlags: NSUInteger {
        #[doc(alias = "XCUIKeyModifierNone")]
        const None = 0;
        #[doc(alias = "XCUIKeyModifierCapsLock")]
        const CapsLock = 1<<0;
        #[doc(alias = "XCUIKeyModifierShift")]
        const Shift = 1<<1;
        #[doc(alias = "XCUIKeyModifierControl")]
        const Control = 1<<2;
        #[doc(alias = "XCUIKeyModifierOption")]
        const Option = 1<<3;
        #[doc(alias = "XCUIKeyModifierCommand")]
        const Command = 1<<4;
        #[doc(alias = "XCUIKeyModifierFunction")]
        const Function = 1<<5;
        #[doc(alias = "XCUIKeyModifierAlphaShift")]
        const AlphaShift = XCUIKeyModifierFlags::CapsLock.0;
        #[doc(alias = "XCUIKeyModifierAlternate")]
        const Alternate = XCUIKeyModifierFlags::Option.0;
    }
}

unsafe impl Encode for XCUIKeyModifierFlags {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for XCUIKeyModifierFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuigesturevelocity?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
#[cfg(feature = "objc2-core-foundation")]
pub type XCUIGestureVelocity = CGFloat;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuigesturevelocitydefault?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static XCUIGestureVelocityDefault: XCUIGestureVelocity;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuigesturevelocityslow?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static XCUIGestureVelocitySlow: XCUIGestureVelocity;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuigesturevelocityfast?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static XCUIGestureVelocityFast: XCUIGestureVelocity;
}

extern_class!(
    /// Elements are objects encapsulating the information needed to dynamically locate a user interface
    /// element in an application. Elements are described in terms of queries /seealso XCUIElementQuery.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielement?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct XCUIElement;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for XCUIElement {}
);

extern_conformance!(
    unsafe impl XCUIElementAttributes for XCUIElement {}
);

extern_conformance!(
    unsafe impl XCUIElementTypeQueryProvider for XCUIElement {}
);

impl XCUIElement {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Test to determine if the element exists.
        #[unsafe(method(exists))]
        #[unsafe(method_family = none)]
        pub unsafe fn exists(&self) -> bool;

        /// Waits the specified amount of time for the element's exist property to be true and returns false if the timeout expires without the element coming into existence.
        #[must_use]
        #[unsafe(method(waitForExistenceWithTimeout:))]
        #[unsafe(method_family = none)]
        pub unsafe fn waitForExistenceWithTimeout(&self, timeout: NSTimeInterval) -> bool;

        /// Waits the specified amount of time for the element's exist property to be false and returns false if the timeout expires without the element disappearing.
        #[unsafe(method(waitForNonExistenceWithTimeout:))]
        #[unsafe(method_family = none)]
        pub unsafe fn waitForNonExistenceWithTimeout(&self, timeout: NSTimeInterval) -> bool;

        /// Whether or not a hit point can be computed for the element for the purpose of synthesizing events.
        #[unsafe(method(isHittable))]
        #[unsafe(method_family = none)]
        pub unsafe fn isHittable(&self) -> bool;

        /// Returns a query for all descendants of the element matching the specified type.
        #[unsafe(method(descendantsMatchingType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn descendantsMatchingType(
            &self,
            r#type: XCUIElementType,
        ) -> Retained<XCUIElementQuery>;

        /// Returns a query for direct children of the element matching the specified type.
        #[unsafe(method(childrenMatchingType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn childrenMatchingType(
            &self,
            r#type: XCUIElementType,
        ) -> Retained<XCUIElementQuery>;

        #[cfg(feature = "objc2-core-foundation")]
        /// Creates and returns a new coordinate that will compute its screen point by adding the offset multiplied by the size of the element’s frame to the origin of the element’s frame.
        #[unsafe(method(coordinateWithNormalizedOffset:))]
        #[unsafe(method_family = none)]
        pub unsafe fn coordinateWithNormalizedOffset(
            &self,
            normalized_offset: CGVector,
        ) -> Retained<XCUICoordinate>;

        /// Provides debugging information about the element. The data in the string will vary based on the
        /// time at which it is captured, but it may include any of the following as well as additional data:
        /// • Values for the elements attributes.
        /// • The entire tree of descendants rooted at the element.
        /// • The element's query.
        /// This data should be used for debugging only - depending on any of the data as part of a test is unsupported.
        #[unsafe(method(debugDescription))]
        #[unsafe(method_family = none)]
        pub unsafe fn debugDescription(&self) -> Retained<NSString>;
    );
}

/// XCUIScreenshotProviding.
impl XCUIElement {
    extern_methods!();
}

extern_conformance!(
    unsafe impl XCUIScreenshotProviding for XCUIElement {}
);

/// XCUIElementKeyboardEvents.
///
/// Events that can be synthesized relative to an XCUIElement object. When an event API is called, the element
/// will be resolved. If zero or multiple matches are found, an error will be raised.
impl XCUIElement {
    extern_methods!(
        /// Types a string into the element. The element or a descendant must have keyboard focus; otherwise an
        /// error is raised.
        ///
        /// This API discards any modifiers set in the current context by +performWithKeyModifiers:block: so that
        /// it strictly interprets the provided text. To input keys with modifier flags, use  -typeKey:modifierFlags:.
        #[unsafe(method(typeText:))]
        #[unsafe(method_family = none)]
        pub unsafe fn typeText(&self, text: &NSString);

        #[cfg(feature = "block2")]
        /// Hold modifier keys while the given block runs. This method pushes and pops the modifiers as global state
        /// without need for reference to a particular element. Inside the block, elements can be clicked on, dragged
        /// from, typed into, etc.
        #[unsafe(method(performWithKeyModifiers:block:))]
        #[unsafe(method_family = none)]
        pub unsafe fn performWithKeyModifiers_block(
            flags: XCUIKeyModifierFlags,
            block: &block2::DynBlock<dyn Fn() + '_>,
            mtm: MainThreadMarker,
        );

        /// Types a single key with the specified modifier flags. Although `key` is a string, it must represent
        /// a single key on a physical keyboard; strings that resolve to multiple keys will raise an error at runtime.
        /// In addition to literal string key representations like "a", "6", and "[", keys such as the arrow keys,
        /// command, control, option, and function keys can be typed using constants defined for them in XCUIKeyboardKeys.h
        #[unsafe(method(typeKey:modifierFlags:))]
        #[unsafe(method_family = none)]
        pub unsafe fn typeKey_modifierFlags(&self, key: &NSString, flags: XCUIKeyModifierFlags);
    );
}

/// XCUIElementTouchEvents.
impl XCUIElement {
    extern_methods!(
        /// Sends a tap event to a hittable point computed for the element.
        #[unsafe(method(tap))]
        #[unsafe(method_family = none)]
        pub unsafe fn tap(&self);

        /// Sends a double tap event to a hittable point computed for the element.
        #[unsafe(method(doubleTap))]
        #[unsafe(method_family = none)]
        pub unsafe fn doubleTap(&self);

        /// Sends a long press gesture to a hittable point computed for the element, holding for the specified duration.
        ///
        ///
        /// Parameter `duration`: Duration in seconds.
        #[unsafe(method(pressForDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn pressForDuration(&self, duration: NSTimeInterval);

        /// Initiates a press-and-hold gesture that then drags to another element, suitable for table cell reordering and similar operations.
        ///
        /// Parameter `duration`: Duration of the initial press-and-hold.
        ///
        /// Parameter `otherElement`: The element to finish the drag gesture over. In the example of table cell reordering, this would be the reorder element of the destination row.
        #[unsafe(method(pressForDuration:thenDragToElement:))]
        #[unsafe(method_family = none)]
        pub unsafe fn pressForDuration_thenDragToElement(
            &self,
            duration: NSTimeInterval,
            other_element: &XCUIElement,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// Initiates a press-and-hold gesture that then drags to another element with a custom velocity and then holds, suitable for table cell reordering and similar operations.
        ///
        /// Parameter `duration`: Duration of the initial press-and-hold.
        ///
        /// Parameter `otherElement`: The element to finish the drag gesture over. In the example of table cell reordering, this would be the reorder element of the destination row.
        ///
        /// Parameter `velocity`: The velocity pixels per second at which to drag the element.
        ///
        /// Parameter `holdDuration`: The duration of the final hold.
        #[unsafe(method(pressForDuration:thenDragToElement:withVelocity:thenHoldForDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn pressForDuration_thenDragToElement_withVelocity_thenHoldForDuration(
            &self,
            duration: NSTimeInterval,
            other_element: &XCUIElement,
            velocity: XCUIGestureVelocity,
            hold_duration: NSTimeInterval,
        );

        /// Sends a swipe-up gesture.
        #[unsafe(method(swipeUp))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeUp(&self);

        /// Sends a swipe-down gesture.
        #[unsafe(method(swipeDown))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeDown(&self);

        /// Sends a swipe-left gesture.
        #[unsafe(method(swipeLeft))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeLeft(&self);

        /// Sends a swipe-right gesture.
        #[unsafe(method(swipeRight))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeRight(&self);

        #[cfg(feature = "objc2-core-foundation")]
        /// Sends a swipe in the specified direction with a specified velocity.
        ///
        /// Parameter `velocity`: The velocity pixels per second at which to perform the swipe at.
        #[unsafe(method(swipeUpWithVelocity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeUpWithVelocity(&self, velocity: XCUIGestureVelocity);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(swipeDownWithVelocity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeDownWithVelocity(&self, velocity: XCUIGestureVelocity);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(swipeLeftWithVelocity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeLeftWithVelocity(&self, velocity: XCUIGestureVelocity);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(swipeRightWithVelocity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeRightWithVelocity(&self, velocity: XCUIGestureVelocity);
    );
}

/// XCUIElementMouseEvents.
impl XCUIElement {
    extern_methods!(
        /// Moves the cursor over the element.
        #[unsafe(method(hover))]
        #[unsafe(method_family = none)]
        pub unsafe fn hover(&self);

        /// Sends a click event to a hittable point computed for the element.
        #[unsafe(method(click))]
        #[unsafe(method_family = none)]
        pub unsafe fn click(&self);

        /// Sends a double click event to a hittable point computed for the element.
        #[unsafe(method(doubleClick))]
        #[unsafe(method_family = none)]
        pub unsafe fn doubleClick(&self);

        /// Sends a right click event to a hittable point computed for the element.
        #[unsafe(method(rightClick))]
        #[unsafe(method_family = none)]
        pub unsafe fn rightClick(&self);

        /// Clicks and holds for a specified duration (generally long enough to start a drag operation) then drags
        /// to the other element.
        #[unsafe(method(clickForDuration:thenDragToElement:))]
        #[unsafe(method_family = none)]
        pub unsafe fn clickForDuration_thenDragToElement(
            &self,
            duration: NSTimeInterval,
            other_element: &XCUIElement,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// Initiates a click-and-hold gesture that then drags to another element with a custom velocity and then holds, suitable for table cell reordering and similar operations.
        ///
        /// Parameter `duration`: Duration of the initial click-and-hold.
        ///
        /// Parameter `otherElement`: The element to finish the drag gesture over. In the example of table cell reordering, this would be the reorder element of the destination row.
        ///
        /// Parameter `velocity`: The velocity pixels per second at which to drag the element.
        ///
        /// Parameter `holdDuration`: The duration of the final hold.
        #[unsafe(method(clickForDuration:thenDragToElement:withVelocity:thenHoldForDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn clickForDuration_thenDragToElement_withVelocity_thenHoldForDuration(
            &self,
            duration: NSTimeInterval,
            other_element: &XCUIElement,
            velocity: XCUIGestureVelocity,
            hold_duration: NSTimeInterval,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// Scroll the view the specified pixels, x and y.
        #[unsafe(method(scrollByDeltaX:deltaY:))]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollByDeltaX_deltaY(&self, delta_x: CGFloat, delta_y: CGFloat);
    );
}

/// XCUIElementTypeSlider.
///
/// This category on XCUIElement provides functionality for automating UISlider and NSSlider.
impl XCUIElement {
    extern_methods!(
        #[cfg(feature = "objc2-core-foundation")]
        /// Manipulates the UI to change the displayed value of the slider to one based on a normalized position. 0 corresponds to the minimum value of the slider, 1 corresponds to its maximum value. The adjustment is a "best effort" to move the indicator to the desired position; absolute fidelity is not guaranteed.
        #[unsafe(method(adjustToNormalizedSliderPosition:))]
        #[unsafe(method_family = none)]
        pub unsafe fn adjustToNormalizedSliderPosition(&self, normalized_slider_position: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Returns the position of the slider's indicator as a normalized value where 0 corresponds to the minimum value of the slider and 1 corresponds to its maximum value.
        #[unsafe(method(normalizedSliderPosition))]
        #[unsafe(method_family = none)]
        pub unsafe fn normalizedSliderPosition(&self) -> CGFloat;
    );
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementsnapshot?language=objc)
    pub unsafe trait XCUIElementSnapshot: XCUIElementAttributes + MainThreadOnly {
        #[unsafe(method(children))]
        #[unsafe(method_family = none)]
        unsafe fn children(&self) -> Retained<NSArray<ProtocolObject<dyn XCUIElementSnapshot>>>;

        /// Returns a hierarchical dictionary representation with standard attributes for the element and all
        /// of its descendants. The dictionary keys are of type XCUIElementAttributeName. If the value for a given
        /// attribute is null, the key will not be present, but empty strings may be found in the dictionary.
        #[unsafe(method(dictionaryRepresentation))]
        #[unsafe(method_family = none)]
        unsafe fn dictionaryRepresentation(
            &self,
        ) -> Retained<NSDictionary<XCUIElementAttributeName, AnyObject>>;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementsnapshotproviding?language=objc)
    pub unsafe trait XCUIElementSnapshotProviding:
        NSObjectProtocol + MainThreadOnly
    {
        /// Returns a hierarchical data structure with standard attributes for the element and its children.
        #[unsafe(method(snapshotWithError:_))]
        #[unsafe(method_family = none)]
        unsafe fn snapshotWithError(
            &self,
        ) -> Result<Retained<ProtocolObject<dyn XCUIElementSnapshot>>, Retained<NSError>>;
    }
);

/// XCUIElementSnapshotProviding.
impl XCUIElement {
    extern_methods!();
}

extern_conformance!(
    unsafe impl XCUIElementSnapshotProviding for XCUIElement {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuiprotectedresource?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct XCUIProtectedResource(pub NSInteger);
impl XCUIProtectedResource {
    #[doc(alias = "XCUIProtectedResourceContacts")]
    pub const Contacts: Self = Self(1);
    #[doc(alias = "XCUIProtectedResourceCalendar")]
    pub const Calendar: Self = Self(2);
    #[doc(alias = "XCUIProtectedResourceReminders")]
    pub const Reminders: Self = Self(3);
    #[doc(alias = "XCUIProtectedResourcePhotos")]
    pub const Photos: Self = Self(4);
    #[doc(alias = "XCUIProtectedResourceMicrophone")]
    pub const Microphone: Self = Self(5);
    #[doc(alias = "XCUIProtectedResourceCamera")]
    pub const Camera: Self = Self(6);
    #[doc(alias = "XCUIProtectedResourceMediaLibrary")]
    pub const MediaLibrary: Self = Self(7);
    #[doc(alias = "XCUIProtectedResourceHomeKit")]
    pub const HomeKit: Self = Self(8);
    #[doc(alias = "XCUIProtectedResourceFocus")]
    pub const Focus: Self = Self(9);
    #[doc(alias = "XCUIProtectedResourceSystemRootDirectory")]
    pub const SystemRootDirectory: Self = Self(0x40000000);
    #[doc(alias = "XCUIProtectedResourceUserDesktopDirectory")]
    pub const UserDesktopDirectory: Self = Self(0x40000001);
    #[doc(alias = "XCUIProtectedResourceUserDownloadsDirectory")]
    pub const UserDownloadsDirectory: Self = Self(0x40000002);
    #[doc(alias = "XCUIProtectedResourceUserDocumentsDirectory")]
    pub const UserDocumentsDirectory: Self = Self(0x40000003);
    #[doc(alias = "XCUIProtectedResourceNetworkVolumes")]
    pub const NetworkVolumes: Self = Self(0x40000004);
    #[doc(alias = "XCUIProtectedResourceRemovableVolumes")]
    pub const RemovableVolumes: Self = Self(0x40000005);
    #[doc(alias = "XCUIProtectedResourceAppleEvents")]
    pub const AppleEvents: Self = Self(0x40000006);
}

unsafe impl Encode for XCUIProtectedResource {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for XCUIProtectedResource {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Bitmasks for use with [XCUIApplication performAccessibilityAuditWithAuditTypes:issueHandler:error:].
/// These represent the types of audits that can be run, and they can be combined using bitwise OR.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuiaccessibilityaudittype?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct XCUIAccessibilityAuditType(pub u64);
bitflags::bitflags! {
    impl XCUIAccessibilityAuditType: u64 {
        #[doc(alias = "XCUIAccessibilityAuditTypeContrast")]
        const Contrast = 1<<0;
        #[doc(alias = "XCUIAccessibilityAuditTypeElementDetection")]
        const ElementDetection = 1<<1;
        #[doc(alias = "XCUIAccessibilityAuditTypeHitRegion")]
        const HitRegion = 1<<2;
        #[doc(alias = "XCUIAccessibilityAuditTypeSufficientElementDescription")]
        const SufficientElementDescription = 1<<3;
        #[doc(alias = "XCUIAccessibilityAuditTypeAction")]
        const Action = 1<<32;
        #[doc(alias = "XCUIAccessibilityAuditTypeParentChild")]
        const ParentChild = 1<<33;
        #[doc(alias = "XCUIAccessibilityAuditTypeAll")]
        const All = !0;
    }
}

unsafe impl Encode for XCUIAccessibilityAuditType {
    const ENCODING: Encoding = u64::ENCODING;
}

unsafe impl RefEncode for XCUIAccessibilityAuditType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// Represents an issue returned by an accessibility audit.
    ///
    /// See also: [XCUIApplication performAccessibilityAuditWithAuditTypes:issueHandler:error:]
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuiaccessibilityauditissue?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct XCUIAccessibilityAuditIssue;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for XCUIAccessibilityAuditIssue {}
);

impl XCUIAccessibilityAuditIssue {
    extern_methods!(
        /// The element associated with the issue.
        #[unsafe(method(element))]
        #[unsafe(method_family = none)]
        pub unsafe fn element(&self, mtm: MainThreadMarker) -> Option<Retained<XCUIElement>>;

        /// A short description about the issue.
        #[unsafe(method(compactDescription))]
        #[unsafe(method_family = none)]
        pub unsafe fn compactDescription(&self) -> Retained<NSString>;

        /// A longer description of the issue with more details about the failure.
        #[unsafe(method(detailedDescription))]
        #[unsafe(method_family = none)]
        pub unsafe fn detailedDescription(&self) -> Retained<NSString>;

        /// The type of audit which generated the issue.
        #[unsafe(method(auditType))]
        #[unsafe(method_family = none)]
        pub unsafe fn auditType(&self) -> XCUIAccessibilityAuditType;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuiapplicationstate?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct XCUIApplicationState(pub NSUInteger);
impl XCUIApplicationState {
    #[doc(alias = "XCUIApplicationStateUnknown")]
    pub const Unknown: Self = Self(0);
    #[doc(alias = "XCUIApplicationStateNotRunning")]
    pub const NotRunning: Self = Self(1);
    #[doc(alias = "XCUIApplicationStateRunningBackground")]
    pub const RunningBackground: Self = Self(3);
    #[doc(alias = "XCUIApplicationStateRunningForeground")]
    pub const RunningForeground: Self = Self(4);
}

unsafe impl Encode for XCUIApplicationState {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for XCUIApplicationState {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// Proxy for an application that may or may not be running.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuiapplication?language=objc)
    #[unsafe(super(XCUIElement, NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct XCUIApplication;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for XCUIApplication {}
);

extern_conformance!(
    unsafe impl XCUIElementAttributes for XCUIApplication {}
);

extern_conformance!(
    unsafe impl XCUIElementTypeQueryProvider for XCUIApplication {}
);

impl XCUIApplication {
    extern_methods!(
        /// Returns a proxy for the application specified by the "Target Application" target setting.
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        /// Returns a proxy for an application associated with the specified bundle identifier.
        #[unsafe(method(initWithBundleIdentifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithBundleIdentifier(
            this: Allocated<Self>,
            bundle_identifier: &NSString,
        ) -> Retained<Self>;

        /// Returns a proxy for the application at the specified file system URL.
        #[unsafe(method(initWithURL:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithURL(this: Allocated<Self>, url: &NSURL) -> Retained<Self>;

        /// Launches the application synchronously. On return the application ready to handle events. If the
        /// application is already running, the existing instance will be terminated to ensure a clean state
        /// for the launched instance.
        ///
        /// Any failure in the launch sequence will be reported as a test failure and the test will be halted
        /// at that point.
        #[unsafe(method(launch))]
        #[unsafe(method_family = none)]
        pub unsafe fn launch(&self);

        /// Launches the application synchronously using the provided URL. On return the application is ready
        /// to handle events, similar to the behavior of -launch.
        ///
        /// Any failure in the launch sequence, or any failure in using the provided URL, will be reported as a
        /// test failure and the test will be halted at that point.
        #[unsafe(method(openURL:))]
        #[unsafe(method_family = none)]
        pub unsafe fn openURL(&self, url: &NSURL);

        /// Activates the application synchronously. On return the application is ready to handle events.
        /// If the application was not running prior, it will be launched automatically. If the application
        /// would be launched as a result of this method and was previously launched via -launch, the launch
        /// arguments and environment variables that were used then will be supplied again for the new launch.
        ///
        /// Unlike -launch, if the application is already running this call will not terminate the existing
        /// instance.
        ///
        /// Any failure in the activation or launch sequence will be reported as a test failure and the test
        /// will be halted at that point.
        #[unsafe(method(activate))]
        #[unsafe(method_family = none)]
        pub unsafe fn activate(&self);

        /// Terminates any running instance of the application. If the application has an existing debug session
        /// via Xcode, the termination is implemented as a halt via that debug connection. Otherwise, a SIGKILL
        /// is sent to the process.
        #[unsafe(method(terminate))]
        #[unsafe(method_family = none)]
        pub unsafe fn terminate(&self);

        /// The arguments that will be passed to the application on launch. If not modified, these are the
        /// arguments that Xcode will pass on launch. Those arguments can be changed, added to, or removed.
        /// Unlike NSTask, it is legal to modify these arguments after the application has been launched. These
        /// changes will not affect the current launch session, but will take effect the next time the application
        /// is launched.
        #[unsafe(method(launchArguments))]
        #[unsafe(method_family = none)]
        pub unsafe fn launchArguments(&self) -> Retained<NSArray<NSString>>;

        /// Setter for [`launchArguments`][Self::launchArguments].
        #[unsafe(method(setLaunchArguments:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setLaunchArguments(&self, launch_arguments: &NSArray<NSString>);

        /// The environment that will be passed to the application on launch. If not modified, this is the
        /// environment that Xcode will pass on launch. Those variables can be changed, added to, or removed.
        /// Unlike NSTask, it is legal to modify the environment after the application has been launched. These
        /// changes will not affect the current launch session, but will take effect the next time the application
        /// is launched.
        #[unsafe(method(launchEnvironment))]
        #[unsafe(method_family = none)]
        pub unsafe fn launchEnvironment(&self) -> Retained<NSDictionary<NSString, NSString>>;

        /// Setter for [`launchEnvironment`][Self::launchEnvironment].
        #[unsafe(method(setLaunchEnvironment:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setLaunchEnvironment(
            &self,
            launch_environment: &NSDictionary<NSString, NSString>,
        );

        /// The most recently observed state of the application. Applications are passively monitored to update
        /// this property as they change state. Consequently, updates to this property are inherently asynchronous.
        ///
        /// Some guarantees are made, however:
        ///
        /// - When -launch and -activate return, if they were successful, the state of the application will be
        /// XCUIApplicationStateRunningBackground or XCUIApplicationStateRunningForeground, whichever is
        /// appropriate for the application. Most applications will be XCUIApplicationStateRunningForeground
        /// after launch or activation.
        ///
        /// - When -terminate returns, if it was successful, the state of the application will be
        /// XCUIApplicationStateNotRunning.
        #[unsafe(method(state))]
        #[unsafe(method_family = none)]
        pub unsafe fn state(&self) -> XCUIApplicationState;

        /// Waits for the application to become a specific state, giving up after a number of seconds.
        ///
        /// Returns YES if the application is currently in or transitions to the desired state within the specified
        /// timeout period.
        #[must_use]
        #[unsafe(method(waitForState:timeout:))]
        #[unsafe(method_family = none)]
        pub unsafe fn waitForState_timeout(
            &self,
            state: XCUIApplicationState,
            timeout: NSTimeInterval,
        ) -> bool;

        /// Reset the authorization status for a protected resource, such that the system will display the
        /// authorization prompt the next time the resource is accessed. The app does not have to be in a running state to
        /// use this API. If the app is running, it might get terminated while the reset occurs for some protected resources.
        ///
        /// Example usage:
        ///
        /// ```text
        ///  XCUIApplication *app = [XCUIApplication new];
        ///  [app resetAuthorizationStatusForResource:XCUIProtectedResourcePhotos];
        ///  [app launch];
        /// ```
        #[unsafe(method(resetAuthorizationStatusForResource:))]
        #[unsafe(method_family = none)]
        pub unsafe fn resetAuthorizationStatusForResource(&self, resource: XCUIProtectedResource);

        #[cfg(feature = "block2")]
        /// Runs an accessibility audit on the current view. Generates XCTIssue objects for each issue returned by the audit, and fails the test case by recording each of these issues. Returns an error if the audit failed to run.
        ///
        ///
        /// Parameter `auditTypes`: Set of audit types which which configure what the audit will test for.
        ///
        /// Parameter `block`: An optional filter can be used to determine whether or not an issue should be recorded. To prevent an issue from recorded, return YES to handle it yourself.
        #[unsafe(method(performAccessibilityAuditWithAuditTypes:issueHandler:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn performAccessibilityAuditWithAuditTypes_issueHandler_error(
            &self,
            audit_types: XCUIAccessibilityAuditType,
            block: Option<
                &block2::DynBlock<dyn Fn(NonNull<XCUIAccessibilityAuditIssue>) -> Bool + '_>,
            >,
        ) -> Result<(), Retained<NSError>>;
    );
}

extern_class!(
    /// A coordinate represents a location on screen, relative to some element. Coordinates are dynamic, just like the elements to which they refer, and may compute different screen locations at different times, or be invalid if the referenced element does not exist.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuicoordinate?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct XCUICoordinate;
);

extern_conformance!(
    unsafe impl NSCopying for XCUICoordinate {}
);

unsafe impl CopyingHelper for XCUICoordinate {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for XCUICoordinate {}
);

impl XCUICoordinate {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// The element that the coordinate is based on, either directly or via the coordinate from which it was derived.
        #[unsafe(method(referencedElement))]
        #[unsafe(method_family = none)]
        pub unsafe fn referencedElement(&self) -> Retained<XCUIElement>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The dynamically computed value of the coordinate's location on screen. Note that this value is dependent on the current frame of the referenced element; if the element's frame changes, so will the value returned by this property. If the referenced element does exist when this is called, it will fail the test; check the referenced element's exists property if the element may not be present.
        #[unsafe(method(screenPoint))]
        #[unsafe(method_family = none)]
        pub unsafe fn screenPoint(&self) -> CGPoint;

        #[cfg(feature = "objc2-core-foundation")]
        /// Creates a new coordinate with an absolute offset in points from the original coordinate.
        #[unsafe(method(coordinateWithOffset:))]
        #[unsafe(method_family = none)]
        pub unsafe fn coordinateWithOffset(
            &self,
            offset_vector: CGVector,
        ) -> Retained<XCUICoordinate>;
    );
}

/// XCUICoordinateTouchEvents.
impl XCUICoordinate {
    extern_methods!(
        #[unsafe(method(tap))]
        #[unsafe(method_family = none)]
        pub unsafe fn tap(&self);

        #[unsafe(method(doubleTap))]
        #[unsafe(method_family = none)]
        pub unsafe fn doubleTap(&self);

        #[unsafe(method(pressForDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn pressForDuration(&self, duration: NSTimeInterval);

        #[unsafe(method(pressForDuration:thenDragToCoordinate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn pressForDuration_thenDragToCoordinate(
            &self,
            duration: NSTimeInterval,
            other_coordinate: &XCUICoordinate,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(pressForDuration:thenDragToCoordinate:withVelocity:thenHoldForDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn pressForDuration_thenDragToCoordinate_withVelocity_thenHoldForDuration(
            &self,
            duration: NSTimeInterval,
            other_coordinate: &XCUICoordinate,
            velocity: XCUIGestureVelocity,
            hold_duration: NSTimeInterval,
        );

        /// Sends a swipe-up gesture.
        #[unsafe(method(swipeUp))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeUp(&self);

        /// Sends a swipe-down gesture.
        #[unsafe(method(swipeDown))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeDown(&self);

        /// Sends a swipe-left gesture.
        #[unsafe(method(swipeLeft))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeLeft(&self);

        /// Sends a swipe-right gesture.
        #[unsafe(method(swipeRight))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeRight(&self);

        #[cfg(feature = "objc2-core-foundation")]
        /// Sends a swipe in the specified direction with a specified velocity.
        ///
        /// Parameter `velocity`: The velocity pixels per second at which to perform the swipe at.
        #[unsafe(method(swipeUpWithVelocity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeUpWithVelocity(&self, velocity: XCUIGestureVelocity);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(swipeDownWithVelocity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeDownWithVelocity(&self, velocity: XCUIGestureVelocity);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(swipeLeftWithVelocity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeLeftWithVelocity(&self, velocity: XCUIGestureVelocity);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(swipeRightWithVelocity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn swipeRightWithVelocity(&self, velocity: XCUIGestureVelocity);
    );
}

/// XCUICoordinateMouseEvents.
impl XCUICoordinate {
    extern_methods!(
        #[unsafe(method(hover))]
        #[unsafe(method_family = none)]
        pub unsafe fn hover(&self);

        #[unsafe(method(click))]
        #[unsafe(method_family = none)]
        pub unsafe fn click(&self);

        #[unsafe(method(doubleClick))]
        #[unsafe(method_family = none)]
        pub unsafe fn doubleClick(&self);

        #[unsafe(method(rightClick))]
        #[unsafe(method_family = none)]
        pub unsafe fn rightClick(&self);

        #[unsafe(method(clickForDuration:thenDragToCoordinate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn clickForDuration_thenDragToCoordinate(
            &self,
            duration: NSTimeInterval,
            other_coordinate: &XCUICoordinate,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(clickForDuration:thenDragToCoordinate:withVelocity:thenHoldForDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn clickForDuration_thenDragToCoordinate_withVelocity_thenHoldForDuration(
            &self,
            duration: NSTimeInterval,
            other_coordinate: &XCUICoordinate,
            velocity: XCUIGestureVelocity,
            hold_duration: NSTimeInterval,
        );

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(scrollByDeltaX:deltaY:))]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollByDeltaX_deltaY(&self, delta_x: CGFloat, delta_y: CGFloat);
    );
}

extern_class!(
    /// Represents a device's simulated location by wrapping a CLLocation object from Core Location
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuilocation?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct XCUILocation;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for XCUILocation {}
);

impl XCUILocation {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "objc2-core-location")]
        #[unsafe(method(initWithLocation:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithLocation(
            this: Allocated<Self>,
            location: &CLLocation,
        ) -> Retained<Self>;

        /// Provides debugging information about the underlying CLLocation wrapped by this object.
        #[unsafe(method(debugDescription))]
        #[unsafe(method_family = none)]
        pub unsafe fn debugDescription(&self) -> Retained<NSString>;

        #[cfg(feature = "objc2-core-location")]
        /// Provides access to the CLLocation object stored by this XCUILocation instance.
        #[unsafe(method(location))]
        #[unsafe(method_family = none)]
        pub unsafe fn location(&self) -> Retained<CLLocation>;
    );
}

/// Represents the light or dark UI style of a device.
///
///
/// Note: To maintain alignment with UIUserInterfaceStyle, we use `XCUIDeviceAppearanceUnspecified` to describe
/// UI styles that are unset.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuideviceappearance?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct XCUIDeviceAppearance(pub NSInteger);
impl XCUIDeviceAppearance {
    #[doc(alias = "XCUIDeviceAppearanceUnspecified")]
    pub const Unspecified: Self = Self(0);
    #[doc(alias = "XCUIDeviceAppearanceLight")]
    pub const Light: Self = Self(1);
    #[doc(alias = "XCUIDeviceAppearanceDark")]
    pub const Dark: Self = Self(2);
}

unsafe impl Encode for XCUIDeviceAppearance {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for XCUIDeviceAppearance {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// Represents a device, providing an interface for simulating events involving physical buttons and device state.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuidevice?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct XCUIDevice;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for XCUIDevice {}
);

impl XCUIDevice {
    extern_methods!(
        /// The current device.
        #[unsafe(method(sharedDevice))]
        #[unsafe(method_family = none)]
        pub unsafe fn sharedDevice(mtm: MainThreadMarker) -> Retained<XCUIDevice>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[deprecated]
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// The location currently being simulated by the device, if any.
        #[unsafe(method(location))]
        #[unsafe(method_family = none)]
        pub unsafe fn location(&self) -> Option<Retained<XCUILocation>>;

        /// Setter for [`location`][Self::location].
        #[unsafe(method(setLocation:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setLocation(&self, location: Option<&XCUILocation>);

        /// Get or set the UI style of the device. Uses the `XCUIDeviceAppearance` enum to describe the UI style.
        #[unsafe(method(appearance))]
        #[unsafe(method_family = none)]
        pub unsafe fn appearance(&self) -> XCUIDeviceAppearance;

        /// Setter for [`appearance`][Self::appearance].
        #[unsafe(method(setAppearance:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAppearance(&self, appearance: XCUIDeviceAppearance);

        /// Access system features of the device, such as its running applications, or the ability to open files on it.
        #[unsafe(method(system))]
        #[unsafe(method_family = none)]
        pub unsafe fn system(&self) -> Retained<XCUISystem>;
    );
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuiidentifierclosewindow?language=objc)
    pub static XCUIIdentifierCloseWindow: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuiidentifierminimizewindow?language=objc)
    pub static XCUIIdentifierMinimizeWindow: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuiidentifierzoomwindow?language=objc)
    pub static XCUIIdentifierZoomWindow: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuiidentifierfullscreenwindow?language=objc)
    pub static XCUIIdentifierFullScreenWindow: &'static NSString;
}

extern_class!(
    /// Object for locating elements that can be chained with other queries.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuielementquery?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct XCUIElementQuery;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for XCUIElementQuery {}
);

extern_conformance!(
    unsafe impl XCUIElementTypeQueryProvider for XCUIElementQuery {}
);

impl XCUIElementQuery {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Returns an element that will use the query for resolution.
        #[unsafe(method(element))]
        #[unsafe(method_family = none)]
        pub unsafe fn element(&self) -> Retained<XCUIElement>;

        /// Evaluates the query at the time it is called and returns the number of matches found.
        #[unsafe(method(count))]
        #[unsafe(method_family = none)]
        pub unsafe fn count(&self) -> NSUInteger;

        /// Returns an element that will resolve to the index into the query's result set.
        #[deprecated]
        #[unsafe(method(elementAtIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn elementAtIndex(&self, index: NSUInteger) -> Retained<XCUIElement>;

        /// Returns an element that will use the index into the query's results to determine which underlying accessibility element it is matched with.
        #[unsafe(method(elementBoundByIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn elementBoundByIndex(&self, index: NSUInteger) -> Retained<XCUIElement>;

        /// Returns an element that matches the predicate. The predicate will be evaluated against objects of type id
        /// <XCUIElementAttributes
        /// >.
        #[unsafe(method(elementMatchingPredicate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn elementMatchingPredicate(
            &self,
            predicate: &NSPredicate,
        ) -> Retained<XCUIElement>;

        /// Returns an element that matches the type and identifier.
        #[unsafe(method(elementMatchingType:identifier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn elementMatchingType_identifier(
            &self,
            element_type: XCUIElementType,
            identifier: Option<&NSString>,
        ) -> Retained<XCUIElement>;

        /// Keyed subscripting is implemented as a shortcut for matching an identifier only. For example, app.descendants["Foo"] -> XCUIElement.
        #[unsafe(method(objectForKeyedSubscript:))]
        #[unsafe(method_family = none)]
        pub unsafe fn objectForKeyedSubscript(&self, key: &NSString) -> Retained<XCUIElement>;

        /// Immediately evaluates the query and returns an array of elements bound to the resulting accessibility elements.
        #[unsafe(method(allElementsBoundByAccessibilityElement))]
        #[unsafe(method_family = none)]
        pub unsafe fn allElementsBoundByAccessibilityElement(
            &self,
        ) -> Retained<NSArray<XCUIElement>>;

        /// Immediately evaluates the query and returns an array of elements bound by the index of each result.
        #[unsafe(method(allElementsBoundByIndex))]
        #[unsafe(method_family = none)]
        pub unsafe fn allElementsBoundByIndex(&self) -> Retained<NSArray<XCUIElement>>;

        /// Returns a new query that finds the descendants of all the elements found by the receiver.
        #[unsafe(method(descendantsMatchingType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn descendantsMatchingType(
            &self,
            r#type: XCUIElementType,
        ) -> Retained<XCUIElementQuery>;

        /// Returns a new query that finds the direct children of all the elements found by the receiver.
        #[unsafe(method(childrenMatchingType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn childrenMatchingType(
            &self,
            r#type: XCUIElementType,
        ) -> Retained<XCUIElementQuery>;

        /// Returns a new query that applies the specified attributes or predicate to the receiver. The predicate will be evaluated against objects of type id
        /// <XCUIElementAttributes
        /// >.
        #[unsafe(method(matchingPredicate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn matchingPredicate(
            &self,
            predicate: &NSPredicate,
        ) -> Retained<XCUIElementQuery>;

        #[unsafe(method(matchingType:identifier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn matchingType_identifier(
            &self,
            element_type: XCUIElementType,
            identifier: Option<&NSString>,
        ) -> Retained<XCUIElementQuery>;

        #[unsafe(method(matchingIdentifier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn matchingIdentifier(
            &self,
            identifier: &NSString,
        ) -> Retained<XCUIElementQuery>;

        /// Returns a new query for finding elements that contain a descendant matching the specification. The predicate will be evaluated against objects of type id
        /// <XCUIElementAttributes
        /// >.
        #[unsafe(method(containingPredicate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn containingPredicate(
            &self,
            predicate: &NSPredicate,
        ) -> Retained<XCUIElementQuery>;

        #[unsafe(method(containingType:identifier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn containingType_identifier(
            &self,
            element_type: XCUIElementType,
            identifier: Option<&NSString>,
        ) -> Retained<XCUIElementQuery>;

        /// Provides debugging information about the query. The data in the string will vary based on the time
        /// at which it is captured, but it may include any of the following as well as additional data:
        /// • A description of each step of the query.
        /// • Information about the inputs and matched outputs of each step of the query.
        /// This data should be used for debugging only - depending on any of the data as part of a test is unsupported.
        #[unsafe(method(debugDescription))]
        #[unsafe(method_family = none)]
        pub unsafe fn debugDescription(&self) -> Retained<NSString>;
    );
}

/// A button on a physical remote control.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuiremotebutton?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct XCUIRemoteButton(pub NSUInteger);
impl XCUIRemoteButton {
    #[doc(alias = "XCUIRemoteButtonUp")]
    pub const Up: Self = Self(0);
    #[doc(alias = "XCUIRemoteButtonDown")]
    pub const Down: Self = Self(1);
    #[doc(alias = "XCUIRemoteButtonLeft")]
    pub const Left: Self = Self(2);
    #[doc(alias = "XCUIRemoteButtonRight")]
    pub const Right: Self = Self(3);
    #[doc(alias = "XCUIRemoteButtonSelect")]
    pub const Select: Self = Self(4);
    #[doc(alias = "XCUIRemoteButtonMenu")]
    pub const Menu: Self = Self(5);
    #[doc(alias = "XCUIRemoteButtonPlayPause")]
    pub const PlayPause: Self = Self(6);
    #[doc(alias = "XCUIRemoteButtonHome")]
    pub const Home: Self = Self(7);
    #[doc(alias = "XCUIRemoteButtonPageUp")]
    pub const PageUp: Self = Self(9);
    #[doc(alias = "XCUIRemoteButtonPageDown")]
    pub const PageDown: Self = Self(10);
    #[doc(alias = "XCUIRemoteButtonGuide")]
    pub const Guide: Self = Self(11);
    #[doc(alias = "XCUIRemoteButtonTVProvider")]
    pub const TVProvider: Self = Self(12);
    #[doc(alias = "XCUIRemoteButtonOneTwoThree")]
    pub const OneTwoThree: Self = Self(13);
    #[doc(alias = "XCUIRemoteButtonFourColors")]
    pub const FourColors: Self = Self(14);
}

unsafe impl Encode for XCUIRemoteButton {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for XCUIRemoteButton {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// Represents an active screen of a device. One screen of each device is designated
    /// as the "main" screen, on macOS that is the one owning the menu bar, on other platforms
    /// it is the primary screen of the device.
    ///
    /// A screen can be asked for a screenshot using the methods declared in XCUIScreenshotProviding.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuiscreen?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct XCUIScreen;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for XCUIScreen {}
);

extern_conformance!(
    unsafe impl XCUIScreenshotProviding for XCUIScreen {}
);

impl XCUIScreen {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Returns the current device's main screen.
        #[unsafe(method(mainScreen))]
        #[unsafe(method_family = none)]
        pub unsafe fn mainScreen(mtm: MainThreadMarker) -> Retained<XCUIScreen>;

        /// Returns the list of active screens.
        /// The first screen returned in the list is the main screen.
        #[unsafe(method(screens))]
        #[unsafe(method_family = none)]
        pub unsafe fn screens(mtm: MainThreadMarker) -> Retained<NSArray<XCUIScreen>>;
    );
}

extern_class!(
    /// Represents a captured screenshot.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuiscreenshot?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct XCUIScreenshot;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for XCUIScreenshot {}
);

impl XCUIScreenshot {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        #[unsafe(method(image))]
        #[unsafe(method_family = none)]
        pub unsafe fn image(&self) -> Retained<NSImage>;

        /// PNG image data of the underlying image.
        #[unsafe(method(PNGRepresentation))]
        #[unsafe(method_family = none)]
        pub unsafe fn PNGRepresentation(&self) -> Retained<NSData>;
    );
}

extern_class!(
    /// Represents a device's base system, providing an interface for performing OS-specific actions like opening universal links.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/xcuiautomation/xcuisystem?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct XCUISystem;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for XCUISystem {}
);

impl XCUISystem {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Open a URL on the system using the default application for it.
        #[unsafe(method(openURL:))]
        #[unsafe(method_family = none)]
        pub unsafe fn openURL(&self, url: &NSURL);
    );
}
