//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
use objc2_metal::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalfx/mtlfxtemporaldenoisedscalerdescriptor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLFXTemporalDenoisedScalerDescriptor;
);

extern_conformance!(
    unsafe impl NSCopying for MTLFXTemporalDenoisedScalerDescriptor {}
);

unsafe impl CopyingHelper for MTLFXTemporalDenoisedScalerDescriptor {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for MTLFXTemporalDenoisedScalerDescriptor {}
);

impl MTLFXTemporalDenoisedScalerDescriptor {
    extern_methods!(
        /// The pixel format of the input color texture for the scaler you create with this descriptor.
        #[unsafe(method(colorTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn colorTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`colorTextureFormat`][Self::colorTextureFormat].
        #[unsafe(method(setColorTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setColorTextureFormat(&self, color_texture_format: MTLPixelFormat);

        /// The pixel format of the input depth texture for the scaler you create with this descriptor.
        #[unsafe(method(depthTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn depthTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`depthTextureFormat`][Self::depthTextureFormat].
        #[unsafe(method(setDepthTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDepthTextureFormat(&self, depth_texture_format: MTLPixelFormat);

        /// The pixel format of the input motion texture for the scaler you create with this descriptor.
        #[unsafe(method(motionTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn motionTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`motionTextureFormat`][Self::motionTextureFormat].
        #[unsafe(method(setMotionTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMotionTextureFormat(&self, motion_texture_format: MTLPixelFormat);

        /// The pixel format of the input diffuse albedo texture for the scaler you create with this descriptor.
        #[unsafe(method(diffuseAlbedoTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn diffuseAlbedoTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`diffuseAlbedoTextureFormat`][Self::diffuseAlbedoTextureFormat].
        #[unsafe(method(setDiffuseAlbedoTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDiffuseAlbedoTextureFormat(
            &self,
            diffuse_albedo_texture_format: MTLPixelFormat,
        );

        /// The pixel format of the input specular albedo texture for the scaler you create with this descriptor.
        #[unsafe(method(specularAlbedoTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn specularAlbedoTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`specularAlbedoTextureFormat`][Self::specularAlbedoTextureFormat].
        #[unsafe(method(setSpecularAlbedoTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSpecularAlbedoTextureFormat(
            &self,
            specular_albedo_texture_format: MTLPixelFormat,
        );

        /// The pixel format of the input normal texture for the scaler you create with this descriptor.
        #[unsafe(method(normalTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn normalTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`normalTextureFormat`][Self::normalTextureFormat].
        #[unsafe(method(setNormalTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setNormalTextureFormat(&self, normal_texture_format: MTLPixelFormat);

        /// The pixel format of the input roughness texture for the scaler you create with this descriptor.
        #[unsafe(method(roughnessTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn roughnessTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`roughnessTextureFormat`][Self::roughnessTextureFormat].
        #[unsafe(method(setRoughnessTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRoughnessTextureFormat(&self, roughness_texture_format: MTLPixelFormat);

        /// The pixel format of the input specular hit texture for the scaler you create with this descriptor.
        #[unsafe(method(specularHitDistanceTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn specularHitDistanceTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`specularHitDistanceTextureFormat`][Self::specularHitDistanceTextureFormat].
        #[unsafe(method(setSpecularHitDistanceTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSpecularHitDistanceTextureFormat(
            &self,
            specular_hit_distance_texture_format: MTLPixelFormat,
        );

        /// The pixel format of the input denoise strength mask texture for the scaler you create with this descriptor.
        ///
        /// You typically set this to a single-channel texture format.
        #[unsafe(method(denoiseStrengthMaskTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn denoiseStrengthMaskTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`denoiseStrengthMaskTextureFormat`][Self::denoiseStrengthMaskTextureFormat].
        #[unsafe(method(setDenoiseStrengthMaskTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDenoiseStrengthMaskTextureFormat(
            &self,
            denoise_strength_mask_texture_format: MTLPixelFormat,
        );

        /// The pixel format of the input transparency overlay texture for the scaler you create with this descriptor.
        ///
        /// You typically set this to a 4-channel RGBA texture format.
        #[unsafe(method(transparencyOverlayTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn transparencyOverlayTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`transparencyOverlayTextureFormat`][Self::transparencyOverlayTextureFormat].
        #[unsafe(method(setTransparencyOverlayTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTransparencyOverlayTextureFormat(
            &self,
            transparency_overlay_texture_format: MTLPixelFormat,
        );

        /// The pixel format of the output color texture for the scaler you create with this descriptor.
        #[unsafe(method(outputTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`outputTextureFormat`][Self::outputTextureFormat].
        #[unsafe(method(setOutputTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutputTextureFormat(&self, output_texture_format: MTLPixelFormat);

        /// The width, in pixels, of the input color texture for the denoiser scaler.
        #[unsafe(method(inputWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn inputWidth(&self) -> NSUInteger;

        /// Setter for [`inputWidth`][Self::inputWidth].
        #[unsafe(method(setInputWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInputWidth(&self, input_width: NSUInteger);

        /// The height, in pixels, of the input color texture for the denoiser scaler.
        #[unsafe(method(inputHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn inputHeight(&self) -> NSUInteger;

        /// Setter for [`inputHeight`][Self::inputHeight].
        #[unsafe(method(setInputHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInputHeight(&self, input_height: NSUInteger);

        /// The width, in pixels, of the output color texture for the denoiser scaler.
        #[unsafe(method(outputWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputWidth(&self) -> NSUInteger;

        /// Setter for [`outputWidth`][Self::outputWidth].
        #[unsafe(method(setOutputWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutputWidth(&self, output_width: NSUInteger);

        /// The height, in pixels, of the input color texture for the denoiser scaler.
        #[unsafe(method(outputHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputHeight(&self) -> NSUInteger;

        /// Setter for [`outputHeight`][Self::outputHeight].
        #[unsafe(method(setOutputHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutputHeight(&self, output_height: NSUInteger);

        /// A Boolean value that indicates whether MetalFX compiles a temporal scaling effect’s underlying upscaler as it
        /// creates the instance.
        ///
        /// This property gives you the option to decide when it’s better for your app to give MetalFX the time it needs to
        /// compile the underlying upscaler of the temporal scaling effect. The two choices are:
        ///
        /// * As you create the effect
        /// * After you create the effect, likely when your app needs to upscale the initial textures
        ///
        /// You can create a temporal denoised scaler instance that can denoise and upscale textures at its best speed
        /// immediately after you create it by setting this property to
        /// <doc
        /// ://com.apple.documentation/documentation/swift/true>
        /// and then calling an initialization method like ``newTemporalDenoisedScalerWithDevice:``. However, it may take MetalFX
        /// more time for that method to return while it creates the denoiser scaler and compiles its underlying pipelines.
        ///
        /// By default, the property is equal to
        /// <doc
        /// ://com.apple.documentation/documentation/swift/false>, which tells MetalFX
        /// to quickly create and return the temporal scaling-effect instance, and then compile a faster upscaler in the background.
        /// However, this means the effect can take more time to upscale textures while the framework compiles the underlying upscaler.
        /// When the framework finishes compiling, the effect runs just as fast as if you set the property to
        /// <doc
        /// ://com.apple.documentation/documentation/swift/true>.
        ///
        /// * Note: The image quality of the effect’s output texture is consistent, whether it’s using the slower interim upscaler
        /// or the final, faster upscaler.
        #[unsafe(method(requiresSynchronousInitialization))]
        #[unsafe(method_family = none)]
        pub unsafe fn requiresSynchronousInitialization(&self) -> bool;

        /// Setter for [`requiresSynchronousInitialization`][Self::requiresSynchronousInitialization].
        #[unsafe(method(setRequiresSynchronousInitialization:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRequiresSynchronousInitialization(
            &self,
            requires_synchronous_initialization: bool,
        );

        /// A Boolean value that indicates whether MetalFX calculates the exposure for each frame.
        ///
        /// Set this property to
        /// <doc
        /// ://com.apple.documentation/documentation/swift/true> to create a scaler that automatically
        /// calculates the exposure level for each image it scales.
        ///
        /// * Note: Denoiser scaler instances that use auto exposure ignore their ``MTLFXTemporalScalerBase/exposureTexture``
        /// property.
        ///
        /// This property's default value is
        /// <doc
        /// ://com.apple.documentation/documentation/swift/false>.
        #[unsafe(method(isAutoExposureEnabled))]
        #[unsafe(method_family = none)]
        pub unsafe fn isAutoExposureEnabled(&self) -> bool;

        /// Setter for [`isAutoExposureEnabled`][Self::isAutoExposureEnabled].
        #[unsafe(method(setAutoExposureEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAutoExposureEnabled(&self, auto_exposure_enabled: bool);

        /// A Boolean value that indicates whether a scaler you create from this descriptor applies a reactive mask.
        #[unsafe(method(isReactiveMaskTextureEnabled))]
        #[unsafe(method_family = none)]
        pub unsafe fn isReactiveMaskTextureEnabled(&self) -> bool;

        /// Setter for [`isReactiveMaskTextureEnabled`][Self::isReactiveMaskTextureEnabled].
        #[unsafe(method(setReactiveMaskTextureEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setReactiveMaskTextureEnabled(&self, reactive_mask_texture_enabled: bool);

        /// The pixel format of the reactive mask input texture for a scaler you create from this descriptor.
        #[unsafe(method(reactiveMaskTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn reactiveMaskTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`reactiveMaskTextureFormat`][Self::reactiveMaskTextureFormat].
        #[unsafe(method(setReactiveMaskTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setReactiveMaskTextureFormat(
            &self,
            reactive_mask_texture_format: MTLPixelFormat,
        );

        /// A Boolean value indicating whether the scaler evaluates a specular hit distance texture as part of its operation.
        #[unsafe(method(isSpecularHitDistanceTextureEnabled))]
        #[unsafe(method_family = none)]
        pub unsafe fn isSpecularHitDistanceTextureEnabled(&self) -> bool;

        /// Setter for [`isSpecularHitDistanceTextureEnabled`][Self::isSpecularHitDistanceTextureEnabled].
        #[unsafe(method(setSpecularHitDistanceTextureEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSpecularHitDistanceTextureEnabled(
            &self,
            specular_hit_distance_texture_enabled: bool,
        );

        /// A Boolean value indicating whether the scaler evaluates a denoise strength mask texture as part of its operation.
        #[unsafe(method(isDenoiseStrengthMaskTextureEnabled))]
        #[unsafe(method_family = none)]
        pub unsafe fn isDenoiseStrengthMaskTextureEnabled(&self) -> bool;

        /// Setter for [`isDenoiseStrengthMaskTextureEnabled`][Self::isDenoiseStrengthMaskTextureEnabled].
        #[unsafe(method(setDenoiseStrengthMaskTextureEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDenoiseStrengthMaskTextureEnabled(
            &self,
            denoise_strength_mask_texture_enabled: bool,
        );

        /// A Boolean value indicating whether the scaler evaluates a transparency overlay texture as part of its operation.
        #[unsafe(method(isTransparencyOverlayTextureEnabled))]
        #[unsafe(method_family = none)]
        pub unsafe fn isTransparencyOverlayTextureEnabled(&self) -> bool;

        /// Setter for [`isTransparencyOverlayTextureEnabled`][Self::isTransparencyOverlayTextureEnabled].
        #[unsafe(method(setTransparencyOverlayTextureEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTransparencyOverlayTextureEnabled(
            &self,
            transparency_overlay_texture_enabled: bool,
        );

        /// Creates a denoiser scaler instance for a Metal device.
        ///
        /// - Parameters:
        /// - device: The Metal device that creates the denoiser scaler.
        /// - Returns:
        /// A denoiser scaler instance upon success, or `nil` otherwise.
        #[unsafe(method(newTemporalDenoisedScalerWithDevice:))]
        #[unsafe(method_family = new)]
        pub unsafe fn newTemporalDenoisedScalerWithDevice(
            &self,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Option<Retained<ProtocolObject<dyn MTLFXTemporalDenoisedScaler>>>;

        #[cfg(feature = "MTL4FXTemporalDenoisedScaler")]
        /// Creates a denoiser scaler instance for a Metal device.
        ///
        /// - Parameters:
        /// - device: The Metal device that creates the denoiser scaler.
        /// - compiler: A compiler instance this method can use to build pipeline state objects.
        /// - Returns:
        /// A denoiser scaler instance upon success, or `nil` otherwise.
        #[unsafe(method(newTemporalDenoisedScalerWithDevice:compiler:))]
        #[unsafe(method_family = new)]
        pub unsafe fn newTemporalDenoisedScalerWithDevice_compiler(
            &self,
            device: &ProtocolObject<dyn MTLDevice>,
            compiler: &ProtocolObject<dyn MTL4Compiler>,
        ) -> Option<Retained<ProtocolObject<dyn MTL4FXTemporalDenoisedScaler>>>;

        /// Returns the smallest temporal scaling factor the device supports as a floating-point value.
        ///
        /// - Parameters:
        /// - device: The Metal device for which this method checks the minimum input content scale it supports.
        ///
        /// - Returns: the minimum input content scale the GPU device supports.
        #[unsafe(method(supportedInputContentMinScaleForDevice:))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedInputContentMinScaleForDevice(
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> c_float;

        /// Returns the largest temporal scaling factor the device supports as a floating-point value.
        ///
        /// - Parameters:
        /// - device: The Metal device for which this method checks the maximum input content scale it supports.
        ///
        /// - Returns: the maximum input content scale the GPU device supports.
        #[unsafe(method(supportedInputContentMaxScaleForDevice:))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedInputContentMaxScaleForDevice(
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> c_float;

        /// Queries whether a Metal device supports denosing scaling compatible on Metal 4.
        ///
        /// - Parameters:
        /// - device: The GPU device for which this methods tests support.
        ///
        /// - Returns:
        /// <doc
        /// ://com.apple.documentation/documentation/swift/true> if the device supports denoising scaling for
        /// Metal 4,
        /// <doc
        /// ://com.apple.documentation/documentation/swift/false> otherwise.
        #[unsafe(method(supportsMetal4FX:))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportsMetal4FX(device: &ProtocolObject<dyn MTLDevice>) -> bool;

        /// Queries whether a Metal device supports denoising scaling.
        ///
        /// - Parameters:
        /// - device: The GPU device for which this methods tests support.
        ///
        /// - Returns:
        /// <doc
        /// ://com.apple.documentation/documentation/swift/true> if the device supports denoising scaling,
        /// <doc
        /// ://com.apple.documentation/documentation/swift/false> otherwise.
        #[unsafe(method(supportsDevice:))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportsDevice(device: &ProtocolObject<dyn MTLDevice>) -> bool;
    );
}

/// Methods declared on superclass `NSObject`.
impl MTLFXTemporalDenoisedScalerDescriptor {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_protocol!(
    /// A common abstraction to all denoiser scalers.
    ///
    /// This protocol defines properties common to all denoiser scalers. You access these properties through
    /// any denoiser scaler instance you create by calling construction methods such as
    /// ``MTLFXTemporalDenoisedScalerDescriptor/newTemporalDenoisedScalerWithDevice:``.
    ///
    /// ### Conforming to texture usage requirements
    ///
    /// Denoiser scaler instances expose properties, such as ``colorTextureUsage``, that indicate requirements for
    /// your textures to be compatible with it. These properties indicate the minimum set of ``MTLTextureUsage`` bits
    /// that you are responsible for setting in your texture descriptors for this denoise scaler to use them.
    ///
    /// Your game or app can set extra usage bits on your textures without losing compatibility, as long at its maintains
    /// the minimum set the denoiser scaler requests.
    ///
    /// ### Assigning input and output textures
    ///
    /// When you use an instance of a class that conforms to this protocol, you typically set its input and output textures,
    /// as well as other properties, and then encode its work to a command buffer.
    ///
    /// MetalFX doesn't track that you assign the same texture instances to each property across different batches of work,
    /// the only requirement is that you provide textures that match the pixel formats and dimensions you specify in the
    /// ``MTLFXTemporalDenoisedScalerDescriptor`` descriptor instance that creates the scaler instance.
    ///
    /// ### Encoding work
    ///
    /// Once you configure all properties for the current frame of your game or app, you indicate to the scaler instance
    /// into which command buffer it encodes its work. You achieve this by calling, for example,
    /// ``MTLFXTemporalDenoisedScaler/encodeToCommandBuffer:``.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalfx/mtlfxtemporaldenoisedscalerbase?language=objc)
    pub unsafe trait MTLFXTemporalDenoisedScalerBase: NSObjectProtocol {
        /// The minimal texture usage options that your app’s input color texture needs in order to support this denoiser scaler.
        #[unsafe(method(colorTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn colorTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s input depth texture needs in order to support this denoiser scaler.
        #[unsafe(method(depthTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn depthTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s input motion texture needs in order to support this denoiser scaler.
        #[unsafe(method(motionTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn motionTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s input reactive texture needs in order to support this denoiser scaler.
        #[unsafe(method(reactiveTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn reactiveTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s input diffuse albedo texture needs in order to support this denoiser scaler.
        #[unsafe(method(diffuseAlbedoTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn diffuseAlbedoTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s input specular albedo texture needs in order to support this denoiser scaler.
        #[unsafe(method(specularAlbedoTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn specularAlbedoTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s input normal texture needs in order to support this denoiser scaler.
        #[unsafe(method(normalTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn normalTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s input roughness texture needs in order to support this denoiser scaler.
        #[unsafe(method(roughnessTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn roughnessTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s input specular hit texture needs in order to support this denoiser scaler.
        #[unsafe(method(specularHitDistanceTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn specularHitDistanceTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s input denoise strength texture needs in order to support this denoiser scaler.
        #[unsafe(method(denoiseStrengthMaskTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn denoiseStrengthMaskTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s input transparency overlay texture needs in order to support this denoiser scaler.
        #[unsafe(method(transparencyOverlayTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn transparencyOverlayTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s output texture needs in order to support this denoiser scaler.
        #[unsafe(method(outputTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn outputTextureUsage(&self) -> MTLTextureUsage;

        /// Assigns the color texture this scaler evaluates.
        ///
        /// You are responsible for ensuring the usage and pixel format of the texture you assign to this property matches the
        /// texture usage ``colorTextureUsage`` requests and the pixel format that
        /// ``MTLFXTemporalDenoisedScalerDescriptor/colorTextureFormat`` requests.
        #[unsafe(method(colorTexture))]
        #[unsafe(method_family = none)]
        unsafe fn colorTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`colorTexture`][Self::colorTexture].
        #[unsafe(method(setColorTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setColorTexture(&self, color_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        /// The depth texture this scaler evaluates.
        ///
        /// You are responsible for ensuring the usage and pixel format of the texture you assign to this property matches the
        /// texture usage ``depthTextureUsage`` requests and the pixel format that
        /// ``MTLFXTemporalDenoisedScalerDescriptor/depthTextureFormat`` requests.
        #[unsafe(method(depthTexture))]
        #[unsafe(method_family = none)]
        unsafe fn depthTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`depthTexture`][Self::depthTexture].
        #[unsafe(method(setDepthTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setDepthTexture(&self, depth_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        /// The motion texture this scaler evaluates.
        ///
        /// You are responsible for ensuring the usage and pixel format of the texture you assign to this property matches the
        /// texture usage ``motionTextureUsage`` requests and the pixel format that
        /// ``MTLFXTemporalDenoisedScalerDescriptor/motionTextureFormat`` requests.
        #[unsafe(method(motionTexture))]
        #[unsafe(method_family = none)]
        unsafe fn motionTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`motionTexture`][Self::motionTexture].
        #[unsafe(method(setMotionTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setMotionTexture(&self, motion_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        /// The diffuse albedo texture this scaler evaluates.
        ///
        /// You are responsible for ensuring the usage and pixel format of the texture you assign to this property matches the
        /// texture usage ``diffuseAlbedoTextureUsage`` requests and the pixel format that
        /// ``MTLFXTemporalDenoisedScalerDescriptor/diffuseAlbedoTextureFormat`` requests.
        #[unsafe(method(diffuseAlbedoTexture))]
        #[unsafe(method_family = none)]
        unsafe fn diffuseAlbedoTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`diffuseAlbedoTexture`][Self::diffuseAlbedoTexture].
        #[unsafe(method(setDiffuseAlbedoTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setDiffuseAlbedoTexture(
            &self,
            diffuse_albedo_texture: Option<&ProtocolObject<dyn MTLTexture>>,
        );

        /// The specular albedo texture this scaler evaluates.
        ///
        /// You are responsible for ensuring the usage and pixel format of the texture you assign to this property matches the
        /// texture usage ``specularAlbedoTextureUsage`` requests and the pixel format that
        /// ``MTLFXTemporalDenoisedScalerDescriptor/specularAlbedoTextureFormat`` requests.
        #[unsafe(method(specularAlbedoTexture))]
        #[unsafe(method_family = none)]
        unsafe fn specularAlbedoTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`specularAlbedoTexture`][Self::specularAlbedoTexture].
        #[unsafe(method(setSpecularAlbedoTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setSpecularAlbedoTexture(
            &self,
            specular_albedo_texture: Option<&ProtocolObject<dyn MTLTexture>>,
        );

        /// The normal texture this scaler evaluates.
        ///
        /// You are responsible for ensuring the usage and pixel format of the texture you assign to this property matches the
        /// texture usage ``normalTextureUsage`` requests and the pixel format that
        /// ``MTLFXTemporalDenoisedScalerDescriptor/normalTextureFormat`` requests.
        #[unsafe(method(normalTexture))]
        #[unsafe(method_family = none)]
        unsafe fn normalTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`normalTexture`][Self::normalTexture].
        #[unsafe(method(setNormalTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setNormalTexture(&self, normal_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        /// The roughness texture this scaler evaluates.
        ///
        /// You are responsible for ensuring the usage and pixel format of the texture you assign to this property matches the
        /// texture usage ``roughnessTextureUsage`` requests and the pixel format that
        /// ``MTLFXTemporalDenoisedScalerDescriptor/roughnessTextureFormat`` requests.
        #[unsafe(method(roughnessTexture))]
        #[unsafe(method_family = none)]
        unsafe fn roughnessTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`roughnessTexture`][Self::roughnessTexture].
        #[unsafe(method(setRoughnessTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setRoughnessTexture(
            &self,
            roughness_texture: Option<&ProtocolObject<dyn MTLTexture>>,
        );

        /// The specular hit texture this scaler evaluates.
        ///
        /// You are responsible for ensuring the usage and pixel format of the texture you assign to this property matches the
        /// texture usage ``specularHitDistanceTextureUsage`` requests and the pixel format that
        /// ``MTLFXTemporalDenoisedScalerDescriptor/specularHitDistanceTextureFormat`` requests.
        #[unsafe(method(specularHitDistanceTexture))]
        #[unsafe(method_family = none)]
        unsafe fn specularHitDistanceTexture(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`specularHitDistanceTexture`][Self::specularHitDistanceTexture].
        #[unsafe(method(setSpecularHitDistanceTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setSpecularHitDistanceTexture(
            &self,
            specular_hit_distance_texture: Option<&ProtocolObject<dyn MTLTexture>>,
        );

        /// The denoise strength mask texture this scaler evaluates.
        ///
        /// Use this single-channel texture to mark, at a per-pixel level, areas that this denoiser ignores. To configure a pixel
        /// that the denoiser ignores, provide `1.0` as the value at that pixel's corresponding location on this texture.
        ///
        /// You are responsible for ensuring the usage and pixel format of the texture you assign to this property matches the
        /// texture usage ``denoiseStrengthMaskTextureUsage`` requests and the pixel format that
        /// ``MTLFXTemporalDenoisedScalerDescriptor/denoiseStrengthMaskTextureFormat`` requests.
        #[unsafe(method(denoiseStrengthMaskTexture))]
        #[unsafe(method_family = none)]
        unsafe fn denoiseStrengthMaskTexture(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`denoiseStrengthMaskTexture`][Self::denoiseStrengthMaskTexture].
        #[unsafe(method(setDenoiseStrengthMaskTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setDenoiseStrengthMaskTexture(
            &self,
            denoise_strength_mask_texture: Option<&ProtocolObject<dyn MTLTexture>>,
        );

        /// The transparency overlay texture that this scaler evaluates.
        ///
        /// Use this RGBA texture to provide to the denoiser an overlay with your transparent pixels, such as the output
        /// of your particle systems. MetalFX interprets this to be a texture in linear color space, with the RGB channels
        /// ranging between `0` and infinity, and the alpha channel in the range `[0,1]`, representing the opacity of the pixel.
        ///
        /// You are responsible for ensuring the usage and pixel format of the texture you assign to this property matches the
        /// texture usage ``transparencyOverlayTextureUsage`` requests and the pixel format that
        /// ``MTLFXTemporalDenoisedScalerDescriptor/transparencyOverlayTextureFormat`` requests.
        #[unsafe(method(transparencyOverlayTexture))]
        #[unsafe(method_family = none)]
        unsafe fn transparencyOverlayTexture(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`transparencyOverlayTexture`][Self::transparencyOverlayTexture].
        #[unsafe(method(setTransparencyOverlayTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setTransparencyOverlayTexture(
            &self,
            transparency_overlay_texture: Option<&ProtocolObject<dyn MTLTexture>>,
        );

        /// The output texture into which this denoiser scaler writes its output.
        ///
        /// You are responsible for providing a texture with a private `storageMode` to this property.
        #[unsafe(method(outputTexture))]
        #[unsafe(method_family = none)]
        unsafe fn outputTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`outputTexture`][Self::outputTexture].
        #[unsafe(method(setOutputTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setOutputTexture(&self, output_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        /// An exposure texture that this denoiser scaler evaluates.
        ///
        /// Create and assign a 1x1  `MTLPixelFormatR16Float`  texture to assign to this property. MetalFX reads the R channel
        /// of the texel at position `(0,0)` and uses it as the exposure value. It then uses this value to multiply the input color.
        ///
        /// For best performance, use the GPU to generate the exposure value and store it into this texture.
        ///
        /// * Note: The temporal scaler ignores this property if you create it with a descriptor that has its
        /// ``MTLFXTemporalScalerDescriptor/autoExposureEnabled`` property set to
        /// <doc
        /// ://com.apple.documentation/documentation/swift/true>.
        #[unsafe(method(exposureTexture))]
        #[unsafe(method_family = none)]
        unsafe fn exposureTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`exposureTexture`][Self::exposureTexture].
        #[unsafe(method(setExposureTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setExposureTexture(
            &self,
            exposure_texture: Option<&ProtocolObject<dyn MTLTexture>>,
        );

        /// A pre-exposure value for this scaler to evaluate.
        ///
        /// If the input color texture you assign to ``colorTexture`` is pre-multiplied by fixed value, set this property
        /// to that same fixed value so MetalFX divides input color by it. This is not a common situation and you typically
        /// don't need to assign a value to this property.
        #[unsafe(method(preExposure))]
        #[unsafe(method_family = none)]
        unsafe fn preExposure(&self) -> c_float;

        /// Setter for [`preExposure`][Self::preExposure].
        #[unsafe(method(setPreExposure:))]
        #[unsafe(method_family = none)]
        unsafe fn setPreExposure(&self, pre_exposure: c_float);

        /// A reactive-mask texture input for this scaler to evaluate.
        ///
        /// This texture helps guide the denoiser when objects move quickly in a scene with inaccurate motion information,
        /// such as when they involve alpha blending. In these situations, you can get better results by guiding MetalFX whether
        /// to favor the current frame on a per-pixel basis with a reactive mask texture.
        ///
        /// When providing this texture, you are responsible for ensuring each pixel is in the range `[0.0, 1.0]`, where a value:
        /// * Equal to `0.0` tells MetalFX to follow its normal behavior for the corresponding pixel
        /// * Equal to `1.0` tells MetalFX to ignore temporal history for the corresponding pixel
        /// * In the range `(0.0, 1.0)` proportionally blends the effect for the corresponding pixel
        #[unsafe(method(reactiveMaskTexture))]
        #[unsafe(method_family = none)]
        unsafe fn reactiveMaskTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`reactiveMaskTexture`][Self::reactiveMaskTexture].
        #[unsafe(method(setReactiveMaskTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setReactiveMaskTexture(
            &self,
            reactive_mask_texture: Option<&ProtocolObject<dyn MTLTexture>>,
        );

        /// The horizontal component of the subpixel sampling coordinate you use to generate the color texture input.
        ///
        /// This property indicates the horizontal pixel offset this scaler samples to return to the frame's reference frame.
        #[unsafe(method(jitterOffsetX))]
        #[unsafe(method_family = none)]
        unsafe fn jitterOffsetX(&self) -> c_float;

        /// Setter for [`jitterOffsetX`][Self::jitterOffsetX].
        #[unsafe(method(setJitterOffsetX:))]
        #[unsafe(method_family = none)]
        unsafe fn setJitterOffsetX(&self, jitter_offset_x: c_float);

        /// The vertical component of the subpixel sampling coordinate you use to generate the color texture input.
        ///
        /// This property indicates the vertical pixel offset this scaler samples to return to the frame's reference frame.
        #[unsafe(method(jitterOffsetY))]
        #[unsafe(method_family = none)]
        unsafe fn jitterOffsetY(&self) -> c_float;

        /// Setter for [`jitterOffsetY`][Self::jitterOffsetY].
        #[unsafe(method(setJitterOffsetY:))]
        #[unsafe(method_family = none)]
        unsafe fn setJitterOffsetY(&self, jitter_offset_y: c_float);

        /// The horizontal scale factor the denoiser scaler applies to the input motion texture.
        ///
        /// The scaler converts the horizontal component of each value in ``motionTexture`` into fragment (pixel)
        /// coordinates by multiplying it by this property’s value.
        ///
        /// If you set this property's value to `1.0`, this denoiser scaler expects that each pixel's motion vector points
        /// to that pixel's location in the ``colorTexture`` at the time of the last call to encode this scaler's work. For example,
        /// in Metal's standard device coordinates, where `(0,0)` represents the upper-left corner of the framebuffer, the motion
        /// vectors for an object that moves down and to the right in the ``colorTexture`` by `10` pixels would be `(-10,-10)`.
        #[unsafe(method(motionVectorScaleX))]
        #[unsafe(method_family = none)]
        unsafe fn motionVectorScaleX(&self) -> c_float;

        /// Setter for [`motionVectorScaleX`][Self::motionVectorScaleX].
        #[unsafe(method(setMotionVectorScaleX:))]
        #[unsafe(method_family = none)]
        unsafe fn setMotionVectorScaleX(&self, motion_vector_scale_x: c_float);

        /// The vertical scale factor the denoiser scaler applies to the input motion texture.
        ///
        /// The scaler converts the horizontal component of each value in ``motionTexture`` into fragment (pixel)
        /// coordinates by multiplying it by this property’s value.
        ///
        /// If you set this property's value to `1.0`, this denoiser scaler expects that each pixel's motion vector points
        /// to that pixel's location in the ``colorTexture`` at the time of the last call to encode this scaler's work. For example,
        /// in Metal's standard device coordinates, where `(0,0)` represents the upper-left corner of the framebuffer, the motion
        /// vectors for an object that moves down and to the right in the ``colorTexture`` by `10` pixels would be `(-10,-10)`.
        #[unsafe(method(motionVectorScaleY))]
        #[unsafe(method_family = none)]
        unsafe fn motionVectorScaleY(&self) -> c_float;

        /// Setter for [`motionVectorScaleY`][Self::motionVectorScaleY].
        #[unsafe(method(setMotionVectorScaleY:))]
        #[unsafe(method_family = none)]
        unsafe fn setMotionVectorScaleY(&self, motion_vector_scale_y: c_float);

        /// A Boolean property indicating whether to reset history.
        ///
        /// Set this property to
        /// <doc
        /// ://com.apple.documentation/documentation/swift/true> to invalidate history, for example
        /// when there is a scene cut in your game.
        #[unsafe(method(shouldResetHistory))]
        #[unsafe(method_family = none)]
        unsafe fn shouldResetHistory(&self) -> bool;

        /// Setter for [`shouldResetHistory`][Self::shouldResetHistory].
        #[unsafe(method(setShouldResetHistory:))]
        #[unsafe(method_family = none)]
        unsafe fn setShouldResetHistory(&self, should_reset_history: bool);

        /// A Boolean value that indicates whether the depth texture uses zero to represent the farthest distance.
        ///
        /// This property's default value is
        /// <doc
        /// ://com.apple.documentation/documentation/swift/true>.
        #[unsafe(method(isDepthReversed))]
        #[unsafe(method_family = none)]
        unsafe fn isDepthReversed(&self) -> bool;

        /// Setter for [`isDepthReversed`][Self::isDepthReversed].
        #[unsafe(method(setDepthReversed:))]
        #[unsafe(method_family = none)]
        unsafe fn setDepthReversed(&self, depth_reversed: bool);

        /// The pixel format of the input color texture for this denoiser scaler.
        #[unsafe(method(colorTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn colorTextureFormat(&self) -> MTLPixelFormat;

        /// The pixel format of the input depth texture for this denoiser scaler.
        #[unsafe(method(depthTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn depthTextureFormat(&self) -> MTLPixelFormat;

        /// The pixel format of the input motion texture for this denoiser scaler.
        #[unsafe(method(motionTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn motionTextureFormat(&self) -> MTLPixelFormat;

        /// The pixel format of the input diffuse albedo texture for this denoiser scaler.
        #[unsafe(method(diffuseAlbedoTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn diffuseAlbedoTextureFormat(&self) -> MTLPixelFormat;

        /// The pixel format of the input specular albedo for this denoiser scaler.
        #[unsafe(method(specularAlbedoTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn specularAlbedoTextureFormat(&self) -> MTLPixelFormat;

        /// The pixel format of the input normal texture for this denoiser scaler.
        #[unsafe(method(normalTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn normalTextureFormat(&self) -> MTLPixelFormat;

        /// The pixel format of the input normal texture for this denoiser scaler.
        #[unsafe(method(roughnessTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn roughnessTextureFormat(&self) -> MTLPixelFormat;

        /// The pixel format of the input specular hit distance texture for this denoiser scaler.
        #[unsafe(method(specularHitDistanceTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn specularHitDistanceTextureFormat(&self) -> MTLPixelFormat;

        /// The pixel format of the input denoise strength mask texture for this denoiser scaler.
        #[unsafe(method(denoiseStrengthMaskTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn denoiseStrengthMaskTextureFormat(&self) -> MTLPixelFormat;

        /// The pixel format of the input transparency overlay texture for this denoiser scaler.
        #[unsafe(method(transparencyOverlayTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn transparencyOverlayTextureFormat(&self) -> MTLPixelFormat;

        /// The pixel format of the input reactive mask texture for this denoiser scaler.
        #[unsafe(method(reactiveMaskTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn reactiveMaskTextureFormat(&self) -> MTLPixelFormat;

        /// The pixel format of the output color texture for this denoiser scaler.
        #[unsafe(method(outputTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn outputTextureFormat(&self) -> MTLPixelFormat;

        /// The width, in pixels, of the input color texture for the scaler.
        #[unsafe(method(inputWidth))]
        #[unsafe(method_family = none)]
        unsafe fn inputWidth(&self) -> NSUInteger;

        /// The height, in pixels, of the input color texture for the scaler.
        #[unsafe(method(inputHeight))]
        #[unsafe(method_family = none)]
        unsafe fn inputHeight(&self) -> NSUInteger;

        /// The width, in pixels, of the output color texture for the scaler.
        #[unsafe(method(outputWidth))]
        #[unsafe(method_family = none)]
        unsafe fn outputWidth(&self) -> NSUInteger;

        /// The height, in pixels, of the output color texture for the scaler.
        #[unsafe(method(outputHeight))]
        #[unsafe(method_family = none)]
        unsafe fn outputHeight(&self) -> NSUInteger;

        /// The minimum input content scale this scaler supports.
        #[unsafe(method(inputContentMinScale))]
        #[unsafe(method_family = none)]
        unsafe fn inputContentMinScale(&self) -> c_float;

        /// The maximum input content scale this scaler supports.
        #[unsafe(method(inputContentMaxScale))]
        #[unsafe(method_family = none)]
        unsafe fn inputContentMaxScale(&self) -> c_float;

        /// An optional fence that this denoiser scaler waits for and updates.
        ///
        /// Use this property for synchronizing access to untracked resources.
        #[unsafe(method(fence))]
        #[unsafe(method_family = none)]
        unsafe fn fence(&self) -> Option<Retained<ProtocolObject<dyn MTLFence>>>;

        /// Setter for [`fence`][Self::fence].
        #[unsafe(method(setFence:))]
        #[unsafe(method_family = none)]
        unsafe fn setFence(&self, fence: Option<&ProtocolObject<dyn MTLFence>>);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalfx/mtlfxtemporaldenoisedscaler?language=objc)
    pub unsafe trait MTLFXTemporalDenoisedScaler: MTLFXTemporalDenoisedScalerBase {
        /// Encode this scaler denoiser's work into a command buffer.
        ///
        /// - Parameters:
        /// - commandBuffer: A command buffer into which this scaler denoiser encodes work.
        #[unsafe(method(encodeToCommandBuffer:))]
        #[unsafe(method_family = none)]
        unsafe fn encodeToCommandBuffer(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
        );
    }
);
