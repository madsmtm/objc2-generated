//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
use objc2_metal::*;

use crate::*;

extern_class!(
    /// A set of properties that configure a frame interpolator, and a factory method that creates the effect.
    ///
    /// A frame interpolator inspects two frames your game or app renders and, based on their properties, generates
    /// an extra frame at a fraction of the cost, helping you to increase your frame rate.
    ///
    /// When you configure this descriptor, set the properties that determine the pixel format for each texture to the
    /// respective format of the texture you later assign to the scaler. For example, make sure that the format to which
    /// you set the ``colorTextureFormat`` property matches the format of the texture you later assign to the interpolator's
    /// ``MTLFXFrameInterpolatorDescriptor/colorTexture`` property.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalfx/mtlfxframeinterpolatordescriptor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLFXFrameInterpolatorDescriptor;
);

extern_conformance!(
    unsafe impl NSCopying for MTLFXFrameInterpolatorDescriptor {}
);

unsafe impl CopyingHelper for MTLFXFrameInterpolatorDescriptor {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for MTLFXFrameInterpolatorDescriptor {}
);

impl MTLFXFrameInterpolatorDescriptor {
    extern_methods!(
        /// The pixel format of the input color texture for the frame interpolator you create with this descriptor.
        #[unsafe(method(colorTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn colorTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`colorTextureFormat`][Self::colorTextureFormat].
        #[unsafe(method(setColorTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setColorTextureFormat(&self, color_texture_format: MTLPixelFormat);

        /// The pixel format of the output color texture for the frame interpolator you create with this descriptor.
        #[unsafe(method(outputTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`outputTextureFormat`][Self::outputTextureFormat].
        #[unsafe(method(setOutputTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutputTextureFormat(&self, output_texture_format: MTLPixelFormat);

        /// The pixel format of the input depth texture for the frame interpolator you create with this descriptor.
        #[unsafe(method(depthTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn depthTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`depthTextureFormat`][Self::depthTextureFormat].
        #[unsafe(method(setDepthTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDepthTextureFormat(&self, depth_texture_format: MTLPixelFormat);

        /// The pixel format of the input motion texture for the frame interpolator you create with this descriptor.
        #[unsafe(method(motionTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn motionTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`motionTextureFormat`][Self::motionTextureFormat].
        #[unsafe(method(setMotionTextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMotionTextureFormat(&self, motion_texture_format: MTLPixelFormat);

        /// The pixel format for the frame interpolator of an input texture containing your game's custom UI.
        #[unsafe(method(uiTextureFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn uiTextureFormat(&self) -> MTLPixelFormat;

        /// Setter for [`uiTextureFormat`][Self::uiTextureFormat].
        #[unsafe(method(setUITextureFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setUITextureFormat(&self, ui_texture_format: MTLPixelFormat);

        #[cfg(feature = "MTLFXTemporalScaler")]
        /// An optional temporal scaler for the frame interpolator you create from this descriptor.
        #[unsafe(method(scaler))]
        #[unsafe(method_family = none)]
        pub unsafe fn scaler(&self) -> Option<Retained<ProtocolObject<dyn MTLFXTemporalScaler>>>;

        #[cfg(feature = "MTLFXTemporalScaler")]
        /// Setter for [`scaler`][Self::scaler].
        #[unsafe(method(setScaler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setScaler(&self, scaler: Option<&ProtocolObject<dyn MTLFXTemporalScaler>>);

        #[cfg(feature = "MTLFXTemporalDenoisedScaler")]
        /// An optional denoiser scaler for the frame interpolator you create from this descriptor.
        #[unsafe(method(denoiserScaler))]
        #[unsafe(method_family = none)]
        pub unsafe fn denoiserScaler(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn MTLFXTemporalDenoisedScaler>>>;

        #[cfg(feature = "MTLFXTemporalDenoisedScaler")]
        /// Setter for [`denoiserScaler`][Self::denoiserScaler].
        #[unsafe(method(setDenoiserScaler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDenoiserScaler(
            &self,
            denoiser_scaler: Option<&ProtocolObject<dyn MTLFXTemporalDenoisedScaler>>,
        );

        #[cfg(all(feature = "MTL4FXTemporalScaler", feature = "MTLFXTemporalScaler"))]
        /// An optional temporal scaler for the frame interpolator you create from this descriptor.
        #[unsafe(method(scaler4))]
        #[unsafe(method_family = none)]
        pub unsafe fn scaler4(&self) -> Option<Retained<ProtocolObject<dyn MTL4FXTemporalScaler>>>;

        #[cfg(all(feature = "MTL4FXTemporalScaler", feature = "MTLFXTemporalScaler"))]
        /// Setter for [`scaler4`][Self::scaler4].
        #[unsafe(method(setScaler4:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setScaler4(&self, scaler4: Option<&ProtocolObject<dyn MTL4FXTemporalScaler>>);

        #[cfg(all(
            feature = "MTL4FXTemporalDenoisedScaler",
            feature = "MTLFXTemporalDenoisedScaler"
        ))]
        /// An optional denoiser scaler for the frame interpolator you create from this descriptor.
        #[unsafe(method(denoiserScaler4))]
        #[unsafe(method_family = none)]
        pub unsafe fn denoiserScaler4(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn MTL4FXTemporalDenoisedScaler>>>;

        #[cfg(all(
            feature = "MTL4FXTemporalDenoisedScaler",
            feature = "MTLFXTemporalDenoisedScaler"
        ))]
        /// Setter for [`denoiserScaler4`][Self::denoiserScaler4].
        #[unsafe(method(setDenoiserScaler4:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDenoiserScaler4(
            &self,
            denoiser_scaler4: Option<&ProtocolObject<dyn MTL4FXTemporalDenoisedScaler>>,
        );

        /// The width, in pixels, of the input color texture for the frame interpolator.
        #[unsafe(method(inputWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn inputWidth(&self) -> NSUInteger;

        /// Setter for [`inputWidth`][Self::inputWidth].
        #[unsafe(method(setInputWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInputWidth(&self, input_width: NSUInteger);

        /// The height, in pixels, of the input color texture for the frame interpolator.
        #[unsafe(method(inputHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn inputHeight(&self) -> NSUInteger;

        /// Setter for [`inputHeight`][Self::inputHeight].
        #[unsafe(method(setInputHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInputHeight(&self, input_height: NSUInteger);

        /// The width, in pixels, of the output color texture for the frame interpolator.
        #[unsafe(method(outputWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputWidth(&self) -> NSUInteger;

        /// Setter for [`outputWidth`][Self::outputWidth].
        #[unsafe(method(setOutputWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutputWidth(&self, output_width: NSUInteger);

        /// The height, in pixels, of the output color texture for the frame interpolator.
        #[unsafe(method(outputHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputHeight(&self) -> NSUInteger;

        /// Setter for [`outputHeight`][Self::outputHeight].
        #[unsafe(method(setOutputHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutputHeight(&self, output_height: NSUInteger);

        /// Creates a frame interpolator instance for a Metal device.
        ///
        /// - Parameters:
        /// - device: The Metal device that creates the frame interpolator.
        /// - Returns:
        /// A new frame interpolator instance upon success, or `nil` otherwise.
        #[unsafe(method(newFrameInterpolatorWithDevice:))]
        #[unsafe(method_family = new)]
        pub unsafe fn newFrameInterpolatorWithDevice(
            &self,
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Option<Retained<ProtocolObject<dyn MTLFXFrameInterpolator>>>;

        #[cfg(feature = "MTL4FXFrameInterpolator")]
        /// Creates a frame interpolator instance for a Metal device.
        ///
        /// - Parameters:
        /// - device: The Metal device that creates the frame interpolator.
        /// - compiler: A compiler instance this method can use to build pipeline state objects.
        /// - Returns:
        /// A new frame interpolator instance upon success, or `nil` otherwise.
        #[unsafe(method(newFrameInterpolatorWithDevice:compiler:))]
        #[unsafe(method_family = new)]
        pub unsafe fn newFrameInterpolatorWithDevice_compiler(
            &self,
            device: &ProtocolObject<dyn MTLDevice>,
            compiler: &ProtocolObject<dyn MTL4Compiler>,
        ) -> Option<Retained<ProtocolObject<dyn MTL4FXFrameInterpolator>>>;

        /// Queries whether a Metal device supports frame interpolation compatible with a Metal 4 command buffer.
        ///
        /// - Parameters:
        /// - device: The GPU device for which this methods tests support.
        ///
        /// - Returns:
        /// <doc
        /// ://com.apple.documentation/documentation/swift/true> if the device supports frame interpolation for
        /// Metal 4,
        /// <doc
        /// ://com.apple.documentation/documentation/swift/false> otherwise.
        #[unsafe(method(supportsMetal4FX:))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportsMetal4FX(device: &ProtocolObject<dyn MTLDevice>) -> bool;

        /// Queries whether a Metal device supports frame interpolation.
        ///
        /// - Parameters:
        /// - device: The GPU device for which this methods tests support.
        ///
        /// - Returns:
        /// <doc
        /// ://com.apple.documentation/documentation/swift/true> if the device supports frame interpolation,
        /// <doc
        /// ://com.apple.documentation/documentation/swift/false> otherwise.
        #[unsafe(method(supportsDevice:))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportsDevice(device: &ProtocolObject<dyn MTLDevice>) -> bool;
    );
}

/// Methods declared on superclass `NSObject`.
impl MTLFXFrameInterpolatorDescriptor {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_protocol!(
    /// A common abstraction to all frame interpolators.
    ///
    /// This protocol defines properties common to all frame interpolators. You access these properties through
    /// any frame interpolator instance you create by calling construction methods such as
    /// ``MTLFXFrameInterpolatorDescriptor/newFrameInterpolatorWithDevice:``.
    ///
    /// ## Conforming to texture usage requirements
    ///
    /// Frame interpolator instances expose properties, such as ``colorTextureUsage``, that indicate requirements for
    /// your textures to be compatible with it. These properties indicate the minimum set of ``MTLTextureUsage`` bits
    /// that you are responsible for setting in your texture descriptors for this frame interpolator to use them.
    ///
    /// Your game or app can set extra usage bits on your textures without losing compatibility, as long at its maintains
    /// the minimum set the interpolator requests.
    ///
    /// ## Assigning input and output textures
    ///
    /// When you use an instance of a class that conforms to this protocol, you typically set its input and output textures,
    /// as well as other properties, and then encode its work to a command buffer.
    ///
    /// MetalFX doesn't track that you assign the same texture instances to each property across different batches of work,
    /// the only requirement is that you provide textures that match the pixel formats and dimensions you specify in the
    /// ``MTLFXFrameInterpolatorDescriptor`` descriptor instance that creates the scaler instance.
    ///
    /// ## Encoding work
    ///
    /// Once you configure all properties for the current frame of your game or app, you indicate to the scaler instance
    /// into which command buffer it encodes its work. You achieve this by calling, for example,
    /// ``MTLFXFrameInterpolator/encodeToCommandBuffer:``.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metalfx/mtlfxframeinterpolatorbase?language=objc)
    pub unsafe trait MTLFXFrameInterpolatorBase: NSObjectProtocol {
        /// The minimal texture usage options that your app’s input color texture needs in order to support this frame interpolator.
        #[unsafe(method(colorTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn colorTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s output color texture needs in order to support this frame interpolator.
        #[unsafe(method(outputTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn outputTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s input depth texture needs in order to support this frame interpolator.
        #[unsafe(method(depthTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn depthTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s input motion texture needs in order to support this frame interpolator.
        #[unsafe(method(motionTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn motionTextureUsage(&self) -> MTLTextureUsage;

        /// The minimal texture usage options that your app’s input UI texture needs in order to support this frame interpolator.
        #[unsafe(method(uiTextureUsage))]
        #[unsafe(method_family = none)]
        unsafe fn uiTextureUsage(&self) -> MTLTextureUsage;

        /// The pixel format of the input color texture for this frame interpolator.
        #[unsafe(method(colorTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn colorTextureFormat(&self) -> MTLPixelFormat;

        /// The pixel format of the input depth texture for this frame interpolator.
        #[unsafe(method(depthTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn depthTextureFormat(&self) -> MTLPixelFormat;

        /// The pixel format of the input motion texture for this frame interpolator.
        #[unsafe(method(motionTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn motionTextureFormat(&self) -> MTLPixelFormat;

        /// The pixel format of the output color texture for this frame interpolator.
        #[unsafe(method(outputTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn outputTextureFormat(&self) -> MTLPixelFormat;

        /// The width, in pixels, of the input color texture for the frame interpolator.
        #[unsafe(method(inputWidth))]
        #[unsafe(method_family = none)]
        unsafe fn inputWidth(&self) -> NSUInteger;

        /// The height, in pixels, of the input color texture for the frame interpolator.
        #[unsafe(method(inputHeight))]
        #[unsafe(method_family = none)]
        unsafe fn inputHeight(&self) -> NSUInteger;

        /// The width, in pixels, of the output color texture for the frame interpolator.
        #[unsafe(method(outputWidth))]
        #[unsafe(method_family = none)]
        unsafe fn outputWidth(&self) -> NSUInteger;

        /// The height, in pixels, of the output color texture for the frame interpolator.
        #[unsafe(method(outputHeight))]
        #[unsafe(method_family = none)]
        unsafe fn outputHeight(&self) -> NSUInteger;

        /// The pixel format of the input UI texture for the frame interpolator.
        #[unsafe(method(uiTextureFormat))]
        #[unsafe(method_family = none)]
        unsafe fn uiTextureFormat(&self) -> MTLPixelFormat;

        /// The color texture that this frame interpolator evaluates.
        ///
        /// You are responsible for ensuring the usage and pixel format of the texture you assign to this property matches the
        /// texture usage ``colorTextureUsage`` requests and the pixel format that ``colorTextureFormat`` requests.
        #[unsafe(method(colorTexture))]
        #[unsafe(method_family = none)]
        unsafe fn colorTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`colorTexture`][Self::colorTexture].
        #[unsafe(method(setColorTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setColorTexture(&self, color_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        /// The previous color texture for this frame interpolator during the last call to encode work into a command buffer.
        ///
        /// The frame interpolator typically uses the previous color texture as part of its operation. When you call
        /// ``MTLFXFrameInterpolator/encodeToCommandBuffer:`` and its ``shouldResetHistory`` property is
        /// <doc
        /// ://com.apple.documentation/documentation/swift/false>, then you are responsible for assigning to this property
        /// the data that in ``colorTexture`` from the previous call to ``MTLFXFrameInterpolator/encodeToCommandBuffer:``.
        ///
        /// Additionally, you are responsible for ensuring the usage and pixel format of the texture you assign to this property matches the
        /// texture usage ``colorTextureUsage`` requests and the pixel format that ``colorTextureFormat`` requests.
        #[unsafe(method(prevColorTexture))]
        #[unsafe(method_family = none)]
        unsafe fn prevColorTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`prevColorTexture`][Self::prevColorTexture].
        #[unsafe(method(setPrevColorTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setPrevColorTexture(
            &self,
            prev_color_texture: Option<&ProtocolObject<dyn MTLTexture>>,
        );

        /// The depth texture this frame interpolator evaluates.
        ///
        /// You are responsible for ensuring the usage and pixel format of the texture you assign to this property matches the
        /// texture usage ``depthTextureUsage`` requests and the pixel format that ``depthTextureFormat`` requests.
        #[unsafe(method(depthTexture))]
        #[unsafe(method_family = none)]
        unsafe fn depthTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`depthTexture`][Self::depthTexture].
        #[unsafe(method(setDepthTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setDepthTexture(&self, depth_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        /// The motion texture this frame interpolator evaluates.
        ///
        /// You are responsible for ensuring the usage and pixel format of the texture you assign to this property matches the
        /// texture usage ``motionTextureUsage`` requests and the pixel format that ``motionTextureFormat`` requests.
        #[unsafe(method(motionTexture))]
        #[unsafe(method_family = none)]
        unsafe fn motionTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`motionTexture`][Self::motionTexture].
        #[unsafe(method(setMotionTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setMotionTexture(&self, motion_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        /// The horizontal scale factor the frame interpolator applies to the input motion texture.
        ///
        /// The frame interpolator converts the horizontal component of each value in ``motionTexture`` into fragment (pixel)
        /// coordinates by multiplying it by this property’s value.
        ///
        /// If you set this property's value to `1.0`, this interpolator expects that each pixel's motion vector points
        /// to the location where that pixel is in the ``prevColorTexture``. For example, in Metal's standard device coordinates
        /// where `(0,0)` represents the upper-left corner of the framebuffer, the motion vectors for an object that moves down
        /// and to the right in the ``colorTexture`` by `10` pixels would be `(-10,-10)`.
        #[unsafe(method(motionVectorScaleX))]
        #[unsafe(method_family = none)]
        unsafe fn motionVectorScaleX(&self) -> c_float;

        /// Setter for [`motionVectorScaleX`][Self::motionVectorScaleX].
        #[unsafe(method(setMotionVectorScaleX:))]
        #[unsafe(method_family = none)]
        unsafe fn setMotionVectorScaleX(&self, motion_vector_scale_x: c_float);

        /// The vertical scale factor the frame interpolator applies to the input motion texture.
        ///
        /// The frame interpolator converts the horizontal component of each value in ``motionTexture`` into fragment (pixel)
        /// coordinates by multiplying it by this property’s value.
        ///
        /// If you set this property's value to `1.0`, this interpolator expects that each pixel's motion vector points
        /// to the location where that pixel is in the ``prevColorTexture``. For example, in Metal's standard device coordinates
        /// where `(0,0)` represents the upper-left corner of the framebuffer, the motion vectors for an object that moves down
        /// and to the right in the ``colorTexture`` by `10` pixels would be `(-10,-10)`.
        #[unsafe(method(motionVectorScaleY))]
        #[unsafe(method_family = none)]
        unsafe fn motionVectorScaleY(&self) -> c_float;

        /// Setter for [`motionVectorScaleY`][Self::motionVectorScaleY].
        #[unsafe(method(setMotionVectorScaleY:))]
        #[unsafe(method_family = none)]
        unsafe fn setMotionVectorScaleY(&self, motion_vector_scale_y: c_float);

        /// The length of the time interval, in seconds, between time of current and previous frame.
        #[unsafe(method(deltaTime))]
        #[unsafe(method_family = none)]
        unsafe fn deltaTime(&self) -> c_float;

        /// Setter for [`deltaTime`][Self::deltaTime].
        #[unsafe(method(setDeltaTime:))]
        #[unsafe(method_family = none)]
        unsafe fn setDeltaTime(&self, delta_time: c_float);

        /// The near plane distance that corresponds to the frustrum that renders the scene into the color buffer.
        #[unsafe(method(nearPlane))]
        #[unsafe(method_family = none)]
        unsafe fn nearPlane(&self) -> c_float;

        /// Setter for [`nearPlane`][Self::nearPlane].
        #[unsafe(method(setNearPlane:))]
        #[unsafe(method_family = none)]
        unsafe fn setNearPlane(&self, near_plane: c_float);

        /// The far plane distance that corresponds to the frustrum that renders the scene into the color buffer.
        #[unsafe(method(farPlane))]
        #[unsafe(method_family = none)]
        unsafe fn farPlane(&self) -> c_float;

        /// Setter for [`farPlane`][Self::farPlane].
        #[unsafe(method(setFarPlane:))]
        #[unsafe(method_family = none)]
        unsafe fn setFarPlane(&self, far_plane: c_float);

        /// The vertical field of view angle, in degrees, of the camera that renders the scene into the color buffer.
        ///
        /// In a 3D game, you set this value to the field of view you use to create your perspective matrix.
        #[unsafe(method(fieldOfView))]
        #[unsafe(method_family = none)]
        unsafe fn fieldOfView(&self) -> c_float;

        /// Setter for [`fieldOfView`][Self::fieldOfView].
        #[unsafe(method(setFieldOfView:))]
        #[unsafe(method_family = none)]
        unsafe fn setFieldOfView(&self, field_of_view: c_float);

        /// The ratio between width and height of the screen.
        ///
        /// In a 3D game, you set this value to the same aspect ratio you use to create your perspective matrix, which is
        /// typically `width/height`.
        #[unsafe(method(aspectRatio))]
        #[unsafe(method_family = none)]
        unsafe fn aspectRatio(&self) -> c_float;

        /// Setter for [`aspectRatio`][Self::aspectRatio].
        #[unsafe(method(setAspectRatio:))]
        #[unsafe(method_family = none)]
        unsafe fn setAspectRatio(&self, aspect_ratio: c_float);

        /// An optional texture containing your game's custom UI that this frame interpolator evaluates.
        ///
        /// The frame interpolator uses this property to overlay your custom UI on any frame data it produces into ``outputTexture``.
        ///
        /// Use property ``uiTextureComposited`` to indicate to this frame interpolator if ``colorTexture`` contains a precomposition
        /// of this UI to avoid it producing incorrect results for the overlay.
        #[unsafe(method(uiTexture))]
        #[unsafe(method_family = none)]
        unsafe fn uiTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`uiTexture`][Self::uiTexture].
        #[unsafe(method(setUITexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setUITexture(&self, ui_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        /// The horizontal component of the subpixel sampling coordinate you use to generate the color texture input.
        ///
        /// This property indicates the horizontal pixel offset this interpolator samples to return to the frame's reference frame.
        #[unsafe(method(jitterOffsetX))]
        #[unsafe(method_family = none)]
        unsafe fn jitterOffsetX(&self) -> c_float;

        /// Setter for [`jitterOffsetX`][Self::jitterOffsetX].
        #[unsafe(method(setJitterOffsetX:))]
        #[unsafe(method_family = none)]
        unsafe fn setJitterOffsetX(&self, jitter_offset_x: c_float);

        /// The vertical component of the subpixel sampling coordinate you use to generate the color texture input.
        ///
        /// This property indicates the vertical pixel offset this interpolator samples to return to the frame's reference frame.
        #[unsafe(method(jitterOffsetY))]
        #[unsafe(method_family = none)]
        unsafe fn jitterOffsetY(&self) -> c_float;

        /// Setter for [`jitterOffsetY`][Self::jitterOffsetY].
        #[unsafe(method(setJitterOffsetY:))]
        #[unsafe(method_family = none)]
        unsafe fn setJitterOffsetY(&self, jitter_offset_y: c_float);

        /// A Boolean value that controls whether this frame interpolator interprets the color texture to include your game's custom UI.
        ///
        /// Set this property to
        /// <doc
        /// ://com.apple.documentation/documentation/swift/true> when property ``uiTexture`` contains
        /// a precomposition of any custom UI image on top of the color image.
        ///
        /// When you enable this property, the frame interpolator decomposites the color image ``colorTexture`` references from
        /// the UI ``uiTexture`` references before compositing the UI on to the ``outputTexture``.
        ///
        /// This property's default value is
        /// <doc
        /// ://com.apple.documentation/documentation/swift/false>.
        #[unsafe(method(isUITextureComposited))]
        #[unsafe(method_family = none)]
        unsafe fn isUITextureComposited(&self) -> bool;

        /// Setter for [`isUITextureComposited`][Self::isUITextureComposited].
        #[unsafe(method(setIsUITextureComposited:))]
        #[unsafe(method_family = none)]
        unsafe fn setIsUITextureComposited(&self, ui_texture_composited: bool);

        /// A Boolean property indicating whether to reset history.
        ///
        /// Set this property to
        /// <doc
        /// ://com.apple.documentation/documentation/swift/true> to invalidate history, for example
        /// when there is a scene cut in your game.
        ///
        /// When you set this property to
        /// <doc
        /// ://com.apple.documentation/documentation/swift/false>, you are responsible for
        /// ensuring the property ``prevColorTexture`` contains frame data corresponding to that in ``colorTexture`` during
        /// your previous call to ``MTLFXFrameInterpolator/encodeToCommandBuffer:``.
        #[unsafe(method(shouldResetHistory))]
        #[unsafe(method_family = none)]
        unsafe fn shouldResetHistory(&self) -> bool;

        /// Setter for [`shouldResetHistory`][Self::shouldResetHistory].
        #[unsafe(method(setShouldResetHistory:))]
        #[unsafe(method_family = none)]
        unsafe fn setShouldResetHistory(&self, should_reset_history: bool);

        /// The output texture into which this frame interpolator writes its output.
        ///
        /// You are responsible for providing a texture with a private `storageMode` to this property.
        #[unsafe(method(outputTexture))]
        #[unsafe(method_family = none)]
        unsafe fn outputTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        /// Setter for [`outputTexture`][Self::outputTexture].
        #[unsafe(method(setOutputTexture:))]
        #[unsafe(method_family = none)]
        unsafe fn setOutputTexture(&self, output_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        /// An optional fence that this frame interpolator waits for and updates.
        ///
        /// Use this property for synchronizing access to untracked resources.
        #[unsafe(method(fence))]
        #[unsafe(method_family = none)]
        unsafe fn fence(&self) -> Option<Retained<ProtocolObject<dyn MTLFence>>>;

        /// Setter for [`fence`][Self::fence].
        #[unsafe(method(setFence:))]
        #[unsafe(method_family = none)]
        unsafe fn setFence(&self, fence: Option<&ProtocolObject<dyn MTLFence>>);

        /// A Boolean value that indicates whether the depth texture uses zero to represent the farthest distance.
        ///
        /// This property's default value is
        /// <doc
        /// ://com.apple.documentation/documentation/swift/true>.
        #[unsafe(method(isDepthReversed))]
        #[unsafe(method_family = none)]
        unsafe fn isDepthReversed(&self) -> bool;

        /// Setter for [`isDepthReversed`][Self::isDepthReversed].
        #[unsafe(method(setDepthReversed:))]
        #[unsafe(method_family = none)]
        unsafe fn setDepthReversed(&self, depth_reversed: bool);
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/metalfx/mtlfxframeinterpolator?language=objc)
    pub unsafe trait MTLFXFrameInterpolator: MTLFXFrameInterpolatorBase {
        /// Encode this frame interpolator's work into a command buffer.
        ///
        /// - Parameters:
        /// - commandBuffer: A command buffer into which this frame interpolator encodes work.
        #[unsafe(method(encodeToCommandBuffer:))]
        #[unsafe(method_family = none)]
        unsafe fn encodeToCommandBuffer(
            &self,
            command_buffer: &ProtocolObject<dyn MTLCommandBuffer>,
        );
    }
);
