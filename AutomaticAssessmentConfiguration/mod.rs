// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::unportable_markdown)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "AutomaticAssessmentConfiguration", kind = "framework")]
extern "C" {}

use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/automaticassessmentconfiguration/aeassessmentapplication?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AEAssessmentApplication;
);

extern_conformance!(
    unsafe impl NSCopying for AEAssessmentApplication {}
);

unsafe impl CopyingHelper for AEAssessmentApplication {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for AEAssessmentApplication {}
);

impl AEAssessmentApplication {
    extern_methods!(
        #[unsafe(method(bundleIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn bundleIdentifier(&self) -> Retained<NSString>;

        #[unsafe(method(teamIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn teamIdentifier(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(requiresSignatureValidation))]
        #[unsafe(method_family = none)]
        pub unsafe fn requiresSignatureValidation(&self) -> bool;

        /// Setter for [`requiresSignatureValidation`][Self::requiresSignatureValidation].
        #[unsafe(method(setRequiresSignatureValidation:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRequiresSignatureValidation(&self, requires_signature_validation: bool);

        #[unsafe(method(initWithBundleIdentifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithBundleIdentifier(
            this: Allocated<Self>,
            bundle_identifier: &NSString,
        ) -> Retained<Self>;

        #[unsafe(method(initWithBundleIdentifier:teamIdentifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithBundleIdentifier_teamIdentifier(
            this: Allocated<Self>,
            bundle_identifier: &NSString,
            team_identifier: Option<&NSString>,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

/// [Apple's documentation](https://developer.apple.com/documentation/automaticassessmentconfiguration/aeautocorrectmode?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AEAutocorrectMode(pub NSUInteger);
bitflags::bitflags! {
    impl AEAutocorrectMode: NSUInteger {
        #[doc(alias = "AEAutocorrectModeNone")]
        const None = 0;
        #[doc(alias = "AEAutocorrectModeSpelling")]
        const Spelling = 1<<0;
        #[doc(alias = "AEAutocorrectModePunctuation")]
        const Punctuation = 1<<1;
    }
}

unsafe impl Encode for AEAutocorrectMode {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for AEAutocorrectMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/automaticassessmentconfiguration/aeassessmentconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AEAssessmentConfiguration;
);

extern_conformance!(
    unsafe impl NSCopying for AEAssessmentConfiguration {}
);

unsafe impl CopyingHelper for AEAssessmentConfiguration {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for AEAssessmentConfiguration {}
);

impl AEAssessmentConfiguration {
    extern_methods!(
        #[unsafe(method(autocorrectMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn autocorrectMode(&self) -> AEAutocorrectMode;

        /// Setter for [`autocorrectMode`][Self::autocorrectMode].
        #[unsafe(method(setAutocorrectMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAutocorrectMode(&self, autocorrect_mode: AEAutocorrectMode);

        #[unsafe(method(allowsSpellCheck))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsSpellCheck(&self) -> bool;

        /// Setter for [`allowsSpellCheck`][Self::allowsSpellCheck].
        #[unsafe(method(setAllowsSpellCheck:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsSpellCheck(&self, allows_spell_check: bool);

        #[unsafe(method(allowsPredictiveKeyboard))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsPredictiveKeyboard(&self) -> bool;

        /// Setter for [`allowsPredictiveKeyboard`][Self::allowsPredictiveKeyboard].
        #[unsafe(method(setAllowsPredictiveKeyboard:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsPredictiveKeyboard(&self, allows_predictive_keyboard: bool);

        #[unsafe(method(allowsKeyboardShortcuts))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsKeyboardShortcuts(&self) -> bool;

        /// Setter for [`allowsKeyboardShortcuts`][Self::allowsKeyboardShortcuts].
        #[unsafe(method(setAllowsKeyboardShortcuts:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsKeyboardShortcuts(&self, allows_keyboard_shortcuts: bool);

        #[unsafe(method(allowsActivityContinuation))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsActivityContinuation(&self) -> bool;

        /// Setter for [`allowsActivityContinuation`][Self::allowsActivityContinuation].
        #[unsafe(method(setAllowsActivityContinuation:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsActivityContinuation(&self, allows_activity_continuation: bool);

        #[unsafe(method(allowsDictation))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsDictation(&self) -> bool;

        /// Setter for [`allowsDictation`][Self::allowsDictation].
        #[unsafe(method(setAllowsDictation:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsDictation(&self, allows_dictation: bool);

        #[unsafe(method(allowsAccessibilitySpeech))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsAccessibilitySpeech(&self) -> bool;

        /// Setter for [`allowsAccessibilitySpeech`][Self::allowsAccessibilitySpeech].
        #[unsafe(method(setAllowsAccessibilitySpeech:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsAccessibilitySpeech(&self, allows_accessibility_speech: bool);

        #[unsafe(method(allowsAccessibilityTypingFeedback))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsAccessibilityTypingFeedback(&self) -> bool;

        /// Setter for [`allowsAccessibilityTypingFeedback`][Self::allowsAccessibilityTypingFeedback].
        #[unsafe(method(setAllowsAccessibilityTypingFeedback:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsAccessibilityTypingFeedback(
            &self,
            allows_accessibility_typing_feedback: bool,
        );

        #[unsafe(method(allowsPasswordAutoFill))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsPasswordAutoFill(&self) -> bool;

        /// Setter for [`allowsPasswordAutoFill`][Self::allowsPasswordAutoFill].
        #[unsafe(method(setAllowsPasswordAutoFill:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsPasswordAutoFill(&self, allows_password_auto_fill: bool);

        #[unsafe(method(allowsContinuousPathKeyboard))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsContinuousPathKeyboard(&self) -> bool;

        /// Setter for [`allowsContinuousPathKeyboard`][Self::allowsContinuousPathKeyboard].
        #[unsafe(method(setAllowsContinuousPathKeyboard:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsContinuousPathKeyboard(&self, allows_continuous_path_keyboard: bool);

        #[unsafe(method(mainParticipantConfiguration))]
        #[unsafe(method_family = none)]
        pub unsafe fn mainParticipantConfiguration(
            &self,
        ) -> Retained<AEAssessmentParticipantConfiguration>;

        #[unsafe(method(configurationsByApplication))]
        #[unsafe(method_family = none)]
        pub unsafe fn configurationsByApplication(
            &self,
        ) -> Retained<NSDictionary<AEAssessmentApplication, AEAssessmentParticipantConfiguration>>;

        #[unsafe(method(setConfiguration:forApplication:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setConfiguration_forApplication(
            &self,
            configuration: &AEAssessmentParticipantConfiguration,
            application: &AEAssessmentApplication,
        );

        #[unsafe(method(removeApplication:))]
        #[unsafe(method_family = none)]
        pub unsafe fn removeApplication(&self, application: &AEAssessmentApplication);
    );
}

/// Methods declared on superclass `NSObject`.
impl AEAssessmentConfiguration {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/automaticassessmentconfiguration/aeassessmentparticipantconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AEAssessmentParticipantConfiguration;
);

extern_conformance!(
    unsafe impl NSCopying for AEAssessmentParticipantConfiguration {}
);

unsafe impl CopyingHelper for AEAssessmentParticipantConfiguration {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for AEAssessmentParticipantConfiguration {}
);

impl AEAssessmentParticipantConfiguration {
    extern_methods!(
        #[unsafe(method(allowsNetworkAccess))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsNetworkAccess(&self) -> bool;

        /// Setter for [`allowsNetworkAccess`][Self::allowsNetworkAccess].
        #[unsafe(method(setAllowsNetworkAccess:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsNetworkAccess(&self, allows_network_access: bool);

        #[unsafe(method(isRequired))]
        #[unsafe(method_family = none)]
        pub unsafe fn isRequired(&self) -> bool;

        /// Setter for [`isRequired`][Self::isRequired].
        #[unsafe(method(setRequired:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRequired(&self, required: bool);

        #[unsafe(method(configurationInfo))]
        #[unsafe(method_family = none)]
        pub unsafe fn configurationInfo(&self) -> Retained<NSDictionary<NSString, AnyObject>>;

        /// Setter for [`configurationInfo`][Self::configurationInfo].
        #[unsafe(method(setConfigurationInfo:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setConfigurationInfo(
            &self,
            configuration_info: &NSDictionary<NSString, AnyObject>,
        );

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/automaticassessmentconfiguration/aeassessmentsession?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AEAssessmentSession;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AEAssessmentSession {}
);

impl AEAssessmentSession {
    extern_methods!(
        #[unsafe(method(supportsMultipleParticipants))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportsMultipleParticipants() -> bool;

        #[unsafe(method(supportsConfigurationUpdates))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportsConfigurationUpdates() -> bool;

        #[unsafe(method(delegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn AEAssessmentSessionDelegate>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`delegate`][Self::delegate].
        #[unsafe(method(setDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn AEAssessmentSessionDelegate>>,
        );

        #[unsafe(method(configuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn configuration(&self) -> Retained<AEAssessmentConfiguration>;

        #[unsafe(method(isActive))]
        #[unsafe(method_family = none)]
        pub unsafe fn isActive(&self) -> bool;

        #[unsafe(method(initWithConfiguration:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithConfiguration(
            this: Allocated<Self>,
            configuration: &AEAssessmentConfiguration,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(begin))]
        #[unsafe(method_family = none)]
        pub unsafe fn begin(&self);

        #[unsafe(method(end))]
        #[unsafe(method_family = none)]
        pub unsafe fn end(&self);

        #[unsafe(method(updateToConfiguration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn updateToConfiguration(&self, configuration: &AEAssessmentConfiguration);
    );
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/automaticassessmentconfiguration/aeassessmentsessiondelegate?language=objc)
    pub unsafe trait AEAssessmentSessionDelegate: NSObjectProtocol {
        #[optional]
        #[unsafe(method(assessmentSessionDidBegin:))]
        #[unsafe(method_family = none)]
        unsafe fn assessmentSessionDidBegin(&self, session: &AEAssessmentSession);

        #[optional]
        #[unsafe(method(assessmentSession:failedToBeginWithError:))]
        #[unsafe(method_family = none)]
        unsafe fn assessmentSession_failedToBeginWithError(
            &self,
            session: &AEAssessmentSession,
            error: &NSError,
        );

        #[optional]
        #[unsafe(method(assessmentSession:wasInterruptedWithError:))]
        #[unsafe(method_family = none)]
        unsafe fn assessmentSession_wasInterruptedWithError(
            &self,
            session: &AEAssessmentSession,
            error: &NSError,
        );

        #[optional]
        #[unsafe(method(assessmentSessionDidEnd:))]
        #[unsafe(method_family = none)]
        unsafe fn assessmentSessionDidEnd(&self, session: &AEAssessmentSession);

        #[optional]
        #[unsafe(method(assessmentSessionDidUpdate:))]
        #[unsafe(method_family = none)]
        unsafe fn assessmentSessionDidUpdate(&self, session: &AEAssessmentSession);

        #[optional]
        #[unsafe(method(assessmentSession:failedToUpdateToConfiguration:error:))]
        #[unsafe(method_family = none)]
        unsafe fn assessmentSession_failedToUpdateToConfiguration_error(
            &self,
            session: &AEAssessmentSession,
            configuration: &AEAssessmentConfiguration,
            error: &NSError,
        );
    }
);

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/automaticassessmentconfiguration/aeassessmenterrordomain?language=objc)
    pub static AEAssessmentErrorDomain: &'static NSErrorDomain;
}

/// [Apple's documentation](https://developer.apple.com/documentation/automaticassessmentconfiguration/aeassessmenterrorcode?language=objc)
// NS_ERROR_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct AEAssessmentErrorCode(pub NSInteger);
impl AEAssessmentErrorCode {
    #[doc(alias = "AEAssessmentErrorUnknown")]
    pub const Unknown: Self = Self(1);
    #[doc(alias = "AEAssessmentErrorUnsupportedPlatform")]
    pub const UnsupportedPlatform: Self = Self(2);
    #[doc(alias = "AEAssessmentErrorMultipleParticipantsNotSupported")]
    pub const MultipleParticipantsNotSupported: Self = Self(3);
    #[doc(alias = "AEAssessmentErrorConfigurationUpdatesNotSupported")]
    pub const ConfigurationUpdatesNotSupported: Self = Self(4);
    #[doc(alias = "AEAssessmentErrorRequiredParticipantsNotAvailable")]
    pub const RequiredParticipantsNotAvailable: Self = Self(5);
}

unsafe impl Encode for AEAssessmentErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for AEAssessmentErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/automaticassessmentconfiguration/aenotinstalledparticipantskey?language=objc)
    pub static AENotInstalledParticipantsKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/automaticassessmentconfiguration/aerestrictedsystemparticipantskey?language=objc)
    pub static AERestrictedSystemParticipantsKey: &'static NSString;
}
