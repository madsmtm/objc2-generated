//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// Use with videoFieldMode property to request deinterlacing of video fields.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemtrackvideofieldmodedeinterlacefields?language=objc)
    pub static AVPlayerItemTrackVideoFieldModeDeinterlaceFields: &'static NSString;
}

extern_class!(
    /// An AVPlayerItemTrack carries a reference to an AVAssetTrack as well as presentation settings for that track.
    ///
    ///
    /// Note that inspection of assets tracks is provided by AVAssetTrack.
    /// This class is intended to represent presentation state for a track of an asset that's played by an AVPlayer and AVPlayerItem.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avplayeritemtrack?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVPlayerItemTrack;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVPlayerItemTrack {}
);

impl AVPlayerItemTrack {
    extern_methods!(
        #[cfg(feature = "AVAssetTrack")]
        /// Indicates the AVAssetTrack for which the AVPlayerItemTrack represents presentation state.
        ///
        /// This property is not observable.
        /// Clients must serialize their access to the resulting AVAssetTrack and related objects on the associated AVPlayer's
        /// notification queue.  By default, this queue is the main queue.
        #[unsafe(method(assetTrack))]
        #[unsafe(method_family = none)]
        pub unsafe fn assetTrack(&self) -> Option<Retained<AVAssetTrack>>;

        /// Indicates whether the track is enabled for presentation during playback.
        ///
        /// Before macOS 13, iOS 16, tvOS 16, and watchOS 9, this property must be accessed on the main thread/queue.
        #[unsafe(method(isEnabled))]
        #[unsafe(method_family = none)]
        pub unsafe fn isEnabled(&self) -> bool;

        /// Setter for [`isEnabled`][Self::isEnabled].
        #[unsafe(method(setEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEnabled(&self, enabled: bool);

        /// If the media type of the assetTrack is AVMediaTypeVideo, indicates the current frame rate of the track as it plays, in units of frames per second. If the item is not playing, or if the media type of the track is not video, the value of this property is 0.
        ///
        /// This property is not observable.
        ///
        /// Before macOS 13, iOS 16, tvOS 16, and watchOS 9, this property must be accessed on the main thread/queue.
        #[unsafe(method(currentVideoFrameRate))]
        #[unsafe(method_family = none)]
        pub unsafe fn currentVideoFrameRate(&self) -> c_float;

        /// If the media type of the assetTrack is AVMediaTypeVideo, specifies the handling of video frames that contain multiple fields.
        ///
        /// A value of nil indicates default processing of video frames. If you want video fields to be deinterlaced, set videoFieldMode to AVPlayerItemTrackVideoFieldModeDeinterlaceFields.
        /// You can test whether video being played has multiple fields by examining the underlying AVAssetTrack's format descriptions. See -[AVAssetTrack formatDescriptions] and, for video format descriptions, kCMFormatDescriptionExtension_FieldCount.
        ///
        /// Before macOS 13, iOS 16, tvOS 16, and watchOS 9, this property must be accessed on the main thread/queue.
        #[unsafe(method(videoFieldMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn videoFieldMode(&self) -> Option<Retained<NSString>>;

        /// Setter for [`videoFieldMode`][Self::videoFieldMode].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setVideoFieldMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setVideoFieldMode(&self, video_field_mode: Option<&NSString>);
    );
}

/// Methods declared on superclass `NSObject`.
impl AVPlayerItemTrack {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}
