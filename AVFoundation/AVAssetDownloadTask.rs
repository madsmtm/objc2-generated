//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// The lowest media bitrate greater than or equal to this value will be selected. Value should be a NSNumber in bps. If no suitable media bitrate is found, the highest media bitrate will be selected.
    /// The value for this key should be a NSNumber.
    ///
    /// By default, the highest media bitrate will be selected for download.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadtaskminimumrequiredmediabitratekey?language=objc)
    pub static AVAssetDownloadTaskMinimumRequiredMediaBitrateKey: &'static NSString;
}

extern "C" {
    /// The lowest media presentation size greater than or equal to this value will be selected. If no suitable media presentation size is found, the highest media presentation size will be selected.
    /// The value for this key should be a NSValue of CGSize.
    ///
    /// By default, the highest media presentation size will be selected for download.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadtaskminimumrequiredpresentationsizekey?language=objc)
    pub static AVAssetDownloadTaskMinimumRequiredPresentationSizeKey: &'static NSString;
}

extern "C" {
    /// The media selection for this download.
    /// The value for this key should be an AVMediaSelection.
    ///
    /// By default, media selections for AVAssetDownloadTask will be automatically selected.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadtaskmediaselectionkey?language=objc)
    pub static AVAssetDownloadTaskMediaSelectionKey: &'static NSString;
}

extern "C" {
    /// Download the specified media selections with or without support for multichannel playback.
    /// The value for this key should be an NSNumber representing a BOOL.
    ///
    /// By default AVAssetDownloadTask will prefer multichannel by downloading the most capable multichannel rendition available in additon to stereo.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadtaskmediaselectionprefersmultichannelkey?language=objc)
    pub static AVAssetDownloadTaskMediaSelectionPrefersMultichannelKey: &'static NSString;
}

extern "C" {
    /// Download the specified media selections in lossless audio representation.
    /// The value for this key should be an NSNumber representing a BOOL.
    ///
    /// By default AVAssetDownloadTask will prefer lossy audio representation.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadtaskpreferslosslessaudiokey?language=objc)
    pub static AVAssetDownloadTaskPrefersLosslessAudioKey: &'static NSString;
}

extern "C" {
    /// Download the specified media selections with or without HDR content.
    /// The value for this key should be an NSNumber representing a BOOL.
    ///
    /// By default AVAssetDownloadTask will prefer HDR content.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadtaskprefershdrkey?language=objc)
    pub static AVAssetDownloadTaskPrefersHDRKey: &'static NSString;
}

extern_class!(
    /// A NSURLSessionTask that accepts remote AVURLAssets to download locally.
    ///
    /// Should be created with -[AVAssetDownloadURLSession assetDownloadTaskWithURLAsset:assetTitle:assetArtworkData:options:]. To utilize local data for playback for downloads that are in-progress, re-use the URLAsset supplied in initialization. An AVAssetDownloadTask may be instantiated with a destinationURL pointing to an existing asset on disk, for the purpose of completing or augmenting a downloaded asset.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadtask?language=objc)
    #[unsafe(super(NSURLSessionTask, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVAssetDownloadTask;
);

extern_conformance!(
    unsafe impl NSCopying for AVAssetDownloadTask {}
);

unsafe impl CopyingHelper for AVAssetDownloadTask {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for AVAssetDownloadTask {}
);

extern_conformance!(
    unsafe impl NSProgressReporting for AVAssetDownloadTask {}
);

impl AVAssetDownloadTask {
    extern_methods!(
        #[cfg(feature = "AVAsset")]
        /// The asset supplied to the download task upon initialization.
        #[unsafe(method(URLAsset))]
        #[unsafe(method_family = none)]
        pub unsafe fn URLAsset(&self) -> Retained<AVURLAsset>;

        /// The file URL supplied to the download task upon initialization.
        ///
        /// This URL may have been appended with the appropriate extension for the asset.
        #[deprecated = "Use the URL property of URLAsset instead"]
        #[unsafe(method(destinationURL))]
        #[unsafe(method_family = none)]
        pub unsafe fn destinationURL(&self) -> Retained<NSURL>;

        /// The options supplied to the download task upon initialization.
        #[deprecated = "Use AVAssetDownloadConfiguration instead"]
        #[unsafe(method(options))]
        #[unsafe(method_family = none)]
        pub unsafe fn options(&self) -> Option<Retained<NSDictionary<NSString, AnyObject>>>;

        /// This property provides a collection of time ranges for which the download task has media data already downloaded and playable. The ranges provided might be discontinuous.
        ///
        /// Returns an NSArray of NSValues containing CMTimeRanges.
        #[deprecated = "Use NSURLSessionTask.progress instead"]
        #[unsafe(method(loadedTimeRanges))]
        #[unsafe(method_family = none)]
        pub unsafe fn loadedTimeRanges(&self) -> Retained<NSArray<NSValue>>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(originalRequest))]
        #[unsafe(method_family = none)]
        pub unsafe fn originalRequest(&self) -> Retained<NSURLRequest>;

        #[unsafe(method(currentRequest))]
        #[unsafe(method_family = none)]
        pub unsafe fn currentRequest(&self) -> Retained<NSURLRequest>;

        #[unsafe(method(response))]
        #[unsafe(method_family = none)]
        pub unsafe fn response(&self) -> Retained<NSURLResponse>;
    );
}

extern_class!(
    /// Configuration parameters for the download task.
    ///
    /// Download configuration consists of primary and auxiliary content configurations. Primary content configuration represents the primary set of renditions essential for offline playback. Auxiliary content configurations represent additional configurations to complement the primary.
    /// For example, the primary content configuration may represent stereo audio renditions and auxiliary configuration may represent complementing multichannel audio renditions.
    ///
    /// It is important to configure your download configuration object appropriately before using it to create a download task. Download task makes a copy of the configuration settings you provide and use those settings to configure the task. Once configured, the task object ignores any changes you make to the NSURLSessionConfiguration object. If you need to modify your settings, you must update the download configuration object and use it to create a new download task object.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVAssetDownloadConfiguration;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVAssetDownloadConfiguration {}
);

impl AVAssetDownloadConfiguration {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVAsset")]
        /// Creates and initializes a download configuration object.
        ///
        /// This method will throw an exception if AVURLAsset has been invalidated.
        ///
        /// - Parameter asset: The asset to create the download configuration for.
        /// - Parameter title: A human readable title for this asset, expected to be as suitable as possible for the user's preferred languages. Will show up in the usage pane of the settings app.
        #[unsafe(method(downloadConfigurationWithAsset:title:))]
        #[unsafe(method_family = none)]
        pub unsafe fn downloadConfigurationWithAsset_title(
            asset: &AVURLAsset,
            title: &NSString,
        ) -> Retained<Self>;

        /// NSData representing artwork data for this asset. Optional. May be displayed, for example, by the usage pane of the Settings app. Must work with +[UIImage imageWithData:].
        #[unsafe(method(artworkData))]
        #[unsafe(method_family = none)]
        pub unsafe fn artworkData(&self) -> Option<Retained<NSData>>;

        /// Setter for [`artworkData`][Self::artworkData].
        #[unsafe(method(setArtworkData:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setArtworkData(&self, artwork_data: Option<&NSData>);

        /// The primary content for the download.
        #[unsafe(method(primaryContentConfiguration))]
        #[unsafe(method_family = none)]
        pub unsafe fn primaryContentConfiguration(
            &self,
        ) -> Retained<AVAssetDownloadContentConfiguration>;

        /// The auxiliary content for the download. Optional.
        ///
        /// By default, auxiliaryContentConfigurations will have one or more default auxiliary content configurations. These content configurations can be augmented with additional content configurations or removed entirely if no auxiliary content is desired.
        #[unsafe(method(auxiliaryContentConfigurations))]
        #[unsafe(method_family = none)]
        pub unsafe fn auxiliaryContentConfigurations(
            &self,
        ) -> Retained<NSArray<AVAssetDownloadContentConfiguration>>;

        /// Setter for [`auxiliaryContentConfigurations`][Self::auxiliaryContentConfigurations].
        #[unsafe(method(setAuxiliaryContentConfigurations:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAuxiliaryContentConfigurations(
            &self,
            auxiliary_content_configurations: &NSArray<AVAssetDownloadContentConfiguration>,
        );

        /// Optimizes auxiliary content selection depending on the primary to minimize total number of video renditions downloaded. True by default.
        ///
        /// For example, if the primary content configuration represents stereo renditions and auxiliary content configuration represents multichannel audio renditions, auxiliary multichannel variant will be chosen so as to avoid downloading duplicate video renditions.
        #[unsafe(method(optimizesAuxiliaryContentConfigurations))]
        #[unsafe(method_family = none)]
        pub unsafe fn optimizesAuxiliaryContentConfigurations(&self) -> bool;

        /// Setter for [`optimizesAuxiliaryContentConfigurations`][Self::optimizesAuxiliaryContentConfigurations].
        #[unsafe(method(setOptimizesAuxiliaryContentConfigurations:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOptimizesAuxiliaryContentConfigurations(
            &self,
            optimizes_auxiliary_content_configurations: bool,
        );

        /// Download interstitial assets as listed in the index file. False by default.
        ///
        /// Ordinarily, interstitial assets are skipped when downloading content for later playback. Setting this property to true will cause interstitial assets to be downloaded as well. Playback of the downloaded content can then match the experience of online streaming playback as closely as possible.
        #[unsafe(method(downloadsInterstitialAssets))]
        #[unsafe(method_family = none)]
        pub unsafe fn downloadsInterstitialAssets(&self) -> bool;

        /// Setter for [`downloadsInterstitialAssets`][Self::downloadsInterstitialAssets].
        #[unsafe(method(setDownloadsInterstitialAssets:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDownloadsInterstitialAssets(&self, downloads_interstitial_assets: bool);

        #[cfg(all(feature = "AVMediaFormat", feature = "AVPlayerMediaSelectionCriteria"))]
        /// Sets media selection on interstitials for this asset
        ///
        /// Typically, interstitial assets have not been discovered when the main download is initiated.
        /// This method allows the user to specify AVMediaSelectionCriteria for all interstitials that are discovered.
        /// Each AVPlayerMediaSelectionCriteria in the array of criteria specfies a set of criteria for a variant to download.
        ///
        /// - Parameter criteria: The array of selection criteria to set
        /// - Parameter mediaCharacteristic: The AVMediaCharacteristic to which the criteria will be applied
        #[unsafe(method(setInterstitialMediaSelectionCriteria:forMediaCharacteristic:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInterstitialMediaSelectionCriteria_forMediaCharacteristic(
            &self,
            criteria: &NSArray<AVPlayerMediaSelectionCriteria>,
            media_characteristic: &AVMediaCharacteristic,
        );
    );
}

extern_class!(
    /// Represents the configuration consisting of variant and the variant's media options.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadcontentconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVAssetDownloadContentConfiguration;
);

extern_conformance!(
    unsafe impl NSCopying for AVAssetDownloadContentConfiguration {}
);

unsafe impl CopyingHelper for AVAssetDownloadContentConfiguration {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for AVAssetDownloadContentConfiguration {}
);

impl AVAssetDownloadContentConfiguration {
    extern_methods!(
        #[cfg(feature = "AVAssetVariant")]
        /// An array of variant qualifiers.
        ///
        /// The qualifiers are expected to be added in the preferential order and will be evaluated in that order until the qualifier matches one or more AVAssetVariants. Only those variants which can be played on the current device configuration will be initially chosen for evaluation. If there is more than one match, automatic variant selection will be used to choose among the matched.
        /// If a variant qualifier is constructed to explicitly choose a variant, no evaluation is performed and the variant provided will be downloaded as is, even if it is not playable on current device configuration.
        /// If a variant qualifier has not been provided, or if the variant qualifier when evaluated does not match any of the variants which can be played according to the current device configuration, automatic variant selection will be used.
        #[unsafe(method(variantQualifiers))]
        #[unsafe(method_family = none)]
        pub unsafe fn variantQualifiers(&self) -> Retained<NSArray<AVAssetVariantQualifier>>;

        #[cfg(feature = "AVAssetVariant")]
        /// Setter for [`variantQualifiers`][Self::variantQualifiers].
        #[unsafe(method(setVariantQualifiers:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setVariantQualifiers(
            &self,
            variant_qualifiers: &NSArray<AVAssetVariantQualifier>,
        );

        #[cfg(feature = "AVMediaSelection")]
        /// An array of media selections obtained from the AVAsset.
        ///
        /// If a media selection is not provided, automatic media selection associated with the asset will be used.
        #[unsafe(method(mediaSelections))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaSelections(&self) -> Retained<NSArray<AVMediaSelection>>;

        #[cfg(feature = "AVMediaSelection")]
        /// Setter for [`mediaSelections`][Self::mediaSelections].
        #[unsafe(method(setMediaSelections:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMediaSelections(&self, media_selections: &NSArray<AVMediaSelection>);
    );
}

/// Methods declared on superclass `NSObject`.
impl AVAssetDownloadContentConfiguration {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// An AVAssetDownloadTask used for downloading multiple AVMediaSelections for a single AVAsset, under the umbrella of a single download task.
    ///
    /// Should be created with -[AVAssetDownloadURLSession aggregateAssetDownloadTaskWithURLAsset:mediaSelections:assetTitle:assetArtworkData:options:. For progress tracking, monitor the delegate callbacks for each childAssetDownloadTask.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avaggregateassetdownloadtask?language=objc)
    #[unsafe(super(NSURLSessionTask, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
    pub struct AVAggregateAssetDownloadTask;
);

extern_conformance!(
    unsafe impl NSCopying for AVAggregateAssetDownloadTask {}
);

unsafe impl CopyingHelper for AVAggregateAssetDownloadTask {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for AVAggregateAssetDownloadTask {}
);

extern_conformance!(
    unsafe impl NSProgressReporting for AVAggregateAssetDownloadTask {}
);

impl AVAggregateAssetDownloadTask {
    extern_methods!(
        #[cfg(feature = "AVAsset")]
        /// The asset supplied to the download task upon initialization.
        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[unsafe(method(URLAsset))]
        #[unsafe(method_family = none)]
        pub unsafe fn URLAsset(&self) -> Retained<AVURLAsset>;

        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[unsafe(method(originalRequest))]
        #[unsafe(method_family = none)]
        pub unsafe fn originalRequest(&self) -> Retained<NSURLRequest>;

        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[unsafe(method(currentRequest))]
        #[unsafe(method_family = none)]
        pub unsafe fn currentRequest(&self) -> Retained<NSURLRequest>;

        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[unsafe(method(response))]
        #[unsafe(method_family = none)]
        pub unsafe fn response(&self) -> Retained<NSURLResponse>;
    );
}

extern_protocol!(
    /// Delegate methods to implement when adopting AVAssetDownloadTask. Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate?language=objc)
    pub unsafe trait AVAssetDownloadDelegate: NSURLSessionTaskDelegate {
        /// Sent when a download task that has completed a download.
        ///
        /// Unlike NSURLSessionDownloadDelegate, the delegate should NOT move the file from this directory after it has been called. Downloaded assets must remain at the system provided URL. URLSession:task:didCompleteWithError: will still be called.
        ///
        /// - Parameter session: The session the asset download task is on.
        /// - Parameter assetDownloadTask: The AVAssetDownloadTask whose downloaded completed.
        /// - Parameter location: The location the asset has been downloaded to.
        #[deprecated = "Use URLSession:assetDownloadTask:willDownloadToURL: instead"]
        #[optional]
        #[unsafe(method(URLSession:assetDownloadTask:didFinishDownloadingToURL:))]
        #[unsafe(method_family = none)]
        unsafe fn URLSession_assetDownloadTask_didFinishDownloadingToURL(
            &self,
            session: &NSURLSession,
            asset_download_task: &AVAssetDownloadTask,
            location: &NSURL,
        );

        #[cfg(feature = "objc2-core-media")]
        /// Method to adopt to subscribe to progress updates of an AVAssetDownloadTask.
        ///
        /// - Parameter session: The session the asset download task is on.
        /// - Parameter assetDownloadTask: The AVAssetDownloadTask which is being updated.
        /// - Parameter timeRange: A CMTimeRange indicating the time range loaded since the last time this method was called.
        /// - Parameter loadedTimeRanges: A NSArray of NSValues of CMTimeRanges indicating all the time ranges loaded by this asset download task.
        /// - Parameter timeRangeExpectedToLoad: A CMTimeRange indicating the single time range that is expected to be loaded when the download is complete.
        #[deprecated = "Use NSURLSessionTask.progress instead"]
        #[optional]
        #[unsafe(method(URLSession:assetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:))]
        #[unsafe(method_family = none)]
        unsafe fn URLSession_assetDownloadTask_didLoadTimeRange_totalTimeRangesLoaded_timeRangeExpectedToLoad(
            &self,
            session: &NSURLSession,
            asset_download_task: &AVAssetDownloadTask,
            time_range: CMTimeRange,
            loaded_time_ranges: &NSArray<NSValue>,
            time_range_expected_to_load: CMTimeRange,
        );

        #[cfg(feature = "AVMediaSelection")]
        /// Method called when the media selection for the download is fully resolved, including any automatic selections.
        ///
        /// - Parameter session: The session the asset download task is on.
        /// - Parameter assetDownloadTask: The AVAssetDownloadTask which is being updated.
        /// - Parameter resolvedMediaSelection: The resolved media selection for the download task. For the best chance of playing back downloaded content without further network I/O, apply this selection to subsequent AVPlayerItems.
        #[optional]
        #[unsafe(method(URLSession:assetDownloadTask:didResolveMediaSelection:))]
        #[unsafe(method_family = none)]
        unsafe fn URLSession_assetDownloadTask_didResolveMediaSelection(
            &self,
            session: &NSURLSession,
            asset_download_task: &AVAssetDownloadTask,
            resolved_media_selection: &AVMediaSelection,
        );

        /// Method called when the asset download task determines the location this asset will be downloaded to.
        ///
        /// This URL should be saved for future instantiations of AVAsset. While an AVAsset already exists for this content, it is advisable to re-use that instance.
        ///
        /// - Parameter session: The session the asset download task is on.
        /// - Parameter assetDownloadTask: The AVAssetDownloadTask.
        /// - Parameter location: The file URL this task will download media data to.
        #[optional]
        #[unsafe(method(URLSession:assetDownloadTask:willDownloadToURL:))]
        #[unsafe(method_family = none)]
        unsafe fn URLSession_assetDownloadTask_willDownloadToURL(
            &self,
            session: &NSURLSession,
            asset_download_task: &AVAssetDownloadTask,
            location: &NSURL,
        );

        /// Method called when the aggregate download task determines the location this asset will be downloaded to.
        ///
        /// This URL should be saved for future instantiations of AVAsset. While an AVAsset already exists for this content, it is advisable to re-use that instance.
        ///
        /// - Parameter session: The session the aggregate asset download task is on.
        /// - Parameter aggregateAssetDownloadTask: The AVAggregateAssetDownloadTask.
        /// - Parameter location: The file URL this task will download media data to.
        #[deprecated = "Use URLSession:assetDownloadTask:willDownloadToURL: instead"]
        #[optional]
        #[unsafe(method(URLSession:aggregateAssetDownloadTask:willDownloadToURL:))]
        #[unsafe(method_family = none)]
        unsafe fn URLSession_aggregateAssetDownloadTask_willDownloadToURL(
            &self,
            session: &NSURLSession,
            aggregate_asset_download_task: &AVAggregateAssetDownloadTask,
            location: &NSURL,
        );

        #[cfg(feature = "AVMediaSelection")]
        /// Method called when a child AVAssetDownloadTask completes.
        ///
        /// - Parameter session: The session the aggregate asset download task is on.
        /// - Parameter aggregateAssetDownloadTask: The AVAggregateAssetDownloadTask.
        /// - Parameter mediaSelection: The AVMediaSelection which is now fully available for offline use.
        #[deprecated = "Use the NSURLSessionDownloadDelegate method instead, URLSession:task:didCompleteWithError:"]
        #[optional]
        #[unsafe(method(URLSession:aggregateAssetDownloadTask:didCompleteForMediaSelection:))]
        #[unsafe(method_family = none)]
        unsafe fn URLSession_aggregateAssetDownloadTask_didCompleteForMediaSelection(
            &self,
            session: &NSURLSession,
            aggregate_asset_download_task: &AVAggregateAssetDownloadTask,
            media_selection: &AVMediaSelection,
        );

        #[cfg(all(feature = "AVMediaSelection", feature = "objc2-core-media"))]
        /// Method to adopt to subscribe to progress updates of an AVAggregateAssetDownloadTask
        ///
        /// - Parameter session: The session the asset download task is on.
        /// - Parameter aggregateAssetDownloadTask: The AVAggregateAssetDownloadTask.
        /// - Parameter timeRange: A CMTimeRange indicating the time range loaded for the media selection being downloaded.
        /// - Parameter loadedTimeRanges: A NSArray of NSValues of CMTimeRanges indicating all the time ranges loaded for the media selection being downloaded.
        /// - Parameter timeRangeExpectedToLoad: A CMTimeRange indicating the single time range that is expected to be loaded when the download is complete for the media selection being downloaded.
        /// - Parameter mediaSelection: The media selection which has additional media data loaded for offline use.
        #[deprecated = "Use NSURLSessionTask.progress: instead"]
        #[optional]
        #[unsafe(method(URLSession:aggregateAssetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:forMediaSelection:))]
        #[unsafe(method_family = none)]
        unsafe fn URLSession_aggregateAssetDownloadTask_didLoadTimeRange_totalTimeRangesLoaded_timeRangeExpectedToLoad_forMediaSelection(
            &self,
            session: &NSURLSession,
            aggregate_asset_download_task: &AVAggregateAssetDownloadTask,
            time_range: CMTimeRange,
            loaded_time_ranges: &NSArray<NSValue>,
            time_range_expected_to_load: CMTimeRange,
            media_selection: &AVMediaSelection,
        );

        #[cfg(feature = "AVAssetVariant")]
        /// Sent when a download task has completed the variant selection.
        ///
        /// - Parameter session: The session the asset download task is on.
        /// - Parameter assetDownloadTask: The asset download task.
        /// - Parameter variants: The variants chosen. Depends on the environmental condition when the download starts.
        #[optional]
        #[unsafe(method(URLSession:assetDownloadTask:willDownloadVariants:))]
        #[unsafe(method_family = none)]
        unsafe fn URLSession_assetDownloadTask_willDownloadVariants(
            &self,
            session: &NSURLSession,
            asset_download_task: &AVAssetDownloadTask,
            variants: &NSArray<AVAssetVariant>,
        );

        #[cfg(feature = "AVMetrics")]
        /// Sent when a download task receives an AVMetricEvent.
        ///
        /// - Parameter session: The NSURLSession corresponding to this AVAssetDownloadTask.
        /// - Parameter assetDownloadTask: The asset download task.
        /// - Parameter metricEvent: The metric event received.
        #[optional]
        #[unsafe(method(URLSession:assetDownloadTask:didReceiveMetricEvent:))]
        #[unsafe(method_family = none)]
        unsafe fn URLSession_assetDownloadTask_didReceiveMetricEvent(
            &self,
            session: &NSURLSession,
            asset_download_task: &AVAssetDownloadTask,
            metric_event: &AVMetricEvent,
        );
    }
);

extern_class!(
    /// A subclass of NSURLSession to support AVAssetDownloadTask.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avassetdownloadurlsession?language=objc)
    #[unsafe(super(NSURLSession, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVAssetDownloadURLSession;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVAssetDownloadURLSession {}
);

impl AVAssetDownloadURLSession {
    extern_methods!(
        /// Creates and initializes an AVAssetDownloadURLSession for use with AVAssetDownloadTasks.
        ///
        /// - Parameter configuration: The configuration for this URLSession. Must be a background configuration.
        /// - Parameter delegate: The delegate object to handle asset download progress updates and other session related events.
        /// - Parameter delegateQueue: The queue to receive delegate callbacks on. If nil, a serial queue will be provided.
        #[unsafe(method(sessionWithConfiguration:assetDownloadDelegate:delegateQueue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn sessionWithConfiguration_assetDownloadDelegate_delegateQueue(
            configuration: &NSURLSessionConfiguration,
            delegate: Option<&ProtocolObject<dyn AVAssetDownloadDelegate>>,
            delegate_queue: Option<&NSOperationQueue>,
        ) -> Retained<AVAssetDownloadURLSession>;

        #[cfg(feature = "AVAsset")]
        /// Creates and initializes an AVAssetDownloadTask to be used with this AVAssetDownloadURLSession.
        ///
        /// This method may return nil if the URLSession has been invalidated.
        ///
        /// - Parameter URLAsset: The AVURLAsset to download locally.
        /// - Parameter destinationURL: The local URL to download the asset to. This must be a file URL.
        /// - Parameter options: See AVAssetDownloadTask*Key above. Configures non-default behavior for the download task. Using this parameter is required for downloading non-default media selections for HLS assets.
        #[deprecated = "Use assetDownloadTaskWithURLAsset:assetTitle:assetArtworkData:options: instead"]
        #[unsafe(method(assetDownloadTaskWithURLAsset:destinationURL:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn assetDownloadTaskWithURLAsset_destinationURL_options(
            &self,
            url_asset: &AVURLAsset,
            destination_url: &NSURL,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Option<Retained<AVAssetDownloadTask>>;

        #[cfg(feature = "AVAsset")]
        /// Creates and initializes an AVAssetDownloadTask to be used with this AVAssetDownloadURLSession.
        ///
        /// This method may return nil if the URLSession has been invalidated.
        ///
        /// - Parameter URLAsset: The AVURLAsset to download locally.
        /// - Parameter title: A human readable title for this asset, expected to be as suitable as possible for the user's preferred languages. Will show up in the usage pane of the settings app.
        /// - Parameter artworkData: NSData representing artwork data for this asset. Optional. Will show up in the usage pane of the settings app. Must work with +[UIImage imageWithData:].
        /// - Parameter options: See AVAssetDownloadTask*Key above. Configures non-default behavior for the download task. Using this parameter is required for downloading non-default media selections for HLS assets.
        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[unsafe(method(assetDownloadTaskWithURLAsset:assetTitle:assetArtworkData:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn assetDownloadTaskWithURLAsset_assetTitle_assetArtworkData_options(
            &self,
            url_asset: &AVURLAsset,
            title: &NSString,
            artwork_data: Option<&NSData>,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Option<Retained<AVAssetDownloadTask>>;

        #[cfg(all(feature = "AVAsset", feature = "AVMediaSelection"))]
        /// Creates and initializes an AVAggregateAssetDownloadTask to download multiple AVMediaSelections on an AVURLAsset.
        ///
        /// This method may return nil if the URLSession has been invalidated. The value of AVAssetDownloadTaskMediaSelectionKey will be ignored.
        ///
        /// - Parameter URLAsset: The AVURLAsset to download locally.
        /// - Parameter mediaSelections: A list of AVMediaSelections. Each AVMediaSelection will correspond to a childAssetDownloadTask. Use -[AVAsset allMediaSelections] to download all AVMediaSelections on this AVAsset.
        /// - Parameter title: A human readable title for this asset, expected to be as suitable as possible for the user's preferred languages. Will show up in the usage pane of the settings app.
        /// - Parameter artworkData: Artwork data for this asset. Optional. Will show up in the usage pane of the settings app.
        /// - Parameter options: See AVAssetDownloadTask*Key above. Configures non-default behavior for the download task.
        #[deprecated = "Use assetDownloadTaskWithConfiguration: instead"]
        #[unsafe(method(aggregateAssetDownloadTaskWithURLAsset:mediaSelections:assetTitle:assetArtworkData:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn aggregateAssetDownloadTaskWithURLAsset_mediaSelections_assetTitle_assetArtworkData_options(
            &self,
            url_asset: &AVURLAsset,
            media_selections: &NSArray<AVMediaSelection>,
            title: &NSString,
            artwork_data: Option<&NSData>,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Option<Retained<AVAggregateAssetDownloadTask>>;

        /// Creates and initializes an AVAssetDownloadTask to be used with this AVAssetDownloadURLSession.
        ///
        /// This method will throw an exception if the URLSession has been invalidated.
        ///
        /// - Parameter downloadConfiguration: The configuration to be used to create the download task.
        #[unsafe(method(assetDownloadTaskWithConfiguration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn assetDownloadTaskWithConfiguration(
            &self,
            download_configuration: &AVAssetDownloadConfiguration,
        ) -> Retained<AVAssetDownloadTask>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(sharedSession))]
        #[unsafe(method_family = none)]
        pub unsafe fn sharedSession() -> Retained<NSURLSession>;

        #[unsafe(method(sessionWithConfiguration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn sessionWithConfiguration(
            configuration: &NSURLSessionConfiguration,
        ) -> Retained<NSURLSession>;

        #[unsafe(method(sessionWithConfiguration:delegate:delegateQueue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn sessionWithConfiguration_delegate_delegateQueue(
            configuration: &NSURLSessionConfiguration,
            delegate: Option<&ProtocolObject<dyn NSURLSessionDelegate>>,
            queue: Option<&NSOperationQueue>,
        ) -> Retained<NSURLSession>;

        #[unsafe(method(dataTaskWithRequest:))]
        #[unsafe(method_family = none)]
        pub unsafe fn dataTaskWithRequest(
            &self,
            request: &NSURLRequest,
        ) -> Retained<NSURLSessionDataTask>;

        #[unsafe(method(dataTaskWithURL:))]
        #[unsafe(method_family = none)]
        pub unsafe fn dataTaskWithURL(&self, url: &NSURL) -> Retained<NSURLSessionDataTask>;

        #[unsafe(method(uploadTaskWithRequest:fromFile:))]
        #[unsafe(method_family = none)]
        pub unsafe fn uploadTaskWithRequest_fromFile(
            &self,
            request: &NSURLRequest,
            file_url: &NSURL,
        ) -> Retained<NSURLSessionUploadTask>;

        #[unsafe(method(uploadTaskWithRequest:fromData:))]
        #[unsafe(method_family = none)]
        pub unsafe fn uploadTaskWithRequest_fromData(
            &self,
            request: &NSURLRequest,
            body_data: &NSData,
        ) -> Retained<NSURLSessionUploadTask>;

        #[unsafe(method(uploadTaskWithStreamedRequest:))]
        #[unsafe(method_family = none)]
        pub unsafe fn uploadTaskWithStreamedRequest(
            &self,
            request: &NSURLRequest,
        ) -> Retained<NSURLSessionUploadTask>;

        #[unsafe(method(downloadTaskWithRequest:))]
        #[unsafe(method_family = none)]
        pub unsafe fn downloadTaskWithRequest(
            &self,
            request: &NSURLRequest,
        ) -> Retained<NSURLSessionDownloadTask>;

        #[unsafe(method(downloadTaskWithURL:))]
        #[unsafe(method_family = none)]
        pub unsafe fn downloadTaskWithURL(&self, url: &NSURL)
            -> Retained<NSURLSessionDownloadTask>;

        #[unsafe(method(downloadTaskWithResumeData:))]
        #[unsafe(method_family = none)]
        pub unsafe fn downloadTaskWithResumeData(
            &self,
            resume_data: &NSData,
        ) -> Retained<NSURLSessionDownloadTask>;

        #[cfg(feature = "block2")]
        #[unsafe(method(dataTaskWithRequest:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn dataTaskWithRequest_completionHandler(
            &self,
            request: &NSURLRequest,
            completion_handler: &block2::DynBlock<
                dyn Fn(NonNull<NSData>, NonNull<NSURLResponse>, NonNull<NSError>),
            >,
        ) -> Retained<NSURLSessionDataTask>;

        #[cfg(feature = "block2")]
        #[unsafe(method(dataTaskWithURL:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn dataTaskWithURL_completionHandler(
            &self,
            url: &NSURL,
            completion_handler: &block2::DynBlock<
                dyn Fn(NonNull<NSData>, NonNull<NSURLResponse>, NonNull<NSError>),
            >,
        ) -> Retained<NSURLSessionDataTask>;

        #[cfg(feature = "block2")]
        #[unsafe(method(uploadTaskWithRequest:fromFile:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn uploadTaskWithRequest_fromFile_completionHandler(
            &self,
            request: &NSURLRequest,
            file_url: &NSURL,
            completion_handler: &block2::DynBlock<
                dyn Fn(NonNull<NSData>, NonNull<NSURLResponse>, NonNull<NSError>),
            >,
        ) -> Retained<NSURLSessionUploadTask>;

        #[cfg(feature = "block2")]
        #[unsafe(method(uploadTaskWithRequest:fromData:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn uploadTaskWithRequest_fromData_completionHandler(
            &self,
            request: &NSURLRequest,
            body_data: Option<&NSData>,
            completion_handler: &block2::DynBlock<
                dyn Fn(NonNull<NSData>, NonNull<NSURLResponse>, NonNull<NSError>),
            >,
        ) -> Retained<NSURLSessionUploadTask>;

        #[cfg(feature = "block2")]
        #[unsafe(method(downloadTaskWithRequest:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn downloadTaskWithRequest_completionHandler(
            &self,
            request: &NSURLRequest,
            completion_handler: &block2::DynBlock<
                dyn Fn(NonNull<NSURL>, NonNull<NSURLResponse>, NonNull<NSError>),
            >,
        ) -> Retained<NSURLSessionDownloadTask>;

        #[cfg(feature = "block2")]
        #[unsafe(method(downloadTaskWithURL:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn downloadTaskWithURL_completionHandler(
            &self,
            url: &NSURL,
            completion_handler: &block2::DynBlock<
                dyn Fn(NonNull<NSURL>, NonNull<NSURLResponse>, NonNull<NSError>),
            >,
        ) -> Retained<NSURLSessionDownloadTask>;

        #[cfg(feature = "block2")]
        #[unsafe(method(downloadTaskWithResumeData:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn downloadTaskWithResumeData_completionHandler(
            &self,
            resume_data: &NSData,
            completion_handler: &block2::DynBlock<
                dyn Fn(NonNull<NSURL>, NonNull<NSURLResponse>, NonNull<NSError>),
            >,
        ) -> Retained<NSURLSessionDownloadTask>;
    );
}
