//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [SPI] An instance of AVVideoPerformanceMetrics provides current performance metrics.
    ///
    /// An instance of AVVideoPerformanceMetrics provides named properties for accessing the video playback quality metrics.
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avvideoperformancemetrics?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVVideoPerformanceMetrics;
);

unsafe impl Send for AVVideoPerformanceMetrics {}

unsafe impl Sync for AVVideoPerformanceMetrics {}

extern_conformance!(
    unsafe impl NSObjectProtocol for AVVideoPerformanceMetrics {}
);

impl AVVideoPerformanceMetrics {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// [SPI] The total number of frames that would have been displayed if no frames are dropped.
        ///
        /// This property is not atomic.
        ///
        /// # Safety
        ///
        /// This might not be thread-safe.
        #[unsafe(method(totalNumberOfFrames))]
        #[unsafe(method_family = none)]
        pub unsafe fn totalNumberOfFrames(&self) -> NSInteger;

        /// [SPI] The total number of frames dropped prior to decoding or dropped because a frame missed its display deadline.
        ///
        /// This property is not atomic.
        ///
        /// # Safety
        ///
        /// This might not be thread-safe.
        #[unsafe(method(numberOfDroppedFrames))]
        #[unsafe(method_family = none)]
        pub unsafe fn numberOfDroppedFrames(&self) -> NSInteger;

        /// [SPI] The total number of corrupted frames that have been detected.
        ///
        /// This property is not atomic.
        ///
        /// # Safety
        ///
        /// This might not be thread-safe.
        #[unsafe(method(numberOfCorruptedFrames))]
        #[unsafe(method_family = none)]
        pub unsafe fn numberOfCorruptedFrames(&self) -> NSInteger;

        /// [SPI] The total number of full screen frames that were rendered in a special power-efficient mode that didn't require the frame to be composited with other UI elements.
        ///
        /// This property is not atomic.
        ///
        /// # Safety
        ///
        /// This might not be thread-safe.
        #[unsafe(method(numberOfFramesDisplayedUsingOptimizedCompositing))]
        #[unsafe(method_family = none)]
        pub unsafe fn numberOfFramesDisplayedUsingOptimizedCompositing(&self) -> NSInteger;

        /// [SPI] The accumulated amount of time between the prescribed presentation times of displayed video frames and the actual time at which they were displayed.
        ///
        /// This delay is always greater than or equal to zero since frames must never be displayed before their presentation time. Non-zero delays are a sign of playback jitter and possible loss of A/V sync.
        ///
        /// This property is not atomic.
        ///
        /// # Safety
        ///
        /// This might not be thread-safe.
        #[unsafe(method(totalAccumulatedFrameDelay))]
        #[unsafe(method_family = none)]
        pub unsafe fn totalAccumulatedFrameDelay(&self) -> NSTimeInterval;

        /// [SPI] The total number of frames that would have been displayed if no frames are dropped. Same as totalNumberOfFrames.
        ///
        /// This property is not atomic.
        ///
        /// # Safety
        ///
        /// This might not be thread-safe.
        #[unsafe(method(totalNumberOfVideoFrames))]
        #[unsafe(method_family = none)]
        pub unsafe fn totalNumberOfVideoFrames(&self) -> c_ulong;

        /// [SPI] The total number of frames dropped prior to decoding or dropped because a frame missed its display deadline. Same as numberOfDroppedFrames.
        ///
        /// This property is not atomic.
        ///
        /// # Safety
        ///
        /// This might not be thread-safe.
        #[unsafe(method(numberOfDroppedVideoFrames))]
        #[unsafe(method_family = none)]
        pub unsafe fn numberOfDroppedVideoFrames(&self) -> c_ulong;

        /// [SPI] The total number of corrupted frames that have been detected. Same as numberOfCorruptedFrames.
        ///
        /// This property is not atomic.
        ///
        /// # Safety
        ///
        /// This might not be thread-safe.
        #[unsafe(method(numberOfCorruptedVideoFrames))]
        #[unsafe(method_family = none)]
        pub unsafe fn numberOfCorruptedVideoFrames(&self) -> c_ulong;

        /// [SPI] The total number of frames that were composited in detached mode.  Same as numberOfFramesDisplayedUsingOptimizedCompositing.
        ///
        /// This property is not atomic.
        ///
        /// # Safety
        ///
        /// This might not be thread-safe.
        #[unsafe(method(numberOfDisplayCompositedVideoFrames))]
        #[unsafe(method_family = none)]
        pub unsafe fn numberOfDisplayCompositedVideoFrames(&self) -> c_ulong;

        /// [SPI] The total number of frames that were composited in undetached mode.
        ///
        /// This property is not atomic.
        ///
        /// # Safety
        ///
        /// This might not be thread-safe.
        #[unsafe(method(numberOfNonDisplayCompositedVideoFrames))]
        #[unsafe(method_family = none)]
        pub unsafe fn numberOfNonDisplayCompositedVideoFrames(&self) -> c_ulong;

        /// [SPI] The accumulated amount of time, in microseconds, between the prescribed presentation times of displayed video frames and the actual time at which they were displayed.
        ///
        /// This delay is always greater than or equal to zero since frames must never be displayed before their presentation time. Non-zero delays are a sign of playback jitter and possible loss of A/V sync. Same as totalAccumulatedFrameDelay.
        ///
        /// This property is not atomic.
        ///
        /// # Safety
        ///
        /// This might not be thread-safe.
        #[unsafe(method(totalFrameDelay))]
        #[unsafe(method_family = none)]
        pub unsafe fn totalFrameDelay(&self) -> c_double;
    );
}
