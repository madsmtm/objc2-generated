//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspreset?language=objc)
// NS_TYPED_ENUM
pub type AVOutputSettingsPreset = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspreset640x480?language=objc)
    pub static AVOutputSettingsPreset640x480: &'static AVOutputSettingsPreset;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspreset960x540?language=objc)
    pub static AVOutputSettingsPreset960x540: &'static AVOutputSettingsPreset;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspreset1280x720?language=objc)
    pub static AVOutputSettingsPreset1280x720: &'static AVOutputSettingsPreset;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspreset1920x1080?language=objc)
    pub static AVOutputSettingsPreset1920x1080: &'static AVOutputSettingsPreset;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspreset3840x2160?language=objc)
    pub static AVOutputSettingsPreset3840x2160: &'static AVOutputSettingsPreset;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspresethevc1920x1080?language=objc)
    pub static AVOutputSettingsPresetHEVC1920x1080: &'static AVOutputSettingsPreset;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspresethevc1920x1080withalpha?language=objc)
    pub static AVOutputSettingsPresetHEVC1920x1080WithAlpha: &'static AVOutputSettingsPreset;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspresethevc3840x2160?language=objc)
    pub static AVOutputSettingsPresetHEVC3840x2160: &'static AVOutputSettingsPreset;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspresethevc3840x2160withalpha?language=objc)
    pub static AVOutputSettingsPresetHEVC3840x2160WithAlpha: &'static AVOutputSettingsPreset;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspresethevc4320x2160?language=objc)
    pub static AVOutputSettingsPresetHEVC4320x2160: &'static AVOutputSettingsPreset;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspresethevc7680x4320?language=objc)
    pub static AVOutputSettingsPresetHEVC7680x4320: &'static AVOutputSettingsPreset;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspresetmvhevc960x960?language=objc)
    pub static AVOutputSettingsPresetMVHEVC960x960: &'static AVOutputSettingsPreset;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspresetmvhevc1440x1440?language=objc)
    pub static AVOutputSettingsPresetMVHEVC1440x1440: &'static AVOutputSettingsPreset;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspresetmvhevc4320x4320?language=objc)
    pub static AVOutputSettingsPresetMVHEVC4320x4320: &'static AVOutputSettingsPreset;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingspresetmvhevc7680x7680?language=objc)
    pub static AVOutputSettingsPresetMVHEVC7680x7680: &'static AVOutputSettingsPreset;
}

extern_class!(
    /// A class, each instance of which specifies a set of parameters for configuring objects that use output settings dictionaries, for example AVAssetWriter
    /// &
    /// AVAssetWriterInput, so that the resulting media file conforms to some specific criteria
    ///
    /// Instances of AVOutputSettingsAssistant are typically created using a string constant representing a specific preset configuration, such as AVOutputSettingsPreset1280x720.  Once you have an instance, its properties can be used as a guide for creating and configuring an AVAssetWriter object and one or more AVAssetWriterInput objects.  If all the suggested properties are respected, the resulting media file will conform to the criteria implied by the preset.  Alternatively, the properties of an instance can be used as a "base" configuration which can be customized to suit your individual needs.
    ///
    /// The recommendations made by an instance get better as you tell it more about the format of your source data.  For example, if you set the sourceVideoFormat property, the recommendation made by the videoSettings property will ensure that your video frames are not scaled up from a smaller size.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avoutputsettingsassistant?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVOutputSettingsAssistant;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVOutputSettingsAssistant {}
);

impl AVOutputSettingsAssistant {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns the list of presets that can be used to create an instance of AVOutputSettingsAssistant
        ///
        /// Returns: An NSArray of NSString objects, each of which is a preset identifier
        ///
        /// Each preset in the returned list can be passed in to +outputSettingsAssistantWithPreset: to create a new instance of AVOutputSettingsAssistant.
        ///
        /// On iOS, the returned array may be different between different device models.
        #[unsafe(method(availableOutputSettingsPresets))]
        #[unsafe(method_family = none)]
        pub unsafe fn availableOutputSettingsPresets() -> Retained<NSArray<AVOutputSettingsPreset>>;

        /// Returns an instance of AVOutputSettingsAssistant corresponding to the given preset
        ///
        /// Parameter `presetIdentifier`: The string identifier, for example AVOutputSettingsPreset1280x720, for the desired preset
        ///
        /// Returns: An instance of AVOutputSettingsAssistant with properties corresponding to the given preset, or nil if there is no such available preset.
        ///
        /// The properties of the returned object can be used as a guide for creating and configuring an AVAssetWriter object and one or more AVAssetWriterInput objects.  If all the suggested properties are respected in creating the AVAssetWriter, the resulting media file will conform to the criteria implied by the preset.
        ///
        /// Use +availableOutputSettingsPresets to get a list of presets identifiers that can be used with this method.
        #[unsafe(method(outputSettingsAssistantWithPreset:))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputSettingsAssistantWithPreset(
            preset_identifier: &AVOutputSettingsPreset,
        ) -> Option<Retained<Self>>;

        /// A dictionary of key/value pairs, as specified in AVAudioSettings.h, to be used when e.g. creating an instance of AVAssetWriterInput
        ///
        /// The value of this property may change as a result of setting a new value for the sourceAudioFormat property.
        #[unsafe(method(audioSettings))]
        #[unsafe(method_family = none)]
        pub unsafe fn audioSettings(&self) -> Option<Retained<NSDictionary<NSString, AnyObject>>>;

        /// A dictionary of key/value pairs, as specified in AVVideoSettings.h, to be used when e.g. creating an instance of AVAssetWriterInput
        ///
        /// The value of this property may change as a result of setting a new value for the sourceVideoFormat property.
        #[unsafe(method(videoSettings))]
        #[unsafe(method_family = none)]
        pub unsafe fn videoSettings(&self) -> Option<Retained<NSDictionary<NSString, AnyObject>>>;

        #[cfg(feature = "AVMediaFormat")]
        /// A UTI indicating the type of file to be written, to be used when e.g. creating an instance of AVAssetWriter
        ///
        /// Use [[UTType typeWithIdentifier:outputFileType] preferredFilenameExtension] to get a suitable file extension for a given file type.
        #[unsafe(method(outputFileType))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputFileType(&self) -> Retained<AVFileType>;
    );
}

/// AVOutputSettingsAssistant_SourceInformation.
impl AVOutputSettingsAssistant {
    extern_methods!(
        #[cfg(feature = "objc2-core-media")]
        /// A CMAudioFormatDescription object describing the format of you audio data
        ///
        /// Setting this property will allow the receiver to make a more informed recommendation for the audio settings that should be used.  After setting this property, you should re-query the audioSettings property to get the new recommendation.  The default value is NULL, which means that the receiver does not know anything about the format of your audio data.
        ///
        /// If you set a non-NULL value for this property, and are using the receiver to initialize an AVAssetWriterInput, the same format description should be used to initialize the AVAssetWriterInput, along with the dictionary from the audioSettings property.
        #[unsafe(method(sourceAudioFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn sourceAudioFormat(&self) -> Option<Retained<CMAudioFormatDescription>>;

        #[cfg(feature = "objc2-core-media")]
        /// Setter for [`sourceAudioFormat`][Self::sourceAudioFormat].
        #[unsafe(method(setSourceAudioFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSourceAudioFormat(
            &self,
            source_audio_format: Option<&CMAudioFormatDescription>,
        );

        #[cfg(feature = "objc2-core-media")]
        /// A CMVideoFormatDescription object describing the format of your video data
        ///
        /// Setting this property will allow the receiver to make a more informed recommendation for the video settings that should be used.  After setting this property, you should re-query the videoSettings property to get the new recommendation.  The default value is NULL, which means that the receiver does not know anything about the format of your video data.
        ///
        /// If you set a non-NULL value for this property, and are using the receiver to initialize an AVAssetWriterInput, the same format description should be used to initialize the AVAssetWriterInput, along with the dictionary from the videoSettings property.
        #[unsafe(method(sourceVideoFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn sourceVideoFormat(&self) -> Option<Retained<CMVideoFormatDescription>>;

        #[cfg(feature = "objc2-core-media")]
        /// Setter for [`sourceVideoFormat`][Self::sourceVideoFormat].
        #[unsafe(method(setSourceVideoFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSourceVideoFormat(
            &self,
            source_video_format: Option<&CMVideoFormatDescription>,
        );

        #[cfg(feature = "objc2-core-media")]
        /// A CMTime describing the average frame duration (reciprocal of average frame rate) of your video data
        ///
        /// Setting this property will allow the receiver to make a more informed recommendation for the video settings that should be used.  After setting this property, you should re-query the videoSettings property to get the new recommendation.
        ///
        /// The default value is 1/30, which means that the receiver is assuming that your source video has an average frame rate of 30fps.
        ///
        /// It is an error to set this property to a value that is not positive or not numeric.  See CMTIME_IS_NUMERIC.
        #[unsafe(method(sourceVideoAverageFrameDuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn sourceVideoAverageFrameDuration(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        /// Setter for [`sourceVideoAverageFrameDuration`][Self::sourceVideoAverageFrameDuration].
        #[unsafe(method(setSourceVideoAverageFrameDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSourceVideoAverageFrameDuration(
            &self,
            source_video_average_frame_duration: CMTime,
        );

        #[cfg(feature = "objc2-core-media")]
        /// A CMTime describing the minimum frame duration (reciprocal of the maximum frame rate) of your video data
        ///
        /// Setting this property will allow the receiver to make a more informed recommendation for the video settings that should be used.  After setting this property, you should re-query the videoSettings property to get the new recommendation.
        ///
        /// If your source of video data is an instance of AVAssetReaderOutput, you can discover the minimum frame duration of your source asset using the AVAssetTrack.minFrameDuration property.
        ///
        /// The default value is 1/30, which means that the receiver is assuming that your source video has a maximum frame rate of 30fps.
        ///
        /// It is an error to set this property to a value that is not positive or not numeric.  See CMTIME_IS_NUMERIC.
        #[unsafe(method(sourceVideoMinFrameDuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn sourceVideoMinFrameDuration(&self) -> CMTime;

        #[cfg(feature = "objc2-core-media")]
        /// Setter for [`sourceVideoMinFrameDuration`][Self::sourceVideoMinFrameDuration].
        #[unsafe(method(setSourceVideoMinFrameDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSourceVideoMinFrameDuration(
            &self,
            source_video_min_frame_duration: CMTime,
        );
    );
}
