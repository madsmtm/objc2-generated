//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Performs a conversion of canonical caption to conform to a specific format.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avcaptionformatconformer?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVCaptionFormatConformer;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVCaptionFormatConformer {}
);

impl AVCaptionFormatConformer {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVCaptionSettings")]
        /// Returns an instance of AVCaptionFormatConformer that can convert a canonical caption to conform to a specific format.
        ///
        /// Parameter `conversionSettings`: Describes the conversion operation for which the caption is to be conformed.
        ///
        /// Returns: A new instance of AVCaptionFormatConformer configured to perform the specified conversion.
        ///
        /// # Safety
        ///
        /// `conversion_settings` generic should be of the correct type.
        #[unsafe(method(captionFormatConformerWithConversionSettings:))]
        #[unsafe(method_family = none)]
        pub unsafe fn captionFormatConformerWithConversionSettings(
            conversion_settings: &NSDictionary<AVCaptionSettingsKey, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(feature = "AVCaptionSettings")]
        /// Returns an instance of AVCaptionFormatConformer that can convert a canonical caption to conform to a specific format.
        ///
        /// Parameter `conversionSettings`: Describes the conversion operation for which the caption is to be conformed.
        ///
        /// Returns: A new instance of AVCaptionFormatConformer configured to perform the specified conversion.
        ///
        /// This method throws an exception if the conversion setting's AVCaptionMediaTypeKey is not equal to AVMediaTypeClosedCaption, or if its AVCaptionMediaSubTypeKey is not equal to kCMClosedCaptionFormatType_CEA608.
        ///
        /// # Safety
        ///
        /// `conversion_settings` generic should be of the correct type.
        #[unsafe(method(initWithConversionSettings:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithConversionSettings(
            this: Allocated<Self>,
            conversion_settings: &NSDictionary<AVCaptionSettingsKey, AnyObject>,
        ) -> Retained<Self>;

        /// Specifies whether to conform the time range of a given canonical caption as well.
        ///
        /// When set to YES, conforms time range.
        /// When set to NO, the time range of the conformed caption will be same as a given canonical caption.
        /// In the case of conforming to CAE608 format, AVCaption is encoded so that each CAE608 control code (2 bytes) fits into 1 frame duration (1001/30000).
        /// When set to YES and if all the encoded data can not fit inside the canonical caption time range, the caption time range will be extended to fit all the data and will be returned in the conformed AVCaption.
        /// The default value is NO.
        #[unsafe(method(conformsCaptionsToTimeRange))]
        #[unsafe(method_family = none)]
        pub unsafe fn conformsCaptionsToTimeRange(&self) -> bool;

        /// Setter for [`conformsCaptionsToTimeRange`][Self::conformsCaptionsToTimeRange].
        #[unsafe(method(setConformsCaptionsToTimeRange:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setConformsCaptionsToTimeRange(&self, conforms_captions_to_time_range: bool);

        #[cfg(feature = "AVCaption")]
        /// Creates a format-compliant caption that conforms to a specific format by converting a given canonical caption.
        ///
        /// Parameter `caption`: Specifies a canonical caption to be converted.
        ///
        /// Parameter `outError`: A pointer where a NSError object may be returned.
        ///
        /// Returns: A format-compliant caption that conforms to a specific format.
        #[unsafe(method(conformedCaptionForCaption:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn conformedCaptionForCaption_error(
            &self,
            caption: &AVCaption,
        ) -> Result<Retained<AVCaption>, Retained<NSError>>;
    );
}
