//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "dispatch2")]
use dispatch2::*;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// This protocol needs to be implemented by interfaces intending to publish metric events to the event stream.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetriceventstreampublisher?language=objc)
    pub unsafe trait AVMetricEventStreamPublisher {}
);

extern_protocol!(
    /// This protocol needs to be implemented by the subscriber delegate to receive subscribed metric events.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetriceventstreamsubscriber?language=objc)
    pub unsafe trait AVMetricEventStreamSubscriber {
        /// Delegate callback to receive metric events.
        ///
        /// - Parameter event: The metric event.
        /// - Parameter publisher: The publisher which generated the current event.
        #[unsafe(method(publisher:didReceiveEvent:))]
        #[unsafe(method_family = none)]
        unsafe fn publisher_didReceiveEvent(
            &self,
            publisher: &ProtocolObject<dyn AVMetricEventStreamPublisher>,
            event: &AVMetricEvent,
        );
    }
);

extern_class!(
    /// AVMetricEventStream allows clients to add publishers and then subscribe to specific metric event classes from those publishers. Publishers are AVFoundation instances implementing AVMetricEventStreamPublisher. The interface allows clients to receive metric events via a subscriber delegate which implements AVMetricEventStreamSubscriber.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetriceventstream?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricEventStream;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricEventStream {}
);

impl AVMetricEventStream {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns an autoreleased instance.
        #[unsafe(method(eventStream))]
        #[unsafe(method_family = none)]
        pub unsafe fn eventStream() -> Retained<Self>;

        /// The publisher should be an AVFoundation instance conforming to AVMetricEventStreamPublisher.
        #[unsafe(method(addPublisher:))]
        #[unsafe(method_family = none)]
        pub unsafe fn addPublisher(
            &self,
            publisher: &ProtocolObject<dyn AVMetricEventStreamPublisher>,
        ) -> bool;

        #[cfg(feature = "dispatch2")]
        /// Set a subscriber delegate.
        ///
        /// - Parameter subscriber: A subscriber delegate object conforming to AVMetricEventStreamSubscriber.
        /// - Parameter queue: Dispatch queue for the delegate callbacks.
        #[unsafe(method(setSubscriber:queue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSubscriber_queue(
            &self,
            subscriber: &ProtocolObject<dyn AVMetricEventStreamSubscriber>,
            queue: Option<&DispatchQueue>,
        ) -> bool;

        /// Subscribe to a specific metric event class.
        ///
        /// - Parameter metricEventClass: Type of metric event class to subscribe to.
        #[unsafe(method(subscribeToMetricEvent:))]
        #[unsafe(method_family = none)]
        pub unsafe fn subscribeToMetricEvent(&self, metric_event_class: &AnyClass);

        /// Subscribe to set of metric event classes.
        ///
        /// - Parameter metricEventClasses: Set of metric event classes to subscribe to.
        #[unsafe(method(subscribeToMetricEvents:))]
        #[unsafe(method_family = none)]
        pub unsafe fn subscribeToMetricEvents(&self, metric_event_classes: &NSArray<AnyClass>);

        /// Subscribe to all metric event classes.
        #[unsafe(method(subscribeToAllMetricEvents))]
        #[unsafe(method_family = none)]
        pub unsafe fn subscribeToAllMetricEvents(&self);
    );
}

extern_class!(
    /// An abstract base class representing metric events.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetricevent?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricEvent;
);

unsafe impl Send for AVMetricEvent {}

unsafe impl Sync for AVMetricEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricEvent {}
);

impl AVMetricEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns the date when the event occurred.
        #[unsafe(method(date))]
        #[unsafe(method_family = none)]
        pub unsafe fn date(&self) -> Retained<NSDate>;

        #[cfg(feature = "objc2-core-media")]
        /// Returns the time in the media timeline when the event occured.
        #[unsafe(method(mediaTime))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaTime(&self) -> CMTime;

        /// A GUID that identifies the media session. If not available, value is nil.
        #[unsafe(method(sessionID))]
        #[unsafe(method_family = none)]
        pub unsafe fn sessionID(&self) -> Option<Retained<NSString>>;
    );
}

extern_class!(
    /// Represents a metric event when an error occurred.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetricerrorevent?language=objc)
    #[unsafe(super(AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricErrorEvent;
);

unsafe impl Send for AVMetricErrorEvent {}

unsafe impl Sync for AVMetricErrorEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricErrorEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricErrorEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricErrorEvent {}
);

impl AVMetricErrorEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns whether the error was recoverable.
        #[unsafe(method(didRecover))]
        #[unsafe(method_family = none)]
        pub unsafe fn didRecover(&self) -> bool;

        /// Returns the error encountered.
        #[unsafe(method(error))]
        #[unsafe(method_family = none)]
        pub unsafe fn error(&self) -> Retained<NSError>;
    );
}

extern_class!(
    /// Represents a metric event associated with media resource requests.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetricmediaresourcerequestevent?language=objc)
    #[unsafe(super(AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricMediaResourceRequestEvent;
);

unsafe impl Send for AVMetricMediaResourceRequestEvent {}

unsafe impl Sync for AVMetricMediaResourceRequestEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricMediaResourceRequestEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricMediaResourceRequestEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricMediaResourceRequestEvent {}
);

impl AVMetricMediaResourceRequestEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns the URL of the resource request. If no value is available, returns nil.
        #[unsafe(method(url))]
        #[unsafe(method_family = none)]
        pub unsafe fn url(&self) -> Option<Retained<NSURL>>;

        /// The IP address of the server. If not available, the value is nil.
        #[unsafe(method(serverAddress))]
        #[unsafe(method_family = none)]
        pub unsafe fn serverAddress(&self) -> Option<Retained<NSString>>;

        /// Returns the start time of the resource request.
        #[unsafe(method(requestStartTime))]
        #[unsafe(method_family = none)]
        pub unsafe fn requestStartTime(&self) -> Retained<NSDate>;

        /// Returns the end time of the resource request.
        #[unsafe(method(requestEndTime))]
        #[unsafe(method_family = none)]
        pub unsafe fn requestEndTime(&self) -> Retained<NSDate>;

        /// Returns the start time of the resource request response.
        #[unsafe(method(responseStartTime))]
        #[unsafe(method_family = none)]
        pub unsafe fn responseStartTime(&self) -> Retained<NSDate>;

        /// Returns the end time of the resource request response.
        #[unsafe(method(responseEndTime))]
        #[unsafe(method_family = none)]
        pub unsafe fn responseEndTime(&self) -> Retained<NSDate>;

        /// Returns the byte range downloaded for the resource request. If not available, the range start and end will be 0.
        #[unsafe(method(byteRange))]
        #[unsafe(method_family = none)]
        pub unsafe fn byteRange(&self) -> NSRange;

        /// Returns true if the resource was read from the cache.
        #[unsafe(method(wasReadFromCache))]
        #[unsafe(method_family = none)]
        pub unsafe fn wasReadFromCache(&self) -> bool;

        /// Returns the error event, if any, encountered during the resource request. If no value is present, returns nil.
        #[unsafe(method(errorEvent))]
        #[unsafe(method_family = none)]
        pub unsafe fn errorEvent(&self) -> Option<Retained<AVMetricErrorEvent>>;

        /// Returns the NSURLSessionTaskMetrics associated with the resource request. If no value is present, returns nil
        #[unsafe(method(networkTransactionMetrics))]
        #[unsafe(method_family = none)]
        pub unsafe fn networkTransactionMetrics(&self)
            -> Option<Retained<NSURLSessionTaskMetrics>>;
    );
}

extern_class!(
    /// Represents a metric event associated with a HLS playlist resource request.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetrichlsplaylistrequestevent?language=objc)
    #[unsafe(super(AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricHLSPlaylistRequestEvent;
);

unsafe impl Send for AVMetricHLSPlaylistRequestEvent {}

unsafe impl Sync for AVMetricHLSPlaylistRequestEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricHLSPlaylistRequestEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricHLSPlaylistRequestEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricHLSPlaylistRequestEvent {}
);

impl AVMetricHLSPlaylistRequestEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns the URL of the playlist. If no value is available, returns nil.
        #[unsafe(method(url))]
        #[unsafe(method_family = none)]
        pub unsafe fn url(&self) -> Option<Retained<NSURL>>;

        /// Returns true if the playlist request is for a multivariant playlist.
        #[unsafe(method(isMultivariantPlaylist))]
        #[unsafe(method_family = none)]
        pub unsafe fn isMultivariantPlaylist(&self) -> bool;

        #[cfg(feature = "AVMediaFormat")]
        /// Returns the media type. If the value cannot be determined, returns AVMediaTypeMuxed.
        #[unsafe(method(mediaType))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaType(&self) -> Retained<AVMediaType>;

        /// Returns the media resource request event which was used to satisfy the playlist.
        #[unsafe(method(mediaResourceRequestEvent))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaResourceRequestEvent(
            &self,
        ) -> Option<Retained<AVMetricMediaResourceRequestEvent>>;
    );
}

extern_class!(
    /// Represents a metric event associated with a HLS media segment resource request.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetrichlsmediasegmentrequestevent?language=objc)
    #[unsafe(super(AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricHLSMediaSegmentRequestEvent;
);

unsafe impl Send for AVMetricHLSMediaSegmentRequestEvent {}

unsafe impl Sync for AVMetricHLSMediaSegmentRequestEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricHLSMediaSegmentRequestEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricHLSMediaSegmentRequestEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricHLSMediaSegmentRequestEvent {}
);

impl AVMetricHLSMediaSegmentRequestEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns the URL of the media segment. If no value is available, returns nil.
        #[unsafe(method(url))]
        #[unsafe(method_family = none)]
        pub unsafe fn url(&self) -> Option<Retained<NSURL>>;

        /// Returns true if the media segment request is for a map segment.
        #[unsafe(method(isMapSegment))]
        #[unsafe(method_family = none)]
        pub unsafe fn isMapSegment(&self) -> bool;

        #[cfg(feature = "AVMediaFormat")]
        /// Returns the media type. If the value cannot be determined, returns AVMediaTypeMuxed.
        #[unsafe(method(mediaType))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaType(&self) -> Retained<AVMediaType>;

        /// Returns the byte range for the media segment. If not available, the range start and end will be 0.
        #[unsafe(method(byteRange))]
        #[unsafe(method_family = none)]
        pub unsafe fn byteRange(&self) -> NSRange;

        /// Returns the URL of the index file in which this segment was declared. If not available, returns nil.
        #[unsafe(method(indexFileURL))]
        #[unsafe(method_family = none)]
        pub unsafe fn indexFileURL(&self) -> Retained<NSURL>;

        /// Returns the duration of segment in seconds.
        #[unsafe(method(segmentDuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn segmentDuration(&self) -> NSTimeInterval;

        /// Returns the media resource request event which was used to satisfy the media segment.
        #[unsafe(method(mediaResourceRequestEvent))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaResourceRequestEvent(
            &self,
        ) -> Option<Retained<AVMetricMediaResourceRequestEvent>>;
    );
}

extern_class!(
    /// Represents a metric event associated with a HLS content key resource request.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetriccontentkeyrequestevent?language=objc)
    #[unsafe(super(AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricContentKeyRequestEvent;
);

unsafe impl Send for AVMetricContentKeyRequestEvent {}

unsafe impl Sync for AVMetricContentKeyRequestEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricContentKeyRequestEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricContentKeyRequestEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricContentKeyRequestEvent {}
);

impl AVMetricContentKeyRequestEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVContentKeySession")]
        /// Returns the content key specifier for the request.
        #[unsafe(method(contentKeySpecifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn contentKeySpecifier(&self) -> Retained<AVContentKeySpecifier>;

        #[cfg(feature = "AVMediaFormat")]
        /// Returns the media type. If the value cannot be determined, returns AVMediaTypeMuxed.
        #[unsafe(method(mediaType))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaType(&self) -> Retained<AVMediaType>;

        /// Returns whether the content key resource request was initiated by the client.
        #[unsafe(method(isClientInitiated))]
        #[unsafe(method_family = none)]
        pub unsafe fn isClientInitiated(&self) -> bool;

        /// Returns the media resource request event which was used to satisfy the content key.
        #[unsafe(method(mediaResourceRequestEvent))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaResourceRequestEvent(
            &self,
        ) -> Option<Retained<AVMetricMediaResourceRequestEvent>>;
    );
}

extern_class!(
    /// Represents a metric event when playback was likely to play through without stalling.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetricplayeritemlikelytokeepupevent?language=objc)
    #[unsafe(super(AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricPlayerItemLikelyToKeepUpEvent;
);

unsafe impl Send for AVMetricPlayerItemLikelyToKeepUpEvent {}

unsafe impl Sync for AVMetricPlayerItemLikelyToKeepUpEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricPlayerItemLikelyToKeepUpEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricPlayerItemLikelyToKeepUpEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricPlayerItemLikelyToKeepUpEvent {}
);

impl AVMetricPlayerItemLikelyToKeepUpEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVAssetVariant")]
        /// Returns the variant selected at the time likely to keep up is achieved. If no value is present, returns nil.
        #[unsafe(method(variant))]
        #[unsafe(method_family = none)]
        pub unsafe fn variant(&self) -> Option<Retained<AVAssetVariant>>;

        /// Returns the total time taken to reach likely to keep up.
        #[unsafe(method(timeTaken))]
        #[unsafe(method_family = none)]
        pub unsafe fn timeTaken(&self) -> NSTimeInterval;

        /// This property provides a collection of time ranges for which the player has the media data readily available. The ranges provided might be discontinuous.
        ///
        /// Returns an NSArray of NSValues containing CMTimeRanges.
        #[unsafe(method(loadedTimeRanges))]
        #[unsafe(method_family = none)]
        pub unsafe fn loadedTimeRanges(&self) -> Retained<NSArray<NSValue>>;
    );
}

extern_class!(
    /// Represents a metric event when playback was first likely to play through without stalling.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetricplayeriteminitiallikelytokeepupevent?language=objc)
    #[unsafe(super(AVMetricPlayerItemLikelyToKeepUpEvent, AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricPlayerItemInitialLikelyToKeepUpEvent;
);

unsafe impl Send for AVMetricPlayerItemInitialLikelyToKeepUpEvent {}

unsafe impl Sync for AVMetricPlayerItemInitialLikelyToKeepUpEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricPlayerItemInitialLikelyToKeepUpEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricPlayerItemInitialLikelyToKeepUpEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricPlayerItemInitialLikelyToKeepUpEvent {}
);

impl AVMetricPlayerItemInitialLikelyToKeepUpEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns the playlist request events required to reach likely to keep up.
        #[unsafe(method(playlistRequestEvents))]
        #[unsafe(method_family = none)]
        pub unsafe fn playlistRequestEvents(
            &self,
        ) -> Retained<NSArray<AVMetricHLSPlaylistRequestEvent>>;

        /// Returns the media segment request events required to reach likely to keep up.
        #[unsafe(method(mediaSegmentRequestEvents))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaSegmentRequestEvents(
            &self,
        ) -> Retained<NSArray<AVMetricHLSMediaSegmentRequestEvent>>;

        /// Returns the content key request required to reach likely to keep up.
        #[unsafe(method(contentKeyRequestEvents))]
        #[unsafe(method_family = none)]
        pub unsafe fn contentKeyRequestEvents(
            &self,
        ) -> Retained<NSArray<AVMetricContentKeyRequestEvent>>;
    );
}

extern_class!(
    /// Represents a metric event when playback rate change occurred.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetricplayeritemratechangeevent?language=objc)
    #[unsafe(super(AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricPlayerItemRateChangeEvent;
);

unsafe impl Send for AVMetricPlayerItemRateChangeEvent {}

unsafe impl Sync for AVMetricPlayerItemRateChangeEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricPlayerItemRateChangeEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricPlayerItemRateChangeEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricPlayerItemRateChangeEvent {}
);

impl AVMetricPlayerItemRateChangeEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns the playback rate after the rate change event.
        #[unsafe(method(rate))]
        #[unsafe(method_family = none)]
        pub unsafe fn rate(&self) -> c_double;

        /// Returns the playback rate before the rate change event.
        #[unsafe(method(previousRate))]
        #[unsafe(method_family = none)]
        pub unsafe fn previousRate(&self) -> c_double;

        #[cfg(feature = "AVAssetVariant")]
        /// Returns the variant being played at the time of rate change. If no value is present, returns nil.
        #[unsafe(method(variant))]
        #[unsafe(method_family = none)]
        pub unsafe fn variant(&self) -> Option<Retained<AVAssetVariant>>;
    );
}

extern_class!(
    /// Represents a metric event when playback stalled.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetricplayeritemstallevent?language=objc)
    #[unsafe(super(AVMetricPlayerItemRateChangeEvent, AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricPlayerItemStallEvent;
);

unsafe impl Send for AVMetricPlayerItemStallEvent {}

unsafe impl Sync for AVMetricPlayerItemStallEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricPlayerItemStallEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricPlayerItemStallEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricPlayerItemStallEvent {}
);

impl AVMetricPlayerItemStallEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// Represents a metric event when playback seeked.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetricplayeritemseekevent?language=objc)
    #[unsafe(super(AVMetricPlayerItemRateChangeEvent, AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricPlayerItemSeekEvent;
);

unsafe impl Send for AVMetricPlayerItemSeekEvent {}

unsafe impl Sync for AVMetricPlayerItemSeekEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricPlayerItemSeekEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricPlayerItemSeekEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricPlayerItemSeekEvent {}
);

impl AVMetricPlayerItemSeekEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// Represents a metric event when playback seek completed.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetricplayeritemseekdidcompleteevent?language=objc)
    #[unsafe(super(AVMetricPlayerItemRateChangeEvent, AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricPlayerItemSeekDidCompleteEvent;
);

unsafe impl Send for AVMetricPlayerItemSeekDidCompleteEvent {}

unsafe impl Sync for AVMetricPlayerItemSeekDidCompleteEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricPlayerItemSeekDidCompleteEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricPlayerItemSeekDidCompleteEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricPlayerItemSeekDidCompleteEvent {}
);

impl AVMetricPlayerItemSeekDidCompleteEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns whether the seek was performed within the available buffer.
        #[unsafe(method(didSeekInBuffer))]
        #[unsafe(method_family = none)]
        pub unsafe fn didSeekInBuffer(&self) -> bool;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetricmediarendition?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricMediaRendition;
);

unsafe impl Send for AVMetricMediaRendition {}

unsafe impl Sync for AVMetricMediaRendition {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricMediaRendition {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricMediaRendition {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricMediaRendition {}
);

impl AVMetricMediaRendition {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Provides ID corresponding to the rendition. This is equivalent to the
        /// STABLE-RENDITION-ID in the HLS playlist. If not available, value is nil.
        #[unsafe(method(stableID))]
        #[unsafe(method_family = none)]
        pub unsafe fn stableID(&self) -> Option<Retained<NSString>>;

        /// Provides URL corresponding to the rendition's HLS playlist. If not available,
        /// value is nil.
        #[unsafe(method(URL))]
        #[unsafe(method_family = none)]
        pub unsafe fn URL(&self) -> Option<Retained<NSURL>>;
    );
}

extern_class!(
    /// Represents a metric event when variant switch was completed.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetricplayeritemvariantswitchevent?language=objc)
    #[unsafe(super(AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricPlayerItemVariantSwitchEvent;
);

unsafe impl Send for AVMetricPlayerItemVariantSwitchEvent {}

unsafe impl Sync for AVMetricPlayerItemVariantSwitchEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricPlayerItemVariantSwitchEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricPlayerItemVariantSwitchEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricPlayerItemVariantSwitchEvent {}
);

impl AVMetricPlayerItemVariantSwitchEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVAssetVariant")]
        /// Returns the variant before the switch. If no value is available, returns nil
        #[unsafe(method(fromVariant))]
        #[unsafe(method_family = none)]
        pub unsafe fn fromVariant(&self) -> Option<Retained<AVAssetVariant>>;

        #[cfg(feature = "AVAssetVariant")]
        /// Returns the variant after the switch.
        #[unsafe(method(toVariant))]
        #[unsafe(method_family = none)]
        pub unsafe fn toVariant(&self) -> Retained<AVAssetVariant>;

        /// This property provides a collection of time ranges for which the player has the media data readily available. The ranges provided might be discontinuous.
        ///
        /// Returns an NSArray of NSValues containing CMTimeRanges.
        #[unsafe(method(loadedTimeRanges))]
        #[unsafe(method_family = none)]
        pub unsafe fn loadedTimeRanges(&self) -> Retained<NSArray<NSValue>>;

        /// Represents the currently selected video rendition's identifiers.
        ///
        /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
        #[unsafe(method(videoRendition))]
        #[unsafe(method_family = none)]
        pub unsafe fn videoRendition(&self) -> Retained<AVMetricMediaRendition>;

        /// Represents the currently selected video rendition's identifiers.
        ///
        /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
        #[unsafe(method(audioRendition))]
        #[unsafe(method_family = none)]
        pub unsafe fn audioRendition(&self) -> Retained<AVMetricMediaRendition>;

        /// Represents the currently selected audio rendition's identifiers.
        ///
        /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
        #[unsafe(method(subtitleRendition))]
        #[unsafe(method_family = none)]
        pub unsafe fn subtitleRendition(&self) -> Retained<AVMetricMediaRendition>;

        /// Returns if the switch did succeed.
        #[unsafe(method(didSucceed))]
        #[unsafe(method_family = none)]
        pub unsafe fn didSucceed(&self) -> bool;
    );
}

extern_class!(
    /// Represents a metric event when variant switch was attempted.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetricplayeritemvariantswitchstartevent?language=objc)
    #[unsafe(super(AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricPlayerItemVariantSwitchStartEvent;
);

unsafe impl Send for AVMetricPlayerItemVariantSwitchStartEvent {}

unsafe impl Sync for AVMetricPlayerItemVariantSwitchStartEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricPlayerItemVariantSwitchStartEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricPlayerItemVariantSwitchStartEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricPlayerItemVariantSwitchStartEvent {}
);

impl AVMetricPlayerItemVariantSwitchStartEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "AVAssetVariant")]
        /// Returns the variant from which the switch is attempted. If no value is available, returns nil
        #[unsafe(method(fromVariant))]
        #[unsafe(method_family = none)]
        pub unsafe fn fromVariant(&self) -> Option<Retained<AVAssetVariant>>;

        #[cfg(feature = "AVAssetVariant")]
        /// Returns the variant to which the switch is attempted.
        #[unsafe(method(toVariant))]
        #[unsafe(method_family = none)]
        pub unsafe fn toVariant(&self) -> Retained<AVAssetVariant>;

        /// This property provides a collection of time ranges for which the player has the media data readily available. The ranges provided might be discontinuous.
        ///
        /// Returns an NSArray of NSValues containing CMTimeRanges.
        #[unsafe(method(loadedTimeRanges))]
        #[unsafe(method_family = none)]
        pub unsafe fn loadedTimeRanges(&self) -> Retained<NSArray<NSValue>>;

        /// Contains information corresponding to the currently selected video rendition.
        #[unsafe(method(videoRendition))]
        #[unsafe(method_family = none)]
        pub unsafe fn videoRendition(&self) -> Retained<AVMetricMediaRendition>;

        /// Contains information corresponding to the currently selected audio rendition.
        #[unsafe(method(audioRendition))]
        #[unsafe(method_family = none)]
        pub unsafe fn audioRendition(&self) -> Retained<AVMetricMediaRendition>;

        /// Contains information corresponding to the currently selected subtitle rendition.
        #[unsafe(method(subtitleRendition))]
        #[unsafe(method_family = none)]
        pub unsafe fn subtitleRendition(&self) -> Retained<AVMetricMediaRendition>;
    );
}

extern_class!(
    /// Represents a summary metric event with aggregated metrics for the entire playback session.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetricplayeritemplaybacksummaryevent?language=objc)
    #[unsafe(super(AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricPlayerItemPlaybackSummaryEvent;
);

unsafe impl Send for AVMetricPlayerItemPlaybackSummaryEvent {}

unsafe impl Sync for AVMetricPlayerItemPlaybackSummaryEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricPlayerItemPlaybackSummaryEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricPlayerItemPlaybackSummaryEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricPlayerItemPlaybackSummaryEvent {}
);

impl AVMetricPlayerItemPlaybackSummaryEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns the error event if any. If no value is available, returns nil.
        #[unsafe(method(errorEvent))]
        #[unsafe(method_family = none)]
        pub unsafe fn errorEvent(&self) -> Option<Retained<AVMetricErrorEvent>>;

        /// Returns the total count of recoverable errors encountered during playback. If no errors were encountered, returns 0.
        #[unsafe(method(recoverableErrorCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn recoverableErrorCount(&self) -> NSInteger;

        /// Returns the total count of stalls encountered during playback. If no stalls were encountered, returns 0.
        #[unsafe(method(stallCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn stallCount(&self) -> NSInteger;

        /// Returns the total count of variant switch encountered during playback.
        #[unsafe(method(variantSwitchCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn variantSwitchCount(&self) -> NSInteger;

        /// Returns the total duration of playback in seconds.
        #[unsafe(method(playbackDuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn playbackDuration(&self) -> NSInteger;

        /// Returns the total number of media requests performed by the player. This includes playlist requests, media segment requests, and content key requests.
        #[unsafe(method(mediaResourceRequestCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaResourceRequestCount(&self) -> NSInteger;

        /// Returns the total time spent recovering from a stall event.
        #[unsafe(method(timeSpentRecoveringFromStall))]
        #[unsafe(method_family = none)]
        pub unsafe fn timeSpentRecoveringFromStall(&self) -> NSTimeInterval;

        /// Returns the total time spent in initial startup of playback.
        #[unsafe(method(timeSpentInInitialStartup))]
        #[unsafe(method_family = none)]
        pub unsafe fn timeSpentInInitialStartup(&self) -> NSTimeInterval;

        /// Returns the playtime weighted average bitrate played in bits / second.
        #[unsafe(method(timeWeightedAverageBitrate))]
        #[unsafe(method_family = none)]
        pub unsafe fn timeWeightedAverageBitrate(&self) -> NSInteger;

        /// Returns the playtime weighted peak bitrate played in bits / second.
        #[unsafe(method(timeWeightedPeakBitrate))]
        #[unsafe(method_family = none)]
        pub unsafe fn timeWeightedPeakBitrate(&self) -> NSInteger;
    );
}

extern_class!(
    /// Represents a summary metric event with aggregated metrics for the entire download task.
    ///
    /// Subclasses of this type that are used from Swift must fulfill the requirements of a Sendable type.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/avfoundation/avmetricdownloadsummaryevent?language=objc)
    #[unsafe(super(AVMetricEvent, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AVMetricDownloadSummaryEvent;
);

unsafe impl Send for AVMetricDownloadSummaryEvent {}

unsafe impl Sync for AVMetricDownloadSummaryEvent {}

extern_conformance!(
    unsafe impl NSCoding for AVMetricDownloadSummaryEvent {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AVMetricDownloadSummaryEvent {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AVMetricDownloadSummaryEvent {}
);

impl AVMetricDownloadSummaryEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Returns the error event if any. If no value is available, returns nil.
        #[unsafe(method(errorEvent))]
        #[unsafe(method_family = none)]
        pub unsafe fn errorEvent(&self) -> Option<Retained<AVMetricErrorEvent>>;

        /// Returns the total count of recoverable errors encountered during the download. If no errors were encountered, returns 0.
        ///
        /// Error counts may not be consistent across OS versions. Comparisons should be made within a given OS version, as error reporting is subject to change with OS updates.
        #[unsafe(method(recoverableErrorCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn recoverableErrorCount(&self) -> NSInteger;

        /// Returns the total number of media requests performed by the download task. This includes playlist requests, media segment requests, and content key requests.
        #[unsafe(method(mediaResourceRequestCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaResourceRequestCount(&self) -> NSInteger;

        /// Returns the total number of bytes downloaded by the download task.
        #[unsafe(method(bytesDownloadedCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn bytesDownloadedCount(&self) -> NSInteger;

        /// Returns the total duration of the download in seconds.
        #[unsafe(method(downloadDuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn downloadDuration(&self) -> NSTimeInterval;

        #[cfg(feature = "AVAssetVariant")]
        /// Returns the variants that were downloaded.
        #[unsafe(method(variants))]
        #[unsafe(method_family = none)]
        pub unsafe fn variants(&self) -> Retained<NSArray<AVAssetVariant>>;
    );
}
