//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-ui-kit")]
#[cfg(any(target_os = "ios", target_os = "tvos", target_os = "visionos"))]
use objc2_ui_kit::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/videosubscriberaccount/vsopentvprovidersettingsurlstring?language=objc)
    pub static VSOpenTVProviderSettingsURLString: &'static NSString;
}

/// Represents the current state of the application's access to the user's subscription information.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/videosubscriberaccount/vsaccountaccessstatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct VSAccountAccessStatus(pub NSInteger);
impl VSAccountAccessStatus {
    #[doc(alias = "VSAccountAccessStatusNotDetermined")]
    pub const NotDetermined: Self = Self(0);
    #[doc(alias = "VSAccountAccessStatusRestricted")]
    pub const Restricted: Self = Self(1);
    #[doc(alias = "VSAccountAccessStatusDenied")]
    pub const Denied: Self = Self(2);
    #[doc(alias = "VSAccountAccessStatusGranted")]
    pub const Granted: Self = Self(3);
}

unsafe impl Encode for VSAccountAccessStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for VSAccountAccessStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Options that may be provided when checking access status.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/videosubscriberaccount/vscheckaccessoption?language=objc)
// NS_TYPED_ENUM
pub type VSCheckAccessOption = NSString;

extern "C" {
    /// A boolean indicating whether the user may be prompted to grant access.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videosubscriberaccount/vscheckaccessoptionprompt?language=objc)
    pub static VSCheckAccessOptionPrompt: &'static VSCheckAccessOption;
}

extern_class!(
    /// A VSAccountManager instance coordinates access to a subscriber's account.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videosubscriberaccount/vsaccountmanager?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct VSAccountManager;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for VSAccountManager {}
);

impl VSAccountManager {
    extern_methods!(
        /// An object that can help the account manager by presenting and dismissing view controllers when needed, and deciding whether to allow authentication with the selected provider.
        /// Some requests may fail if a delegate is not provided.  For example, an account metadata request may require a delegate if it allows interruption.
        #[unsafe(method(delegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn VSAccountManagerDelegate>>>;

        /// Setter for [`delegate`][Self::delegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        #[unsafe(method(setDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn VSAccountManagerDelegate>>,
        );

        #[cfg(feature = "block2")]
        /// Determine the state of the application's access to the user's subscription information.
        ///
        /// Parameter `options`: The only currently supported option key is VSCheckAccessOptionPrompt.
        ///
        /// Parameter `completionHandler`: A block to be called when the request finishes.  It will always be called exactly once.  It may be called before the method call returns.  It may be called on any queue.
        ///
        /// Parameter `accessStatus`: The current state the application's access to the user's subscription information.
        ///
        /// Parameter `error`: If the user did not grant access to the app, this will contain an error describing the result of the operation.
        #[unsafe(method(checkAccessStatusWithOptions:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn checkAccessStatusWithOptions_completionHandler(
            &self,
            options: &NSDictionary<VSCheckAccessOption, AnyObject>,
            completion_handler: &block2::DynBlock<dyn Fn(VSAccountAccessStatus, *mut NSError)>,
        );

        #[cfg(all(
            feature = "VSAccountManagerResult",
            feature = "VSAccountMetadata",
            feature = "VSAccountMetadataRequest",
            feature = "block2"
        ))]
        /// Begins requesting information about the subscriber's account.
        ///
        /// Parameter `request`: This identifies what specific information the app wants to know.
        ///
        /// Parameter `completionHandler`: A block to be called when the request finishes.  It will always be called exactly once.  It may be called before the method call returns.  It may be called on any queue.
        ///
        /// Parameter `metadata`: If the request finished successfully, this will contain information about the subscriber's account.
        ///
        /// Parameter `error`: If the request did not finish successfully, this will contain an error describing the result of the operation.
        ///
        /// Returns: A result object that may be used to cancel the in-flight request.  Cancellation is advisory, and does not guarantee that the request will finish immediately.
        #[unsafe(method(enqueueAccountMetadataRequest:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn enqueueAccountMetadataRequest_completionHandler(
            &self,
            request: &VSAccountMetadataRequest,
            completion_handler: &block2::DynBlock<dyn Fn(*mut VSAccountMetadata, *mut NSError)>,
        ) -> Retained<VSAccountManagerResult>;
    );
}

/// Methods declared on superclass `NSObject`.
impl VSAccountManager {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_protocol!(
    /// A VSAccountManager instance coordinates access to a subscriber's account.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videosubscriberaccount/vsaccountmanagerdelegate?language=objc)
    pub unsafe trait VSAccountManagerDelegate: NSObjectProtocol {
        #[cfg(feature = "objc2-ui-kit")]
        #[cfg(any(target_os = "ios", target_os = "tvos", target_os = "visionos"))]
        /// Called when the account manager needs user interaction to complete a request.
        ///
        /// Parameter `accountManager`: The account manager instance that needs to show the view controller.
        ///
        /// Parameter `viewController`: A view controller that needs to be presented to the user.  You must use -presentViewController:animated:completion: to begin presenting this view controller before returning from this method.
        #[unsafe(method(accountManager:presentViewController:))]
        #[unsafe(method_family = none)]
        unsafe fn accountManager_presentViewController(
            &self,
            account_manager: &VSAccountManager,
            view_controller: &UIViewController,
        );

        #[cfg(feature = "objc2-ui-kit")]
        #[cfg(any(target_os = "ios", target_os = "tvos", target_os = "visionos"))]
        /// Called when the account manager is finished using the presented view controller.
        ///
        /// Parameter `accountManager`: The account manager instance that previously asked to show the view controller.
        ///
        /// Parameter `viewController`: The view controller that is being presented to the user.  You must use -dismissViewControllerAnimated:completion: to begin dismissing the view controller before returning from this method.
        #[unsafe(method(accountManager:dismissViewController:))]
        #[unsafe(method_family = none)]
        unsafe fn accountManager_dismissViewController(
            &self,
            account_manager: &VSAccountManager,
            view_controller: &UIViewController,
        );

        /// This method can be used to temporarily refrain from authenticating with an
        /// otherwise-supported provider during a transient outage.
        /// This method will be called when the user chooses a supported provider from
        /// the list of providers.
        /// If you do not implement this method, the user will be able to authenticate
        /// with all supported providers.
        ///
        /// Parameter `accountManager`: The account manager instance that received a metadata request.
        ///
        /// Parameter `accountProviderIdentifier`: Identifies the otherwise-supported account provider.
        ///
        /// Returns: Returning NO will cause the request will fail with an unsupported provider error.
        #[optional]
        #[unsafe(method(accountManager:shouldAuthenticateAccountProviderWithIdentifier:))]
        #[unsafe(method_family = none)]
        unsafe fn accountManager_shouldAuthenticateAccountProviderWithIdentifier(
            &self,
            account_manager: &VSAccountManager,
            account_provider_identifier: &NSString,
        ) -> bool;
    }
);
