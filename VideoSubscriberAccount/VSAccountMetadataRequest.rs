//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Specifies which information the app wants to obtain about the subscriber's account.
    /// You should only request the information you need to fulfill your contractual obligations.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videosubscriberaccount/vsaccountmetadatarequest?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct VSAccountMetadataRequest;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for VSAccountMetadataRequest {}
);

impl VSAccountMetadataRequest {
    extern_methods!(
        /// Identifies who is making the request.
        /// For use by applications using the SAML authentication scheme only.
        #[unsafe(method(channelIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn channelIdentifier(&self) -> Option<Retained<NSString>>;

        /// Setter for [`channelIdentifier`][Self::channelIdentifier].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setChannelIdentifier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setChannelIdentifier(&self, channel_identifier: Option<&NSString>);

        /// If non-empty, limits which account providers can respond to the request.
        #[unsafe(method(supportedAccountProviderIdentifiers))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedAccountProviderIdentifiers(&self) -> Retained<NSArray<NSString>>;

        /// Setter for [`supportedAccountProviderIdentifiers`][Self::supportedAccountProviderIdentifiers].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setSupportedAccountProviderIdentifiers:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSupportedAccountProviderIdentifiers(
            &self,
            supported_account_provider_identifiers: &NSArray<NSString>,
        );

        /// If non-empty, specifies providers which may be given more prominent placement
        /// when choosing an account provider during authentication.
        #[unsafe(method(featuredAccountProviderIdentifiers))]
        #[unsafe(method_family = none)]
        pub unsafe fn featuredAccountProviderIdentifiers(&self) -> Retained<NSArray<NSString>>;

        /// Setter for [`featuredAccountProviderIdentifiers`][Self::featuredAccountProviderIdentifiers].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setFeaturedAccountProviderIdentifiers:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFeaturedAccountProviderIdentifiers(
            &self,
            featured_account_provider_identifiers: &NSArray<NSString>,
        );

        /// A value that the account provider may use to verify the identity of the requesting app.
        #[unsafe(method(verificationToken))]
        #[unsafe(method_family = none)]
        pub unsafe fn verificationToken(&self) -> Option<Retained<NSString>>;

        /// Setter for [`verificationToken`][Self::verificationToken].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setVerificationToken:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setVerificationToken(&self, verification_token: Option<&NSString>);

        /// Whether to request information that identifies the account provider.
        #[unsafe(method(includeAccountProviderIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn includeAccountProviderIdentifier(&self) -> bool;

        /// Setter for [`includeAccountProviderIdentifier`][Self::includeAccountProviderIdentifier].
        #[unsafe(method(setIncludeAccountProviderIdentifier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setIncludeAccountProviderIdentifier(
            &self,
            include_account_provider_identifier: bool,
        );

        /// Whether to request the expiration date of the subscriber's current authentication.
        #[unsafe(method(includeAuthenticationExpirationDate))]
        #[unsafe(method_family = none)]
        pub unsafe fn includeAuthenticationExpirationDate(&self) -> bool;

        /// Setter for [`includeAuthenticationExpirationDate`][Self::includeAuthenticationExpirationDate].
        #[unsafe(method(setIncludeAuthenticationExpirationDate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setIncludeAuthenticationExpirationDate(
            &self,
            include_authentication_expiration_date: bool,
        );

        /// A brief, user-presentable name for the video that the app will play if it receives a successful response.
        /// For example, "What's New in Swift" or "Office Space"
        /// Do not provide a value if the request will not be used to play a specific video.
        #[unsafe(method(localizedVideoTitle))]
        #[unsafe(method_family = none)]
        pub unsafe fn localizedVideoTitle(&self) -> Option<Retained<NSString>>;

        /// Setter for [`localizedVideoTitle`][Self::localizedVideoTitle].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setLocalizedVideoTitle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setLocalizedVideoTitle(&self, localized_video_title: Option<&NSString>);

        /// Whether the user might expect to be prompted to authenticate in order to complete this request.
        #[unsafe(method(isInterruptionAllowed))]
        #[unsafe(method_family = none)]
        pub unsafe fn isInterruptionAllowed(&self) -> bool;

        /// Setter for [`isInterruptionAllowed`][Self::isInterruptionAllowed].
        #[unsafe(method(setInterruptionAllowed:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInterruptionAllowed(&self, interruption_allowed: bool);

        /// Requests that the TV Provider reauthenticate the user if they are already authenticated.
        #[unsafe(method(forceAuthentication))]
        #[unsafe(method_family = none)]
        pub unsafe fn forceAuthentication(&self) -> bool;

        /// Setter for [`forceAuthentication`][Self::forceAuthentication].
        #[unsafe(method(setForceAuthentication:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setForceAuthentication(&self, force_authentication: bool);

        /// Attributes to add to a SAML attributeQuery request and sent to the account provider.
        #[unsafe(method(attributeNames))]
        #[unsafe(method_family = none)]
        pub unsafe fn attributeNames(&self) -> Retained<NSArray<NSString>>;

        /// Setter for [`attributeNames`][Self::attributeNames].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setAttributeNames:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAttributeNames(&self, attribute_names: &NSArray<NSString>);

        #[cfg(feature = "VSAccountProviderResponse")]
        /// The collection of authentication schemes that the app supports for this request.
        /// This list may be used to determine compatibility of the app with providers.
        /// Defaults to SAML.
        #[unsafe(method(supportedAuthenticationSchemes))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedAuthenticationSchemes(
            &self,
        ) -> Retained<NSArray<VSAccountProviderAuthenticationScheme>>;

        #[cfg(feature = "VSAccountProviderResponse")]
        /// Setter for [`supportedAuthenticationSchemes`][Self::supportedAuthenticationSchemes].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setSupportedAuthenticationSchemes:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSupportedAuthenticationSchemes(
            &self,
            supported_authentication_schemes: &NSArray<VSAccountProviderAuthenticationScheme>,
        );

        /// A value that an account provider application may set to pass an existing authentication session.
        /// For use by TV Provider applications only.
        #[unsafe(method(accountProviderAuthenticationToken))]
        #[unsafe(method_family = none)]
        pub unsafe fn accountProviderAuthenticationToken(&self) -> Option<Retained<NSString>>;

        /// Setter for [`accountProviderAuthenticationToken`][Self::accountProviderAuthenticationToken].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setAccountProviderAuthenticationToken:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAccountProviderAuthenticationToken(
            &self,
            account_provider_authentication_token: Option<&NSString>,
        );

        #[cfg(feature = "VSAccountApplicationProvider")]
        /// Application-specific providers to be added to the list of account providers.
        #[unsafe(method(applicationAccountProviders))]
        #[unsafe(method_family = none)]
        pub unsafe fn applicationAccountProviders(
            &self,
        ) -> Option<Retained<NSArray<VSAccountApplicationProvider>>>;

        #[cfg(feature = "VSAccountApplicationProvider")]
        /// Setter for [`applicationAccountProviders`][Self::applicationAccountProviders].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setApplicationAccountProviders:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setApplicationAccountProviders(
            &self,
            application_account_providers: Option<&NSArray<VSAccountApplicationProvider>>,
        );
    );
}

/// Methods declared on superclass `NSObject`.
impl VSAccountMetadataRequest {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
