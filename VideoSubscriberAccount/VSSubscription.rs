//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// Describes the level of access to content.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/videosubscriberaccount/vssubscriptionaccesslevel?language=objc)
// NS_ENUM
#[deprecated = "Use VSUserAccount and VSUserAccountType instead."]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct VSSubscriptionAccessLevel(pub NSInteger);
impl VSSubscriptionAccessLevel {
    #[doc(alias = "VSSubscriptionAccessLevelUnknown")]
    #[deprecated = "Use VSUserAccount and VSUserAccountType instead."]
    pub const Unknown: Self = Self(0);
    /// The default access level. Setting a subscription with this level will raise an exception.
    #[doc(alias = "VSSubscriptionAccessLevelFreeWithAccount")]
    #[deprecated = "Use VSUserAccount and VSUserAccountType instead."]
    pub const FreeWithAccount: Self = Self(1);
    /// The customer has access to content that is offered for free to users with a valid account.  This value corresponds content in your availability feed with the "account" offering type.
    #[doc(alias = "VSSubscriptionAccessLevelPaid")]
    #[deprecated = "Use VSUserAccount and VSUserAccountType instead."]
    pub const Paid: Self = Self(2);
}

unsafe impl Encode for VSSubscriptionAccessLevel {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for VSSubscriptionAccessLevel {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// A VSSubscription instance describes the extent to which a subscriber has
    /// access to content.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/videosubscriberaccount/vssubscription?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[deprecated = "Use VSUserAccount instead."]
    pub struct VSSubscription;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for VSSubscription {}
);

impl VSSubscription {
    extern_methods!(
        /// After this point in time, the subscription will be considered inactive.
        ///
        /// If the current subscription becomes inactive, the system will behave as
        /// though the user is not subscribed at all, i.e. as though the registration
        /// center's current subscription had been set to nil.
        ///
        /// Defaults to distantFuture.
        ///
        /// Providing a value is useful in a limited number of scenarios, e.g. when the
        /// a subscriber decides not to renew their subscription, you should provide an
        /// expiration date that corresponds to the point in time when the final billing
        /// cycle will end.
        ///
        /// This might also be useful if the subscription only grants access to content
        /// that is time-limited, e.g. a single season of games for a sports league.
        #[deprecated = "Use VSUserAccount instead."]
        #[unsafe(method(expirationDate))]
        #[unsafe(method_family = none)]
        pub unsafe fn expirationDate(&self) -> Retained<NSDate>;

        /// Setter for [`expirationDate`][Self::expirationDate].
        #[deprecated = "Use VSUserAccount instead."]
        #[unsafe(method(setExpirationDate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setExpirationDate(&self, expiration_date: Option<&NSDate>);

        /// Describes the level of access the subscriber has to your catalog of content.
        ///
        /// It is an error to provide a subscription with an unknown access level as
        /// the current subscription.  Instead, choose the access level that describes
        /// the content that the subscriber can play.
        #[deprecated = "Use VSUserAccount instead."]
        #[unsafe(method(accessLevel))]
        #[unsafe(method_family = none)]
        pub unsafe fn accessLevel(&self) -> VSSubscriptionAccessLevel;

        /// Setter for [`accessLevel`][Self::accessLevel].
        #[deprecated = "Use VSUserAccount instead."]
        #[unsafe(method(setAccessLevel:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAccessLevel(&self, access_level: VSSubscriptionAccessLevel);

        /// Identifies a subset of content from your catalog that subscriber can play.
        ///
        /// Only provide values that are used in your availability feed's tier restrictions.
        #[deprecated = "Use VSUserAccount instead."]
        #[unsafe(method(tierIdentifiers))]
        #[unsafe(method_family = none)]
        pub unsafe fn tierIdentifiers(&self) -> Retained<NSArray<NSString>>;

        /// Setter for [`tierIdentifiers`][Self::tierIdentifiers].
        #[deprecated = "Use VSUserAccount instead."]
        #[unsafe(method(setTierIdentifiers:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTierIdentifiers(&self, tier_identifiers: Option<&NSArray<NSString>>);

        /// Identifies the billing group associated with the subscription.  May be used,
        /// for example, to restrict content availability based on the proximity of the
        /// billing address to a specific venue.
        #[unsafe(method(billingIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn billingIdentifier(&self) -> Option<Retained<NSString>>;

        /// Setter for [`billingIdentifier`][Self::billingIdentifier].
        #[unsafe(method(setBillingIdentifier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBillingIdentifier(&self, billing_identifier: Option<&NSString>);
    );
}

/// Methods declared on superclass `NSObject`.
impl VSSubscription {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
