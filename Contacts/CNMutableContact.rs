//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// A mutable value object representing a contact.
    ///
    ///
    /// CNMutableContact is not thread safe. If this is a mutable copy of CNContact then it will throw CNContactPropertyNotFetchedExceptionName when accessing a property that was not fetched for the CNContact.
    ///
    ///
    /// Note: To remove properties when saving a mutable contact, set string properties and array properties to empty values. Set other properties to nil.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/contacts/cnmutablecontact?language=objc)
    #[unsafe(super(CNContact, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CNContact")]
    pub struct CNMutableContact;
);

#[cfg(feature = "CNContact")]
extern_conformance!(
    unsafe impl NSCoding for CNMutableContact {}
);

#[cfg(feature = "CNContact")]
extern_conformance!(
    unsafe impl NSCopying for CNMutableContact {}
);

#[cfg(feature = "CNContact")]
unsafe impl CopyingHelper for CNMutableContact {
    type Result = CNContact;
}

#[cfg(feature = "CNContact")]
extern_conformance!(
    unsafe impl NSMutableCopying for CNMutableContact {}
);

#[cfg(feature = "CNContact")]
unsafe impl MutableCopyingHelper for CNMutableContact {
    type Result = Self;
}

#[cfg(feature = "CNContact")]
extern_conformance!(
    unsafe impl NSObjectProtocol for CNMutableContact {}
);

#[cfg(feature = "CNContact")]
extern_conformance!(
    unsafe impl NSSecureCoding for CNMutableContact {}
);

#[cfg(feature = "CNContact")]
impl CNMutableContact {
    extern_methods!(
        #[unsafe(method(contactType))]
        #[unsafe(method_family = none)]
        pub unsafe fn contactType(&self) -> CNContactType;

        /// Setter for [`contactType`][Self::contactType].
        #[unsafe(method(setContactType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setContactType(&self, contact_type: CNContactType);

        #[unsafe(method(namePrefix))]
        #[unsafe(method_family = none)]
        pub unsafe fn namePrefix(&self) -> Retained<NSString>;

        /// Setter for [`namePrefix`][Self::namePrefix].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setNamePrefix:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setNamePrefix(&self, name_prefix: &NSString);

        #[unsafe(method(givenName))]
        #[unsafe(method_family = none)]
        pub unsafe fn givenName(&self) -> Retained<NSString>;

        /// Setter for [`givenName`][Self::givenName].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setGivenName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setGivenName(&self, given_name: &NSString);

        #[unsafe(method(middleName))]
        #[unsafe(method_family = none)]
        pub unsafe fn middleName(&self) -> Retained<NSString>;

        /// Setter for [`middleName`][Self::middleName].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setMiddleName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMiddleName(&self, middle_name: &NSString);

        #[unsafe(method(familyName))]
        #[unsafe(method_family = none)]
        pub unsafe fn familyName(&self) -> Retained<NSString>;

        /// Setter for [`familyName`][Self::familyName].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setFamilyName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFamilyName(&self, family_name: &NSString);

        #[unsafe(method(previousFamilyName))]
        #[unsafe(method_family = none)]
        pub unsafe fn previousFamilyName(&self) -> Retained<NSString>;

        /// Setter for [`previousFamilyName`][Self::previousFamilyName].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setPreviousFamilyName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPreviousFamilyName(&self, previous_family_name: &NSString);

        #[unsafe(method(nameSuffix))]
        #[unsafe(method_family = none)]
        pub unsafe fn nameSuffix(&self) -> Retained<NSString>;

        /// Setter for [`nameSuffix`][Self::nameSuffix].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setNameSuffix:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setNameSuffix(&self, name_suffix: &NSString);

        #[unsafe(method(nickname))]
        #[unsafe(method_family = none)]
        pub unsafe fn nickname(&self) -> Retained<NSString>;

        /// Setter for [`nickname`][Self::nickname].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setNickname:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setNickname(&self, nickname: &NSString);

        #[unsafe(method(organizationName))]
        #[unsafe(method_family = none)]
        pub unsafe fn organizationName(&self) -> Retained<NSString>;

        /// Setter for [`organizationName`][Self::organizationName].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setOrganizationName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOrganizationName(&self, organization_name: &NSString);

        #[unsafe(method(departmentName))]
        #[unsafe(method_family = none)]
        pub unsafe fn departmentName(&self) -> Retained<NSString>;

        /// Setter for [`departmentName`][Self::departmentName].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setDepartmentName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDepartmentName(&self, department_name: &NSString);

        #[unsafe(method(jobTitle))]
        #[unsafe(method_family = none)]
        pub unsafe fn jobTitle(&self) -> Retained<NSString>;

        /// Setter for [`jobTitle`][Self::jobTitle].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setJobTitle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setJobTitle(&self, job_title: &NSString);

        #[unsafe(method(phoneticGivenName))]
        #[unsafe(method_family = none)]
        pub unsafe fn phoneticGivenName(&self) -> Retained<NSString>;

        /// Setter for [`phoneticGivenName`][Self::phoneticGivenName].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setPhoneticGivenName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPhoneticGivenName(&self, phonetic_given_name: &NSString);

        #[unsafe(method(phoneticMiddleName))]
        #[unsafe(method_family = none)]
        pub unsafe fn phoneticMiddleName(&self) -> Retained<NSString>;

        /// Setter for [`phoneticMiddleName`][Self::phoneticMiddleName].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setPhoneticMiddleName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPhoneticMiddleName(&self, phonetic_middle_name: &NSString);

        #[unsafe(method(phoneticFamilyName))]
        #[unsafe(method_family = none)]
        pub unsafe fn phoneticFamilyName(&self) -> Retained<NSString>;

        /// Setter for [`phoneticFamilyName`][Self::phoneticFamilyName].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setPhoneticFamilyName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPhoneticFamilyName(&self, phonetic_family_name: &NSString);

        #[unsafe(method(phoneticOrganizationName))]
        #[unsafe(method_family = none)]
        pub unsafe fn phoneticOrganizationName(&self) -> Retained<NSString>;

        /// Setter for [`phoneticOrganizationName`][Self::phoneticOrganizationName].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setPhoneticOrganizationName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPhoneticOrganizationName(&self, phonetic_organization_name: &NSString);

        #[unsafe(method(note))]
        #[unsafe(method_family = none)]
        pub unsafe fn note(&self) -> Retained<NSString>;

        /// Setter for [`note`][Self::note].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setNote:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setNote(&self, note: &NSString);

        #[unsafe(method(imageData))]
        #[unsafe(method_family = none)]
        pub unsafe fn imageData(&self) -> Option<Retained<NSData>>;

        /// Setter for [`imageData`][Self::imageData].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setImageData:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setImageData(&self, image_data: Option<&NSData>);

        #[cfg(all(feature = "CNLabeledValue", feature = "CNPhoneNumber"))]
        #[unsafe(method(phoneNumbers))]
        #[unsafe(method_family = none)]
        pub unsafe fn phoneNumbers(&self) -> Retained<NSArray<CNLabeledValue<CNPhoneNumber>>>;

        #[cfg(all(feature = "CNLabeledValue", feature = "CNPhoneNumber"))]
        /// Setter for [`phoneNumbers`][Self::phoneNumbers].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setPhoneNumbers:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPhoneNumbers(
            &self,
            phone_numbers: &NSArray<CNLabeledValue<CNPhoneNumber>>,
        );

        #[cfg(feature = "CNLabeledValue")]
        #[unsafe(method(emailAddresses))]
        #[unsafe(method_family = none)]
        pub unsafe fn emailAddresses(&self) -> Retained<NSArray<CNLabeledValue<NSString>>>;

        #[cfg(feature = "CNLabeledValue")]
        /// Setter for [`emailAddresses`][Self::emailAddresses].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setEmailAddresses:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEmailAddresses(&self, email_addresses: &NSArray<CNLabeledValue<NSString>>);

        #[cfg(all(feature = "CNLabeledValue", feature = "CNPostalAddress"))]
        #[unsafe(method(postalAddresses))]
        #[unsafe(method_family = none)]
        pub unsafe fn postalAddresses(&self) -> Retained<NSArray<CNLabeledValue<CNPostalAddress>>>;

        #[cfg(all(feature = "CNLabeledValue", feature = "CNPostalAddress"))]
        /// Setter for [`postalAddresses`][Self::postalAddresses].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setPostalAddresses:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPostalAddresses(
            &self,
            postal_addresses: &NSArray<CNLabeledValue<CNPostalAddress>>,
        );

        #[cfg(feature = "CNLabeledValue")]
        #[unsafe(method(urlAddresses))]
        #[unsafe(method_family = none)]
        pub unsafe fn urlAddresses(&self) -> Retained<NSArray<CNLabeledValue<NSString>>>;

        #[cfg(feature = "CNLabeledValue")]
        /// Setter for [`urlAddresses`][Self::urlAddresses].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setUrlAddresses:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setUrlAddresses(&self, url_addresses: &NSArray<CNLabeledValue<NSString>>);

        #[cfg(all(feature = "CNContactRelation", feature = "CNLabeledValue"))]
        #[unsafe(method(contactRelations))]
        #[unsafe(method_family = none)]
        pub unsafe fn contactRelations(
            &self,
        ) -> Retained<NSArray<CNLabeledValue<CNContactRelation>>>;

        #[cfg(all(feature = "CNContactRelation", feature = "CNLabeledValue"))]
        /// Setter for [`contactRelations`][Self::contactRelations].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setContactRelations:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setContactRelations(
            &self,
            contact_relations: &NSArray<CNLabeledValue<CNContactRelation>>,
        );

        #[cfg(all(feature = "CNLabeledValue", feature = "CNSocialProfile"))]
        #[unsafe(method(socialProfiles))]
        #[unsafe(method_family = none)]
        pub unsafe fn socialProfiles(&self) -> Retained<NSArray<CNLabeledValue<CNSocialProfile>>>;

        #[cfg(all(feature = "CNLabeledValue", feature = "CNSocialProfile"))]
        /// Setter for [`socialProfiles`][Self::socialProfiles].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setSocialProfiles:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSocialProfiles(
            &self,
            social_profiles: &NSArray<CNLabeledValue<CNSocialProfile>>,
        );

        #[cfg(all(feature = "CNInstantMessageAddress", feature = "CNLabeledValue"))]
        #[unsafe(method(instantMessageAddresses))]
        #[unsafe(method_family = none)]
        pub unsafe fn instantMessageAddresses(
            &self,
        ) -> Retained<NSArray<CNLabeledValue<CNInstantMessageAddress>>>;

        #[cfg(all(feature = "CNInstantMessageAddress", feature = "CNLabeledValue"))]
        /// Setter for [`instantMessageAddresses`][Self::instantMessageAddresses].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setInstantMessageAddresses:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInstantMessageAddresses(
            &self,
            instant_message_addresses: &NSArray<CNLabeledValue<CNInstantMessageAddress>>,
        );

        /// The Gregorian birthday.
        ///
        /// Only uses day, month and year components. Needs to have at least a day and a month.
        #[unsafe(method(birthday))]
        #[unsafe(method_family = none)]
        pub unsafe fn birthday(&self) -> Option<Retained<NSDateComponents>>;

        /// Setter for [`birthday`][Self::birthday].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setBirthday:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBirthday(&self, birthday: Option<&NSDateComponents>);

        /// The alternate birthday (Lunisolar).
        ///
        /// Only uses day, month, year and calendar components. Needs to have at least a day and a month. Calendar must be Chinese, Hebrew or Islamic.
        #[unsafe(method(nonGregorianBirthday))]
        #[unsafe(method_family = none)]
        pub unsafe fn nonGregorianBirthday(&self) -> Option<Retained<NSDateComponents>>;

        /// Setter for [`nonGregorianBirthday`][Self::nonGregorianBirthday].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setNonGregorianBirthday:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setNonGregorianBirthday(
            &self,
            non_gregorian_birthday: Option<&NSDateComponents>,
        );

        #[cfg(feature = "CNLabeledValue")]
        /// Other Gregorian dates (anniversaries, etc).
        ///
        /// Only uses day, month and year components. Needs to have at least a day and a month.
        #[unsafe(method(dates))]
        #[unsafe(method_family = none)]
        pub unsafe fn dates(&self) -> Retained<NSArray<CNLabeledValue<NSDateComponents>>>;

        #[cfg(feature = "CNLabeledValue")]
        /// Setter for [`dates`][Self::dates].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setDates:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDates(&self, dates: &NSArray<CNLabeledValue<NSDateComponents>>);
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "CNContact")]
impl CNMutableContact {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
