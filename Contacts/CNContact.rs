//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontacttype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CNContactType(pub NSInteger);
impl CNContactType {
    #[doc(alias = "CNContactTypePerson")]
    pub const Person: Self = Self(0);
    #[doc(alias = "CNContactTypeOrganization")]
    pub const Organization: Self = Self(1);
}

unsafe impl Encode for CNContactType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CNContactType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Sort order for contacts.
///
///
/// CNContactSortOrderUserDefault is the user's preferred sort order.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactsortorder?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CNContactSortOrder(pub NSInteger);
impl CNContactSortOrder {
    #[doc(alias = "CNContactSortOrderNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "CNContactSortOrderUserDefault")]
    pub const UserDefault: Self = Self(1);
    #[doc(alias = "CNContactSortOrderGivenName")]
    pub const GivenName: Self = Self(2);
    #[doc(alias = "CNContactSortOrderFamilyName")]
    pub const FamilyName: Self = Self(3);
}

unsafe impl Encode for CNContactSortOrder {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CNContactSortOrder {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_protocol!(
    /// This protocol is reserved for Contacts framework usage.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/contacts/cnkeydescriptor?language=objc)
    pub unsafe trait CNKeyDescriptor: NSObjectProtocol + NSSecureCoding + NSCopying {}
);

extern_conformance!(
    unsafe impl CNKeyDescriptor for NSString {}
);

extern_class!(
    /// An immutable value object representing a contact.
    ///
    ///
    /// CNContact is thread safe.
    ///
    /// If using a CNContact instance where you are not certain of the keys that were fetched, use isKeyAvailable: or areKeysAvailable:. If these return NO you need to refetch the contact by the contact identifier with the keys you want to fetch. Accessing a property that was not fetched will throw CNContactPropertyNotFetchedExceptionName.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontact?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CNContact;
);

extern_conformance!(
    unsafe impl NSCoding for CNContact {}
);

extern_conformance!(
    unsafe impl NSCopying for CNContact {}
);

unsafe impl CopyingHelper for CNContact {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSMutableCopying for CNContact {}
);

#[cfg(feature = "CNMutableContact")]
unsafe impl MutableCopyingHelper for CNContact {
    type Result = CNMutableContact;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for CNContact {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for CNContact {}
);

impl CNContact {
    extern_methods!(
        /// The identifier is unique among contacts on the device. It can be saved and used for fetching contacts next application launch.
        #[unsafe(method(identifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn identifier(&self) -> Retained<NSString>;

        #[unsafe(method(contactType))]
        #[unsafe(method_family = none)]
        pub unsafe fn contactType(&self) -> CNContactType;

        #[unsafe(method(namePrefix))]
        #[unsafe(method_family = none)]
        pub unsafe fn namePrefix(&self) -> Retained<NSString>;

        #[unsafe(method(givenName))]
        #[unsafe(method_family = none)]
        pub unsafe fn givenName(&self) -> Retained<NSString>;

        #[unsafe(method(middleName))]
        #[unsafe(method_family = none)]
        pub unsafe fn middleName(&self) -> Retained<NSString>;

        #[unsafe(method(familyName))]
        #[unsafe(method_family = none)]
        pub unsafe fn familyName(&self) -> Retained<NSString>;

        #[unsafe(method(previousFamilyName))]
        #[unsafe(method_family = none)]
        pub unsafe fn previousFamilyName(&self) -> Retained<NSString>;

        #[unsafe(method(nameSuffix))]
        #[unsafe(method_family = none)]
        pub unsafe fn nameSuffix(&self) -> Retained<NSString>;

        #[unsafe(method(nickname))]
        #[unsafe(method_family = none)]
        pub unsafe fn nickname(&self) -> Retained<NSString>;

        #[unsafe(method(organizationName))]
        #[unsafe(method_family = none)]
        pub unsafe fn organizationName(&self) -> Retained<NSString>;

        #[unsafe(method(departmentName))]
        #[unsafe(method_family = none)]
        pub unsafe fn departmentName(&self) -> Retained<NSString>;

        #[unsafe(method(jobTitle))]
        #[unsafe(method_family = none)]
        pub unsafe fn jobTitle(&self) -> Retained<NSString>;

        #[unsafe(method(phoneticGivenName))]
        #[unsafe(method_family = none)]
        pub unsafe fn phoneticGivenName(&self) -> Retained<NSString>;

        #[unsafe(method(phoneticMiddleName))]
        #[unsafe(method_family = none)]
        pub unsafe fn phoneticMiddleName(&self) -> Retained<NSString>;

        #[unsafe(method(phoneticFamilyName))]
        #[unsafe(method_family = none)]
        pub unsafe fn phoneticFamilyName(&self) -> Retained<NSString>;

        #[unsafe(method(phoneticOrganizationName))]
        #[unsafe(method_family = none)]
        pub unsafe fn phoneticOrganizationName(&self) -> Retained<NSString>;

        #[unsafe(method(note))]
        #[unsafe(method_family = none)]
        pub unsafe fn note(&self) -> Retained<NSString>;

        #[unsafe(method(imageData))]
        #[unsafe(method_family = none)]
        pub unsafe fn imageData(&self) -> Option<Retained<NSData>>;

        #[unsafe(method(thumbnailImageData))]
        #[unsafe(method_family = none)]
        pub unsafe fn thumbnailImageData(&self) -> Option<Retained<NSData>>;

        #[unsafe(method(imageDataAvailable))]
        #[unsafe(method_family = none)]
        pub unsafe fn imageDataAvailable(&self) -> bool;

        #[cfg(all(feature = "CNLabeledValue", feature = "CNPhoneNumber"))]
        #[unsafe(method(phoneNumbers))]
        #[unsafe(method_family = none)]
        pub unsafe fn phoneNumbers(&self) -> Retained<NSArray<CNLabeledValue<CNPhoneNumber>>>;

        #[cfg(feature = "CNLabeledValue")]
        #[unsafe(method(emailAddresses))]
        #[unsafe(method_family = none)]
        pub unsafe fn emailAddresses(&self) -> Retained<NSArray<CNLabeledValue<NSString>>>;

        #[cfg(all(feature = "CNLabeledValue", feature = "CNPostalAddress"))]
        #[unsafe(method(postalAddresses))]
        #[unsafe(method_family = none)]
        pub unsafe fn postalAddresses(&self) -> Retained<NSArray<CNLabeledValue<CNPostalAddress>>>;

        #[cfg(feature = "CNLabeledValue")]
        #[unsafe(method(urlAddresses))]
        #[unsafe(method_family = none)]
        pub unsafe fn urlAddresses(&self) -> Retained<NSArray<CNLabeledValue<NSString>>>;

        #[cfg(all(feature = "CNContactRelation", feature = "CNLabeledValue"))]
        #[unsafe(method(contactRelations))]
        #[unsafe(method_family = none)]
        pub unsafe fn contactRelations(
            &self,
        ) -> Retained<NSArray<CNLabeledValue<CNContactRelation>>>;

        #[cfg(all(feature = "CNLabeledValue", feature = "CNSocialProfile"))]
        #[unsafe(method(socialProfiles))]
        #[unsafe(method_family = none)]
        pub unsafe fn socialProfiles(&self) -> Retained<NSArray<CNLabeledValue<CNSocialProfile>>>;

        #[cfg(all(feature = "CNInstantMessageAddress", feature = "CNLabeledValue"))]
        #[unsafe(method(instantMessageAddresses))]
        #[unsafe(method_family = none)]
        pub unsafe fn instantMessageAddresses(
            &self,
        ) -> Retained<NSArray<CNLabeledValue<CNInstantMessageAddress>>>;

        /// The Gregorian birthday.
        #[unsafe(method(birthday))]
        #[unsafe(method_family = none)]
        pub unsafe fn birthday(&self) -> Option<Retained<NSDateComponents>>;

        /// The alternate birthday (Lunisolar).
        #[unsafe(method(nonGregorianBirthday))]
        #[unsafe(method_family = none)]
        pub unsafe fn nonGregorianBirthday(&self) -> Option<Retained<NSDateComponents>>;

        #[cfg(feature = "CNLabeledValue")]
        /// Other Gregorian dates (anniversaries, etc).
        #[unsafe(method(dates))]
        #[unsafe(method_family = none)]
        pub unsafe fn dates(&self) -> Retained<NSArray<CNLabeledValue<NSDateComponents>>>;

        /// Returns YES if the value for the specified key was fetched.
        #[unsafe(method(isKeyAvailable:))]
        #[unsafe(method_family = none)]
        pub unsafe fn isKeyAvailable(&self, key: &NSString) -> bool;

        /// Returns YES if the values for the keys specified by all the descriptors were fetched.
        #[unsafe(method(areKeysAvailable:))]
        #[unsafe(method_family = none)]
        pub unsafe fn areKeysAvailable(
            &self,
            key_descriptors: &NSArray<ProtocolObject<dyn CNKeyDescriptor>>,
        ) -> bool;

        /// Returns a user displayable property name.
        #[unsafe(method(localizedStringForKey:))]
        #[unsafe(method_family = none)]
        pub unsafe fn localizedStringForKey(key: &NSString) -> Retained<NSString>;

        /// The contact comparator for a given sort order.
        ///
        /// # Safety
        ///
        /// - The returned block's argument 1 must be a valid pointer.
        /// - The returned block's argument 2 must be a valid pointer.
        #[unsafe(method(comparatorForNameSortOrder:))]
        #[unsafe(method_family = none)]
        pub unsafe fn comparatorForNameSortOrder(sort_order: CNContactSortOrder) -> NSComparator;

        /// Use to fetch all contact keys required for the contact sort comparator.
        #[unsafe(method(descriptorForAllComparatorKeys))]
        #[unsafe(method_family = none)]
        pub unsafe fn descriptorForAllComparatorKeys(
        ) -> Retained<ProtocolObject<dyn CNKeyDescriptor>>;

        /// Returns YES if the receiver was fetched as a unified contact and includes the contact having contactIdentifier in its unification
        #[unsafe(method(isUnifiedWithContactWithIdentifier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn isUnifiedWithContactWithIdentifier(
            &self,
            contact_identifier: &NSString,
        ) -> bool;
    );
}

/// Methods declared on superclass `NSObject`.
impl CNContact {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactpropertynotfetchedexceptionname?language=objc)
    pub static CNContactPropertyNotFetchedExceptionName: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactidentifierkey?language=objc)
    pub static CNContactIdentifierKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactnameprefixkey?language=objc)
    pub static CNContactNamePrefixKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactgivennamekey?language=objc)
    pub static CNContactGivenNameKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactmiddlenamekey?language=objc)
    pub static CNContactMiddleNameKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactfamilynamekey?language=objc)
    pub static CNContactFamilyNameKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactpreviousfamilynamekey?language=objc)
    pub static CNContactPreviousFamilyNameKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactnamesuffixkey?language=objc)
    pub static CNContactNameSuffixKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactnicknamekey?language=objc)
    pub static CNContactNicknameKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactorganizationnamekey?language=objc)
    pub static CNContactOrganizationNameKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactdepartmentnamekey?language=objc)
    pub static CNContactDepartmentNameKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactjobtitlekey?language=objc)
    pub static CNContactJobTitleKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactphoneticgivennamekey?language=objc)
    pub static CNContactPhoneticGivenNameKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactphoneticmiddlenamekey?language=objc)
    pub static CNContactPhoneticMiddleNameKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactphoneticfamilynamekey?language=objc)
    pub static CNContactPhoneticFamilyNameKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactphoneticorganizationnamekey?language=objc)
    pub static CNContactPhoneticOrganizationNameKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactbirthdaykey?language=objc)
    pub static CNContactBirthdayKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactnongregorianbirthdaykey?language=objc)
    pub static CNContactNonGregorianBirthdayKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactnotekey?language=objc)
    pub static CNContactNoteKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactimagedatakey?language=objc)
    pub static CNContactImageDataKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactthumbnailimagedatakey?language=objc)
    pub static CNContactThumbnailImageDataKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactimagedataavailablekey?language=objc)
    pub static CNContactImageDataAvailableKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontacttypekey?language=objc)
    pub static CNContactTypeKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactphonenumberskey?language=objc)
    pub static CNContactPhoneNumbersKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactemailaddresseskey?language=objc)
    pub static CNContactEmailAddressesKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactpostaladdresseskey?language=objc)
    pub static CNContactPostalAddressesKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactdateskey?language=objc)
    pub static CNContactDatesKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontacturladdresseskey?language=objc)
    pub static CNContactUrlAddressesKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactrelationskey?language=objc)
    pub static CNContactRelationsKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactsocialprofileskey?language=objc)
    pub static CNContactSocialProfilesKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/contacts/cncontactinstantmessageaddresseskey?language=objc)
    pub static CNContactInstantMessageAddressesKey: &'static NSString;
}
