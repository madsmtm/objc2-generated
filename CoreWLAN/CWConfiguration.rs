//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Encapsulates the system configuration for a given Wi-Fi interface.
    ///
    ///
    /// The CWConfiguration class contains basic network configuration settings and also the list of preferred networks.
    /// CWConfiguration is an immutable object. For changing configuration settings and/or the preferred networks list, see CWMutableConfiguration.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cwconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CWConfiguration;
);

extern_conformance!(
    unsafe impl NSCoding for CWConfiguration {}
);

extern_conformance!(
    unsafe impl NSCopying for CWConfiguration {}
);

unsafe impl CopyingHelper for CWConfiguration {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSMutableCopying for CWConfiguration {}
);

unsafe impl MutableCopyingHelper for CWConfiguration {
    type Result = CWMutableConfiguration;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for CWConfiguration {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for CWConfiguration {}
);

impl CWConfiguration {
    extern_methods!(
        #[cfg(feature = "CWNetworkProfile")]
        /// Returns: An NSOrderedSet of CWNetworkProfile objects.
        ///
        ///
        /// Returns the preferred networks list.
        ///
        ///
        /// The order of the ordered set corresponds to the order the preferred networks list.
        #[unsafe(method(networkProfiles))]
        #[unsafe(method_family = none)]
        pub unsafe fn networkProfiles(&self) -> Retained<NSOrderedSet<CWNetworkProfile>>;

        /// Returns: YES if the preference is enabled, NO otherwise.
        ///
        ///
        /// Returns the preference to require an administrator password to change networks.
        ///
        ///
        /// If YES, the user may be prompted to enter an administrator password upon attempting to join a Wi-Fi network.
        /// This preference is enforced at the API layer.
        #[unsafe(method(requireAdministratorForAssociation))]
        #[unsafe(method_family = none)]
        pub unsafe fn requireAdministratorForAssociation(&self) -> bool;

        /// Returns: YES if the preference is enabled, NO otherwise.
        ///
        ///
        /// Returns the preference to require an administrator password to change the interface power state.
        ///
        ///
        /// If YES, the user may be prompted to enter an administrator password upon attempting to turn Wi-Fi on or off.
        /// This preference is enforced at the API layer.
        #[unsafe(method(requireAdministratorForPower))]
        #[unsafe(method_family = none)]
        pub unsafe fn requireAdministratorForPower(&self) -> bool;

        /// Returns: YES if the preference is enabled, NO otherwise.
        ///
        ///
        /// Returns the preference to require an administrator password to create a computer-to-computer network.
        ///
        ///
        /// If YES, the user may be prompted to enter an administrator password upon attempting to create an IBSS network.
        /// This preference is enforced at the API layer.
        #[unsafe(method(requireAdministratorForIBSSMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn requireAdministratorForIBSSMode(&self) -> bool;

        /// Returns: YES if the preference is enabled, NO otherwise.
        ///
        ///
        /// Returns the preference to remember all Wi-Fi networks joined unless otherwise specified by the user when joining a particular Wi-Fi network.
        #[unsafe(method(rememberJoinedNetworks))]
        #[unsafe(method_family = none)]
        pub unsafe fn rememberJoinedNetworks(&self) -> bool;

        /// Convenience method for getting a CWConfiguration object.
        #[unsafe(method(configuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn configuration() -> Retained<Self>;

        /// Initializes a CWConfiguration object.
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Parameter `configuration`: A CWConfiguration object.
        ///
        ///
        /// Returns: A CWConfiguration object.
        ///
        ///
        /// Initializes a CWConfiguration object with the properties of an existing CWConfiguration object.
        #[unsafe(method(initWithConfiguration:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithConfiguration(
            this: Allocated<Self>,
            configuration: &CWConfiguration,
        ) -> Retained<Self>;

        /// Parameter `configuration`: A CWConfiguration object.
        ///
        ///
        /// Returns: A CWConfiguration object.
        ///
        ///
        /// Convenience method for getting a CWConfiguration object initialized with the properties of an existing CWConfiguration object.
        #[unsafe(method(configurationWithConfiguration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn configurationWithConfiguration(
            configuration: &CWConfiguration,
        ) -> Retained<Self>;

        /// Parameter `configuration`: The CWConfiguration with which to compare the receiver.
        ///
        ///
        /// Returns: YES if the objects are equal, NO otherwise.
        ///
        ///
        /// Determine CWConfiguration equality.
        ///
        ///
        /// CWConfiguration objects are considered equal if all their corresponding properties are equal.
        #[unsafe(method(isEqualToConfiguration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn isEqualToConfiguration(&self, configuration: &CWConfiguration) -> bool;
    );
}

/// Methods declared on superclass `NSObject`.
impl CWConfiguration {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// Mutable subclass of CWConfiguration.  Use this class for changing configuration settings and/or the preferred networks list.
    ///
    ///
    /// To commit configuration changes, use -[CWInterface commitConfiguration:authorization:error:].
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cwmutableconfiguration?language=objc)
    #[unsafe(super(CWConfiguration, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CWMutableConfiguration;
);

extern_conformance!(
    unsafe impl NSCoding for CWMutableConfiguration {}
);

extern_conformance!(
    unsafe impl NSCopying for CWMutableConfiguration {}
);

unsafe impl CopyingHelper for CWMutableConfiguration {
    type Result = CWConfiguration;
}

extern_conformance!(
    unsafe impl NSMutableCopying for CWMutableConfiguration {}
);

unsafe impl MutableCopyingHelper for CWMutableConfiguration {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for CWMutableConfiguration {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for CWMutableConfiguration {}
);

impl CWMutableConfiguration {
    extern_methods!(
        #[cfg(feature = "CWNetworkProfile")]
        /// Add, remove, or update the preferred networks list.
        #[unsafe(method(networkProfiles))]
        #[unsafe(method_family = none)]
        pub unsafe fn networkProfiles(&self) -> Retained<NSOrderedSet<CWNetworkProfile>>;

        #[cfg(feature = "CWNetworkProfile")]
        /// Setter for [`networkProfiles`][Self::networkProfiles].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setNetworkProfiles:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setNetworkProfiles(&self, network_profiles: &NSOrderedSet<CWNetworkProfile>);

        /// Set the preference to require an administrator password to change networks.
        #[unsafe(method(requireAdministratorForAssociation))]
        #[unsafe(method_family = none)]
        pub unsafe fn requireAdministratorForAssociation(&self) -> bool;

        /// Setter for [`requireAdministratorForAssociation`][Self::requireAdministratorForAssociation].
        #[unsafe(method(setRequireAdministratorForAssociation:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRequireAdministratorForAssociation(
            &self,
            require_administrator_for_association: bool,
        );

        /// Set the preference to require an administrator password to change the interface power state.
        #[unsafe(method(requireAdministratorForPower))]
        #[unsafe(method_family = none)]
        pub unsafe fn requireAdministratorForPower(&self) -> bool;

        /// Setter for [`requireAdministratorForPower`][Self::requireAdministratorForPower].
        #[unsafe(method(setRequireAdministratorForPower:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRequireAdministratorForPower(&self, require_administrator_for_power: bool);

        /// Set the preference to require an administrator password to change networks.
        #[deprecated]
        #[unsafe(method(requireAdministratorForIBSSMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn requireAdministratorForIBSSMode(&self) -> bool;

        /// Setter for [`requireAdministratorForIBSSMode`][Self::requireAdministratorForIBSSMode].
        #[deprecated]
        #[unsafe(method(setRequireAdministratorForIBSSMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRequireAdministratorForIBSSMode(
            &self,
            require_administrator_for_ibss_mode: bool,
        );

        /// Set the preference to require an administrator password to create a computer-to-computer network.
        #[unsafe(method(rememberJoinedNetworks))]
        #[unsafe(method_family = none)]
        pub unsafe fn rememberJoinedNetworks(&self) -> bool;

        /// Setter for [`rememberJoinedNetworks`][Self::rememberJoinedNetworks].
        #[unsafe(method(setRememberJoinedNetworks:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRememberJoinedNetworks(&self, remember_joined_networks: bool);
    );
}

/// Methods declared on superclass `CWConfiguration`.
impl CWMutableConfiguration {
    extern_methods!(
        /// Convenience method for getting a CWConfiguration object.
        #[unsafe(method(configuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn configuration() -> Retained<Self>;

        /// Initializes a CWConfiguration object.
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Parameter `configuration`: A CWConfiguration object.
        ///
        ///
        /// Returns: A CWConfiguration object.
        ///
        ///
        /// Initializes a CWConfiguration object with the properties of an existing CWConfiguration object.
        #[unsafe(method(initWithConfiguration:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithConfiguration(
            this: Allocated<Self>,
            configuration: &CWConfiguration,
        ) -> Retained<Self>;

        /// Parameter `configuration`: A CWConfiguration object.
        ///
        ///
        /// Returns: A CWConfiguration object.
        ///
        ///
        /// Convenience method for getting a CWConfiguration object initialized with the properties of an existing CWConfiguration object.
        #[unsafe(method(configurationWithConfiguration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn configurationWithConfiguration(
            configuration: &CWConfiguration,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
impl CWMutableConfiguration {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
