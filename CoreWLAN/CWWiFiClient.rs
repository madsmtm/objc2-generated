//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// Receive Wi-Fi event notifications.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cweventdelegate?language=objc)
    pub unsafe trait CWEventDelegate {
        /// Invoked if the connection to the Wi-Fi subsystem is temporarily interrupted.
        ///
        ///
        /// All event notifications for which the Wi-Fi client has registered will be automatically re-registered if
        /// the connection is interrupted.
        /// The Wi-Fi client should re-sync any local state which is updated as a result of Wi-Fi event notifications.
        #[optional]
        #[unsafe(method(clientConnectionInterrupted))]
        #[unsafe(method_family = none)]
        unsafe fn clientConnectionInterrupted(&self);

        /// Invoked if the connection to the Wi-Fi subsystem is permanently invalidated.
        #[optional]
        #[unsafe(method(clientConnectionInvalidated))]
        #[unsafe(method_family = none)]
        unsafe fn clientConnectionInvalidated(&self);

        /// Parameter `interfaceName`: The name of the Wi-Fi interface.
        ///
        ///
        /// Invoked when the Wi-Fi power state changes.
        ///
        ///
        /// Use -[CWWiFiClient startMonitoringEventWithType:error:] with the CWEventTypePowerDidChange event type
        /// to register for power event notifications.
        /// Use -[CWInterface powerOn] to query the current Wi-Fi power state.
        #[optional]
        #[unsafe(method(powerStateDidChangeForWiFiInterfaceWithName:))]
        #[unsafe(method_family = none)]
        unsafe fn powerStateDidChangeForWiFiInterfaceWithName(&self, interface_name: &NSString);

        /// Parameter `interfaceName`: The name of the Wi-Fi interface.
        ///
        ///
        /// Invoked when the current SSID changes.
        ///
        ///
        /// Use -[CWWiFiClient startMonitoringEventWithType:error:] with the CWEventTypeSSIDDidChange event type
        /// to register for SSID event notifications.
        /// Use -[CWInterface ssidData] or -[CWInterface ssid] to query the current SSID.
        #[optional]
        #[unsafe(method(ssidDidChangeForWiFiInterfaceWithName:))]
        #[unsafe(method_family = none)]
        unsafe fn ssidDidChangeForWiFiInterfaceWithName(&self, interface_name: &NSString);

        /// Parameter `interfaceName`: The name of the Wi-Fi interface.
        ///
        ///
        /// Invoked when the current BSSID changes.
        ///
        ///
        /// Use -[CWWiFiClient startMonitoringEventWithType:error:] with the CWEventTypeBSSIDDidChange event type
        /// to register for BSSID event notifications.
        /// Use -[CWInterface bssid] to query the current BSSID.
        #[optional]
        #[unsafe(method(bssidDidChangeForWiFiInterfaceWithName:))]
        #[unsafe(method_family = none)]
        unsafe fn bssidDidChangeForWiFiInterfaceWithName(&self, interface_name: &NSString);

        /// Parameter `interfaceName`: The name of the Wi-Fi interface.
        ///
        ///
        /// Invoked when the currently adopted country code changes.
        ///
        ///
        /// Use -[CWWiFiClient startMonitoringEventWithType:error:] with the CWEventTypeCountryCodeDidChange event type
        /// to register for country code event notifications.
        /// Use -[CWInterface countryCode] to query the currently adopted country code.
        #[optional]
        #[unsafe(method(countryCodeDidChangeForWiFiInterfaceWithName:))]
        #[unsafe(method_family = none)]
        unsafe fn countryCodeDidChangeForWiFiInterfaceWithName(&self, interface_name: &NSString);

        /// Parameter `interfaceName`: The name of the Wi-Fi interface.
        ///
        ///
        /// Invoked when the Wi-Fi link state changes.
        ///
        ///
        /// Use -[CWWiFiClient startMonitoringEventWithType:error:] with the CWEventTypeLinkDidChange event type
        /// to register for link event notifications.
        #[optional]
        #[unsafe(method(linkDidChangeForWiFiInterfaceWithName:))]
        #[unsafe(method_family = none)]
        unsafe fn linkDidChangeForWiFiInterfaceWithName(&self, interface_name: &NSString);

        /// Parameter `interfaceName`: The name of the Wi-Fi interface.
        ///
        ///
        /// Parameter `rssi`: The RSSI value for the currently associated network on the Wi-Fi interface.
        ///
        ///
        /// Parameter `transmitRate`: The transmit rate for the currently associated network on the Wi-Fi interface.
        ///
        ///
        /// Invoked when the Wi-Fi link quality changes.
        ///
        ///
        /// Use -[CWWiFiClient startMonitoringEventWithType:error:] with the CWEventTypeLinkQualityDidChange event type
        /// to register for link quality event notifications.
        /// Use -[CWInterface rssiValue] and -[CWInterface transmitRate] to query the current RSSI and transmit rate, respectively.
        #[optional]
        #[unsafe(method(linkQualityDidChangeForWiFiInterfaceWithName:rssi:transmitRate:))]
        #[unsafe(method_family = none)]
        unsafe fn linkQualityDidChangeForWiFiInterfaceWithName_rssi_transmitRate(
            &self,
            interface_name: &NSString,
            rssi: NSInteger,
            transmit_rate: c_double,
        );

        /// Parameter `interfaceName`: The name of the Wi-Fi interface.
        ///
        ///
        /// Invoked when the Wi-Fi operating mode changes.
        ///
        ///
        /// Use -[CWWiFiClient startMonitoringEventWithType:error:] with the CWEventTypeModeDidChange event type
        /// to register for interface mode event notifications.
        /// Use -[CWInterface interfaceMode] to query the current operating mode.
        #[optional]
        #[unsafe(method(modeDidChangeForWiFiInterfaceWithName:))]
        #[unsafe(method_family = none)]
        unsafe fn modeDidChangeForWiFiInterfaceWithName(&self, interface_name: &NSString);

        /// Parameter `interfaceName`: The name of the Wi-Fi interface.
        ///
        ///
        /// Invoked when the Wi-Fi interface scan cache is updated with new scan results.
        ///
        ///
        /// Use -[CWWiFiClient startMonitoringEventWithType:error:] with the CWEventTypeScanCacheUpdated event type
        /// to register for scan cache event notifications.
        /// Use -[CWInterface cachedScanResults] to query scan cache results from the last scan.
        #[optional]
        #[unsafe(method(scanCacheUpdatedForWiFiInterfaceWithName:))]
        #[unsafe(method_family = none)]
        unsafe fn scanCacheUpdatedForWiFiInterfaceWithName(&self, interface_name: &NSString);
    }
);

extern_class!(
    /// The interface to the Wi-Fi subsystem on OS X.
    ///
    ///
    /// Provides access to all Wi-Fi interfaces and allows Wi-Fi clients to setup event notifications.
    ///
    /// CWWiFiClient objects are heavy objects, therefore, clients of the CoreWLAN framework should use a single,
    /// long-running instance rather than creating several short-lived instances.
    /// For convenience, +[CWWiFiClient sharedWiFiClient] can be used to return a singleton instance.
    ///
    /// The CWWiFiClient object should be used to instantiate CWInterface objects rather than using a CWInterface
    /// initializer directly.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/corewlan/cwwificlient?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CWWiFiClient;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for CWWiFiClient {}
);

impl CWWiFiClient {
    extern_methods!(
        /// Sets the delegate to the specified object, which may implement CWWiFiEventDelegate protocol for Wi-Fi event handling.
        ///
        ///
        /// Clients may register for specific Wi-Fi events using -[CWWiFiClient startMonitoringEventWithType:error:].
        #[unsafe(method(delegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(&self) -> Option<Retained<AnyObject>>;

        /// Setter for [`delegate`][Self::delegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        ///
        /// # Safety
        ///
        /// `delegate` should be of the correct type.
        #[unsafe(method(setDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(&self, delegate: Option<&AnyObject>);

        /// Returns the shared CWWiFiClient instance. There is a single shared instance per process.
        #[unsafe(method(sharedWiFiClient))]
        #[unsafe(method_family = none)]
        pub unsafe fn sharedWiFiClient() -> Retained<CWWiFiClient>;

        /// Initializes a CWWiFiClient object.
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "CWInterface")]
        /// Returns the CWInterface object for the default Wi-Fi interface.
        #[unsafe(method(interface))]
        #[unsafe(method_family = none)]
        pub unsafe fn interface(&self) -> Option<Retained<CWInterface>>;

        /// Returns: An NSArray of NSString objects corresponding to Wi-Fi interface names.
        ///
        ///
        /// Returns the list of available Wi-Fi interface names (e.g. "en0").
        ///
        ///
        /// If no Wi-Fi interfaces are available, this method will return an empty array.
        /// Returns nil if an error occurs.
        #[unsafe(method(interfaceNames))]
        #[unsafe(method_family = none)]
        pub unsafe fn interfaceNames(&self) -> Option<Retained<NSArray<NSString>>>;

        #[deprecated = "Use -[CWWiFiClient interfaceNames] instead"]
        #[unsafe(method(interfaceNames))]
        #[unsafe(method_family = none)]
        pub unsafe fn interfaceNames_class() -> Option<Retained<NSArray<NSString>>>;

        #[cfg(feature = "CWInterface")]
        /// Parameter `interfaceName`: The name of an available Wi-Fi interface.
        ///
        ///
        /// Get the CWInterface object bound to the Wi-Fi interface with a specific interface name.
        ///
        ///
        /// Use +[CWWiFiClient interfaceNames] to get a list of available Wi-Fi interface names.
        /// Returns a CWInterface object for the default Wi-Fi interface if no interface name is specified.
        #[unsafe(method(interfaceWithName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn interfaceWithName(
            &self,
            interface_name: Option<&NSString>,
        ) -> Option<Retained<CWInterface>>;

        #[cfg(feature = "CWInterface")]
        /// Returns: An NSArray of CWInterface objects.
        ///
        ///
        /// Returns all available Wi-Fi interfaces.
        ///
        ///
        /// If no Wi-Fi interfaces are available, this method will return an empty array.
        /// Returns nil if an error occurs.
        #[unsafe(method(interfaces))]
        #[unsafe(method_family = none)]
        pub unsafe fn interfaces(&self) -> Option<Retained<NSArray<CWInterface>>>;

        #[cfg(feature = "CoreWLANTypes")]
        /// Parameter `type`: A CWEventType value.
        ///
        ///
        /// Parameter `error`: An NSError object passed by reference, which upon return will contain the error if an error occurs.
        /// This parameter is optional.
        ///
        ///
        /// Returns: Returns YES upon success, or NO if an error occurred.
        ///
        ///
        /// Register for specific Wi-Fi event notifications.
        #[unsafe(method(startMonitoringEventWithType:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn startMonitoringEventWithType_error(
            &self,
            r#type: CWEventType,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "CoreWLANTypes")]
        /// Parameter `type`: A CWEventType value.
        ///
        ///
        /// Parameter `error`: An NSError object passed by reference, which upon return will contain the error if an error occurs.
        /// This parameter is optional.
        ///
        ///
        /// Returns: Returns YES upon success, or NO if an error occurred.
        ///
        ///
        /// Unregister for specific Wi-Fi event notifications.
        #[unsafe(method(stopMonitoringEventWithType:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn stopMonitoringEventWithType_error(
            &self,
            r#type: CWEventType,
        ) -> Result<(), Retained<NSError>>;

        /// Parameter `error`: An NSError object passed by reference, which upon return will contain the error if an error occurs.
        /// This parameter is optional.
        ///
        ///
        /// Returns: Returns YES upon success, or NO if an error occurred.
        ///
        ///
        /// Unregister for all Wi-Fi event notifications.
        #[unsafe(method(stopMonitoringAllEventsAndReturnError:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn stopMonitoringAllEventsAndReturnError(&self)
            -> Result<(), Retained<NSError>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl CWWiFiClient {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
