//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uideferredmenuelement?language=objc)
    #[unsafe(super(UIMenuElement, NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "UIMenuElement")]
    pub struct UIDeferredMenuElement;
);

#[cfg(feature = "UIMenuElement")]
extern_conformance!(
    unsafe impl NSCoding for UIDeferredMenuElement {}
);

#[cfg(feature = "UIMenuElement")]
extern_conformance!(
    unsafe impl NSCopying for UIDeferredMenuElement {}
);

#[cfg(feature = "UIMenuElement")]
unsafe impl CopyingHelper for UIDeferredMenuElement {
    type Result = Self;
}

#[cfg(feature = "UIMenuElement")]
extern_conformance!(
    unsafe impl NSObjectProtocol for UIDeferredMenuElement {}
);

#[cfg(feature = "UIMenuElement")]
extern_conformance!(
    unsafe impl NSSecureCoding for UIDeferredMenuElement {}
);

#[cfg(feature = "UIMenuElement")]
impl UIDeferredMenuElement {
    extern_methods!(
        #[cfg(feature = "block2")]
        /// Returns a placeholder menu element that is replaced with the result of the block's
        /// completion handler. A loading UI takes the place of the element in the menu
        /// until it is fulfilled. While the element may be stored and re-used across menus, its block is
        /// called only once, when the element is first encountered in a menu.
        ///
        ///
        /// Parameter `elementProvider`: Called by the system to request the deferred menu items when the containing menu is presented.
        /// Call this block's completion handler when the menu items are available.
        ///
        /// # Safety
        ///
        /// `element_provider` block's argument block's argument must be a valid pointer.
        #[unsafe(method(elementWithProvider:))]
        #[unsafe(method_family = none)]
        pub unsafe fn elementWithProvider(
            element_provider: &block2::DynBlock<
                dyn Fn(NonNull<block2::DynBlock<dyn Fn(NonNull<NSArray<UIMenuElement>>)>>),
            >,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[cfg(feature = "block2")]
        /// Returns a placeholder menu element that is replaced with the result of the block's
        /// completion handler. A loading UI takes the place of the element in the menu
        /// until it is fulfilled. Elements created using this initializer are "uncached",
        /// so their
        /// `elementProvider`block is called every time the element is displayed.
        ///
        ///
        /// Parameter `elementProvider`: Called by the system to request the deferred menu items when the containing menu is presented.
        /// Call this block's completion handler when the menu items are available.
        ///
        /// # Safety
        ///
        /// `element_provider` block's argument block's argument must be a valid pointer.
        #[unsafe(method(elementWithUncachedProvider:))]
        #[unsafe(method_family = none)]
        pub unsafe fn elementWithUncachedProvider(
            element_provider: &block2::DynBlock<
                dyn Fn(NonNull<block2::DynBlock<dyn Fn(NonNull<NSArray<UIMenuElement>>)>>),
            >,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `UIMenuElement`.
#[cfg(feature = "UIMenuElement")]
impl UIDeferredMenuElement {
    extern_methods!(
        /// # Safety
        ///
        /// `coder` possibly has further requirements.
        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}
