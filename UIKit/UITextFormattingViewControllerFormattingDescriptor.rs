//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// Text formatting horizontal alignment state.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollertextalignment?language=objc)
// NS_TYPED_ENUM
pub type UITextFormattingViewControllerTextAlignment = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollertextalignmentleft?language=objc)
    pub static UITextFormattingViewControllerTextAlignmentLeft:
        &'static UITextFormattingViewControllerTextAlignment;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollertextalignmentcenter?language=objc)
    pub static UITextFormattingViewControllerTextAlignmentCenter:
        &'static UITextFormattingViewControllerTextAlignment;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollertextalignmentright?language=objc)
    pub static UITextFormattingViewControllerTextAlignmentRight:
        &'static UITextFormattingViewControllerTextAlignment;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollertextalignmentjustified?language=objc)
    pub static UITextFormattingViewControllerTextAlignmentJustified:
        &'static UITextFormattingViewControllerTextAlignment;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollertextalignmentnatural?language=objc)
    pub static UITextFormattingViewControllerTextAlignmentNatural:
        &'static UITextFormattingViewControllerTextAlignment;
}

/// Text formatting text list state.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollertextlist?language=objc)
// NS_TYPED_ENUM
pub type UITextFormattingViewControllerTextList = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollertextlistdisc?language=objc)
    pub static UITextFormattingViewControllerTextListDisc:
        &'static UITextFormattingViewControllerTextList;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollertextlisthyphen?language=objc)
    pub static UITextFormattingViewControllerTextListHyphen:
        &'static UITextFormattingViewControllerTextList;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollertextlistdecimal?language=objc)
    pub static UITextFormattingViewControllerTextListDecimal:
        &'static UITextFormattingViewControllerTextList;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollertextlistother?language=objc)
    pub static UITextFormattingViewControllerTextListOther:
        &'static UITextFormattingViewControllerTextList;
}

/// Text formatting highlight state.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollerhighlight?language=objc)
// NS_TYPED_ENUM
pub type UITextFormattingViewControllerHighlight = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollerhighlightdefault?language=objc)
    pub static UITextFormattingViewControllerHighlightDefault:
        &'static UITextFormattingViewControllerHighlight;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollerhighlightpurple?language=objc)
    pub static UITextFormattingViewControllerHighlightPurple:
        &'static UITextFormattingViewControllerHighlight;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollerhighlightpink?language=objc)
    pub static UITextFormattingViewControllerHighlightPink:
        &'static UITextFormattingViewControllerHighlight;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollerhighlightorange?language=objc)
    pub static UITextFormattingViewControllerHighlightOrange:
        &'static UITextFormattingViewControllerHighlight;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollerhighlightmint?language=objc)
    pub static UITextFormattingViewControllerHighlightMint:
        &'static UITextFormattingViewControllerHighlight;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollerhighlightblue?language=objc)
    pub static UITextFormattingViewControllerHighlightBlue:
        &'static UITextFormattingViewControllerHighlight;
}

extern_class!(
    /// Object that represents current text formatting state.
    /// This can apply to formatting state of some selected range of text or currently applicable input formatting.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/uikit/uitextformattingviewcontrollerformattingdescriptor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UITextFormattingViewControllerFormattingDescriptor;
);

extern_conformance!(
    unsafe impl NSCoding for UITextFormattingViewControllerFormattingDescriptor {}
);

extern_conformance!(
    unsafe impl NSCopying for UITextFormattingViewControllerFormattingDescriptor {}
);

unsafe impl CopyingHelper for UITextFormattingViewControllerFormattingDescriptor {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for UITextFormattingViewControllerFormattingDescriptor {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for UITextFormattingViewControllerFormattingDescriptor {}
);

impl UITextFormattingViewControllerFormattingDescriptor {
    extern_methods!(
        /// Initializes formatting descriptor with default property values.
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Initializes formatting descriptor with a string and selected range of string.
        /// - Parameters:
        /// - string: Attributed string for which we are creating formatting descriptor.
        /// - range: Range of string that is being represented by descriptor
        #[unsafe(method(initWithString:range:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithString_range(
            this: Allocated<Self>,
            string: &NSAttributedString,
            range: NSRange,
        ) -> Retained<Self>;

        /// Initializes formatting descriptor with attribute dictionary.
        /// - Parameter attributes: Attribute dictionary that is being represented by descriptor.
        #[unsafe(method(initWithAttributes:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithAttributes(
            this: Allocated<Self>,
            attributes: &NSDictionary<NSAttributedStringKey, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(feature = "UIFont")]
        #[unsafe(method(fonts))]
        #[unsafe(method_family = none)]
        pub unsafe fn fonts(&self) -> Option<Retained<NSArray<UIFont>>>;

        #[cfg(feature = "UIFont")]
        /// Setter for [`fonts`][Self::fonts].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setFonts:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFonts(&self, fonts: Option<&NSArray<UIFont>>);

        #[cfg(feature = "UIColor")]
        #[unsafe(method(textColors))]
        #[unsafe(method_family = none)]
        pub unsafe fn textColors(&self) -> Option<Retained<NSArray<UIColor>>>;

        #[cfg(feature = "UIColor")]
        /// Setter for [`textColors`][Self::textColors].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setTextColors:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTextColors(&self, text_colors: Option<&NSArray<UIColor>>);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(lineHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn lineHeight(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`lineHeight`][Self::lineHeight].
        #[unsafe(method(setLineHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setLineHeight(&self, line_height: CGFloat);

        #[unsafe(method(underlinePresent))]
        #[unsafe(method_family = none)]
        pub unsafe fn underlinePresent(&self) -> bool;

        /// Setter for [`underlinePresent`][Self::underlinePresent].
        #[unsafe(method(setUnderlinePresent:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setUnderlinePresent(&self, underline_present: bool);

        #[unsafe(method(strikethroughPresent))]
        #[unsafe(method_family = none)]
        pub unsafe fn strikethroughPresent(&self) -> bool;

        /// Setter for [`strikethroughPresent`][Self::strikethroughPresent].
        #[unsafe(method(setStrikethroughPresent:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setStrikethroughPresent(&self, strikethrough_present: bool);

        #[unsafe(method(textAlignments))]
        #[unsafe(method_family = none)]
        pub unsafe fn textAlignments(
            &self,
        ) -> Retained<NSSet<UITextFormattingViewControllerTextAlignment>>;

        /// Setter for [`textAlignments`][Self::textAlignments].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setTextAlignments:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTextAlignments(
            &self,
            text_alignments: &NSSet<UITextFormattingViewControllerTextAlignment>,
        );

        #[unsafe(method(textLists))]
        #[unsafe(method_family = none)]
        pub unsafe fn textLists(&self) -> Retained<NSSet<UITextFormattingViewControllerTextList>>;

        /// Setter for [`textLists`][Self::textLists].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setTextLists:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTextLists(
            &self,
            text_lists: &NSSet<UITextFormattingViewControllerTextList>,
        );

        #[unsafe(method(highlights))]
        #[unsafe(method_family = none)]
        pub unsafe fn highlights(&self)
            -> Retained<NSSet<UITextFormattingViewControllerHighlight>>;

        /// Setter for [`highlights`][Self::highlights].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setHighlights:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setHighlights(
            &self,
            highlights: &NSSet<UITextFormattingViewControllerHighlight>,
        );

        #[unsafe(method(formattingStyleKey))]
        #[unsafe(method_family = none)]
        pub unsafe fn formattingStyleKey(&self) -> Option<Retained<NSString>>;

        /// Setter for [`formattingStyleKey`][Self::formattingStyleKey].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setFormattingStyleKey:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFormattingStyleKey(&self, formatting_style_key: Option<&NSString>);
    );
}

/// Methods declared on superclass `NSObject`.
impl UITextFormattingViewControllerFormattingDescriptor {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
