//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// A base object for metaparameter definitions
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phasemetaparameterdefinition?language=objc)
    #[unsafe(super(PHASEDefinition, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "PHASEDefinition")]
    pub struct PHASEMetaParameterDefinition;
);

#[cfg(feature = "PHASEDefinition")]
extern_conformance!(
    unsafe impl NSObjectProtocol for PHASEMetaParameterDefinition {}
);

#[cfg(feature = "PHASEDefinition")]
impl PHASEMetaParameterDefinition {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// The value of the metaparameter.
        #[unsafe(method(value))]
        #[unsafe(method_family = none)]
        pub unsafe fn value(&self) -> Retained<AnyObject>;
    );
}

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// A metaparameter that has a numeric value
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phasenumbermetaparameterdefinition?language=objc)
    #[unsafe(super(PHASEMetaParameterDefinition, PHASEDefinition, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "PHASEDefinition")]
    pub struct PHASENumberMetaParameterDefinition;
);

#[cfg(feature = "PHASEDefinition")]
extern_conformance!(
    unsafe impl NSObjectProtocol for PHASENumberMetaParameterDefinition {}
);

#[cfg(feature = "PHASEDefinition")]
impl PHASENumberMetaParameterDefinition {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Create a new numeric metaparameter definition
        ///
        /// Parameter `value`: The initial value of the metaparameter
        ///
        /// Parameter `identifier`: An optional custom identifier to give to this object
        ///
        /// Returns: The new PHASENumberMetaParameterDefinition object
        #[unsafe(method(initWithValue:identifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithValue_identifier(
            this: Allocated<Self>,
            value: c_double,
            identifier: &NSString,
        ) -> Retained<Self>;

        /// Create a new numeric metaparameter definition
        ///
        /// Parameter `value`: The initial value of the metaparameter
        ///
        /// Returns: The new PHASENumberMetaParameterDefinition object
        #[unsafe(method(initWithValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithValue(this: Allocated<Self>, value: c_double) -> Retained<Self>;

        /// Create a new numeric metaparameter definition and a predefined min and maximum range
        ///
        /// Parameter `value`: The initial value of the metaparameter
        ///
        /// Parameter `minimum`: The minimum value for this metaparameter.  Values set to this metaparamter less than the minimum will be clamped.
        ///
        /// Parameter `maximum`: The maximum value for this metaparameter.  Values set to this metaparamter less than the minimum will be clamped.
        ///
        /// Parameter `identifier`: An optional custom identifier to give to this object
        ///
        /// Returns: The new PHASENumberMetaParameterDefinition object
        #[unsafe(method(initWithValue:minimum:maximum:identifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithValue_minimum_maximum_identifier(
            this: Allocated<Self>,
            value: c_double,
            minimum: c_double,
            maximum: c_double,
            identifier: &NSString,
        ) -> Retained<Self>;

        /// Create a new numeric metaparameter definition and a predefined min and maximum range
        ///
        /// Parameter `value`: The initial value of the metaparameter
        ///
        /// Parameter `minimum`: The minimum value for this metaparameter.  Values set to this metaparamter less than the minimum will be clamped.
        ///
        /// Parameter `maximum`: The maximum value for this metaparameter.  Values set to this metaparamter less than the minimum will be clamped.
        ///
        /// Returns: The new PHASENumberMetaParameterDefinition object
        #[unsafe(method(initWithValue:minimum:maximum:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithValue_minimum_maximum(
            this: Allocated<Self>,
            value: c_double,
            minimum: c_double,
            maximum: c_double,
        ) -> Retained<Self>;

        /// The readonly minimum that this metaparameter definition was initialized with
        #[unsafe(method(minimum))]
        #[unsafe(method_family = none)]
        pub unsafe fn minimum(&self) -> c_double;

        /// The readonly maximum that this metaparameter definition was initialized with
        #[unsafe(method(maximum))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximum(&self) -> c_double;
    );
}

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// A Metaparameter that has a string value
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phasestringmetaparameterdefinition?language=objc)
    #[unsafe(super(PHASEMetaParameterDefinition, PHASEDefinition, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "PHASEDefinition")]
    pub struct PHASEStringMetaParameterDefinition;
);

#[cfg(feature = "PHASEDefinition")]
extern_conformance!(
    unsafe impl NSObjectProtocol for PHASEStringMetaParameterDefinition {}
);

#[cfg(feature = "PHASEDefinition")]
impl PHASEStringMetaParameterDefinition {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// Create a new string metaparameter definition
        ///
        /// Parameter `value`: The initial value of the metaparameter
        ///
        /// Parameter `identifier`: An optional custom identifier to give to this object
        ///
        /// Returns: The new PHASEStringMetaParameterDefinition object
        #[unsafe(method(initWithValue:identifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithValue_identifier(
            this: Allocated<Self>,
            value: &NSString,
            identifier: &NSString,
        ) -> Retained<Self>;

        /// Create a new string metaparameter definition
        ///
        /// Parameter `value`: The initial value of the metaparameter
        ///
        /// Returns: The new PHASEStringMetaParameterDefinition object
        #[unsafe(method(initWithValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithValue(this: Allocated<Self>, value: &NSString) -> Retained<Self>;
    );
}

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// An object to define a Mapped Metaparameter when building an sound event.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phasemappedmetaparameterdefinition?language=objc)
    #[unsafe(super(
        PHASENumberMetaParameterDefinition,
        PHASEMetaParameterDefinition,
        PHASEDefinition,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "PHASEDefinition")]
    pub struct PHASEMappedMetaParameterDefinition;
);

#[cfg(feature = "PHASEDefinition")]
extern_conformance!(
    unsafe impl NSObjectProtocol for PHASEMappedMetaParameterDefinition {}
);

#[cfg(feature = "PHASEDefinition")]
impl PHASEMappedMetaParameterDefinition {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(initWithValue:identifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithValue_identifier(
            this: Allocated<Self>,
            value: c_double,
            identifier: &NSString,
        ) -> Retained<Self>;

        #[unsafe(method(initWithValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithValue(this: Allocated<Self>, value: c_double) -> Retained<Self>;

        #[unsafe(method(initWithValue:minimum:maximum:identifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithValue_minimum_maximum_identifier(
            this: Allocated<Self>,
            value: c_double,
            minimum: c_double,
            maximum: c_double,
            identifier: &NSString,
        ) -> Retained<Self>;

        #[unsafe(method(initWithValue:minimum:maximum:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithValue_minimum_maximum(
            this: Allocated<Self>,
            value: c_double,
            minimum: c_double,
            maximum: c_double,
        ) -> Retained<Self>;

        #[cfg(feature = "PHASEEnvelope")]
        /// Create a new mapped range metaparameter definition
        ///
        /// Parameter `inputMetaParameterDefinition`: The metaparameter that will provide an input for this mapped metaparameter
        ///
        /// Parameter `envelope`: The envelope to use.
        ///
        /// Parameter `identifier`: An optional custom identifier to give to this object
        ///
        /// Returns: The new PHASEMappedMetaParameterDefinition object
        #[unsafe(method(initWithInputMetaParameterDefinition:envelope:identifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithInputMetaParameterDefinition_envelope_identifier(
            this: Allocated<Self>,
            input_meta_parameter_definition: &PHASENumberMetaParameterDefinition,
            envelope: &PHASEEnvelope,
            identifier: &NSString,
        ) -> Retained<Self>;

        #[cfg(feature = "PHASEEnvelope")]
        /// Create a new mapped range metaparameter definition
        ///
        /// Parameter `inputMetaParameterDefinition`: The metaparameter that will provide an input for this mapped metaparameter
        ///
        /// Parameter `envelope`: The envelope to use.
        ///
        /// Returns: The new PHASEMappedMetaParameterDefinition object
        #[unsafe(method(initWithInputMetaParameterDefinition:envelope:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithInputMetaParameterDefinition_envelope(
            this: Allocated<Self>,
            input_meta_parameter_definition: &PHASENumberMetaParameterDefinition,
            envelope: &PHASEEnvelope,
        ) -> Retained<Self>;

        #[cfg(feature = "PHASEEnvelope")]
        /// An Envelope to define segments of curves
        #[unsafe(method(envelope))]
        #[unsafe(method_family = none)]
        pub unsafe fn envelope(&self) -> Retained<PHASEEnvelope>;

        /// The readonly PHASENumberMetaParameterDefinition that this metaparameter definition was initialized with
        #[unsafe(method(inputMetaParameterDefinition))]
        #[unsafe(method_family = none)]
        pub unsafe fn inputMetaParameterDefinition(
            &self,
        ) -> Retained<PHASENumberMetaParameterDefinition>;

        #[unsafe(method(minimum))]
        #[unsafe(method_family = none)]
        pub unsafe fn minimum(&self) -> c_double;

        #[unsafe(method(maximum))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximum(&self) -> c_double;
    );
}

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// A generic object that represents an active metaparameter in the system
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phasemetaparameter?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASEMetaParameter;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for PHASEMetaParameter {}
);

impl PHASEMetaParameter {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// The identifier that uniquely represents this metaparameter.
        #[unsafe(method(identifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn identifier(&self) -> Retained<NSString>;

        /// The value of this metaparameter
        #[unsafe(method(value))]
        #[unsafe(method_family = none)]
        pub unsafe fn value(&self) -> Retained<AnyObject>;

        /// Setter for [`value`][Self::value].
        ///
        /// # Safety
        ///
        /// `value` should be of the correct type.
        #[unsafe(method(setValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setValue(&self, value: &AnyObject);
    );
}

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// An object that represents an active numeric metaparameter in the system
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phasenumbermetaparameter?language=objc)
    #[unsafe(super(PHASEMetaParameter, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASENumberMetaParameter;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for PHASENumberMetaParameter {}
);

impl PHASENumberMetaParameter {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        /// The minimum value this metaparameter can be set to
        #[unsafe(method(minimum))]
        #[unsafe(method_family = none)]
        pub unsafe fn minimum(&self) -> c_double;

        /// The maximum value this metaparameter can be set to
        #[unsafe(method(maximum))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximum(&self) -> c_double;

        /// Fades to a new value over an interval of time
        ///
        /// Parameter `value`: The new destination value to fade to
        ///
        /// Parameter `duration`: The length of time it takes to arrive at the destination value
        #[unsafe(method(fadeToValue:duration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn fadeToValue_duration(&self, value: c_double, duration: NSTimeInterval);
    );
}

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// An object that represents an active string metaparameter in the system
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phasestringmetaparameter?language=objc)
    #[unsafe(super(PHASEMetaParameter, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASEStringMetaParameter;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for PHASEStringMetaParameter {}
);

impl PHASEStringMetaParameter {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
