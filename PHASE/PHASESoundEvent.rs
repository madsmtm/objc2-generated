//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-avf-audio")]
use objc2_avf_audio::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// A PHASESoundEvent is an object that represents a playable sound event in the PHASE system.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phasesoundevent?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASESoundEvent;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for PHASESoundEvent {}
);

impl PHASESoundEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(all(feature = "PHASEEngine", feature = "PHASEMixer"))]
        /// Creates a new sound event instance
        ///
        /// Parameter `engine`: The PHASEEngine object that the sound event will be played by.
        ///
        /// Parameter `assetIdentifier`: The identifier registered with the Asset Registry for the particular PHASESoundEventNodeAsset that this sound instance will play.
        /// If the asset identifier is not registered, this function will fail.
        ///
        /// Parameter `mixerParameters`: A dictionary of PHASEMixerParameters objects with keys that match the identifiers of the spatial mixers in the sound event
        ///
        /// This will look up the asset in the asset registry and create the necessary objects to play the sound event
        #[unsafe(method(initWithEngine:assetIdentifier:mixerParameters:error:_))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithEngine_assetIdentifier_mixerParameters_error(
            this: Allocated<Self>,
            engine: &PHASEEngine,
            asset_identifier: &NSString,
            mixer_parameters: &PHASEMixerParameters,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(feature = "PHASEEngine")]
        /// Creates a new sound event instance
        ///
        /// Parameter `engine`: The PHASEEngine object that the sound event will be played by.
        ///
        /// Parameter `assetIdentifier`: The identifier registered with the Asset Registry for the particular PHASESoundEventNodeAsset that this sound event will play.
        /// If the asset identifier is not registered, this function will fail.
        ///
        /// This will look up the asset in the asset registry and create the necessary objects to play the sound event
        #[unsafe(method(initWithEngine:assetIdentifier:error:_))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithEngine_assetIdentifier_error(
            this: Allocated<Self>,
            engine: &PHASEEngine,
            asset_identifier: &NSString,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(all(feature = "PHASETypes", feature = "block2"))]
        /// Prepare the sound event
        ///
        /// Parameter `handler`: The block that will be called when the PHASESoundEvent has finished preparing and is ready to start. Pass in nil for no handler.
        ///
        /// This function notifies the engine to begin preparing a sound event, then returns immediately.
        /// Once the sound event is prepared (or has failed to prepare), you will receive a callback via the completion.
        /// If you call startWithCompletion() before receiving the callback, the sound event will start as soon as it's prepared.
        #[unsafe(method(prepareWithCompletion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn prepareWithCompletion(
            &self,
            handler: Option<&block2::DynBlock<dyn Fn(PHASESoundEventPrepareHandlerReason)>>,
        );

        #[cfg(all(feature = "PHASETypes", feature = "block2"))]
        /// Start the sound event
        ///
        /// Parameter `handler`: The block that will be called when the sound event has stopped.
        ///
        /// This function notifies the engine to start the sound event, then returns immediately.
        /// Once the sound event is playing (or has failed to start), you will receive a callback via the completion.
        /// Playback will begin immediately if the sound event has been prepared; otherwise, it will start as soon as it is finished preparing.
        #[unsafe(method(startWithCompletion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn startWithCompletion(
            &self,
            handler: Option<&block2::DynBlock<dyn Fn(PHASESoundEventStartHandlerReason)>>,
        );

        #[cfg(all(
            feature = "PHASETypes",
            feature = "block2",
            feature = "objc2-avf-audio"
        ))]
        /// Start the sound event
        ///
        /// Parameter `when`: The desired start time based on the engine time retrieved from [PHASEEngine lastRenderTime]
        /// If the sound event starts immediately with an audible sound, it will begin rendering at this time.  The sound event will otherwise begin operating at this time.
        /// A nil value will start the sound event immediately
        /// This time is not scaled by unitsPerSecond.
        ///
        /// Parameter `handler`: The block that will be called when the sound event has stopped.
        ///
        /// This function notifies the engine to start the sound event, then returns immediately.
        /// Once the sound event is playing (or has failed to start), you will receive a callback via the completion.
        /// Playback will begin at the requested time if the sound event has finished preparing in time.
        /// You may wait for preparation to finish with the [PHASESoundEvent prepare:completion] method before calling startAtTime, to ensure that the sound event will start at the desired time.
        /// However if the desired time is far enough into the future to allow for preparation to happen, you may skip calling prepare entirely and just call startAtTime.
        #[unsafe(method(startAtTime:completion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn startAtTime_completion(
            &self,
            when: Option<&AVAudioTime>,
            handler: Option<&block2::DynBlock<dyn Fn(PHASESoundEventStartHandlerReason)>>,
        );

        #[cfg(all(feature = "PHASETypes", feature = "block2"))]
        /// Seeks all leaf nodes in a PHASESoundEvent to a specified time relative to the start of the sound event.
        ///
        /// This function notifies the engine to seek the sound event, then returns immediately.
        /// Once the sound event has seeked to the new offset (or has failed to seek), you will receive a callback via the completion.
        /// If any leaf nodes do not support seeking, those nodes will ignore this command.
        /// Nodes that have finished playing or have stopped will not seek.
        /// Nodes that are sleeping will seek, and will resume at the correct time when they wake up.
        ///
        /// Note: The time is scaled by unitsPerSecond internally, so can be provided at the client's native time scale.
        #[unsafe(method(seekToTime:completion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn seekToTime_completion(
            &self,
            time: c_double,
            handler: Option<&block2::DynBlock<dyn Fn(PHASESoundEventSeekHandlerReason)>>,
        );

        #[cfg(all(
            feature = "PHASETypes",
            feature = "block2",
            feature = "objc2-avf-audio"
        ))]
        /// Seeks all leaf nodes in a PHASESoundEvent to the specified time, and automatically resumes playback at the specified engine time.
        ///
        /// Parameter `time`: The desired time position in seconds to seek the nodes to.
        ///
        /// Parameter `engineTime`: The engine time to resume playback.
        ///
        /// Parameter `handler`: The completion callback that will be called when seeking is complete.
        ///
        /// This is a low latency convenience method that allows for tight deadlines to be met.  However if the seek fails the node state will not be changed.  You should check the callback and handle the failure appropriately.
        /// The time parameter will seek the nodes to the equivalent sample position based on the sample rate of the asset.
        /// The engineTime parameter is the engine timestamp to resume rendering at, based off of [PHASEEngine lastRenderTime].
        /// If any leaf nodes do not support seeking, those nodes will ignore this command.
        /// Nodes that have finished playing or have stopped will not seek.
        /// The time parameter is in seconds and will be scaled by unitsPerSecond.
        /// The time in the AVAudioTime structure is not scaled by unitsPerSecond.
        /// The engineTime parameter will use the sample time if valid, if not, then the host time if valid.
        #[unsafe(method(seekToTime:resumeAtEngineTime:completion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn seekToTime_resumeAtEngineTime_completion(
            &self,
            time: c_double,
            engine_time: &AVAudioTime,
            handler: Option<&block2::DynBlock<dyn Fn(PHASESoundEventSeekHandlerReason)>>,
        );

        /// Pause the sound event.
        #[unsafe(method(pause))]
        #[unsafe(method_family = none)]
        pub unsafe fn pause(&self);

        /// Resume the sound event.
        #[unsafe(method(resume))]
        #[unsafe(method_family = none)]
        pub unsafe fn resume(&self);

        #[cfg(feature = "objc2-avf-audio")]
        /// Resume the sound event at a specific time
        ///
        /// Parameter `time`: The desired start time based on the engine time retrieved from [PHASEEngine lastRenderTime]
        ///
        /// A nil time parameter will resume immediately.
        /// The device time is not scaled by UnitsPerSecond and is in seconds.
        #[unsafe(method(resumeAtTime:))]
        #[unsafe(method_family = none)]
        pub unsafe fn resumeAtTime(&self, time: Option<&AVAudioTime>);

        /// stop and invalidate the sound event
        #[unsafe(method(stopAndInvalidate))]
        #[unsafe(method_family = none)]
        pub unsafe fn stopAndInvalidate(&self);

        #[cfg(feature = "PHASETypes")]
        /// Sound Event's current rendering state
        #[unsafe(method(renderingState))]
        #[unsafe(method_family = none)]
        pub unsafe fn renderingState(&self) -> PHASERenderingState;

        #[cfg(feature = "PHASETypes")]
        /// Sound Event's current preparation state
        #[unsafe(method(prepareState))]
        #[unsafe(method_family = none)]
        pub unsafe fn prepareState(&self) -> PHASESoundEventPrepareState;

        #[cfg(feature = "PHASEMetaParameter")]
        /// A Dictionary containing the MetaParameters associated with this sound event
        #[unsafe(method(metaParameters))]
        #[unsafe(method_family = none)]
        pub unsafe fn metaParameters(&self)
            -> Retained<NSDictionary<NSString, PHASEMetaParameter>>;

        #[cfg(feature = "PHASEMixer")]
        /// A Dictionary containing the mix nodes associated with this sound event
        #[unsafe(method(mixers))]
        #[unsafe(method_family = none)]
        pub unsafe fn mixers(&self) -> Retained<NSDictionary<NSString, PHASEMixer>>;

        #[cfg(feature = "PHASESoundEventNodes")]
        /// A Dictionary containing the push stream nodes associated with this sound event, for pushing buffers to.
        #[unsafe(method(pushStreamNodes))]
        #[unsafe(method_family = none)]
        pub unsafe fn pushStreamNodes(
            &self,
        ) -> Retained<NSDictionary<NSString, PHASEPushStreamNode>>;

        #[cfg(feature = "PHASESoundEventNodes")]
        /// A Dictionary containing the pull stream nodes associated with this sound event, for setting renderBlocks on.
        #[unsafe(method(pullStreamNodes))]
        #[unsafe(method_family = none)]
        pub unsafe fn pullStreamNodes(
            &self,
        ) -> Retained<NSDictionary<NSString, PHASEPullStreamNode>>;

        /// A boolean that tell if this sound event will run indefinitely, or finish executing on its own
        #[unsafe(method(isIndefinite))]
        #[unsafe(method_family = none)]
        pub unsafe fn isIndefinite(&self) -> bool;
    );
}
