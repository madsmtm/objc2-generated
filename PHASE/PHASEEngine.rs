//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-avf-audio")]
use objc2_avf_audio::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// *************************************************************************************************
    ///
    ///
    ///
    /// PHASE engine instance.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/phase/phaseengine?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHASEEngine;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for PHASEEngine {}
);

impl PHASEEngine {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "PHASETypes")]
        /// Initialize a new engine with an update mode.
        ///
        /// Parameter `updateMode`: Defines how the engine will be updated.
        #[unsafe(method(initWithUpdateMode:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithUpdateMode(
            this: Allocated<Self>,
            update_mode: PHASEUpdateMode,
        ) -> Retained<Self>;

        #[cfg(feature = "PHASETypes")]
        /// Initialize a new engine with an update mode.
        ///
        /// Parameter `updateMode`: Defines how the engine will be updated.
        ///
        /// Parameter `renderingMode`: Defines where the engine applies rendering. See PHASERenderingMode for more info.
        #[unsafe(method(initWithUpdateMode:renderingMode:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithUpdateMode_renderingMode(
            this: Allocated<Self>,
            update_mode: PHASEUpdateMode,
            rendering_mode: PHASERenderingMode,
        ) -> Retained<Self>;

        /// Start or resume the engine.
        ///
        /// Returns: YES for success.
        #[unsafe(method(startAndReturnError:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn startAndReturnError(&self) -> Result<(), Retained<NSError>>;

        /// Pause the engine.
        #[unsafe(method(pause))]
        #[unsafe(method_family = none)]
        pub unsafe fn pause(&self);

        /// Stop the engine.
        #[unsafe(method(stop))]
        #[unsafe(method_family = none)]
        pub unsafe fn stop(&self);

        /// Manually update the engine instance on the calling thread.
        ///
        /// This will kick off all of the API commands called since the last call to update,
        /// update any systems and objects that need to be kept current, and call any registered handlers.
        ///
        /// Note: This function has no effect if the engine's update mode is PHASEUpdateModeAutomatic.
        #[unsafe(method(update))]
        #[unsafe(method_family = none)]
        pub unsafe fn update(&self);

        #[cfg(feature = "PHASETypes")]
        /// When set to a value other than PHASESpatializationModeAutomatic,
        /// overrides the default output spatializer and uses the specified one instead.
        #[unsafe(method(outputSpatializationMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputSpatializationMode(&self) -> PHASESpatializationMode;

        #[cfg(feature = "PHASETypes")]
        /// Setter for [`outputSpatializationMode`][Self::outputSpatializationMode].
        #[unsafe(method(setOutputSpatializationMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutputSpatializationMode(
            &self,
            output_spatialization_mode: PHASESpatializationMode,
        );

        #[cfg(feature = "PHASETypes")]
        /// The engine's current rendering state.
        #[unsafe(method(renderingState))]
        #[unsafe(method_family = none)]
        pub unsafe fn renderingState(&self) -> PHASERenderingState;

        #[cfg(feature = "PHASEObject")]
        /// The root object of the engine's scene graph.
        ///
        /// Attach objects to the engine's rootObject or one of its children to make them active within the engine's scene graph.
        /// This will ensure they take part in the simulation.
        ///
        /// Note: The rootObject is created and owned by the engine.
        /// The rootObject may not be set as the child of another object. This will cause an error to be thrown.
        /// The rootObject's transform may not be changed. This will cause an error to be thrown.
        /// The rootObject may not be copied. This will cause an error to be thrown.
        #[unsafe(method(rootObject))]
        #[unsafe(method_family = none)]
        pub unsafe fn rootObject(&self) -> Retained<PHASEObject>;

        #[cfg(feature = "PHASEMedium")]
        /// The default medium in the engine.
        ///
        /// The default value is PHASEMediumPresetAir.
        #[unsafe(method(defaultMedium))]
        #[unsafe(method_family = none)]
        pub unsafe fn defaultMedium(&self) -> Retained<PHASEMedium>;

        #[cfg(feature = "PHASEMedium")]
        /// Setter for [`defaultMedium`][Self::defaultMedium].
        #[unsafe(method(setDefaultMedium:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDefaultMedium(&self, default_medium: &PHASEMedium);

        #[cfg(feature = "PHASETypes")]
        /// The default reverb preset in the engine.
        ///
        /// The default value is PHASEReverbPresetNone.
        #[unsafe(method(defaultReverbPreset))]
        #[unsafe(method_family = none)]
        pub unsafe fn defaultReverbPreset(&self) -> PHASEReverbPreset;

        #[cfg(feature = "PHASETypes")]
        /// Setter for [`defaultReverbPreset`][Self::defaultReverbPreset].
        #[unsafe(method(setDefaultReverbPreset:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDefaultReverbPreset(&self, default_reverb_preset: PHASEReverbPreset);

        /// The number of units in a second.
        ///
        /// The unitsPerSecond is used internally to scale time/duration values passed to the API.
        /// This allows clients to pass time/duration values in their own native time scale.
        ///
        /// Note: Values are clamped to the range (0, inf]. Default value is 1.
        #[unsafe(method(unitsPerSecond))]
        #[unsafe(method_family = none)]
        pub unsafe fn unitsPerSecond(&self) -> c_double;

        /// Setter for [`unitsPerSecond`][Self::unitsPerSecond].
        #[unsafe(method(setUnitsPerSecond:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setUnitsPerSecond(&self, units_per_second: c_double);

        /// The number of units in a meter.
        ///
        /// The unitsPerMeter is used internally to scale metric values passed to the API.
        /// This allows clients to pass metric values in their own native spatial scale.
        ///
        /// Note: Values are clamped to the range (0, inf]. Default value is 1.
        #[unsafe(method(unitsPerMeter))]
        #[unsafe(method_family = none)]
        pub unsafe fn unitsPerMeter(&self) -> c_double;

        /// Setter for [`unitsPerMeter`][Self::unitsPerMeter].
        #[unsafe(method(setUnitsPerMeter:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setUnitsPerMeter(&self, units_per_meter: c_double);

        #[cfg(feature = "PHASEAssetRegistry")]
        /// A registry for assets available to the engine
        #[unsafe(method(assetRegistry))]
        #[unsafe(method_family = none)]
        pub unsafe fn assetRegistry(&self) -> Retained<PHASEAssetRegistry>;

        #[cfg(feature = "PHASESoundEvent")]
        /// An array of the active sound event objects in the system
        ///
        /// Returns a dictionary of the sound events at the time it is retrieved. This includes all sound events that are registered with the engine, including those that are preparing, playing, paused or stopping.
        #[unsafe(method(soundEvents))]
        #[unsafe(method_family = none)]
        pub unsafe fn soundEvents(&self) -> Retained<NSArray<PHASESoundEvent>>;

        #[cfg(feature = "PHASEGroup")]
        /// A dictionary of the groups in the system
        ///
        /// Returns a dictionary of the groups at the time it is retrieved.
        #[unsafe(method(groups))]
        #[unsafe(method_family = none)]
        pub unsafe fn groups(&self) -> Retained<NSDictionary<NSString, PHASEGroup>>;

        #[cfg(feature = "PHASEDucker")]
        /// An array of the ducker objects in the system
        ///
        /// Returns a dictionary of the ducker objects at the time it is retrieved.
        #[unsafe(method(duckers))]
        #[unsafe(method_family = none)]
        pub unsafe fn duckers(&self) -> Retained<NSArray<PHASEDucker>>;

        #[cfg(feature = "PHASEGroupPreset")]
        /// The active group mixer preset in the system
        ///
        /// Returns nil if there are no active group presets in the engine. Activate or Deactivate the preset via [PHASEGroupPreset activate] and [PHASEGroupPreset deactivate]
        #[unsafe(method(activeGroupPreset))]
        #[unsafe(method_family = none)]
        pub unsafe fn activeGroupPreset(&self) -> Option<Retained<PHASEGroupPreset>>;

        #[cfg(feature = "objc2-avf-audio")]
        /// Obtain the time for which the engine most recently rendered.
        ///
        /// Will return nil if the engine is not running
        #[unsafe(method(lastRenderTime))]
        #[unsafe(method_family = none)]
        pub unsafe fn lastRenderTime(&self) -> Option<Retained<AVAudioTime>>;
    );
}
