//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// CGPDFWrappedObject is used to add a PDF object to a CGPDFArray or CGPDFDictionary.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coregraphics/cgpdfwrappedobject?language=objc)
#[repr(C)]
pub struct CGPDFWrappedObject {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl CGPDFWrappedObject {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"CGPDFWrappedObject"> for CGPDFWrappedObject {}
);

impl CGPDFWrappedObject {
    #[doc(alias = "CGPDFWrappedObjectCreateWithBoolean")]
    #[cfg(feature = "CGPDFObject")]
    #[inline]
    pub unsafe fn with_boolean(value: CGPDFBoolean) -> CFRetained<CGPDFWrappedObject> {
        extern "C-unwind" {
            fn CGPDFWrappedObjectCreateWithBoolean(
                value: CGPDFBoolean,
            ) -> Option<NonNull<CGPDFWrappedObject>>;
        }
        let ret = unsafe { CGPDFWrappedObjectCreateWithBoolean(value) };
        let ret =
            ret.expect("function was marked as returning non-null, but actually returned NULL");
        unsafe { CFRetained::from_raw(ret) }
    }

    #[doc(alias = "CGPDFWrappedObjectCreateWithInteger")]
    #[cfg(feature = "CGPDFObject")]
    #[inline]
    pub unsafe fn with_integer(value: CGPDFInteger) -> CFRetained<CGPDFWrappedObject> {
        extern "C-unwind" {
            fn CGPDFWrappedObjectCreateWithInteger(
                value: CGPDFInteger,
            ) -> Option<NonNull<CGPDFWrappedObject>>;
        }
        let ret = unsafe { CGPDFWrappedObjectCreateWithInteger(value) };
        let ret =
            ret.expect("function was marked as returning non-null, but actually returned NULL");
        unsafe { CFRetained::from_raw(ret) }
    }

    #[doc(alias = "CGPDFWrappedObjectCreateWithReal")]
    #[cfg(feature = "CGPDFObject")]
    #[inline]
    pub unsafe fn with_real(value: CGPDFReal) -> CFRetained<CGPDFWrappedObject> {
        extern "C-unwind" {
            fn CGPDFWrappedObjectCreateWithReal(
                value: CGPDFReal,
            ) -> Option<NonNull<CGPDFWrappedObject>>;
        }
        let ret = unsafe { CGPDFWrappedObjectCreateWithReal(value) };
        let ret =
            ret.expect("function was marked as returning non-null, but actually returned NULL");
        unsafe { CFRetained::from_raw(ret) }
    }

    #[doc(alias = "CGPDFWrappedObjectCreateWithName")]
    #[inline]
    pub unsafe fn with_name(value: NonNull<c_char>) -> CFRetained<CGPDFWrappedObject> {
        extern "C-unwind" {
            fn CGPDFWrappedObjectCreateWithName(
                value: NonNull<c_char>,
            ) -> Option<NonNull<CGPDFWrappedObject>>;
        }
        let ret = unsafe { CGPDFWrappedObjectCreateWithName(value) };
        let ret =
            ret.expect("function was marked as returning non-null, but actually returned NULL");
        unsafe { CFRetained::from_raw(ret) }
    }

    #[doc(alias = "CGPDFWrappedObjectCreateWithString")]
    #[cfg(feature = "CGPDFString")]
    #[inline]
    pub unsafe fn with_string(value: CGPDFStringRef) -> CFRetained<CGPDFWrappedObject> {
        extern "C-unwind" {
            fn CGPDFWrappedObjectCreateWithString(
                value: CGPDFStringRef,
            ) -> Option<NonNull<CGPDFWrappedObject>>;
        }
        let ret = unsafe { CGPDFWrappedObjectCreateWithString(value) };
        let ret =
            ret.expect("function was marked as returning non-null, but actually returned NULL");
        unsafe { CFRetained::from_raw(ret) }
    }

    #[doc(alias = "CGPDFWrappedObjectCreateWithArray")]
    #[cfg(feature = "CGPDFArray")]
    #[inline]
    pub unsafe fn with_array(value: CGPDFArrayRef) -> CFRetained<CGPDFWrappedObject> {
        extern "C-unwind" {
            fn CGPDFWrappedObjectCreateWithArray(
                value: CGPDFArrayRef,
            ) -> Option<NonNull<CGPDFWrappedObject>>;
        }
        let ret = unsafe { CGPDFWrappedObjectCreateWithArray(value) };
        let ret =
            ret.expect("function was marked as returning non-null, but actually returned NULL");
        unsafe { CFRetained::from_raw(ret) }
    }

    #[doc(alias = "CGPDFWrappedObjectCreateWithDictionary")]
    #[cfg(feature = "CGPDFDictionary")]
    #[inline]
    pub unsafe fn with_dictionary(value: CGPDFDictionaryRef) -> CFRetained<CGPDFWrappedObject> {
        extern "C-unwind" {
            fn CGPDFWrappedObjectCreateWithDictionary(
                value: CGPDFDictionaryRef,
            ) -> Option<NonNull<CGPDFWrappedObject>>;
        }
        let ret = unsafe { CGPDFWrappedObjectCreateWithDictionary(value) };
        let ret =
            ret.expect("function was marked as returning non-null, but actually returned NULL");
        unsafe { CFRetained::from_raw(ret) }
    }

    #[doc(alias = "CGPDFWrappedObjectCreateWithStream")]
    #[cfg(feature = "CGPDFStream")]
    #[inline]
    pub unsafe fn with_stream(value: CGPDFStreamRef) -> CFRetained<CGPDFWrappedObject> {
        extern "C-unwind" {
            fn CGPDFWrappedObjectCreateWithStream(
                value: CGPDFStreamRef,
            ) -> Option<NonNull<CGPDFWrappedObject>>;
        }
        let ret = unsafe { CGPDFWrappedObjectCreateWithStream(value) };
        let ret =
            ret.expect("function was marked as returning non-null, but actually returned NULL");
        unsafe { CFRetained::from_raw(ret) }
    }
}

#[cfg(feature = "CGPDFObject")]
#[deprecated = "renamed to `CGPDFWrappedObject::with_boolean`"]
#[inline]
pub unsafe extern "C-unwind" fn CGPDFWrappedObjectCreateWithBoolean(
    value: CGPDFBoolean,
) -> CFRetained<CGPDFWrappedObject> {
    extern "C-unwind" {
        fn CGPDFWrappedObjectCreateWithBoolean(
            value: CGPDFBoolean,
        ) -> Option<NonNull<CGPDFWrappedObject>>;
    }
    let ret = unsafe { CGPDFWrappedObjectCreateWithBoolean(value) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

#[cfg(feature = "CGPDFObject")]
#[deprecated = "renamed to `CGPDFWrappedObject::with_integer`"]
#[inline]
pub unsafe extern "C-unwind" fn CGPDFWrappedObjectCreateWithInteger(
    value: CGPDFInteger,
) -> CFRetained<CGPDFWrappedObject> {
    extern "C-unwind" {
        fn CGPDFWrappedObjectCreateWithInteger(
            value: CGPDFInteger,
        ) -> Option<NonNull<CGPDFWrappedObject>>;
    }
    let ret = unsafe { CGPDFWrappedObjectCreateWithInteger(value) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

#[cfg(feature = "CGPDFObject")]
#[deprecated = "renamed to `CGPDFWrappedObject::with_real`"]
#[inline]
pub unsafe extern "C-unwind" fn CGPDFWrappedObjectCreateWithReal(
    value: CGPDFReal,
) -> CFRetained<CGPDFWrappedObject> {
    extern "C-unwind" {
        fn CGPDFWrappedObjectCreateWithReal(
            value: CGPDFReal,
        ) -> Option<NonNull<CGPDFWrappedObject>>;
    }
    let ret = unsafe { CGPDFWrappedObjectCreateWithReal(value) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

#[deprecated = "renamed to `CGPDFWrappedObject::with_name`"]
#[inline]
pub unsafe extern "C-unwind" fn CGPDFWrappedObjectCreateWithName(
    value: NonNull<c_char>,
) -> CFRetained<CGPDFWrappedObject> {
    extern "C-unwind" {
        fn CGPDFWrappedObjectCreateWithName(
            value: NonNull<c_char>,
        ) -> Option<NonNull<CGPDFWrappedObject>>;
    }
    let ret = unsafe { CGPDFWrappedObjectCreateWithName(value) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

#[cfg(feature = "CGPDFString")]
#[deprecated = "renamed to `CGPDFWrappedObject::with_string`"]
#[inline]
pub unsafe extern "C-unwind" fn CGPDFWrappedObjectCreateWithString(
    value: CGPDFStringRef,
) -> CFRetained<CGPDFWrappedObject> {
    extern "C-unwind" {
        fn CGPDFWrappedObjectCreateWithString(
            value: CGPDFStringRef,
        ) -> Option<NonNull<CGPDFWrappedObject>>;
    }
    let ret = unsafe { CGPDFWrappedObjectCreateWithString(value) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

#[cfg(feature = "CGPDFArray")]
#[deprecated = "renamed to `CGPDFWrappedObject::with_array`"]
#[inline]
pub unsafe extern "C-unwind" fn CGPDFWrappedObjectCreateWithArray(
    value: CGPDFArrayRef,
) -> CFRetained<CGPDFWrappedObject> {
    extern "C-unwind" {
        fn CGPDFWrappedObjectCreateWithArray(
            value: CGPDFArrayRef,
        ) -> Option<NonNull<CGPDFWrappedObject>>;
    }
    let ret = unsafe { CGPDFWrappedObjectCreateWithArray(value) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

#[cfg(feature = "CGPDFDictionary")]
#[deprecated = "renamed to `CGPDFWrappedObject::with_dictionary`"]
#[inline]
pub unsafe extern "C-unwind" fn CGPDFWrappedObjectCreateWithDictionary(
    value: CGPDFDictionaryRef,
) -> CFRetained<CGPDFWrappedObject> {
    extern "C-unwind" {
        fn CGPDFWrappedObjectCreateWithDictionary(
            value: CGPDFDictionaryRef,
        ) -> Option<NonNull<CGPDFWrappedObject>>;
    }
    let ret = unsafe { CGPDFWrappedObjectCreateWithDictionary(value) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

#[cfg(feature = "CGPDFStream")]
#[deprecated = "renamed to `CGPDFWrappedObject::with_stream`"]
#[inline]
pub unsafe extern "C-unwind" fn CGPDFWrappedObjectCreateWithStream(
    value: CGPDFStreamRef,
) -> CFRetained<CGPDFWrappedObject> {
    extern "C-unwind" {
        fn CGPDFWrappedObjectCreateWithStream(
            value: CGPDFStreamRef,
        ) -> Option<NonNull<CGPDFWrappedObject>>;
    }
    let ret = unsafe { CGPDFWrappedObjectCreateWithStream(value) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}
