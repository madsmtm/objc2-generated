//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_app_kit::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-image-capture-core")]
use objc2_image_capture_core::*;

use crate::*;

extern_protocol!(
    /// A delegate of IKCameraDeviceView must conform to IKCameraDeviceViewDelegate protocol.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quartz/ikcameradeviceviewdelegate?language=objc)
    pub unsafe trait IKCameraDeviceViewDelegate {
        /// This message is sent when the user selection did change.
        ///
        /// # Safety
        ///
        /// `camera_device_view` might not allow `None`.
        #[optional]
        #[unsafe(method(cameraDeviceViewSelectionDidChange:))]
        #[unsafe(method_family = none)]
        unsafe fn cameraDeviceViewSelectionDidChange(
            &self,
            camera_device_view: Option<&IKCameraDeviceView>,
        );

        #[cfg(feature = "objc2-image-capture-core")]
        /// This message is sent for each file that gets downloaded.
        ///
        /// Based on the IKCameraDeviceViewDisplayMode the downloaded file will be saved on disk using the 'url', or returned in memory as NSData
        ///
        /// # Safety
        ///
        /// - `camera_device_view` might not allow `None`.
        /// - `file` might not allow `None`.
        /// - `url` might not allow `None`.
        /// - `data` might not allow `None`.
        /// - `error` might not allow `None`.
        #[optional]
        #[unsafe(method(cameraDeviceView:didDownloadFile:location:fileData:error:))]
        #[unsafe(method_family = none)]
        unsafe fn cameraDeviceView_didDownloadFile_location_fileData_error(
            &self,
            camera_device_view: Option<&IKCameraDeviceView>,
            file: Option<&ICCameraFile>,
            url: Option<&NSURL>,
            data: Option<&NSData>,
            error: Option<&NSError>,
        );

        /// This message is sent every time the camera device reports an error.
        ///
        /// # Safety
        ///
        /// - `camera_device_view` might not allow `None`.
        /// - `error` might not allow `None`.
        #[optional]
        #[unsafe(method(cameraDeviceView:didEncounterError:))]
        #[unsafe(method_family = none)]
        unsafe fn cameraDeviceView_didEncounterError(
            &self,
            camera_device_view: Option<&IKCameraDeviceView>,
            error: Option<&NSError>,
        );
    }
);

/// [Apple's documentation](https://developer.apple.com/documentation/quartz/ikcameradeviceviewdisplaymode?language=objc)
// NS_CLOSED_ENUM
#[repr(isize)] // NSInteger
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum IKCameraDeviceViewDisplayMode {
    #[doc(alias = "IKCameraDeviceViewDisplayModeNone")]
    None = -1,
    #[doc(alias = "IKCameraDeviceViewDisplayModeTable")]
    Table = 0,
    #[doc(alias = "IKCameraDeviceViewDisplayModeIcon")]
    Icon = 1,
}

unsafe impl Encode for IKCameraDeviceViewDisplayMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for IKCameraDeviceViewDisplayMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/quartz/ikcameradeviceviewtransfermode?language=objc)
// NS_CLOSED_ENUM
#[repr(isize)] // NSInteger
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum IKCameraDeviceViewTransferMode {
    #[doc(alias = "IKCameraDeviceViewTransferModeFileBased")]
    FileBased = 0,
    #[doc(alias = "IKCameraDeviceViewTransferModeMemoryBased")]
    MemoryBased = 1,
}

unsafe impl Encode for IKCameraDeviceViewTransferMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for IKCameraDeviceViewTransferMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// IKCameraDeviceView displays content of a Image Capture supported camera.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/quartz/ikcameradeviceview?language=objc)
    #[unsafe(super(NSView, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct IKCameraDeviceView;
);

extern_conformance!(
    unsafe impl NSAccessibility for IKCameraDeviceView {}
);

extern_conformance!(
    unsafe impl NSAccessibilityElementProtocol for IKCameraDeviceView {}
);

extern_conformance!(
    unsafe impl NSAnimatablePropertyContainer for IKCameraDeviceView {}
);

extern_conformance!(
    unsafe impl NSAppearanceCustomization for IKCameraDeviceView {}
);

extern_conformance!(
    unsafe impl NSCoding for IKCameraDeviceView {}
);

extern_conformance!(
    unsafe impl NSDraggingDestination for IKCameraDeviceView {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for IKCameraDeviceView {}
);

extern_conformance!(
    unsafe impl NSUserInterfaceItemIdentification for IKCameraDeviceView {}
);

impl IKCameraDeviceView {
    extern_methods!(
        /// Delegate of the IKCameraDeviceView.
        ///
        /// # Safety
        ///
        /// This is not retained internally, you must ensure the object is still alive.
        #[unsafe(method(delegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn IKCameraDeviceViewDelegate>>>;

        /// Setter for [`delegate`][Self::delegate].
        ///
        /// # Safety
        ///
        /// This is unretained, you must ensure the object is kept alive while in use.
        #[unsafe(method(setDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn IKCameraDeviceViewDelegate>>,
        );

        #[cfg(feature = "objc2-image-capture-core")]
        /// the camera device.
        ///
        /// # Safety
        ///
        /// This is not retained internally, you must ensure the object is still alive.
        #[unsafe(method(cameraDevice))]
        #[unsafe(method_family = none)]
        pub unsafe fn cameraDevice(&self) -> Option<Retained<ICCameraDevice>>;

        #[cfg(feature = "objc2-image-capture-core")]
        /// Setter for [`cameraDevice`][Self::cameraDevice].
        ///
        /// # Safety
        ///
        /// This is unretained, you must ensure the object is kept alive while in use.
        #[unsafe(method(setCameraDevice:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCameraDevice(&self, camera_device: Option<&ICCameraDevice>);

        /// current display mode.
        #[unsafe(method(mode))]
        #[unsafe(method_family = none)]
        pub unsafe fn mode(&self) -> IKCameraDeviceViewDisplayMode;

        /// Setter for [`mode`][Self::mode].
        #[unsafe(method(setMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMode(&self, mode: IKCameraDeviceViewDisplayMode);

        /// support table view display mode.
        #[unsafe(method(hasDisplayModeTable))]
        #[unsafe(method_family = none)]
        pub unsafe fn hasDisplayModeTable(&self) -> bool;

        /// Setter for [`hasDisplayModeTable`][Self::hasDisplayModeTable].
        #[unsafe(method(setHasDisplayModeTable:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setHasDisplayModeTable(&self, has_display_mode_table: bool);

        /// support icon view display mode.
        #[unsafe(method(hasDisplayModeIcon))]
        #[unsafe(method_family = none)]
        pub unsafe fn hasDisplayModeIcon(&self) -> bool;

        /// Setter for [`hasDisplayModeIcon`][Self::hasDisplayModeIcon].
        #[unsafe(method(setHasDisplayModeIcon:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setHasDisplayModeIcon(&self, has_display_mode_icon: bool);

        /// label for the 'Download All' control - allows for example renaming to 'Import All'.
        #[unsafe(method(downloadAllControlLabel))]
        #[unsafe(method_family = none)]
        pub unsafe fn downloadAllControlLabel(&self) -> Retained<NSString>;

        /// Setter for [`downloadAllControlLabel`][Self::downloadAllControlLabel].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setDownloadAllControlLabel:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDownloadAllControlLabel(
            &self,
            download_all_control_label: Option<&NSString>,
        );

        /// label for the 'Download Selected' control.
        #[unsafe(method(downloadSelectedControlLabel))]
        #[unsafe(method_family = none)]
        pub unsafe fn downloadSelectedControlLabel(&self) -> Retained<NSString>;

        /// Setter for [`downloadSelectedControlLabel`][Self::downloadSelectedControlLabel].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setDownloadSelectedControlLabel:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDownloadSelectedControlLabel(
            &self,
            download_selected_control_label: Option<&NSString>,
        );

        /// in icon mode: size of the image thumbnails.
        #[unsafe(method(iconSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn iconSize(&self) -> NSUInteger;

        /// Setter for [`iconSize`][Self::iconSize].
        #[unsafe(method(setIconSize:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setIconSize(&self, icon_size: NSUInteger);

        /// transfer mode either file based - or - in memory.
        #[unsafe(method(transferMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn transferMode(&self) -> IKCameraDeviceViewTransferMode;

        /// Setter for [`transferMode`][Self::transferMode].
        #[unsafe(method(setTransferMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTransferMode(&self, transfer_mode: IKCameraDeviceViewTransferMode);

        /// show a downloads directory control.
        #[unsafe(method(displaysDownloadsDirectoryControl))]
        #[unsafe(method_family = none)]
        pub unsafe fn displaysDownloadsDirectoryControl(&self) -> bool;

        /// Setter for [`displaysDownloadsDirectoryControl`][Self::displaysDownloadsDirectoryControl].
        #[unsafe(method(setDisplaysDownloadsDirectoryControl:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDisplaysDownloadsDirectoryControl(
            &self,
            displays_downloads_directory_control: bool,
        );

        /// downloads directory.
        #[unsafe(method(downloadsDirectory))]
        #[unsafe(method_family = none)]
        pub unsafe fn downloadsDirectory(&self) -> Option<Retained<NSURL>>;

        /// Setter for [`downloadsDirectory`][Self::downloadsDirectory].
        ///
        /// # Safety
        ///
        /// `downloads_directory` might not allow `None`.
        #[unsafe(method(setDownloadsDirectory:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDownloadsDirectory(&self, downloads_directory: Option<&NSURL>);

        /// show a postprocessing application control.
        #[unsafe(method(displaysPostProcessApplicationControl))]
        #[unsafe(method_family = none)]
        pub unsafe fn displaysPostProcessApplicationControl(&self) -> bool;

        /// Setter for [`displaysPostProcessApplicationControl`][Self::displaysPostProcessApplicationControl].
        #[unsafe(method(setDisplaysPostProcessApplicationControl:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDisplaysPostProcessApplicationControl(
            &self,
            displays_post_process_application_control: bool,
        );

        /// postprocessing application.
        #[unsafe(method(postProcessApplication))]
        #[unsafe(method_family = none)]
        pub unsafe fn postProcessApplication(&self) -> Option<Retained<NSURL>>;

        /// Setter for [`postProcessApplication`][Self::postProcessApplication].
        ///
        /// # Safety
        ///
        /// `post_process_application` might not allow `None`.
        #[unsafe(method(setPostProcessApplication:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPostProcessApplication(&self, post_process_application: Option<&NSURL>);

        /// indicates if the user selected items can be rotated left.
        #[unsafe(method(canRotateSelectedItemsLeft))]
        #[unsafe(method_family = none)]
        pub unsafe fn canRotateSelectedItemsLeft(&self) -> bool;

        /// indicates if the user selected items can be rotated right.
        #[unsafe(method(canRotateSelectedItemsRight))]
        #[unsafe(method_family = none)]
        pub unsafe fn canRotateSelectedItemsRight(&self) -> bool;

        /// indicates if the user selected items can be deleted.
        #[unsafe(method(canDeleteSelectedItems))]
        #[unsafe(method_family = none)]
        pub unsafe fn canDeleteSelectedItems(&self) -> bool;

        /// indicates if the user selected items can be downloaded.
        #[unsafe(method(canDownloadSelectedItems))]
        #[unsafe(method_family = none)]
        pub unsafe fn canDownloadSelectedItems(&self) -> bool;

        /// current user selection.
        #[unsafe(method(selectedIndexes))]
        #[unsafe(method_family = none)]
        pub unsafe fn selectedIndexes(&self) -> Option<Retained<NSIndexSet>>;

        /// setting current user selection.
        ///
        /// # Safety
        ///
        /// `indexes` might not allow `None`.
        #[unsafe(method(selectIndexes:byExtendingSelection:))]
        #[unsafe(method_family = none)]
        pub unsafe fn selectIndexes_byExtendingSelection(
            &self,
            indexes: Option<&NSIndexSet>,
            extend: bool,
        );

        /// rotate selected items left.
        ///
        /// # Safety
        ///
        /// - `sender` should be of the correct type.
        /// - `sender` might not allow `None`.
        #[unsafe(method(rotateLeft:))]
        #[unsafe(method_family = none)]
        pub unsafe fn rotateLeft(&self, sender: Option<&AnyObject>);

        /// rotate selected items right.
        ///
        /// # Safety
        ///
        /// - `sender` should be of the correct type.
        /// - `sender` might not allow `None`.
        #[unsafe(method(rotateRight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn rotateRight(&self, sender: Option<&AnyObject>);

        /// delete selected items.
        ///
        /// # Safety
        ///
        /// - `sender` should be of the correct type.
        /// - `sender` might not allow `None`.
        #[unsafe(method(deleteSelectedItems:))]
        #[unsafe(method_family = none)]
        pub unsafe fn deleteSelectedItems(&self, sender: Option<&AnyObject>);

        /// download selected items.
        ///
        /// # Safety
        ///
        /// - `sender` should be of the correct type.
        /// - `sender` might not allow `None`.
        #[unsafe(method(downloadSelectedItems:))]
        #[unsafe(method_family = none)]
        pub unsafe fn downloadSelectedItems(&self, sender: Option<&AnyObject>);

        /// download all items.
        ///
        /// # Safety
        ///
        /// - `sender` should be of the correct type.
        /// - `sender` might not allow `None`.
        #[unsafe(method(downloadAllItems:))]
        #[unsafe(method_family = none)]
        pub unsafe fn downloadAllItems(&self, sender: Option<&AnyObject>);

        /// provide your own NSSlider to resize item thumbnails
        ///
        /// # Safety
        ///
        /// `slider` might not allow `None`.
        #[unsafe(method(setCustomIconSizeSlider:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCustomIconSizeSlider(&self, slider: Option<&NSSlider>);

        /// provide your own control to toggle between IKCameraDeviceViewDisplayMode table / icon
        ///
        /// # Safety
        ///
        /// `control` might not allow `None`.
        #[unsafe(method(setCustomModeControl:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCustomModeControl(&self, control: Option<&NSSegmentedControl>);

        /// provide your own control to toggle between IKCameraDeviceViewDisplayMode table / icon
        ///
        /// # Safety
        ///
        /// `control` might not allow `None`.
        #[unsafe(method(setCustomActionControl:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCustomActionControl(&self, control: Option<&NSSegmentedControl>);

        /// provide your own control to rotate items (multiple of 90º)
        ///
        /// # Safety
        ///
        /// `control` might not allow `None`.
        #[unsafe(method(setCustomRotateControl:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCustomRotateControl(&self, control: Option<&NSSegmentedControl>);

        /// provide your own control to delete selected items
        ///
        /// # Safety
        ///
        /// `control` might not allow `None`.
        #[unsafe(method(setCustomDeleteControl:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCustomDeleteControl(&self, control: Option<&NSSegmentedControl>);

        /// display status info as window subtitle
        #[unsafe(method(setShowStatusInfoAsWindowSubtitle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setShowStatusInfoAsWindowSubtitle(&self, value: bool);
    );
}

/// Methods declared on superclass `NSView`.
impl IKCameraDeviceView {
    extern_methods!(
        #[unsafe(method(initWithFrame:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame_rect: NSRect) -> Retained<Self>;

        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    );
}

/// Methods declared on superclass `NSResponder`.
impl IKCameraDeviceView {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
impl IKCameraDeviceView {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}
