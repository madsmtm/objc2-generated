//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// This is the type of a reference to MDItems.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coreservices/mditem?language=objc)
#[repr(C)]
pub struct MDItem {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl MDItem {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"__MDItem"> for MDItem {}
);

unsafe impl ConcreteType for MDItem {
    /// Returns the type identifier of all MDItem instances.
    #[doc(alias = "MDItemGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn MDItemGetTypeID() -> CFTypeID;
        }
        unsafe { MDItemGetTypeID() }
    }
}

impl MDItem {
    /// Returns an metadata item for the given path.
    ///
    /// Parameter `allocator`: The CFAllocator which should be used to allocate
    /// memory for the query and its sub-storage. This
    /// parameter may be NULL in which case the current default
    /// CFAllocator is used.
    ///
    /// Parameter `path`: A path to the file for which to create the MDItem.
    /// [[Currently, the path must exist. MDItemRefs may or
    /// may not be uniqued. Use CFEqual() to compare them.]]
    ///
    /// Returns: An MDItemRef, or NULL on failure.
    ///
    /// # Safety
    ///
    /// - `allocator` might not allow `None`.
    /// - `path` might not allow `None`.
    #[doc(alias = "MDItemCreate")]
    #[inline]
    pub unsafe fn new(
        allocator: Option<&CFAllocator>,
        path: Option<&CFString>,
    ) -> Option<CFRetained<MDItem>> {
        extern "C-unwind" {
            fn MDItemCreate(
                allocator: Option<&CFAllocator>,
                path: Option<&CFString>,
            ) -> Option<NonNull<MDItem>>;
        }
        let ret = unsafe { MDItemCreate(allocator, path) };
        ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
    }

    /// Returns an metadata item for the given path.
    ///
    /// Parameter `allocator`: The CFAllocator which should be used to allocate
    /// memory for the query and its sub-storage. This
    /// parameter may be NULL in which case the current default
    /// CFAllocator is used.
    ///
    /// Parameter `url`: A url to the file for which to create the MDItem.
    /// [[Currently, the file must exist. MDItemRefs may or
    /// may not be uniqued. Use CFEqual() to compare them.]]
    ///
    /// Returns: An MDItemRef, or NULL on failure.
    ///
    /// # Safety
    ///
    /// - `allocator` might not allow `None`.
    /// - `url` might not allow `None`.
    #[doc(alias = "MDItemCreateWithURL")]
    #[inline]
    pub unsafe fn with_url(
        allocator: Option<&CFAllocator>,
        url: Option<&CFURL>,
    ) -> Option<CFRetained<MDItem>> {
        extern "C-unwind" {
            fn MDItemCreateWithURL(
                allocator: Option<&CFAllocator>,
                url: Option<&CFURL>,
            ) -> Option<NonNull<MDItem>>;
        }
        let ret = unsafe { MDItemCreateWithURL(allocator, url) };
        ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
    }
}

/// Returns metadata items for the given urls.
///
/// Parameter `allocator`: The CFAllocator which should be used to allocate
/// memory for the array. This parameter may be NULL in which case the current default
/// CFAllocator is used.
///
/// Parameter `urls`: A CFArray of urls to the file for which to create the MDItem.
///
/// Returns: A CFArrayRef of MDItemRefs, or NULL on failure. Missing items will have kCFNull entries in the result array.
///
/// # Safety
///
/// - `allocator` might not allow `None`.
/// - `urls` generic must be of the correct type.
/// - `urls` might not allow `None`.
#[inline]
pub unsafe extern "C-unwind" fn MDItemsCreateWithURLs(
    allocator: Option<&CFAllocator>,
    urls: Option<&CFArray>,
) -> Option<CFRetained<CFArray>> {
    extern "C-unwind" {
        fn MDItemsCreateWithURLs(
            allocator: Option<&CFAllocator>,
            urls: Option<&CFArray>,
        ) -> Option<NonNull<CFArray>>;
    }
    let ret = unsafe { MDItemsCreateWithURLs(allocator, urls) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

impl MDItem {
    /// Returns the value of the given attribute for the item.
    ///
    /// Parameter `item`: The item to be interrogated.
    ///
    /// Parameter `name`: The name of the desired attribute.
    ///
    /// Returns: A CFTypeRef, or NULL on failure, or if the attribute
    /// does not exist, of if the attribute is not readable.
    ///
    /// # Safety
    ///
    /// `name` might not allow `None`.
    #[doc(alias = "MDItemCopyAttribute")]
    #[inline]
    pub unsafe fn attribute(&self, name: Option<&CFString>) -> Option<CFRetained<CFType>> {
        extern "C-unwind" {
            fn MDItemCopyAttribute(
                item: &MDItem,
                name: Option<&CFString>,
            ) -> Option<NonNull<CFType>>;
        }
        let ret = unsafe { MDItemCopyAttribute(self, name) };
        ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
    }

    /// Returns the values of the given attributes for the item.
    ///
    /// Parameter `item`: The item to be interrogated.
    ///
    /// Parameter `names`: A CFArray of the names of the desired attributes.
    ///
    /// Returns: A CFDictionary where the keys are the attribute names,
    /// and the values are the attribute values, or NULL on
    /// failure. If an attribute does not exist, or is
    /// unreadable, there will be no key-value pair for it
    /// in the dictionary.
    ///
    /// # Safety
    ///
    /// - `names` generic must be of the correct type.
    /// - `names` might not allow `None`.
    #[doc(alias = "MDItemCopyAttributes")]
    #[inline]
    pub unsafe fn attributes(&self, names: Option<&CFArray>) -> Option<CFRetained<CFDictionary>> {
        extern "C-unwind" {
            fn MDItemCopyAttributes(
                item: &MDItem,
                names: Option<&CFArray>,
            ) -> Option<NonNull<CFDictionary>>;
        }
        let ret = unsafe { MDItemCopyAttributes(self, names) };
        ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
    }

    /// Returns an array of the attribute names existing in the item.
    ///
    /// Parameter `item`: The item to be interrogated.
    ///
    /// Returns: A CFArray of CFString attribute names, or NULL on
    /// failure.
    #[doc(alias = "MDItemCopyAttributeNames")]
    #[inline]
    pub unsafe fn attribute_names(&self) -> Option<CFRetained<CFArray>> {
        extern "C-unwind" {
            fn MDItemCopyAttributeNames(item: &MDItem) -> Option<NonNull<CFArray>>;
        }
        let ret = unsafe { MDItemCopyAttributeNames(self) };
        ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
    }
}

/// Returns metadata for the given items.
///
/// Parameter `items`: A CFArray of MDItemRefs to items for which to fetch data
///
/// Parameter `names`: A CFArray of attribute names for which to fetch data.
/// The attribute names are CFStrings
///
/// Returns: A CFArrayRef, or NULL on failure. Each entry in the array is either kCFNull,
/// if the item is not accessible, or a CFArray of attribute values.
/// If an attribute is not available, there will be a kCFNull in its slot in the nested array.
///
/// # Safety
///
/// - `items` generic must be of the correct type.
/// - `items` might not allow `None`.
/// - `names` generic must be of the correct type.
/// - `names` might not allow `None`.
#[inline]
pub unsafe extern "C-unwind" fn MDItemsCopyAttributes(
    items: Option<&CFArray>,
    names: Option<&CFArray>,
) -> Option<CFRetained<CFArray>> {
    extern "C-unwind" {
        fn MDItemsCopyAttributes(
            items: Option<&CFArray>,
            names: Option<&CFArray>,
        ) -> Option<NonNull<CFArray>>;
    }
    let ret = unsafe { MDItemsCopyAttributes(items, names) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

impl MDItem {
    /// # Safety
    ///
    /// - `items` generic must be of the correct type.
    /// - `items` might not allow `None`.
    /// - `completion_handler` might not allow `None`.
    #[doc(alias = "MDItemGetCacheFileDescriptors")]
    #[cfg(feature = "block2")]
    #[inline]
    pub unsafe fn cache_file_descriptors(
        items: Option<&CFArray>,
        completion_handler: Option<&block2::DynBlock<dyn Fn(*const CFArray)>>,
    ) {
        extern "C-unwind" {
            fn MDItemGetCacheFileDescriptors(
                items: Option<&CFArray>,
                completion_handler: Option<&block2::DynBlock<dyn Fn(*const CFArray)>>,
            );
        }
        unsafe { MDItemGetCacheFileDescriptors(items, completion_handler) }
    }
}

extern "C" {
    /// This is the date that the last metadata attribute was changed.
    ///
    ///
    /// UTI Type pedigree for a file for example a jpeg file will have the
    /// following ItemContentType public.jpeg/public.image/public.data
    /// the kMDItemContentType is set by the sniffer, any changes to this
    /// value will get over written by the sniffer when the contents of
    /// this MDItemRef changes. Type is a CFStringRef
    ///
    ///
    /// Represents keywords associated with this particular
    /// MDItemRef. Example Keywords might be Birthday,Important etc. Type
    /// is a CFArray of CFStrings
    ///
    ///
    /// The title of this particular MDItemRef. Title of the document, or
    /// it could be the title of this mp3 or a subject of a mail
    /// message. Type is a CFString
    ///
    ///
    /// The list of author/authors that has worked on this file. There
    /// could be 0 or more authors of a particular file. The order of the
    /// authors in the array is preserved, but is not intended to represent
    /// the main author or relative importance of the authors. Type is a
    /// CFArray of CFStrings.
    ///
    ///
    /// The list of editor/editors that has worked on this file. There
    /// could be 0 or more editors of a particular file. The order of the
    /// editors in the array is preserved, but is not intended to represent
    /// the main editor or relative importance of the editors. Type is a
    /// CFArray of CFStrings.
    ///
    ///
    /// The list of people who are visible in an image or movie or
    /// written about in a document. Type is CFArray of CFStrings.
    ///
    ///
    /// The list of projects etc that this file is part of. For example if
    /// you were working on a movie, all of the movie files could be marked
    /// as belonging to the project "My movie" then a query could be done
    /// kMDItemProjects = "My movie" and all of the related files would
    /// show up. Type is a CFArray of CFStrings
    ///
    ///
    /// This is a comment related to a file, and can be any random
    /// string. Type is a CFString
    ///
    ///
    /// This is the copyright of the content. Type is a CFString
    ///
    ///
    /// This is the date that the file was last downloaded / received.
    ///
    ///
    /// This attribute indicates where the item was obtained from.
    /// Examples:
    /// - downloaded file may refer to the site they were downloaded from,
    /// the refering URL, etc
    /// - files reveived by email may indicate who sent the file, the
    /// message subject, etc
    /// Type is a CFArray of CFStrings
    ///
    ///
    /// This is the date that the file was last used, this field is updated
    /// by LaunchServices everytime a file is opend by double clicking or
    /// by asking LaunchServices to open a file. Type is a CFDate
    ///
    ///
    /// This is the date that the contents of the file were created,
    /// has an application specific semantic.
    /// Type is a CFDate.
    ///
    ///
    /// This is the date that the contents of the file were last
    /// modified, has an application specific semantic. For example an
    /// application can use this field to mark when the file was last
    /// modified, this date is not related to the file system modification
    /// date, but can be independent of that. This allows tracking of the
    /// last time the content was modified irrespective of the last time the
    /// file was modified. Type is a CFDate.
    ///
    ///
    /// This is the date that the file was moved into the current location.
    /// Not all files will have this attribute.  Not all file systems support
    /// this attribute.
    ///
    ///
    /// This is the duration, in seconds, of the content of the file (if
    /// appropriate).  A value of 10.5 represents media whose content is
    /// 10 and 1/2 seconds long.  Type is a CFNumber.
    ///
    ///
    /// A list of contacts that are somehow associated with this document,
    /// beyond what is captured as Author.
    ///
    ///
    /// A version number for this item. Type is a CFString
    ///
    ///
    /// The height of the document in pixels (ie Image height or Video frame height)
    ///
    ///
    /// The width of the document in pixels (ie Image width or Video frame width)
    ///
    ///
    /// The total number of pixels in the document.  Type is a CFNumber.
    ///
    ///
    /// What color space model is this document following
    /// (For example, are examples "RGB", "CMYK", "YUV", "YCbCr")
    ///
    ///
    /// Number of bits per sample
    /// For example bit depth of an image (8-bit, 16-bit etc..) or bit
    /// depth per audio sample of uncompressed audio data (8, 16, 24, 32,
    /// 64, etc..)
    ///
    ///
    /// Indicates if the flash was used to take the picture. 0 means flash did not fire
    ///
    ///
    /// The actual focal length of the lens in mm.
    ///
    ///
    /// Device make that was used to acquire this document
    ///
    ///
    /// Device model that was used to acquire this document
    ///
    ///
    /// The ISO Speed the camera was set to when the image was
    /// taken. Examples are 100, 200, 400, etc.
    ///
    ///
    /// The orientation of the data. Values are 0 is "Landscape" or 1 is "Portrait"
    ///
    ///
    /// The names of the various layers in the file
    ///
    ///
    /// The white balance setting of the camera when the image was
    /// acquired. 0 is auto white balance and 1 is manual
    ///
    ///
    /// The size of the lens aperture as a log-scale APEX value
    /// when the image was acquired.
    ///
    ///
    /// Name of the color profile used for the image
    ///
    ///
    /// Resolution width of this image in DPI
    ///
    ///
    /// Resolution height of this image in DPI
    ///
    ///
    /// Mode that was used for the exposure. 0 is auto exposure, 1 is
    /// manual, and 2 is auto bracket.
    ///
    ///
    /// Time that the lens was open during exposure
    ///
    ///
    /// Lens model that was used to acquire this document
    ///
    ///
    /// The verion of the EXIF header that was used to generate the metadata
    ///
    ///
    /// The version of GPSInfoIFD header that was used to generate the metadata
    ///
    ///
    /// The codecs used to encode/decode the media
    ///
    ///
    /// The media extensions used to decode the media
    ///
    ///
    /// Media types present in the content
    ///
    ///
    /// Whether the content is prepared for streaming
    ///
    ///
    /// The total byte rate (audio
    /// &
    /// video combined) of the media
    ///
    ///
    /// The video byte rate
    ///
    ///
    /// The audio byte rate
    ///
    ///
    /// Delivery type Fast start or RTSP
    ///
    ///
    /// The title for a collection of media. This is analagous to a record album,
    /// or photo album whichs are collections of audio or images. Type is a CFString.
    ///
    ///
    /// Boolean indicating if this image file has an alpha channel. Type is
    /// a CFBoolean.
    ///
    ///
    /// Indicates if the flash was used to take the picture. 0 means no
    /// red-eye reduction mode or unknown. 1 means red-eye reduction
    /// supported.
    ///
    ///
    /// The metering mode (Unknown, Average, CenterWeightedAverage, Spot,
    /// MultiSpot, Pattern, Partial)
    ///
    ///
    /// The smallest F number of the lens. The unit is the APEX
    /// value. Ordinarily it is given in the range of 00.00 to 99.99.
    ///
    ///
    /// The focal length of the lens divided by the diameter of the aperture
    /// when the image was acquired.
    ///
    ///
    /// The class of the program used by the camera to set exposure when
    /// the picture is taken (Manual, Normal, Aperture priority, ...)
    ///
    ///
    /// The time  of the exposure.
    ///
    ///
    /// A publishable entry providing a synopsis of the contents of the
    /// objectdata.
    ///
    ///
    /// Other editorial instructions concerning the use of the objectdata,
    /// such as embargoes and warnings.
    ///
    ///
    /// Identifies city of objectdata origin according to guidelines
    /// established by the provider.
    ///
    ///
    /// Identifies Province/State of origin according to guidelines
    /// established by the provider.
    ///
    ///
    /// Provides full, publishable, name of the country/primary location
    /// where the intellectual property of the objectdata was created,
    /// according to guidelines of the provider.
    ///
    ///
    /// The version of GPSInfoIFD in EXIF used to generate the metadata.
    ///
    ///
    /// The altitude of the item in meters above sea level, expressed
    /// using the WGS84 datum.  Negative values lie below sea level.
    ///
    ///
    /// The latitude of the item in degrees north of the equator, expressed
    /// using the WGS84 datum.  Negative values lie south of the equator.
    ///
    ///
    /// The longitude of the item in degrees east of the prime meridian,
    /// expressed using the WGS84 datum.  Negative values lie west of the prime meridian.
    ///
    ///
    /// The timestamp on the item.  This generally is used to indicate the time at
    /// which the event captured by the item took place.
    ///
    ///
    /// The speed of the item, in kilometers per hour.
    ///
    ///
    /// The direction of travel of the item, in degrees from true north.
    ///
    ///
    /// The direction of the item's image, in degrees from true north.
    ///
    ///
    /// The name of the location or point of interest associated with the item.
    /// The name may be user provided.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemattributechangedate?language=objc)
    pub static kMDItemAttributeChangeDate: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcontenttype?language=objc)
    pub static kMDItemContentType: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcontenttypetree?language=objc)
    pub static kMDItemContentTypeTree: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemkeywords?language=objc)
    pub static kMDItemKeywords: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemtitle?language=objc)
    pub static kMDItemTitle: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemauthors?language=objc)
    pub static kMDItemAuthors: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemeditors?language=objc)
    pub static kMDItemEditors: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemparticipants?language=objc)
    pub static kMDItemParticipants: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemprojects?language=objc)
    pub static kMDItemProjects: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemdownloadeddate?language=objc)
    pub static kMDItemDownloadedDate: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemwherefroms?language=objc)
    pub static kMDItemWhereFroms: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcomment?language=objc)
    pub static kMDItemComment: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcopyright?language=objc)
    pub static kMDItemCopyright: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemlastuseddate?language=objc)
    pub static kMDItemLastUsedDate: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcontentcreationdate?language=objc)
    pub static kMDItemContentCreationDate: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcontentmodificationdate?language=objc)
    pub static kMDItemContentModificationDate: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemdateadded?language=objc)
    pub static kMDItemDateAdded: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemdurationseconds?language=objc)
    pub static kMDItemDurationSeconds: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcontactkeywords?language=objc)
    pub static kMDItemContactKeywords: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemversion?language=objc)
    pub static kMDItemVersion: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditempixelheight?language=objc)
    pub static kMDItemPixelHeight: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemxmpcredit?language=objc)
    pub static kMDItemXMPCredit: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemxmpdigitalsourcetype?language=objc)
    pub static kMDItemXMPDigitalSourceType: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditempixelwidth?language=objc)
    pub static kMDItemPixelWidth: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditempixelcount?language=objc)
    pub static kMDItemPixelCount: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcolorspace?language=objc)
    pub static kMDItemColorSpace: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditembitspersample?language=objc)
    pub static kMDItemBitsPerSample: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemflashonoff?language=objc)
    pub static kMDItemFlashOnOff: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfocallength?language=objc)
    pub static kMDItemFocalLength: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemacquisitionmake?language=objc)
    pub static kMDItemAcquisitionMake: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemacquisitionmodel?language=objc)
    pub static kMDItemAcquisitionModel: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemisospeed?language=objc)
    pub static kMDItemISOSpeed: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemorientation?language=objc)
    pub static kMDItemOrientation: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemlayernames?language=objc)
    pub static kMDItemLayerNames: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemwhitebalance?language=objc)
    pub static kMDItemWhiteBalance: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemaperture?language=objc)
    pub static kMDItemAperture: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemprofilename?language=objc)
    pub static kMDItemProfileName: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemresolutionwidthdpi?language=objc)
    pub static kMDItemResolutionWidthDPI: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemresolutionheightdpi?language=objc)
    pub static kMDItemResolutionHeightDPI: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemexposuremode?language=objc)
    pub static kMDItemExposureMode: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemexposuretimeseconds?language=objc)
    pub static kMDItemExposureTimeSeconds: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemexifversion?language=objc)
    pub static kMDItemEXIFVersion: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcameraowner?language=objc)
    pub static kMDItemCameraOwner: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfocallength35mm?language=objc)
    pub static kMDItemFocalLength35mm: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemlensmodel?language=objc)
    pub static kMDItemLensModel: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemexifgpsversion?language=objc)
    pub static kMDItemEXIFGPSVersion: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemaltitude?language=objc)
    pub static kMDItemAltitude: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemlatitude?language=objc)
    pub static kMDItemLatitude: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemlongitude?language=objc)
    pub static kMDItemLongitude: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemspeed?language=objc)
    pub static kMDItemSpeed: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemtimestamp?language=objc)
    pub static kMDItemTimestamp: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemgpstrack?language=objc)
    pub static kMDItemGPSTrack: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemimagedirection?language=objc)
    pub static kMDItemImageDirection: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemnamedlocation?language=objc)
    pub static kMDItemNamedLocation: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemgpsstatus?language=objc)
    pub static kMDItemGPSStatus: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemgpsmeasuremode?language=objc)
    pub static kMDItemGPSMeasureMode: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemgpsdop?language=objc)
    pub static kMDItemGPSDOP: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemgpsmapdatum?language=objc)
    pub static kMDItemGPSMapDatum: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemgpsdestlatitude?language=objc)
    pub static kMDItemGPSDestLatitude: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemgpsdestlongitude?language=objc)
    pub static kMDItemGPSDestLongitude: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemgpsdestbearing?language=objc)
    pub static kMDItemGPSDestBearing: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemgpsdestdistance?language=objc)
    pub static kMDItemGPSDestDistance: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemgpsprocessingmethod?language=objc)
    pub static kMDItemGPSProcessingMethod: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemgpsareainformation?language=objc)
    pub static kMDItemGPSAreaInformation: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemgpsdatestamp?language=objc)
    pub static kMDItemGPSDateStamp: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemgpsdifferental?language=objc)
    pub static kMDItemGPSDifferental: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemmediaextensions?language=objc)
    pub static kMDItemMediaExtensions: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcodecs?language=objc)
    pub static kMDItemCodecs: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemmediatypes?language=objc)
    pub static kMDItemMediaTypes: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemstreamable?language=objc)
    pub static kMDItemStreamable: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemtotalbitrate?language=objc)
    pub static kMDItemTotalBitRate: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemvideobitrate?language=objc)
    pub static kMDItemVideoBitRate: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemaudiobitrate?language=objc)
    pub static kMDItemAudioBitRate: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemdeliverytype?language=objc)
    pub static kMDItemDeliveryType: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemalbum?language=objc)
    pub static kMDItemAlbum: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemhasalphachannel?language=objc)
    pub static kMDItemHasAlphaChannel: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemredeyeonoff?language=objc)
    pub static kMDItemRedEyeOnOff: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemmeteringmode?language=objc)
    pub static kMDItemMeteringMode: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemmaxaperture?language=objc)
    pub static kMDItemMaxAperture: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfnumber?language=objc)
    pub static kMDItemFNumber: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemexposureprogram?language=objc)
    pub static kMDItemExposureProgram: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemexposuretimestring?language=objc)
    pub static kMDItemExposureTimeString: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemheadline?language=objc)
    pub static kMDItemHeadline: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditeminstructions?language=objc)
    pub static kMDItemInstructions: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcity?language=objc)
    pub static kMDItemCity: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemstateorprovince?language=objc)
    pub static kMDItemStateOrProvince: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcountry?language=objc)
    pub static kMDItemCountry: Option<&'static CFString>;
}

extern "C" {
    /// Contains the HTML content of the document. Type is a CFString.
    /// This field is only used by Spotlight importers to return HTML contents of a file.  Except in special cases,
    /// this field is not a replacement for kMDItemTextContent which should still be returned.
    /// This field does not particpate in Spotlight queries.
    ///
    ///
    /// Contains the text content of the document. Type is a CFString.
    ///
    ///
    /// This is the localized version of the LaunchServices call
    /// LSCopyDisplayNameForURL()/LSCopyDisplayNameForRef().
    ///
    ///
    /// This is the file name of the MDItemRef. Type is a CFString
    ///
    ///
    /// This is the complete path to the MDItemRef. Type is a CFString.
    ///
    ///
    /// The total logical size of the file (data and resources) on disk in bytes. Type is a CFNumber.
    ///
    ///
    /// This is the date that the file was created. Type is a CFDate.
    ///
    ///
    /// This is the date the the file content last changed. This is a CFDate.
    ///
    ///
    /// User-id of owner of the file. Type is a CFNumber.
    ///
    ///
    /// Group-id of owner of the file. Type is a CFNumber.
    ///
    ///
    /// Boolean indicating if this MDItem references a file that still
    /// exists. The file that the MDItem references might have been
    /// deleted. Type is a CFBoolean.
    ///
    ///
    /// Boolean indicating if this file is readable. Type is a CFBoolean.
    ///
    ///
    /// Boolean indicating if this file is writable. Type is a CFBoolean.
    ///
    ///
    /// Number of files in directory. Type is a CFNumber.
    ///
    ///
    /// Boolean indicating if this file has a custom icon. Type is a CFBoolean.
    ///
    ///
    /// Boolean indicating if this file has its extension hidden. Type is a CFBoolean.
    ///
    ///
    /// Boolean indicating if this file is stationery. Type is a CFBoolean.
    ///
    ///
    /// Boolean indicating if this file is visible. Type is a CFBoolean.
    ///
    ///
    /// Number indicating which finder label is in use (0-7). Type is a CFNumber.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfsname?language=objc)
    pub static kMDItemFSName: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemdisplayname?language=objc)
    pub static kMDItemDisplayName: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditempath?language=objc)
    pub static kMDItemPath: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfssize?language=objc)
    pub static kMDItemFSSize: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfscreationdate?language=objc)
    pub static kMDItemFSCreationDate: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfscontentchangedate?language=objc)
    pub static kMDItemFSContentChangeDate: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfsowneruserid?language=objc)
    pub static kMDItemFSOwnerUserID: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfsownergroupid?language=objc)
    pub static kMDItemFSOwnerGroupID: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfsexists?language=objc)
    #[deprecated = "No longer supported"]
    pub static kMDItemFSExists: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfsisreadable?language=objc)
    #[deprecated = "No longer supported"]
    pub static kMDItemFSIsReadable: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfsiswriteable?language=objc)
    #[deprecated = "No longer supported"]
    pub static kMDItemFSIsWriteable: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfshascustomicon?language=objc)
    pub static kMDItemFSHasCustomIcon: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfsisextensionhidden?language=objc)
    pub static kMDItemFSIsExtensionHidden: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfsisstationery?language=objc)
    pub static kMDItemFSIsStationery: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfsinvisible?language=objc)
    pub static kMDItemFSInvisible: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfslabel?language=objc)
    pub static kMDItemFSLabel: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfsnodecount?language=objc)
    pub static kMDItemFSNodeCount: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemhtmlcontent?language=objc)
    pub static kMDItemHTMLContent: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemtextcontent?language=objc)
    pub static kMDItemTextContent: Option<&'static CFString>;
}

extern "C" {
    /// The sample rate of the audio data contained in the file. The sample rate is a
    /// float value representing hz (audio_frames/second). For example: 44100.0, 22254.54.
    /// Type is a CFNumber (float).
    ///
    ///
    /// The number of channels in the audio data contained in the file. This item only represents
    /// the number of discreet channels of audio data found in the file. It does not indicate
    /// any configuration of the data in regards to a user's speaker setup.
    /// Type is a CFNumber (integer).
    ///
    ///
    /// The tempo of the music contained in the audio file in Beats Per Minute.
    /// Type is a CFNumber (float).
    ///
    ///
    /// The musical key of the song/composition contained in an audio file.
    /// For example: C, Dm, F#m, Bb. Type is a CFString.
    ///
    ///
    /// The time signature of the musical composition contained in the audio/MIDI file.
    /// For example: "4/4", "7/8". Type is a CFString.
    ///
    ///
    /// The name of the application that encoded the data contained in the audio file.
    /// Type is a CFString.
    ///
    ///
    /// The composer of the song/composition contained in the audio file.
    /// Type is a CFString.
    ///
    ///
    /// The lyricist/text writer for song/composition contained in the audio file.
    /// Type is a CFString.
    ///
    ///
    /// The track number of a song/composition when it is part of an album (kMDItemAlbum).
    /// Type is a CFNumber (integer).
    ///
    ///
    /// The recording date of the song/composition. This information differs from
    /// the kMDItemContentCreationDate attribute as it indicates the date that the
    /// 'art' was created, in contrast to ContentCreationDate which for example, could indicate
    /// the creation date of an edited or 'mastered' version of the original art.
    /// Type is a CFDate.
    ///
    ///
    /// The musical genre of the song/composition contained in the audio file.
    /// For example: Jazz, Pop, Rock, Classical. Type is a CFString.
    ///
    ///
    /// This attribute indicates whether the MIDI sequence contained in the file
    /// is setup for use with a General MIDI device. Type is a CFBoolean.
    ///
    ///
    /// This attribute indicates what year the item was recorded on.
    /// Type is a CFNumber
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemaudiosamplerate?language=objc)
    pub static kMDItemAudioSampleRate: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemaudiochannelcount?language=objc)
    pub static kMDItemAudioChannelCount: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemtempo?language=objc)
    pub static kMDItemTempo: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemkeysignature?language=objc)
    pub static kMDItemKeySignature: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemtimesignature?language=objc)
    pub static kMDItemTimeSignature: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemaudioencodingapplication?language=objc)
    pub static kMDItemAudioEncodingApplication: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcomposer?language=objc)
    pub static kMDItemComposer: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemlyricist?language=objc)
    pub static kMDItemLyricist: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemaudiotracknumber?language=objc)
    pub static kMDItemAudioTrackNumber: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemrecordingdate?language=objc)
    pub static kMDItemRecordingDate: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemmusicalgenre?language=objc)
    pub static kMDItemMusicalGenre: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemisgeneralmidisequence?language=objc)
    pub static kMDItemIsGeneralMIDISequence: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemrecordingyear?language=objc)
    pub static kMDItemRecordingYear: Option<&'static CFString>;
}

extern "C" {
    /// Used to indicate company/Organization that created the document.
    /// Type is a CFArray of CFStrings.
    ///
    ///
    /// Used to designate the languages of the intellectual content of the
    /// resource. Recommended best practice for the values of the Language
    /// element is defined by RFC 3066.
    /// Type is a CFArray of CFStrings.
    ///
    ///
    /// Used to provide a link to information about rights held in and
    /// over the resource. Typically a Rights element will contain a
    /// rights management statement for the resource, or reference a
    /// service providing such information. Rights information often
    /// encompasses Intellectual Property Rights (IPR), Copyright, and
    /// various Property Rights. If the rights element is absent, no
    /// assumptions can be made about the status of these and other rights
    /// with respect to the resource. Type is a CFString type.
    ///
    ///
    /// Used to designate the entity responsible for making the resource
    /// available. Examples of a Publisher include a person, an
    /// organization, or a service. Typically, the name of a Publisher
    /// should be used to indicate the entity. Type is a CFArray of CFStrings.
    ///
    ///
    /// Used to designate the entity responsible for making contributions
    /// to the content of the resource. Examples of a Contributor include
    /// a person, an organization or a service. Typically, the name of a
    /// Contributor should be used to indicate the entity. Type is a
    /// CFArray of CFStrings.
    ///
    ///
    /// Used to designate the extent or scope of the content of the
    /// resource. Coverage will typically include spatial location (a
    /// place name or geographic co-ordinates), temporal period (a period
    /// label, date, or date range) or jurisdiction (such as a named
    /// administrative entity). Recommended best practice is to select a
    /// value from a controlled vocabulary, and that, where appropriate,
    /// named places or time periods be used in preference to numeric
    /// identifiers such as sets of co-ordinates or date ranges. Type is a
    /// CFString.
    ///
    ///
    /// Subject of the this item. Type is a CFString.
    ///
    ///
    /// Theme of the this item. Type is a CFString.
    ///
    ///
    /// An account of the content of the resource. Description may include
    /// but is not limited to: an abstract, table of contents, reference
    /// to a graphical representation of content or a free-text account of
    /// the content. Type is a CFString.
    ///
    ///
    /// Used  to reference to the resource within a given
    /// context. Recommended best practice is to identify the resource by
    /// means of a string or number conforming to a formal identification
    /// system. Type is a CFString.
    ///
    ///
    /// A class of entity for whom the resource is intended or useful. A
    /// class of entity may be determined by the creator or the publisher
    /// or by a third party. Type is a  CFArray of CFString.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemorganizations?language=objc)
    pub static kMDItemOrganizations: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemlanguages?language=objc)
    pub static kMDItemLanguages: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemrights?language=objc)
    pub static kMDItemRights: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditempublishers?language=objc)
    pub static kMDItemPublishers: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcontributors?language=objc)
    pub static kMDItemContributors: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcoverage?language=objc)
    pub static kMDItemCoverage: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemsubject?language=objc)
    pub static kMDItemSubject: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemtheme?language=objc)
    pub static kMDItemTheme: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemdescription?language=objc)
    pub static kMDItemDescription: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemidentifier?language=objc)
    pub static kMDItemIdentifier: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemaudiences?language=objc)
    pub static kMDItemAudiences: Option<&'static CFString>;
}

extern "C" {
    /// Number of pages in the item. Type is a CFNumberRef
    ///
    ///
    /// Width in points (72 points per inch) of the document page
    /// (first page only for PDF's - other pages within the PDF may
    /// not be the same width). Type is a CFNumber.
    ///
    ///
    /// Height in points (72 points per inch) of the document page
    /// (first page only for PDF's - other pages within the PDF may
    /// not be the same height). Type is a CFNumber.
    ///
    ///
    /// Security (encryption) method used in the file, for a PDF will be one of:
    /// "Password Encrypted" or "None". Type is a CFStrings.
    ///
    ///
    /// Application used to create the document content (e.g. "Word",
    /// "Framemaker", etc.). Type is a CFStrings.
    ///
    ///
    /// Software used to convert the original content into a PDF stream
    /// (e.g. "Distiller", etc.). Type is a Array of CFStrings.
    ///
    ///
    /// Date this item is due. Type is a CFDate.
    ///
    ///
    /// User rate of this item like iTunes. Type is a CFNumber
    ///
    ///
    /// Phone numbers for this item. Type is an Array of CFStrings.
    ///
    ///
    /// Email addresses for this item. Type is an Array of CFStrings.
    ///
    ///
    /// Instant message addresses for this item. Type is an Array of CFStrings.
    ///
    ///
    /// Kind that this item represents. Type is a CFString.
    ///
    ///
    /// This attribute indicates the recipients of this item. Type is a Array of CFStrings
    ///
    ///
    /// These are the finder comments for this item. Type is a CFString.
    ///
    ///
    /// Array of font names used in the item. Attribute would store the Fonts
    /// full name, the postscript name or the font family name based on whats available.
    /// Type is an Array of CFStrings.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemnumberofpages?language=objc)
    pub static kMDItemNumberOfPages: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditempagewidth?language=objc)
    pub static kMDItemPageWidth: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditempageheight?language=objc)
    pub static kMDItemPageHeight: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemsecuritymethod?language=objc)
    pub static kMDItemSecurityMethod: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcreator?language=objc)
    pub static kMDItemCreator: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemencodingapplications?language=objc)
    pub static kMDItemEncodingApplications: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemduedate?language=objc)
    pub static kMDItemDueDate: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemstarrating?language=objc)
    pub static kMDItemStarRating: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemphonenumbers?language=objc)
    pub static kMDItemPhoneNumbers: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditememailaddresses?language=objc)
    pub static kMDItemEmailAddresses: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditeminstantmessageaddresses?language=objc)
    pub static kMDItemInstantMessageAddresses: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemkind?language=objc)
    pub static kMDItemKind: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemrecipients?language=objc)
    pub static kMDItemRecipients: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfindercomment?language=objc)
    pub static kMDItemFinderComment: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemfonts?language=objc)
    pub static kMDItemFonts: Option<&'static CFString>;
}

extern "C" {
    /// Meta data attribute that stores the root note or tonic for the
    /// loop, and does not include the scale type. The root key is
    /// represented as follows: "C" "C#/Db" "D" "D#/Eb" "E" "F"
    /// "F#/Gb" "G" "G#/Ab" "A" "A#/Bb" "B" "NoKey"
    ///
    ///
    /// Meta data attribute that stores key filtering information
    /// about a loop. Loops are matched against projects that often in
    /// a major or minor key. To assist users in identifying loops
    /// that will "fit" with their compositions, loops can be tagged
    /// with one of the following key filters: "AnyKey" "Minor"
    /// "Major" "NeitherKey" "BothKeys". AnyKey means that it fits
    /// with anything (whether in a major key, minor key or
    /// neither). Minor fits with compositions in a minor
    /// key. NeitherKey doesn't work well with compositions that are
    /// in major or minor key. BothKeys means it fits with major or
    /// minor key.
    ///
    ///
    /// Meta data attribute that stores how a file should be
    /// played. Tagged files can either be loops or non-loops (e.g., a
    /// cymbal crash). "Looping" indicates if the file should be
    /// treated as a loop. "Non-looping" indicates the file should not
    /// be treated as a loop.
    ///
    ///
    /// Meta data attribute that stores multiple pieces of descriptive
    /// information about a loop. Besides genre and instrument, files
    /// can contain descriptive information that help users in
    /// refining searches. A file can have multiple descriptors
    /// associated with them, though they come in pairs of antonyms
    /// (e.g., "Acoustic" and "Electric"). A file can have zero or
    /// more descriptors.
    ///
    ///
    /// Meta data attribute that stores the category of
    /// instrument. Files should have an instrument associated with
    /// them ("Other Instrument" is provided as a catch-all). For some
    /// categories, like "Keyboards" there are instrument names which
    /// provide a more detailed instrument definition (e.g., Piano,
    /// Organ, etc.)
    ///
    ///
    /// Meta data attribute that stores the name of instrument
    /// (relative to the instrument category) Files can have an
    /// instrument name associated with them if they have certain
    /// instrument categories (e.g., the category Percussion has
    /// multiple instruments, including Conga and Bongo).
    ///
    ///
    /// If this item is a bundle, then this is the CFBundleIdentifier
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemappleloopsrootkey?language=objc)
    pub static kMDItemAppleLoopsRootKey: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemappleloopskeyfiltertype?language=objc)
    pub static kMDItemAppleLoopsKeyFilterType: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemappleloopsloopmode?language=objc)
    pub static kMDItemAppleLoopsLoopMode: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemappleloopdescriptors?language=objc)
    pub static kMDItemAppleLoopDescriptors: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemmusicalinstrumentcategory?language=objc)
    pub static kMDItemMusicalInstrumentCategory: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemmusicalinstrumentname?language=objc)
    pub static kMDItemMusicalInstrumentName: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemcfbundleidentifier?language=objc)
    pub static kMDItemCFBundleIdentifier: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemsupportfiletype?language=objc)
    #[deprecated = "No longer supported"]
    pub static kMDItemSupportFileType: Option<&'static CFString>;
}

extern "C" {
    /// Information about the item
    ///
    ///
    /// Director of the movie
    ///
    ///
    /// Producer of the content
    ///
    ///
    /// Genre of the movie
    ///
    ///
    /// Performers in the movie
    ///
    ///
    /// Original format of the movie
    ///
    ///
    /// Original source of the movie
    ///
    ///
    /// This attribute indicates the author of the emails message addresses. (This is always
    /// the email address, and not the human readable version)
    ///
    ///
    /// This attribute indicates the recipients email addresses. (This is always the email
    /// address,  and not the human readable version).
    ///
    ///
    /// This attribute indicates the author addresses of the document.
    ///
    ///
    /// This attribute indicates the recipient addresses of the document.
    ///
    ///
    /// Url of the item
    ///
    ///
    /// This attribute indicates if the document is likely to be considered junk.
    ///
    ///
    /// Array of executables architectures the item contains.
    ///
    ///
    /// Indicates platform required to execute this application.
    ///
    ///
    /// Array of categories the item application is a member of.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditeminformation?language=objc)
    pub static kMDItemInformation: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemdirector?language=objc)
    pub static kMDItemDirector: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemproducer?language=objc)
    pub static kMDItemProducer: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemgenre?language=objc)
    pub static kMDItemGenre: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemperformers?language=objc)
    pub static kMDItemPerformers: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemoriginalformat?language=objc)
    pub static kMDItemOriginalFormat: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemoriginalsource?language=objc)
    pub static kMDItemOriginalSource: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemauthoremailaddresses?language=objc)
    pub static kMDItemAuthorEmailAddresses: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemrecipientemailaddresses?language=objc)
    pub static kMDItemRecipientEmailAddresses: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemauthoraddresses?language=objc)
    pub static kMDItemAuthorAddresses: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemrecipientaddresses?language=objc)
    pub static kMDItemRecipientAddresses: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemurl?language=objc)
    pub static kMDItemURL: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemlabelicon?language=objc)
    #[deprecated = "No longer supported"]
    pub static kMDItemLabelIcon: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemlabelid?language=objc)
    #[deprecated = "No longer supported"]
    pub static kMDItemLabelID: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemlabelkind?language=objc)
    #[deprecated = "No longer supported"]
    pub static kMDItemLabelKind: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemlabeluuid?language=objc)
    #[deprecated = "No longer supported"]
    pub static kMDItemLabelUUID: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemislikelyjunk?language=objc)
    pub static kMDItemIsLikelyJunk: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemexecutablearchitectures?language=objc)
    pub static kMDItemExecutableArchitectures: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemexecutableplatform?language=objc)
    pub static kMDItemExecutablePlatform: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemapplicationcategories?language=objc)
    pub static kMDItemApplicationCategories: Option<&'static CFString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreservices/kmditemisapplicationmanaged?language=objc)
    pub static kMDItemIsApplicationManaged: Option<&'static CFString>;
}

#[deprecated = "renamed to `MDItem::new`"]
#[inline]
pub unsafe extern "C-unwind" fn MDItemCreate(
    allocator: Option<&CFAllocator>,
    path: Option<&CFString>,
) -> Option<CFRetained<MDItem>> {
    extern "C-unwind" {
        fn MDItemCreate(
            allocator: Option<&CFAllocator>,
            path: Option<&CFString>,
        ) -> Option<NonNull<MDItem>>;
    }
    let ret = unsafe { MDItemCreate(allocator, path) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "renamed to `MDItem::with_url`"]
#[inline]
pub unsafe extern "C-unwind" fn MDItemCreateWithURL(
    allocator: Option<&CFAllocator>,
    url: Option<&CFURL>,
) -> Option<CFRetained<MDItem>> {
    extern "C-unwind" {
        fn MDItemCreateWithURL(
            allocator: Option<&CFAllocator>,
            url: Option<&CFURL>,
        ) -> Option<NonNull<MDItem>>;
    }
    let ret = unsafe { MDItemCreateWithURL(allocator, url) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "renamed to `MDItem::attribute`"]
#[inline]
pub unsafe extern "C-unwind" fn MDItemCopyAttribute(
    item: &MDItem,
    name: Option<&CFString>,
) -> Option<CFRetained<CFType>> {
    extern "C-unwind" {
        fn MDItemCopyAttribute(item: &MDItem, name: Option<&CFString>) -> Option<NonNull<CFType>>;
    }
    let ret = unsafe { MDItemCopyAttribute(item, name) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "renamed to `MDItem::attributes`"]
#[inline]
pub unsafe extern "C-unwind" fn MDItemCopyAttributes(
    item: &MDItem,
    names: Option<&CFArray>,
) -> Option<CFRetained<CFDictionary>> {
    extern "C-unwind" {
        fn MDItemCopyAttributes(
            item: &MDItem,
            names: Option<&CFArray>,
        ) -> Option<NonNull<CFDictionary>>;
    }
    let ret = unsafe { MDItemCopyAttributes(item, names) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

#[deprecated = "renamed to `MDItem::attribute_names`"]
#[inline]
pub unsafe extern "C-unwind" fn MDItemCopyAttributeNames(
    item: &MDItem,
) -> Option<CFRetained<CFArray>> {
    extern "C-unwind" {
        fn MDItemCopyAttributeNames(item: &MDItem) -> Option<NonNull<CFArray>>;
    }
    let ret = unsafe { MDItemCopyAttributeNames(item) };
    ret.map(|ret| unsafe { CFRetained::from_raw(ret) })
}

extern "C-unwind" {
    #[cfg(feature = "block2")]
    #[deprecated = "renamed to `MDItem::cache_file_descriptors`"]
    pub fn MDItemGetCacheFileDescriptors(
        items: Option<&CFArray>,
        completion_handler: Option<&block2::DynBlock<dyn Fn(*const CFArray)>>,
    );
}
