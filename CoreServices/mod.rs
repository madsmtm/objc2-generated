// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::unportable_markdown)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "CoreServices", kind = "framework")]
extern "C" {}

#[cfg(feature = "AE")]
#[path = "AE/mod.rs"]
mod __AE;
#[cfg(feature = "DictionaryServices")]
#[path = "DictionaryServices.rs"]
mod __DictionaryServices;
#[cfg(feature = "FSEvents")]
#[path = "FSEvents.rs"]
mod __FSEvents;
#[cfg(feature = "LaunchServices")]
#[path = "LaunchServices/mod.rs"]
mod __LaunchServices;
#[cfg(feature = "Metadata")]
#[path = "Metadata/mod.rs"]
mod __Metadata;
#[cfg(feature = "OSServices")]
#[path = "OSServices/mod.rs"]
mod __OSServices;
#[cfg(feature = "SearchKit")]
#[path = "SearchKit/mod.rs"]
mod __SearchKit;
#[cfg(feature = "SharedFileList")]
#[path = "SharedFileList/mod.rs"]
mod __SharedFileList;

#[cfg(feature = "DictionaryServices")]
pub use self::__DictionaryServices::DCSCopyTextDefinition;
#[cfg(feature = "DictionaryServices")]
pub use self::__DictionaryServices::DCSDictionary;
#[cfg(feature = "DictionaryServices")]
pub use self::__DictionaryServices::DCSGetTermRangeInString;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamCreateDeviceState;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamCreateFlagFileEvents;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamCreateFlagFullHistory;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamCreateFlagIgnoreSelf;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamCreateFlagMarkSelf;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamCreateFlagNoDefer;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamCreateFlagNone;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamCreateFlagUseCFTypes;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamCreateFlagUseExtendedData;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamCreateFlagWatchRoot;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamCreateWithDocID;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagEventIdsWrapped;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagHistoryDone;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagItemChangeOwner;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagItemCloned;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagItemCreated;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagItemFinderInfoMod;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagItemInodeMetaMod;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagItemIsDir;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagItemIsFile;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagItemIsHardlink;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagItemIsLastHardlink;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagItemIsSymlink;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagItemModified;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagItemRemoved;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagItemRenamed;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagItemXattrMod;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagKernelDropped;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagMount;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagMustScanSubDirs;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagNone;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagOwnEvent;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagRootChanged;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagUnmount;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::kFSEventStreamEventFlagUserDropped;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamCallback;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamContext;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamCopyDescription;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamCopyPathsBeingWatched;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamCreate;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamCreateFlags;
#[cfg(all(feature = "FSEvents", feature = "libc"))]
pub use self::__FSEvents::FSEventStreamCreateRelativeToDevice;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamEventFlags;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamEventId;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamFlushAsync;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamFlushSync;
#[cfg(all(feature = "FSEvents", feature = "libc"))]
pub use self::__FSEvents::FSEventStreamGetDeviceBeingWatched;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamGetLatestEventId;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamInvalidate;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamRef;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamRelease;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamRetain;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamScheduleWithRunLoop;
#[cfg(all(feature = "FSEvents", feature = "dispatch2"))]
pub use self::__FSEvents::FSEventStreamSetDispatchQueue;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamSetExclusionPaths;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamShow;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamStart;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamStop;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventStreamUnscheduleFromRunLoop;
#[cfg(all(feature = "FSEvents", feature = "libc"))]
pub use self::__FSEvents::FSEventsCopyUUIDForDevice;
#[cfg(feature = "FSEvents")]
pub use self::__FSEvents::FSEventsGetCurrentEventId;
#[cfg(all(feature = "FSEvents", feature = "libc"))]
pub use self::__FSEvents::FSEventsGetLastEventIdForDeviceBeforeTime;
#[cfg(all(feature = "FSEvents", feature = "libc"))]
pub use self::__FSEvents::FSEventsPurgeEventsForDeviceUpToEventId;
#[cfg(feature = "FSEvents")]
pub(crate) use self::__FSEvents::__FSEventStream;
#[cfg(feature = "LaunchServices")]
pub use self::__LaunchServices::*;
#[cfg(feature = "Metadata")]
pub use self::__Metadata::*;
#[cfg(feature = "OSServices")]
pub use self::__OSServices::*;
#[cfg(feature = "SearchKit")]
pub use self::__SearchKit::*;
#[cfg(feature = "SharedFileList")]
pub use self::__SharedFileList::*;
#[cfg(feature = "AE")]
pub use self::__AE::*;
