// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::unportable_markdown)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "AudioToolbox", kind = "framework")]
extern "C" {}

#[cfg(feature = "AUAudioUnit")]
#[path = "AUAudioUnit.rs"]
mod __AUAudioUnit;
#[cfg(feature = "AUAudioUnitImplementation")]
#[path = "AUAudioUnitImplementation.rs"]
mod __AUAudioUnitImplementation;
#[cfg(feature = "AUCocoaUIView")]
#[path = "AUCocoaUIView.rs"]
mod __AUCocoaUIView;
#[cfg(feature = "AUComponent")]
#[path = "AUComponent.rs"]
mod __AUComponent;
#[cfg(feature = "AUGraph")]
#[path = "AUGraph.rs"]
mod __AUGraph;
#[cfg(feature = "AUParameters")]
#[path = "AUParameters.rs"]
mod __AUParameters;
#[cfg(feature = "AudioCodec")]
#[path = "AudioCodec.rs"]
mod __AudioCodec;
#[cfg(feature = "AudioComponent")]
#[path = "AudioComponent.rs"]
mod __AudioComponent;
#[cfg(feature = "AudioConverter")]
#[path = "AudioConverter.rs"]
mod __AudioConverter;
#[cfg(feature = "AudioFile")]
#[path = "AudioFile.rs"]
mod __AudioFile;
#[cfg(feature = "AudioFileStream")]
#[path = "AudioFileStream.rs"]
mod __AudioFileStream;
#[cfg(feature = "AudioFormat")]
#[path = "AudioFormat.rs"]
mod __AudioFormat;
#[cfg(feature = "AudioOutputUnit")]
#[path = "AudioOutputUnit.rs"]
mod __AudioOutputUnit;
#[cfg(feature = "AudioQueue")]
#[path = "AudioQueue.rs"]
mod __AudioQueue;
#[cfg(feature = "AudioServices")]
#[path = "AudioServices.rs"]
mod __AudioServices;
#[cfg(feature = "AudioSession")]
#[path = "AudioSession.rs"]
mod __AudioSession;
#[cfg(feature = "AudioUnit")]
#[path = "AudioUnit.rs"]
mod __AudioUnit;
#[cfg(feature = "AudioUnitCarbonView")]
#[path = "AudioUnitCarbonView.rs"]
mod __AudioUnitCarbonView;
#[cfg(feature = "AudioUnitParameters")]
#[path = "AudioUnitParameters.rs"]
mod __AudioUnitParameters;
#[cfg(feature = "AudioUnitProperties")]
#[path = "AudioUnitProperties.rs"]
mod __AudioUnitProperties;
#[cfg(feature = "AudioUnitUtilities")]
#[path = "AudioUnitUtilities.rs"]
mod __AudioUnitUtilities;
#[cfg(feature = "AudioWorkInterval")]
#[path = "AudioWorkInterval.rs"]
mod __AudioWorkInterval;
#[cfg(feature = "CAFFile")]
#[path = "CAFFile.rs"]
mod __CAFFile;
#[cfg(feature = "CAShow")]
#[path = "CAShow.rs"]
mod __CAShow;
#[cfg(feature = "DefaultAudioOutput")]
#[path = "DefaultAudioOutput.rs"]
mod __DefaultAudioOutput;
#[cfg(feature = "ExtendedAudioFile")]
#[path = "ExtendedAudioFile.rs"]
mod __ExtendedAudioFile;
#[cfg(feature = "MusicDevice")]
#[path = "MusicDevice.rs"]
mod __MusicDevice;
#[cfg(feature = "MusicPlayer")]
#[path = "MusicPlayer.rs"]
mod __MusicPlayer;

#[cfg(feature = "AUAudioUnit")]
pub use self::__AUAudioUnit::AUAudioChannelCount;
#[cfg(feature = "AUAudioUnit")]
pub use self::__AUAudioUnit::AUAudioFrameCount;
#[cfg(feature = "AUAudioUnit")]
pub use self::__AUAudioUnit::AUAudioObjectID;
#[cfg(feature = "AUAudioUnit")]
pub use self::__AUAudioUnit::AUAudioUnit;
#[cfg(feature = "AUAudioUnit")]
pub use self::__AUAudioUnit::AUAudioUnitBus;
#[cfg(feature = "AUAudioUnit")]
pub use self::__AUAudioUnit::AUAudioUnitBusArray;
#[cfg(feature = "AUAudioUnit")]
pub use self::__AUAudioUnit::AUAudioUnitBusType;
#[cfg(feature = "AUAudioUnit")]
pub use self::__AUAudioUnit::AUAudioUnitPreset;
#[cfg(feature = "AUAudioUnit")]
pub use self::__AUAudioUnit::AUAudioUnitStatus;
#[cfg(all(feature = "AUAudioUnit", feature = "AudioUnitProperties"))]
pub use self::__AUAudioUnit::AUEventSampleTimeImmediate;
#[cfg(all(feature = "AUAudioUnit", feature = "block2"))]
pub use self::__AUAudioUnit::AUHostMusicalContextBlock;
#[cfg(all(feature = "AUAudioUnit", feature = "block2"))]
pub use self::__AUAudioUnit::AUHostTransportStateBlock;
#[cfg(feature = "AUAudioUnit")]
pub use self::__AUAudioUnit::AUHostTransportStateFlags;
#[cfg(all(
    feature = "AUAudioUnit",
    feature = "AUComponent",
    feature = "block2",
    feature = "objc2-core-audio-types"
))]
pub use self::__AUAudioUnit::AUInputHandler;
#[cfg(all(
    feature = "AUAudioUnit",
    feature = "block2",
    feature = "objc2-core-midi"
))]
pub use self::__AUAudioUnit::AUMIDICIProfileChangedBlock;
#[cfg(all(
    feature = "AUAudioUnit",
    feature = "AudioUnitProperties",
    feature = "block2"
))]
pub use self::__AUAudioUnit::AUMIDIOutputEventBlock;
#[cfg(feature = "AUAudioUnit")]
pub use self::__AUAudioUnit::AUMessageChannel;
#[cfg(all(
    feature = "AUAudioUnit",
    feature = "AUComponent",
    feature = "block2",
    feature = "objc2-core-audio-types"
))]
pub use self::__AUAudioUnit::AURenderBlock;
#[cfg(all(
    feature = "AUAudioUnit",
    feature = "AUComponent",
    feature = "block2",
    feature = "objc2-core-audio-types"
))]
pub use self::__AUAudioUnit::AURenderObserver;
#[cfg(all(
    feature = "AUAudioUnit",
    feature = "AUComponent",
    feature = "block2",
    feature = "objc2-core-audio-types"
))]
pub use self::__AUAudioUnit::AURenderPullInputBlock;
#[cfg(all(
    feature = "AUAudioUnit",
    feature = "AudioUnitProperties",
    feature = "block2"
))]
pub use self::__AUAudioUnit::AUScheduleMIDIEventBlock;
#[cfg(all(
    feature = "AUAudioUnit",
    feature = "AUParameters",
    feature = "AudioUnitProperties",
    feature = "block2"
))]
pub use self::__AUAudioUnit::AUScheduleParameterBlock;
#[cfg(all(feature = "AUAudioUnit", feature = "block2"))]
pub use self::__AUAudioUnit::CallHostBlock;
#[cfg(feature = "AUAudioUnitImplementation")]
pub use self::__AUAudioUnitImplementation::AUAudioUnitFactory;
#[cfg(all(feature = "AUAudioUnit", feature = "AUAudioUnitImplementation"))]
pub use self::__AUAudioUnitImplementation::AUAudioUnitV2Bridge;
#[cfg(all(
    feature = "AUAudioUnitImplementation",
    feature = "AUParameters",
    feature = "block2"
))]
pub use self::__AUAudioUnitImplementation::AUImplementorDisplayNameWithLengthCallback;
#[cfg(all(
    feature = "AUAudioUnitImplementation",
    feature = "AUParameters",
    feature = "block2"
))]
pub use self::__AUAudioUnitImplementation::AUImplementorStringFromValueCallback;
#[cfg(all(
    feature = "AUAudioUnitImplementation",
    feature = "AUParameters",
    feature = "block2"
))]
pub use self::__AUAudioUnitImplementation::AUImplementorValueFromStringCallback;
#[cfg(all(
    feature = "AUAudioUnitImplementation",
    feature = "AUParameters",
    feature = "block2"
))]
pub use self::__AUAudioUnitImplementation::AUImplementorValueObserver;
#[cfg(all(
    feature = "AUAudioUnitImplementation",
    feature = "AUParameters",
    feature = "block2"
))]
pub use self::__AUAudioUnitImplementation::AUImplementorValueProvider;
#[cfg(feature = "AUAudioUnitImplementation")]
pub use self::__AUAudioUnitImplementation::AURenderEventType;
#[cfg(feature = "AUCocoaUIView")]
pub use self::__AUCocoaUIView::AUCocoaUIBase;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioComponentErr_DuplicateDescription;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioComponentErr_InitializationTimedOut;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioComponentErr_InstanceInvalidated;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioComponentErr_InstanceTimedOut;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioComponentErr_InvalidFormat;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioComponentErr_NotPermitted;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioComponentErr_TooManyInstances;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioComponentErr_UnsupportedType;
#[cfg(all(feature = "AUComponent", feature = "objc2-core-foundation"))]
pub use self::__AUComponent::kAudioComponentInstanceInvalidationNotification;
#[cfg(all(feature = "AUComponent", feature = "objc2-core-foundation"))]
pub use self::__AUComponent::kAudioComponentRegistrationsChangedNotification;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitAddPropertyListenerSelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitAddRenderNotifySelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitComplexRenderSelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_CannotDoInCurrentContext;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_ComponentManagerNotSupported;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_ExtensionNotFound;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_FailedInitialization;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_FileNotSpecified;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_FormatNotSupported;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_IllegalInstrument;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_Initialized;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_InstrumentTypeNotFound;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_InvalidElement;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_InvalidFile;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_InvalidFilePath;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_InvalidOfflineRender;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_InvalidParameter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_InvalidParameterValue;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_InvalidProperty;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_InvalidPropertyValue;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_InvalidScope;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_MIDIOutputBufferFull;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_MissingKey;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_MultipleVoiceProcessors;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_NoConnection;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_PropertyNotInUse;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_PropertyNotWritable;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_RenderTimeout;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_TooManyFramesToProcess;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_Unauthorized;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_Uninitialized;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitErr_UnknownFileType;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitGetParameterSelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitGetPropertyInfoSelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitGetPropertySelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitInitializeSelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitManufacturer_Apple;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitProcessMultipleSelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitProcessSelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitRange;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitRemovePropertyListenerSelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitRemovePropertyListenerWithUserDataSelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitRemoveRenderNotifySelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitRenderSelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitResetSelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitScheduleParametersSelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSetParameterSelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSetPropertySelect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_3DMixer;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_AUAudioMix;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_AUConverter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_AUFilter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_AUSoundIsolation;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_AUiPodTimeOther;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_AudioFilePlayer;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_BandPassFilter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_DLSSynth;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_DefaultOutput;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_DeferredRenderer;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_Delay;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_Distortion;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_DynamicsProcessor;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_GenericOutput;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_GraphicEQ;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_HALOutput;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_HRTFPanner;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_HighPassFilter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_HighShelfFilter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_LowPassFilter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_LowShelfFilter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_MIDISynth;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_MatrixMixer;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_MatrixReverb;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_Merger;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_MultiBandCompressor;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_MultiChannelMixer;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_MultiSplitter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_NBandEQ;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_NetReceive;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_NetSend;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_NewTimePitch;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_ParametricEQ;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_PeakLimiter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_Pitch;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_Reverb2;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_RogerBeep;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_RoundTripAAC;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_SampleDelay;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_Sampler;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_ScheduledSoundPlayer;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_SoundFieldPanner;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_SpatialMixer;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_SphericalHeadPanner;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_Splitter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_StereoMixer;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_SystemOutput;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_TimePitch;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_Varispeed;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_VectorPanner;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitSubType_VoiceProcessingIO;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_Effect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_FormatConverter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_Generator;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_MIDIProcessor;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_Mixer;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_MusicDevice;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_MusicEffect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_OfflineEffect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_Output;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_Panner;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_RemoteEffect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_RemoteGenerator;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_RemoteInstrument;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_RemoteMusicEffect;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitType_SpeechSynthesizer;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::kAudioUnitUninitializeSelect;
#[cfg(all(feature = "AUComponent", feature = "objc2-core-audio-types"))]
pub use self::__AUComponent::AUInputSamplesInOutputCallback;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AUParameterEventType;
#[cfg(all(feature = "AUComponent", feature = "objc2-core-audio-types"))]
pub use self::__AUComponent::AURenderCallback;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "objc2-core-foundation"
))]
pub use self::__AUComponent::AudioComponentGetLastActiveTime;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "objc2-core-foundation"
))]
pub use self::__AUComponent::AudioOutputUnitPublish;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnit;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitAddPropertyListener;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitAddPropertyListenerProc;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "objc2-core-audio-types"
))]
pub use self::__AUComponent::AudioUnitAddRenderNotify;
#[cfg(all(feature = "AUComponent", feature = "objc2-core-audio-types"))]
pub use self::__AUComponent::AudioUnitAddRenderNotifyProc;
#[cfg(all(feature = "AUComponent", feature = "objc2-core-audio-types"))]
pub use self::__AUComponent::AudioUnitComplexRenderProc;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AudioUnitElement;
#[cfg(all(feature = "AUComponent", feature = "objc2-core-foundation"))]
pub use self::__AUComponent::AudioUnitExtensionCopyComponentList;
#[cfg(all(feature = "AUComponent", feature = "objc2-core-foundation"))]
pub use self::__AUComponent::AudioUnitExtensionSetComponentList;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitGetParameter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AudioUnitGetParameterProc;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitGetProperty;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitGetPropertyInfo;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AudioUnitGetPropertyInfoProc;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AudioUnitGetPropertyProc;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitInitialize;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AudioUnitInitializeProc;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitParameter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AudioUnitParameterID;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AudioUnitParameterValue;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "objc2-core-audio-types"
))]
pub use self::__AUComponent::AudioUnitProcess;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "objc2-core-audio-types"
))]
pub use self::__AUComponent::AudioUnitProcessMultiple;
#[cfg(all(feature = "AUComponent", feature = "objc2-core-audio-types"))]
pub use self::__AUComponent::AudioUnitProcessMultipleProc;
#[cfg(all(feature = "AUComponent", feature = "objc2-core-audio-types"))]
pub use self::__AUComponent::AudioUnitProcessProc;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitProperty;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AudioUnitPropertyID;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitPropertyListenerProc;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitRemovePropertyListenerProc;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitRemovePropertyListenerWithUserData;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitRemovePropertyListenerWithUserDataProc;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "objc2-core-audio-types"
))]
pub use self::__AUComponent::AudioUnitRemoveRenderNotify;
#[cfg(all(feature = "AUComponent", feature = "objc2-core-audio-types"))]
pub use self::__AUComponent::AudioUnitRemoveRenderNotifyProc;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "objc2-core-audio-types"
))]
pub use self::__AUComponent::AudioUnitRender;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AudioUnitRenderActionFlags;
#[cfg(all(feature = "AUComponent", feature = "objc2-core-audio-types"))]
pub use self::__AUComponent::AudioUnitRenderProc;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitReset;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AudioUnitResetProc;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AudioUnitScope;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitSetParameter;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AudioUnitSetParameterProc;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitSetProperty;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AudioUnitSetPropertyProc;
#[cfg(all(feature = "AUComponent", feature = "AudioComponent"))]
pub use self::__AUComponent::AudioUnitUninitialize;
#[cfg(feature = "AUComponent")]
pub use self::__AUComponent::AudioUnitUninitializeProc;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::kAUGraphErr_CannotDoInCurrentContext;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::kAUGraphErr_InvalidAudioUnit;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::kAUGraphErr_InvalidConnection;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::kAUGraphErr_NodeNotFound;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::kAUGraphErr_OutputNodeErr;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::kAUNodeInteraction_Connection;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::kAUNodeInteraction_InputCallback;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraph;
#[cfg(all(feature = "AUGraph", feature = "AudioComponent"))]
pub use self::__AUGraph::AUGraphAddNode;
#[cfg(all(
    feature = "AUComponent",
    feature = "AUGraph",
    feature = "objc2-core-audio-types"
))]
pub use self::__AUGraph::AUGraphAddRenderNotify;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphClearConnections;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphClose;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphConnectNodeInput;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphCountNodeConnections;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphCountNodeInteractions;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphDisconnectNodeInput;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphGetCPULoad;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphGetConnectionInfo;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphGetIndNode;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphGetMaxCPULoad;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphGetNodeConnections;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphGetNodeCount;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphGetNodeInfoSubGraph;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphGetNumberOfConnections;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphGetNumberOfInteractions;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphInitialize;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphIsInitialized;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphIsNodeSubGraph;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphIsOpen;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphIsRunning;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphNewNodeSubGraph;
#[cfg(all(
    feature = "AUComponent",
    feature = "AUGraph",
    feature = "AudioComponent"
))]
pub use self::__AUGraph::AUGraphNodeInfo;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphOpen;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphRemoveNode;
#[cfg(all(
    feature = "AUComponent",
    feature = "AUGraph",
    feature = "objc2-core-audio-types"
))]
pub use self::__AUGraph::AUGraphRemoveRenderNotify;
#[cfg(all(
    feature = "AUComponent",
    feature = "AUGraph",
    feature = "AudioUnitProperties",
    feature = "objc2-core-audio-types"
))]
pub use self::__AUGraph::AUGraphSetNodeInputCallback;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphStart;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphStop;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphUninitialize;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUGraphUpdate;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUNode;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AUNodeConnection;
#[cfg(all(
    feature = "AUComponent",
    feature = "AUGraph",
    feature = "AudioUnitProperties",
    feature = "objc2-core-audio-types"
))]
pub use self::__AUGraph::AUNodeRenderCallback;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::AudioUnitNodeConnection;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::DisposeAUGraph;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::NewAUGraph;
#[cfg(feature = "AUGraph")]
pub use self::__AUGraph::OpaqueAUGraph;
#[cfg(feature = "AUParameters")]
pub use self::__AUParameters::AUParameter;
#[cfg(feature = "AUParameters")]
pub use self::__AUParameters::AUParameterAddress;
#[cfg(feature = "AUParameters")]
pub use self::__AUParameters::AUParameterAutomationEvent;
#[cfg(feature = "AUParameters")]
pub use self::__AUParameters::AUParameterAutomationEventType;
#[cfg(all(feature = "AUParameters", feature = "block2"))]
pub use self::__AUParameters::AUParameterAutomationObserver;
#[cfg(feature = "AUParameters")]
pub use self::__AUParameters::AUParameterGroup;
#[cfg(feature = "AUParameters")]
pub use self::__AUParameters::AUParameterNode;
#[cfg(all(feature = "AUParameters", feature = "block2"))]
pub use self::__AUParameters::AUParameterObserver;
#[cfg(feature = "AUParameters")]
pub use self::__AUParameters::AUParameterObserverToken;
#[cfg(all(feature = "AUParameters", feature = "block2"))]
pub use self::__AUParameters::AUParameterRecordingObserver;
#[cfg(feature = "AUParameters")]
pub use self::__AUParameters::AUParameterTree;
#[cfg(feature = "AUParameters")]
pub use self::__AUParameters::AURecordedParameterEvent;
#[cfg(feature = "AUParameters")]
pub use self::__AUParameters::AUValue;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecAppendInputBufferListSelect;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecAppendInputDataSelect;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecBadDataError;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecBadPropertySizeError;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecBitRateControlMode_Constant;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecBitRateControlMode_LongTermAverage;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecBitRateControlMode_Variable;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecBitRateControlMode_VariableConstrained;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecBitRateFormat;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecBitRateFormat_ABR;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecBitRateFormat_CBR;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecBitRateFormat_VBR;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_AV_Spatial_Live;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_AV_Spatial_Offline;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_AV_Traditional_Live;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_AV_Traditional_Offline;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_AppleAV_Spatial_Live;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_AppleAV_Spatial_Offline;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_AppleAV_Traditional_Live;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_AppleAV_Traditional_Offline;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_AppleCapture_Spatial;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_AppleCapture_Spatial_Enhanced;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_AppleCapture_Traditional;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_AppleMusic_Spatial;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_AppleMusic_Traditional;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_ApplePassthrough;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_Capture_Spatial;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_Capture_Spatial_Enhanced;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_Capture_Traditional;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_Music_Spatial;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_Music_Traditional;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_Passthrough;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_Reserved;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecContentSource_Unspecified;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecDelayMode_Compatibility;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecDelayMode_Minimum;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecDelayMode_Optimal;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecDoesSampleRateConversion;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecDynamicRangeControlConfiguration_Capture;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecDynamicRangeControlConfiguration_Movie;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecDynamicRangeControlConfiguration_Music;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecDynamicRangeControlConfiguration_None;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecDynamicRangeControlConfiguration_Speech;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecExtendFrequencies;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecGetPropertyInfoSelect;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecGetPropertySelect;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecIllegalOperationError;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecInitializeSelect;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecInputFormatsForOutputFormat;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecNoError;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecNotEnoughBufferSpaceError;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecOutputFormatsForInputFormat;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecOutputPrecedence;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecOutputPrecedenceBitRate;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecOutputPrecedenceNone;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecOutputPrecedenceSampleRate;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPrimeMethod_None;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPrimeMethod_Normal;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPrimeMethod_Pre;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecProduceOutputBufferListSelect;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecProduceOutputDataSelect;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecProduceOutputPacketAtEOF;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecProduceOutputPacketFailure;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecProduceOutputPacketNeedsMoreInputData;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecProduceOutputPacketSuccess;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecProduceOutputPacketSuccessConcealed;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecProduceOutputPacketSuccessHasMore;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyASPFrequency;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyAdjustCompressionProfile;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyAdjustLocalQuality;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyAdjustTargetLevel;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyAdjustTargetLevelConstant;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyApplicableBitRateRange;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyApplicableInputSampleRates;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyApplicableOutputSampleRates;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyAvailableBitRateRange;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyAvailableBitRates;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyAvailableInputChannelLayoutTags;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyAvailableInputChannelLayouts;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyAvailableInputSampleRates;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyAvailableNumberChannels;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyAvailableOutputChannelLayoutTags;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyAvailableOutputChannelLayouts;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyAvailableOutputSampleRates;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyBitRateControlMode;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyBitRateForVBR;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyContentSource;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyCurrentInputChannelLayout;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyCurrentInputFormat;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyCurrentInputSampleRate;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyCurrentOutputChannelLayout;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyCurrentOutputFormat;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyCurrentOutputSampleRate;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyCurrentTargetBitRate;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyDelayMode;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyDoesSampleRateConversion;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyDynamicRangeControlConfiguration;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyDynamicRangeControlMode;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyEmploysDependentPackets;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyFormatCFString;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyFormatInfo;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyFormatList;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyHasVariablePacketByteSizes;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyInputBufferSize;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyInputChannelLayout;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyInputFormatsForOutputFormat;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyIsInitialized;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyMagicCookie;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyManufacturerCFString;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyMaximumPacketByteSize;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyMinimumDelayMode;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyMinimumNumberInputPackets;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyMinimumNumberOutputPackets;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyNameCFString;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyOutputChannelLayout;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyOutputFormatsForInputFormat;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyPacketFrameSize;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyPacketSizeLimitForVBR;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyPaddedZeros;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyPrimeInfo;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyPrimeMethod;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyProgramTargetLevel;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyProgramTargetLevelConstant;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyQualitySetting;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyRecommendedBitRateRange;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyRequiresPacketDescription;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertySettings;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertySoundQualityForVBR;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertySupportedInputFormats;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertySupportedOutputFormats;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyUsedInputBufferSize;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecPropertyZeroFramesPadded;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecQuality_High;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecQuality_Low;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecQuality_Max;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecQuality_Medium;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecQuality_Min;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecResetSelect;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecSetPropertySelect;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecStateError;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecUninitializeSelect;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecUnknownPropertyError;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecUnspecifiedError;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecUnsupportedFormatError;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioCodecUseRecommendedSampleRate;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioDecoderComponentType;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioEncoderComponentType;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioSettings_AvailableValues;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioSettings_CurrentValue;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioSettings_Hint;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioSettings_LimitedValues;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioSettings_Parameters;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioSettings_SettingKey;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioSettings_SettingName;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioSettings_Summary;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioSettings_TopLevelKey;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioSettings_Unit;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioSettings_ValueType;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioSettings_Version;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kAudioUnityCodecComponentType;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kDynamicRangeCompressionProfile_GeneralCompression;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kDynamicRangeCompressionProfile_LateNight;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kDynamicRangeCompressionProfile_LimitedPlaybackRange;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kDynamicRangeCompressionProfile_NoisyEnvironment;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kDynamicRangeCompressionProfile_None;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kDynamicRangeControlMode_Heavy;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kDynamicRangeControlMode_Light;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kDynamicRangeControlMode_None;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kHintAdvanced;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kHintBasic;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kHintHidden;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kProgramTargetLevel_Minus20dB;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kProgramTargetLevel_Minus23dB;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kProgramTargetLevel_Minus31dB;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::kProgramTargetLevel_None;
#[cfg(all(feature = "AudioCodec", feature = "AudioComponent"))]
pub use self::__AudioCodec::AudioCodec;
#[cfg(all(
    feature = "AudioCodec",
    feature = "AudioComponent",
    feature = "objc2-core-audio-types"
))]
pub use self::__AudioCodec::AudioCodecAppendInputBufferList;
#[cfg(all(feature = "AudioCodec", feature = "objc2-core-audio-types"))]
pub use self::__AudioCodec::AudioCodecAppendInputBufferListProc;
#[cfg(all(
    feature = "AudioCodec",
    feature = "AudioComponent",
    feature = "objc2-core-audio-types"
))]
pub use self::__AudioCodec::AudioCodecAppendInputData;
#[cfg(all(feature = "AudioCodec", feature = "objc2-core-audio-types"))]
pub use self::__AudioCodec::AudioCodecAppendInputDataProc;
#[cfg(all(feature = "AudioCodec", feature = "AudioComponent"))]
pub use self::__AudioCodec::AudioCodecGetProperty;
#[cfg(all(feature = "AudioCodec", feature = "AudioComponent"))]
pub use self::__AudioCodec::AudioCodecGetPropertyInfo;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::AudioCodecGetPropertyInfoProc;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::AudioCodecGetPropertyProc;
#[cfg(all(
    feature = "AudioCodec",
    feature = "AudioComponent",
    feature = "objc2-core-audio-types"
))]
pub use self::__AudioCodec::AudioCodecInitialize;
#[cfg(all(feature = "AudioCodec", feature = "objc2-core-audio-types"))]
pub use self::__AudioCodec::AudioCodecInitializeProc;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::AudioCodecMagicCookieInfo;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::AudioCodecPrimeInfo;
#[cfg(all(
    feature = "AudioCodec",
    feature = "AudioComponent",
    feature = "objc2-core-audio-types"
))]
pub use self::__AudioCodec::AudioCodecProduceOutputBufferList;
#[cfg(all(feature = "AudioCodec", feature = "objc2-core-audio-types"))]
pub use self::__AudioCodec::AudioCodecProduceOutputBufferListProc;
#[cfg(all(
    feature = "AudioCodec",
    feature = "AudioComponent",
    feature = "objc2-core-audio-types"
))]
pub use self::__AudioCodec::AudioCodecProduceOutputPackets;
#[cfg(all(feature = "AudioCodec", feature = "objc2-core-audio-types"))]
pub use self::__AudioCodec::AudioCodecProduceOutputPacketsProc;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::AudioCodecPropertyID;
#[cfg(all(feature = "AudioCodec", feature = "AudioComponent"))]
pub use self::__AudioCodec::AudioCodecReset;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::AudioCodecResetProc;
#[cfg(all(feature = "AudioCodec", feature = "AudioComponent"))]
pub use self::__AudioCodec::AudioCodecSetProperty;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::AudioCodecSetPropertyProc;
#[cfg(all(feature = "AudioCodec", feature = "AudioComponent"))]
pub use self::__AudioCodec::AudioCodecUninitialize;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::AudioCodecUninitializeProc;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::AudioSettingsFlags;
#[cfg(feature = "AudioCodec")]
pub use self::__AudioCodec::MagicCookieInfo;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::kAudioComponentConfigurationInfo_ValidationResult;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::kAudioComponentValidationParameter_ForceValidation;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::kAudioComponentValidationParameter_LoadOutOfProcess;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::kAudioComponentValidationParameter_TimeOut;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponent;
#[cfg(all(feature = "AudioComponent", feature = "objc2-core-foundation"))]
pub use self::__AudioComponent::AudioComponentCopyConfigurationInfo;
#[cfg(all(feature = "AudioComponent", feature = "objc2-core-foundation"))]
pub use self::__AudioComponent::AudioComponentCopyName;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentCount;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentDescription;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentFactoryFunction;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentFindNext;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentFlags;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentGetDescription;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentGetVersion;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentInstance;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentInstanceCanDo;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentInstanceDispose;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentInstanceGetComponent;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentInstanceNew;
#[cfg(all(feature = "AudioComponent", feature = "block2"))]
pub use self::__AudioComponent::AudioComponentInstantiate;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentInstantiationOptions;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentMethod;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentPlugInInterface;
#[cfg(all(feature = "AudioComponent", feature = "objc2-core-foundation"))]
pub use self::__AudioComponent::AudioComponentRegister;
#[cfg(all(feature = "AudioComponent", feature = "objc2-core-foundation"))]
pub use self::__AudioComponent::AudioComponentValidate;
#[cfg(all(
    feature = "AudioComponent",
    feature = "block2",
    feature = "objc2-core-foundation"
))]
pub use self::__AudioComponent::AudioComponentValidateWithResults;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::AudioComponentValidationResult;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::OpaqueAudioComponent;
#[cfg(feature = "AudioComponent")]
pub use self::__AudioComponent::OpaqueAudioComponentInstance;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterApplicableEncodeBitRates;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterApplicableEncodeSampleRates;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterAvailableEncodeBitRates;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterAvailableEncodeChannelLayoutTags;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterAvailableEncodeSampleRates;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterChannelMap;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterCodecQuality;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterCompressionMagicCookie;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterCurrentInputStreamDescription;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterCurrentOutputStreamDescription;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterDecompressionMagicCookie;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterEncodeAdjustableSampleRate;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterEncodeBitRate;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterErr_BadPropertySizeError;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterErr_FormatNotSupported;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterErr_InputSampleRateOutOfRange;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterErr_InvalidInputSize;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterErr_InvalidOutputSize;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterErr_OperationNotSupported;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterErr_OutputSampleRateOutOfRange;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterErr_PropertyNotSupported;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterErr_RequiresPacketDescriptionsError;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterErr_UnspecifiedError;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterInputChannelLayout;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterOutputChannelLayout;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPrimeInfo;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPrimeMethod;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPropertyBitDepthHint;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPropertyCalculateInputBufferSize;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPropertyCalculateOutputBufferSize;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPropertyDitherBitDepth;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPropertyDithering;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPropertyFormatList;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPropertyInputCodecParameters;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPropertyMaximumInputBufferSize;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPropertyMaximumInputPacketSize;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPropertyMaximumOutputPacketSize;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPropertyMinimumInputBufferSize;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPropertyMinimumOutputBufferSize;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPropertyOutputCodecParameters;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterPropertySettings;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterQuality_High;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterQuality_Low;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterQuality_Max;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterQuality_Medium;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterQuality_Min;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterSampleRateConverterAlgorithm;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterSampleRateConverterComplexity;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterSampleRateConverterComplexity_Linear;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterSampleRateConverterComplexity_Mastering;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterSampleRateConverterComplexity_MinimumPhase;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterSampleRateConverterComplexity_Normal;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterSampleRateConverterInitialPhase;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kAudioConverterSampleRateConverterQuality;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kConverterPrimeMethod_None;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kConverterPrimeMethod_Normal;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kConverterPrimeMethod_Pre;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kDitherAlgorithm_NoiseShaping;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::kDitherAlgorithm_TPDF;
#[cfg(all(feature = "AudioConverter", feature = "objc2-core-audio-types"))]
pub use self::__AudioConverter::AudioConverterComplexInputDataProc;
#[cfg(all(feature = "AudioConverter", feature = "objc2-core-audio-types"))]
pub use self::__AudioConverter::AudioConverterComplexInputDataProcRealtimeSafe;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::AudioConverterConvertBuffer;
#[cfg(all(feature = "AudioConverter", feature = "objc2-core-audio-types"))]
pub use self::__AudioConverter::AudioConverterConvertComplexBuffer;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::AudioConverterDispose;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::AudioConverterFillBuffer;
#[cfg(all(feature = "AudioConverter", feature = "objc2-core-audio-types"))]
pub use self::__AudioConverter::AudioConverterFillComplexBuffer;
#[cfg(all(feature = "AudioConverter", feature = "objc2-core-audio-types"))]
pub use self::__AudioConverter::AudioConverterFillComplexBufferRealtimeSafe;
#[cfg(all(feature = "AudioConverter", feature = "objc2-core-audio-types"))]
pub use self::__AudioConverter::AudioConverterFillComplexBufferWithPacketDependencies;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::AudioConverterGetProperty;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::AudioConverterGetPropertyInfo;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::AudioConverterInputDataProc;
#[cfg(all(feature = "AudioConverter", feature = "objc2-core-audio-types"))]
pub use self::__AudioConverter::AudioConverterNew;
#[cfg(all(feature = "AudioConverter", feature = "objc2-core-audio-types"))]
pub use self::__AudioConverter::AudioConverterNewSpecific;
#[cfg(all(feature = "AudioConverter", feature = "objc2-core-audio-types"))]
pub use self::__AudioConverter::AudioConverterNewWithOptions;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::AudioConverterOptions;
#[cfg(all(feature = "AudioConverter", feature = "block2"))]
pub use self::__AudioConverter::AudioConverterPrepare;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::AudioConverterPrimeInfo;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::AudioConverterPropertyID;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::AudioConverterRef;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::AudioConverterReset;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::AudioConverterSetProperty;
#[cfg(feature = "AudioConverter")]
pub use self::__AudioConverter::OpaqueAudioConverter;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_Album;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_ApproximateDurationInSeconds;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_Artist;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_ChannelLayout;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_Comments;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_Composer;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_Copyright;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_EncodingApplication;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_Genre;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_ISRC;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_KeySignature;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_Lyricist;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_NominalBitRate;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_RecordedDate;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_SourceBitDepth;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_SourceEncoder;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_SubTitle;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_Tempo;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_TimeSignature;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_Title;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_TrackNumber;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAFInfoDictionary_Year;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFile3GP2Type;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFile3GPType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileAAC_ADTSType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileAC3Type;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileAIFCType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileAIFFType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileAMRType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileBW64Type;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileBadPropertySizeError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileCAFType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileDoesNotAllow64BitDataSizeError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileEndOfFileError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileFLACType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileFileNotFoundError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_AllExtensions;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_AllHFSTypeCodes;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_AllMIMETypes;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_AllUTIs;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_AvailableFormatIDs;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_AvailableStreamDescriptionsForFormat;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_ExtensionsForType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_FileTypeName;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_HFSTypeCodesForType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_MIMETypesForType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_ReadableTypes;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_TypesForExtension;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_TypesForHFSTypeCode;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_TypesForMIMEType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_TypesForUTI;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_UTIsForType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileGlobalInfo_WritableTypes;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileInvalidChunkError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileInvalidFileError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileInvalidPacketDependencyError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileInvalidPacketOffsetError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileLATMInLOASType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileLoopDirection_Backward;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileLoopDirection_Forward;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileLoopDirection_ForwardAndBackward;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileLoopDirection_NoLooping;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileM4AType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileM4BType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileMP1Type;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileMP2Type;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileMP3Type;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileMPEG4Type;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileMarkerType_Generic;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileNextType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileNotOpenError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileNotOptimizedError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileOperationNotSupportedError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePermissionsError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePositionError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyAlbumArtwork;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyAudioDataByteCount;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyAudioDataPacketCount;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyAudioTrackCount;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyBitRate;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyByteToPacket;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyChannelLayout;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyChunkIDs;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyDataFormat;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyDataFormatName;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyDataOffset;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyDeferSizeUpdates;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyEstimatedDuration;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyFileFormat;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyFormatList;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyFrameToPacket;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyID3Tag;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyID3TagOffset;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyInfoDictionary;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyIsOptimized;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyMagicCookieData;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyMarkerList;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyMaximumPacketSize;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyNextIndependentPacket;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyPacketRangeByteCountUpperBound;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyPacketSizeUpperBound;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyPacketTableInfo;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyPacketToByte;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyPacketToDependencyInfo;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyPacketToFrame;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyPacketToRollDistance;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyPreviousIndependentPacket;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyRegionList;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyReserveDuration;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyRestrictsRandomAccess;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertySourceBitDepth;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFilePropertyUseAudioTrack;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileRF64Type;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileSoundDesigner2Type;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileUnspecifiedError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileUnsupportedDataFormatError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileUnsupportedFileTypeError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileUnsupportedPropertyError;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileWAVEType;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::kAudioFileWave64Type;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioBytePacketTranslation;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioBytePacketTranslationFlags;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileClose;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileCountUserData;
#[cfg(all(
    feature = "AudioFile",
    feature = "objc2-core-audio-types",
    feature = "objc2-core-foundation"
))]
pub use self::__AudioFile::AudioFileCreateWithURL;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileFlags;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileGetGlobalInfo;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileGetGlobalInfoSize;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileGetProperty;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileGetPropertyInfo;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileGetUserData;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileGetUserDataAtOffset;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileGetUserDataSize;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileGetUserDataSize64;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileID;
#[cfg(all(feature = "AudioFile", feature = "objc2-core-audio-types"))]
pub use self::__AudioFile::AudioFileInitializeWithCallbacks;
#[cfg(all(feature = "AudioFile", feature = "objc2-core-foundation"))]
pub use self::__AudioFile::AudioFileMarker;
#[cfg(all(feature = "AudioFile", feature = "objc2-core-foundation"))]
pub use self::__AudioFile::AudioFileMarkerList;
#[cfg(all(feature = "AudioFile", feature = "objc2-core-foundation"))]
pub use self::__AudioFile::AudioFileOpenURL;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileOpenWithCallbacks;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileOptimize;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFilePacketTableInfo;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFilePermissions;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFilePropertyID;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileReadBytes;
#[cfg(all(feature = "AudioFile", feature = "objc2-core-audio-types"))]
pub use self::__AudioFile::AudioFileReadPacketData;
#[cfg(all(feature = "AudioFile", feature = "objc2-core-audio-types"))]
pub use self::__AudioFile::AudioFileReadPackets;
#[cfg(all(feature = "AudioFile", feature = "objc2-core-foundation"))]
pub use self::__AudioFile::AudioFileRegion;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileRegionFlags;
#[cfg(all(feature = "AudioFile", feature = "objc2-core-foundation"))]
pub use self::__AudioFile::AudioFileRegionList;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileRemoveUserData;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileSetProperty;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileSetUserData;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileTypeAndFormatID;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileTypeID;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFileWriteBytes;
#[cfg(all(feature = "AudioFile", feature = "objc2-core-audio-types"))]
pub use self::__AudioFile::AudioFileWritePackets;
#[cfg(all(feature = "AudioFile", feature = "objc2-core-audio-types"))]
pub use self::__AudioFile::AudioFileWritePacketsWithDependencies;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFile_GetSizeProc;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFile_ReadProc;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFile_SMPTE_Time;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFile_SetSizeProc;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFile_WriteProc;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioFramePacketTranslation;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioIndependentPacketTranslation;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioPacketDependencyInfoTranslation;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioPacketRangeByteCountTranslation;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::AudioPacketRollDistanceTranslation;
#[cfg(feature = "AudioFile")]
pub use self::__AudioFile::OpaqueAudioFileID;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamError_BadPropertySize;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamError_DataUnavailable;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamError_DiscontinuityCantRecover;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamError_IllegalOperation;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamError_InvalidFile;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamError_InvalidPacketOffset;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamError_NotOptimized;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamError_UnspecifiedError;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamError_UnsupportedDataFormat;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamError_UnsupportedFileType;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamError_UnsupportedProperty;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamError_ValueUnknown;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_AudioDataByteCount;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_AudioDataPacketCount;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_AverageBytesPerPacket;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_BitRate;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_ByteToPacket;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_ChannelLayout;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_DataFormat;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_DataOffset;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_FileFormat;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_FormatList;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_FrameToPacket;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_InfoDictionary;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_MagicCookieData;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_MaximumPacketSize;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_NextIndependentPacket;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_PacketSizeUpperBound;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_PacketTableInfo;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_PacketToByte;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_PacketToDependencyInfo;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_PacketToFrame;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_PacketToRollDistance;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_PreviousIndependentPacket;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_ReadyToProducePackets;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::kAudioFileStreamProperty_RestrictsRandomAccess;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::AudioFileStreamClose;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::AudioFileStreamGetProperty;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::AudioFileStreamGetPropertyInfo;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::AudioFileStreamID;
#[cfg(all(
    feature = "AudioFile",
    feature = "AudioFileStream",
    feature = "objc2-core-audio-types"
))]
pub use self::__AudioFileStream::AudioFileStreamOpen;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::AudioFileStreamParseBytes;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::AudioFileStreamParseFlags;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::AudioFileStreamPropertyFlags;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::AudioFileStreamPropertyID;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::AudioFileStreamSeek;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::AudioFileStreamSeekFlags;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::AudioFileStreamSetProperty;
#[cfg(all(feature = "AudioFileStream", feature = "objc2-core-audio-types"))]
pub use self::__AudioFileStream::AudioFileStream_PacketsProc;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::AudioFileStream_PropertyListenerProc;
#[cfg(feature = "AudioFileStream")]
pub use self::__AudioFileStream::OpaqueAudioFileStreamID;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatBadPropertySizeError;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatBadSpecifierSizeError;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_ASBDFromESDS;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_ASBDFromMPEGPacket;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_AreChannelLayoutsEquivalent;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_AvailableDecodeNumberChannels;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_AvailableEncodeBitRates;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_AvailableEncodeChannelLayoutTags;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_AvailableEncodeNumberChannels;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_AvailableEncodeSampleRates;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_BalanceFade;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_BitmapForLayoutTag;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_ChannelLayoutForBitmap;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_ChannelLayoutForTag;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_ChannelLayoutFromESDS;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_ChannelLayoutHash;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_ChannelLayoutName;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_ChannelLayoutSimpleName;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_ChannelMap;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_ChannelName;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_ChannelShortName;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_DecodeFormatIDs;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_Decoders;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_EncodeFormatIDs;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_Encoders;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_FirstPlayableFormatFromList;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_FormatEmploysDependentPackets;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_FormatInfo;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_FormatIsEncrypted;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_FormatIsExternallyFramed;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_FormatIsVBR;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_FormatList;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_FormatName;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_ID3TagSize;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_ID3TagToDictionary;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_MatrixMixMap;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_NumberOfChannelsForLayout;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_OutputFormatList;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_PanningMatrix;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_TagForChannelLayout;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_TagsForNumberOfChannels;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatProperty_ValidateChannelLayout;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatUnknownFormatError;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatUnspecifiedError;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatUnsupportedDataFormatError;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::kAudioFormatUnsupportedPropertyError;
#[cfg(all(feature = "AudioFormat", feature = "objc2-core-audio-types"))]
pub use self::__AudioFormat::AudioBalanceFade;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::AudioBalanceFadeType;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::AudioFormatGetProperty;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::AudioFormatGetPropertyInfo;
#[cfg(all(feature = "AudioFormat", feature = "objc2-core-audio-types"))]
pub use self::__AudioFormat::AudioFormatInfo;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::AudioFormatPropertyID;
#[cfg(all(feature = "AudioFormat", feature = "objc2-core-audio-types"))]
pub use self::__AudioFormat::AudioPanningInfo;
#[cfg(feature = "AudioFormat")]
pub use self::__AudioFormat::AudioPanningMode;
#[cfg(all(feature = "AudioFormat", feature = "objc2-core-audio-types"))]
pub use self::__AudioFormat::ExtendedAudioFormatInfo;
#[cfg(feature = "AudioOutputUnit")]
pub use self::__AudioOutputUnit::kAudioOutputUnitRange;
#[cfg(feature = "AudioOutputUnit")]
pub use self::__AudioOutputUnit::kAudioOutputUnitStartSelect;
#[cfg(feature = "AudioOutputUnit")]
pub use self::__AudioOutputUnit::kAudioOutputUnitStopSelect;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "AudioOutputUnit"
))]
pub use self::__AudioOutputUnit::AudioOutputUnitStart;
#[cfg(feature = "AudioOutputUnit")]
pub use self::__AudioOutputUnit::AudioOutputUnitStartProc;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "AudioOutputUnit"
))]
pub use self::__AudioOutputUnit::AudioOutputUnitStop;
#[cfg(feature = "AudioOutputUnit")]
pub use self::__AudioOutputUnit::AudioOutputUnitStopProc;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueDeviceProperty_NumberChannels;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueDeviceProperty_SampleRate;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_BufferEmpty;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_BufferEnqueuedTwice;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_BufferInQueue;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_CannotStart;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_CannotStartYet;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_CodecNotFound;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_DisposalPending;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_EnqueueDuringReset;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_InvalidBuffer;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_InvalidCodecAccess;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_InvalidDevice;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_InvalidOfflineMode;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_InvalidParameter;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_InvalidProperty;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_InvalidPropertySize;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_InvalidPropertyValue;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_InvalidQueueType;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_InvalidRunState;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_InvalidTapContext;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_InvalidTapType;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_Permissions;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_PrimeTimedOut;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_QueueInvalidated;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_RecordUnderrun;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueErr_TooManyTaps;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueParam_Pan;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueParam_Pitch;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueParam_PlayRate;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueParam_Volume;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueParam_VolumeRampTime;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_ChannelAssignments;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_ChannelLayout;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_ConverterError;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_CurrentDevice;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_CurrentLevelMeter;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_CurrentLevelMeterDB;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_DecodeBufferSizeFrames;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_EnableLevelMetering;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_EnableTimePitch;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_IntendedSpatialExperience;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_IsRunning;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_MagicCookie;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_MaximumOutputPacketSize;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_StreamDescription;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_TimePitchAlgorithm;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueProperty_TimePitchBypass;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueTimePitchAlgorithm_Spectral;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueTimePitchAlgorithm_TimeDomain;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::kAudioQueueTimePitchAlgorithm_Varispeed;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueAddPropertyListener;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueAllocateBuffer;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueAllocateBufferWithPacketDescriptions;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueBuffer;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueBufferRef;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-foundation"))]
pub use self::__AudioQueue::AudioQueueChannelAssignment;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueCreateTimeline;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueDeviceGetCurrentTime;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueDeviceGetNearestStartTime;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueDeviceTranslateTime;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueDispose;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueDisposeTimeline;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueEnqueueBuffer;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueEnqueueBufferWithParameters;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueFlush;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueFreeBuffer;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueGetCurrentTime;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueGetParameter;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueGetProperty;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueGetPropertySize;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueInputCallback;
#[cfg(all(
    feature = "AudioQueue",
    feature = "block2",
    feature = "objc2-core-audio-types"
))]
pub use self::__AudioQueue::AudioQueueInputCallbackBlock;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueLevelMeterState;
#[cfg(all(
    feature = "AudioQueue",
    feature = "objc2-core-audio-types",
    feature = "objc2-core-foundation"
))]
pub use self::__AudioQueue::AudioQueueNewInput;
#[cfg(all(
    feature = "AudioQueue",
    feature = "block2",
    feature = "dispatch2",
    feature = "objc2-core-audio-types"
))]
pub use self::__AudioQueue::AudioQueueNewInputWithDispatchQueue;
#[cfg(all(
    feature = "AudioQueue",
    feature = "objc2-core-audio-types",
    feature = "objc2-core-foundation"
))]
pub use self::__AudioQueue::AudioQueueNewOutput;
#[cfg(all(
    feature = "AudioQueue",
    feature = "block2",
    feature = "dispatch2",
    feature = "objc2-core-audio-types"
))]
pub use self::__AudioQueue::AudioQueueNewOutputWithDispatchQueue;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueOfflineRender;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueOutputCallback;
#[cfg(all(
    feature = "AudioQueue",
    feature = "block2",
    feature = "objc2-core-audio-types"
))]
pub use self::__AudioQueue::AudioQueueOutputCallbackBlock;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueParameterEvent;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueParameterID;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueParameterValue;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueuePause;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueuePrime;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueProcessingTapCallback;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueProcessingTapDispose;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueProcessingTapFlags;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueProcessingTapGetQueueTime;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueProcessingTapGetSourceAudio;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueProcessingTapNew;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueProcessingTapRef;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueuePropertyID;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueuePropertyListenerProc;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueRef;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueRemovePropertyListener;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueReset;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueSetOfflineRenderFormat;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueSetParameter;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueSetProperty;
#[cfg(all(feature = "AudioQueue", feature = "objc2-core-audio-types"))]
pub use self::__AudioQueue::AudioQueueStart;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueStop;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::AudioQueueTimelineRef;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::OpaqueAudioQueue;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::OpaqueAudioQueueProcessingTap;
#[cfg(feature = "AudioQueue")]
pub use self::__AudioQueue::OpaqueAudioQueueTimeline;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::kAudioServicesBadPropertySizeError;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::kAudioServicesBadSpecifierSizeError;
#[cfg(all(feature = "AudioServices", feature = "objc2-core-foundation"))]
pub use self::__AudioServices::kAudioServicesDetailIntendedSpatialExperience;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::kAudioServicesNoError;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::kAudioServicesPropertyCompletePlaybackIfAppDies;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::kAudioServicesPropertyIsUISound;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::kAudioServicesSystemSoundClientTimedOutError;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::kAudioServicesSystemSoundExceededMaximumDurationError;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::kAudioServicesSystemSoundUnspecifiedError;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::kAudioServicesUnsupportedPropertyError;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::kSystemSoundID_FlashScreen;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::kSystemSoundID_UserPreferredAlert;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::kSystemSoundID_Vibrate;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::kUserPreferredAlert;
#[cfg(all(feature = "AudioServices", feature = "objc2-core-foundation"))]
pub use self::__AudioServices::AudioServicesAddSystemSoundCompletion;
#[cfg(all(feature = "AudioServices", feature = "objc2-core-foundation"))]
pub use self::__AudioServices::AudioServicesCreateSystemSoundID;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::AudioServicesDisposeSystemSoundID;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::AudioServicesGetProperty;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::AudioServicesGetPropertyInfo;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::AudioServicesPlayAlertSound;
#[cfg(all(feature = "AudioServices", feature = "block2"))]
pub use self::__AudioServices::AudioServicesPlayAlertSoundWithCompletion;
#[cfg(all(
    feature = "AudioServices",
    feature = "block2",
    feature = "objc2-core-foundation"
))]
pub use self::__AudioServices::AudioServicesPlayAlertSoundWithDetails;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::AudioServicesPlaySystemSound;
#[cfg(all(feature = "AudioServices", feature = "block2"))]
pub use self::__AudioServices::AudioServicesPlaySystemSoundWithCompletion;
#[cfg(all(
    feature = "AudioServices",
    feature = "block2",
    feature = "objc2-core-foundation"
))]
pub use self::__AudioServices::AudioServicesPlaySystemSoundWithDetails;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::AudioServicesPropertyID;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::AudioServicesRemoveSystemSoundCompletion;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::AudioServicesSetProperty;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::AudioServicesSystemSoundCompletionProc;
#[cfg(feature = "AudioServices")]
pub use self::__AudioServices::SystemSoundID;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioServicesNoHardwareError;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionAlreadyInitialized;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionBadPropertySizeError;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionBeginInterruption;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionCategory_AmbientSound;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionCategory_AudioProcessing;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionCategory_LiveAudio;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionCategory_MediaPlayback;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionCategory_PlayAndRecord;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionCategory_RecordAudio;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionCategory_SoloAmbientSound;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionCategory_UserInterfaceSoundEffects;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionEndInterruption;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionIncompatibleCategory;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionInitializationError;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSessionInputRoute_BluetoothHFP;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSessionInputRoute_BuiltInMic;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSessionInputRoute_HeadsetMic;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSessionInputRoute_LineIn;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSessionInputRoute_USBAudio;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionInterruptionType_ShouldNotResume;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionInterruptionType_ShouldResume;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionMode_Default;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionMode_GameChat;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionMode_Measurement;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionMode_VideoRecording;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionMode_VoiceChat;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionNoCategorySet;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionNoError;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionNotActiveError;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionNotInitialized;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSessionOutputRoute_AirPlay;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSessionOutputRoute_BluetoothA2DP;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSessionOutputRoute_BluetoothHFP;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSessionOutputRoute_BuiltInReceiver;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSessionOutputRoute_BuiltInSpeaker;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSessionOutputRoute_HDMI;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSessionOutputRoute_Headphones;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSessionOutputRoute_LineOut;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSessionOutputRoute_USBAudio;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionOverrideAudioRoute_None;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionOverrideAudioRoute_Speaker;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_AudioCategory;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_AudioInputAvailable;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_AudioRoute;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_AudioRouteChange;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_AudioRouteDescription;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_CurrentHardwareIOBufferDuration;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_CurrentHardwareInputLatency;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_CurrentHardwareInputNumberChannels;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_CurrentHardwareOutputLatency;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_CurrentHardwareOutputNumberChannels;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_CurrentHardwareOutputVolume;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_CurrentHardwareSampleRate;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_InputGainAvailable;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_InputGainScalar;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_InputSource;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_InputSources;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_InterruptionType;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_Mode;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_OtherAudioIsPlaying;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_OtherMixableAudioShouldDuck;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_OutputDestination;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_OutputDestinations;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_OverrideAudioRoute;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_OverrideCategoryDefaultToSpeaker;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_OverrideCategoryEnableBluetoothInput;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_OverrideCategoryMixWithOthers;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_PreferredHardwareIOBufferDuration;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_PreferredHardwareSampleRate;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionProperty_ServerDied;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionRouteChangeReason_CategoryChange;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionRouteChangeReason_NewDeviceAvailable;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionRouteChangeReason_NoSuitableRouteForCategory;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionRouteChangeReason_OldDeviceUnavailable;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionRouteChangeReason_Override;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionRouteChangeReason_RouteConfigurationChange;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionRouteChangeReason_Unknown;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionRouteChangeReason_WakeFromSleep;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionSetActiveFlag_NotifyOthersOnDeactivation;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionUnspecifiedError;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSessionUnsupportedPropertyError;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSession_AudioRouteChangeKey_CurrentRouteDescription;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSession_AudioRouteChangeKey_OldRoute;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSession_AudioRouteChangeKey_PreviousRouteDescription;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::kAudioSession_AudioRouteChangeKey_Reason;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSession_AudioRouteKey_Inputs;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSession_AudioRouteKey_Outputs;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSession_AudioRouteKey_Type;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSession_InputSourceKey_Description;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSession_InputSourceKey_ID;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSession_OutputDestinationKey_Description;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSession_OutputDestinationKey_ID;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::kAudioSession_RouteChangeKey_Reason;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::AudioSessionAddPropertyListener;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::AudioSessionGetProperty;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::AudioSessionGetPropertySize;
#[cfg(all(feature = "AudioSession", feature = "objc2-core-foundation"))]
pub use self::__AudioSession::AudioSessionInitialize;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::AudioSessionInterruptionListener;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::AudioSessionInterruptionType;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::AudioSessionPropertyID;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::AudioSessionPropertyListener;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::AudioSessionRemovePropertyListener;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::AudioSessionRemovePropertyListenerWithUserData;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::AudioSessionSetActive;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::AudioSessionSetActiveWithFlags;
#[cfg(feature = "AudioSession")]
pub use self::__AudioSession::AudioSessionSetProperty;
#[cfg(feature = "AudioUnit")]
pub use self::__AudioUnit::AUDIO_UNIT_VERSION;
#[cfg(feature = "AudioUnitCarbonView")]
pub use self::__AudioUnitCarbonView::kAUCarbonViewSubType_Generic;
#[cfg(feature = "AudioUnitCarbonView")]
pub use self::__AudioUnitCarbonView::kAudioUnitCarbonViewComponentType;
#[cfg(feature = "AudioUnitCarbonView")]
pub use self::__AudioUnitCarbonView::kAudioUnitCarbonViewCreateSelect;
#[cfg(feature = "AudioUnitCarbonView")]
pub use self::__AudioUnitCarbonView::kAudioUnitCarbonViewEvent_MouseDownInControl;
#[cfg(feature = "AudioUnitCarbonView")]
pub use self::__AudioUnitCarbonView::kAudioUnitCarbonViewEvent_MouseUpInControl;
#[cfg(feature = "AudioUnitCarbonView")]
pub use self::__AudioUnitCarbonView::kAudioUnitCarbonViewRange;
#[cfg(feature = "AudioUnitCarbonView")]
pub use self::__AudioUnitCarbonView::kAudioUnitCarbonViewSetEventListenerSelect;
#[cfg(feature = "AudioUnitCarbonView")]
pub use self::__AudioUnitCarbonView::AudioUnitCarbonViewEventID;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_Azimuth;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_BusEnable;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_Distance;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_DryWetReverbBlend;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_Elevation;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_Gain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_GlobalReverbGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_GlobalReverbGainInDecibels;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_MaxGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_MaxGainInDecibels;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_MinGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_MinGainInDecibels;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_ObstructionAttenuation;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_ObstructionAttenuationInDecibels;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_OcclusionAttenuation;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_OcclusionAttenuationInDecibels;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_PlaybackRate;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_PostAveragePower;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_PostPeakHoldLevel;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_PreAveragePower;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_PrePeakHoldLevel;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::k3DMixerParam_ReverbBlend;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUAudioMixParameter_RemixAmount;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUAudioMixParameter_Style;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_AllNotesOff;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_AllSoundOff;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_ChannelPressure;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_DataEntry;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_DataEntry_LSB;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_Expression;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_Expression_LSB;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_Foot;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_Foot_LSB;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_KeyPressure;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_KeyPressure_FirstKey;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_KeyPressure_LastKey;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_ModWheel;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_ModWheel_LSB;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_Pan;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_Pan_LSB;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_PitchBend;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_ResetAllControllers;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_Sostenuto;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_Sustain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_Volume;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUGroupParameterID_Volume_LSB;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAULowShelfParam_CutoffFrequency;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAULowShelfParam_Gain;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNBandEQFilterType_2ndOrderButterworthHighPass;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNBandEQFilterType_2ndOrderButterworthLowPass;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNBandEQFilterType_BandPass;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNBandEQFilterType_BandStop;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNBandEQFilterType_HighShelf;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNBandEQFilterType_LowShelf;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNBandEQFilterType_Parametric;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNBandEQFilterType_ResonantHighPass;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNBandEQFilterType_ResonantHighShelf;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNBandEQFilterType_ResonantLowPass;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNBandEQFilterType_ResonantLowShelf;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUNBandEQParam_Bandwidth;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUNBandEQParam_BypassBand;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUNBandEQParam_FilterType;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUNBandEQParam_Frequency;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUNBandEQParam_Gain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUNBandEQParam_GlobalGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUNetReceiveParam_NumParameters;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUNetReceiveParam_Status;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUNetSendParam_NumParameters;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUNetSendParam_Status;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNetStatus_Connected;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNetStatus_Connecting;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNetStatus_Listening;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNetStatus_NotConnected;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNetStatus_Overflow;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUNetStatus_Underflow;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUSamplerParam_CoarseTuning;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUSamplerParam_FineTuning;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUSamplerParam_Gain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUSamplerParam_Pan;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUSoundIsolationParam_SoundToIsolate;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kAUSoundIsolationParam_WetDryMixPercent;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUSoundIsolationSoundType_HighQualityVoice;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kAUSoundIsolationSoundType_Voice;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kBandpassParam_Bandwidth;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kBandpassParam_CenterFrequency;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDelayParam_DelayTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDelayParam_Feedback;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDelayParam_LopassCutoff;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDelayParam_WetDryMix;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_CubicTerm;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_Decay;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_Decimation;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_DecimationMix;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_Delay;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_DelayMix;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_FinalMix;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_LinearTerm;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_PolynomialMix;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_RingModBalance;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_RingModFreq1;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_RingModFreq2;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_RingModMix;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_Rounding;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_SoftClipGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDistortionParam_SquaredTerm;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDynamicsProcessorParam_AttackTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDynamicsProcessorParam_CompressionAmount;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDynamicsProcessorParam_ExpansionRatio;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDynamicsProcessorParam_ExpansionThreshold;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDynamicsProcessorParam_HeadRoom;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDynamicsProcessorParam_InputAmplitude;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDynamicsProcessorParam_MasterGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDynamicsProcessorParam_OutputAmplitude;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDynamicsProcessorParam_OverallGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDynamicsProcessorParam_ReleaseTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kDynamicsProcessorParam_Threshold;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kGraphicEQParam_NumberOfBands;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kHALOutputParam_Volume;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kHighShelfParam_CutOffFrequency;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kHighShelfParam_Gain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kHipassParam_CutoffFrequency;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kHipassParam_Resonance;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kLimiterParam_AttackTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kLimiterParam_DecayTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kLimiterParam_PreGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kLowPassParam_CutoffFrequency;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kLowPassParam_Resonance;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMatrixMixerParam_Enable;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMatrixMixerParam_PostAveragePower;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMatrixMixerParam_PostAveragePowerLinear;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMatrixMixerParam_PostPeakHoldLevel;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMatrixMixerParam_PostPeakHoldLevelLinear;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMatrixMixerParam_PreAveragePower;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMatrixMixerParam_PreAveragePowerLinear;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMatrixMixerParam_PrePeakHoldLevel;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMatrixMixerParam_PrePeakHoldLevelLinear;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMatrixMixerParam_Volume;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultiChannelMixerParam_Enable;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultiChannelMixerParam_Pan;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultiChannelMixerParam_PostAveragePower;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultiChannelMixerParam_PostPeakHoldLevel;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultiChannelMixerParam_PreAveragePower;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultiChannelMixerParam_PrePeakHoldLevel;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultiChannelMixerParam_Volume;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_AttackTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_CompressionAmount1;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_CompressionAmount2;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_CompressionAmount3;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_CompressionAmount4;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_Crossover1;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_Crossover2;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_Crossover3;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_EQ1;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_EQ2;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_EQ3;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_EQ4;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_Headroom1;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_Headroom2;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_Headroom3;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_Headroom4;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_InputAmplitude1;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_InputAmplitude2;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_InputAmplitude3;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_InputAmplitude4;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_OutputAmplitude1;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_OutputAmplitude2;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_OutputAmplitude3;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_OutputAmplitude4;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_Postgain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_Pregain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_ReleaseTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_Threshold1;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_Threshold2;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_Threshold3;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandCompressorParam_Threshold4;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_Bandwidth1;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_Bandwidth2;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_Bandwidth3;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_CenterFreq1;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_CenterFreq2;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_CenterFreq3;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_CenterGain1;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_CenterGain2;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_CenterGain3;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_HighFilterType;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_HighFrequency;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_HighGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_LowFilterType;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_LowFrequency;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMultibandFilter_LowGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMusicDeviceParam_ReverbVolume;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMusicDeviceParam_Tuning;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kMusicDeviceParam_Volume;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kNewTimePitchParam_EnablePeakLocking;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kNewTimePitchParam_EnableSpectralCoherence;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kNewTimePitchParam_EnableTransientPreservation;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kNewTimePitchParam_Overlap;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kNewTimePitchParam_Pitch;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kNewTimePitchParam_Rate;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kNewTimePitchParam_Smoothness;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::kNumAUNBandEQFilterTypes;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kPannerParam_Azimuth;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kPannerParam_CoordScale;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kPannerParam_Distance;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kPannerParam_Elevation;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kPannerParam_Gain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kPannerParam_RefDistance;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kParametricEQParam_CenterFreq;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kParametricEQParam_Gain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kParametricEQParam_Q;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRandomParam_BoundA;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRandomParam_BoundB;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRandomParam_Curve;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverb2Param_DecayTimeAt0Hz;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverb2Param_DecayTimeAtNyquist;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverb2Param_DryWetMix;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverb2Param_Gain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverb2Param_MaxDelayTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverb2Param_MinDelayTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverb2Param_RandomizeReflections;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_DryWetMix;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_FilterBandwidth;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_FilterEnable;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_FilterFrequency;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_FilterGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_FilterType;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_LargeBrightness;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_LargeDelay;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_LargeDelayRange;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_LargeDensity;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_LargeSize;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_ModulationDepth;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_ModulationRate;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_PreDelay;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_SmallBrightness;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_SmallDelayRange;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_SmallDensity;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_SmallLargeMix;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kReverbParam_SmallSize;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRogerBeepParam_InGateThreshold;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRogerBeepParam_InGateThresholdTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRogerBeepParam_OutGateThreshold;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRogerBeepParam_OutGateThresholdTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRogerBeepParam_RogerGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRogerBeepParam_RogerType;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRogerBeepParam_Sensitivity;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRoundTripAACParam_BitRate;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRoundTripAACParam_CompressedFormatSampleRate;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRoundTripAACParam_EncodingStrategy;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRoundTripAACParam_Format;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRoundTripAACParam_Quality;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kRoundTripAACParam_RateOrQuality;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSampleDelayParam_DelayFrames;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_Azimuth;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_Distance;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_Elevation;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_Enable;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_Gain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_GlobalReverbGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_HeadPitch;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_HeadRoll;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_HeadYaw;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_MaxGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_MinGain;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_ObstructionAttenuation;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_OcclusionAttenuation;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_PlaybackRate;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kSpatialMixerParam_ReverbBlend;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kStereoMixerParam_Pan;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kStereoMixerParam_PostAveragePower;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kStereoMixerParam_PostPeakHoldLevel;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kStereoMixerParam_PreAveragePower;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kStereoMixerParam_PrePeakHoldLevel;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kStereoMixerParam_Volume;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kTimePitchParam_EffectBlend;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kTimePitchParam_Pitch;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kTimePitchParam_Rate;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kVarispeedParam_PlaybackCents;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitParameters"))]
pub use self::__AudioUnitParameters::kVarispeedParam_PlaybackRate;
#[cfg(feature = "AudioUnitParameters")]
pub use self::__AudioUnitParameters::AUAudioMixRenderingStyle;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUAudioMixProperty_EnableSpatialization;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUAudioMixProperty_SpatialAudioMixMetadata;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUMIDISynthProperty_EnablePreload;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNBandEQProperty_BiquadCoefficients;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNBandEQProperty_MaxNumberOfBands;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNBandEQProperty_NumberOfBands;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetReceiveProperty_Hostname;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetReceiveProperty_Password;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendNumPresetFormats;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_AAC_128kbpspc;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_AAC_32kbpspc;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_AAC_40kbpspc;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_AAC_48kbpspc;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_AAC_64kbpspc;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_AAC_80kbpspc;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_AAC_96kbpspc;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_AAC_LD_32kbpspc;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_AAC_LD_40kbpspc;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_AAC_LD_48kbpspc;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_AAC_LD_64kbpspc;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_IMA4;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_Lossless16;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_Lossless24;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_PCMFloat32;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_PCMInt16;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_PCMInt24;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendPresetFormat_ULaw;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendProperty_Disconnect;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendProperty_Password;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendProperty_PortNum;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendProperty_ServiceName;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendProperty_TransmissionFormat;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUNetSendProperty_TransmissionFormatIndex;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetCPULoadKey;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetDataKey;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetElementNameKey;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetExternalFileRefs;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetMASDataKey;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetManufacturerKey;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetNameKey;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetNumberKey;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetPartKey;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetRenderQualityKey;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetSubtypeKey;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetTypeKey;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetVSTDataKey;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetVSTPresetKey;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUPresetVersionKey;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUSamplerProperty_BankAndPreset;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUSamplerProperty_LoadAudioFiles;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUSamplerProperty_LoadInstrument;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUSamplerProperty_LoadPresetFromBank;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUSampler_DefaultBankLSB;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUSampler_DefaultMelodicBankMSB;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUSampler_DefaultPercussionBankMSB;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAUVoiceIOErr_UnexpectedNumberOfInputChannels;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUVoiceIOProperty_BypassVoiceProcessing;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUVoiceIOProperty_MuteOutput;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUVoiceIOProperty_MutedSpeechActivityEventListener;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUVoiceIOProperty_OtherAudioDuckingConfiguration;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUVoiceIOProperty_VoiceProcessingEnableAGC;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAUVoiceIOProperty_VoiceProcessingQuality;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOfflineUnitProperty_InputSize;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOfflineUnitProperty_OutputSize;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_ChannelMap;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_CurrentDevice;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_EnableIO;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_HasIO;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_HostReceivesRemoteControlEvents;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_HostTransportState;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_IntendedSpatialExperience;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_IsRunning;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_MIDICallbacks;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_NodeComponentDescription;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_OSWorkgroup;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_RemoteControlToHost;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_SetInputCallback;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_StartTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioOutputUnitProperty_StartTimestampsAtZero;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitClumpID_System;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitConfigurationInfo_AvailableArchitectures;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitConfigurationInfo_BusCountWritable;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitConfigurationInfo_ChannelConfigurations;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitConfigurationInfo_HasCustomView;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitConfigurationInfo_IconURL;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitConfigurationInfo_InitialInputs;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitConfigurationInfo_InitialOutputs;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitConfigurationInfo_MIDIProtocol;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitConfigurationInfo_MigrateFromPlugin;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitConfigurationInfo_SupportedChannelLayoutTags;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitMigrateProperty_FromPlugin;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitMigrateProperty_OldAutomation;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitOfflineProperty_InputSize;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitOfflineProperty_OutputSize;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitOfflineProperty_PreflightName;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitOfflineProperty_PreflightRequirements;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitOfflineProperty_StartOffset;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitParameterFlag_Global;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitParameterFlag_Group;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitParameterFlag_HasName;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitParameterFlag_Input;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitParameterFlag_Output;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitParameterName_Full;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_3DMixerAttenuationCurve;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_3DMixerDistanceAtten;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_3DMixerDistanceParams;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_3DMixerRenderingFlags;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_AUHostIdentifier;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_AddParameterMIDIMapping;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_AllParameterMIDIMappings;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_AudioChannelLayout;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_AudioUnitMIDIProtocol;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_BusCount;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_BypassEffect;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_CPULoad;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ClassInfo;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ClassInfoFromDocument;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_CocoaUI;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ContextName;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_CurrentPlayTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_CurrentPreset;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_DeferredRendererExtraLatency;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_DeferredRendererPullSize;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_DeferredRendererWaitFrames;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_DependentParameters;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_DistanceAttenuationData;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_DopplerShift;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ElementCount;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ElementName;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_FactoryPresets;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_FastDispatch;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_FrequencyResponse;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_GetUIComponentList;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_HostCallbacks;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_HostMIDIProtocol;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_HotMapParameterMIDIMapping;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_IconLocation;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_InPlaceProcessing;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_InputAnchorTimeStamp;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_InputSamplesInOutput;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_IsInterAppConnected;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_LastRenderError;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_LastRenderSampleTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_Latency;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_LoadedOutOfProcess;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_MIDIControlMapping;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_MIDIOutputBufferSizeHint;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_MIDIOutputCallback;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_MIDIOutputCallbackInfo;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_MIDIOutputEventListCallback;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_MakeConnection;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_MatrixDimensions;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_MatrixLevels;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_MaximumFramesPerSlice;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_MeterClipping;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_MeteringMode;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_NickName;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_OfflineRender;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_PannerMode;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ParameterClumpName;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ParameterHistoryInfo;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ParameterIDName;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ParameterInfo;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ParameterList;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ParameterStringFromValue;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ParameterValueFromString;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ParameterValueName;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ParameterValueStrings;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ParametersForOverview;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_PeerURL;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_PresentPreset;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_PresentationLatency;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_RemoteControlEventListener;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_RemoveParameterMIDIMapping;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_RenderContextObserver;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_RenderQuality;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_RequestViewController;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ReverbPreset;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ReverbRoomType;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SRCAlgorithm;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SampleRate;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SampleRateConverterComplexity;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ScheduleAudioSlice;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ScheduleStartTimeStamp;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ScheduledFileBufferSizeFrames;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ScheduledFileIDs;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ScheduledFileNumberBuffers;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ScheduledFilePrime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ScheduledFileRegion;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SetExternalBuffer;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SetRenderCallback;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_ShouldAllocateBuffer;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SpatialMixerAnyInputIsUsingPersonalizedHRTF;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SpatialMixerAttenuationCurve;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SpatialMixerDistanceParams;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SpatialMixerEnableHeadTracking;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SpatialMixerOutputType;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SpatialMixerPersonalizedHRTFMode;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SpatialMixerPointSourceInHeadMode;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SpatialMixerRenderingFlags;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SpatialMixerSourceMode;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SpatializationAlgorithm;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SpeakerConfiguration;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_StreamFormat;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SupportedChannelLayoutTags;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SupportedNumChannels;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_SupportsMPE;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_TailTime;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitProperty_UsesInternalReverb;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitSRCAlgorithm_MediumQuality;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitSRCAlgorithm_Polyphase;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitSampleRateConverterComplexity_Linear;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitSampleRateConverterComplexity_Mastering;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kAudioUnitSampleRateConverterComplexity_Normal;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitScope_Global;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitScope_Group;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitScope_Input;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitScope_Layer;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitScope_LayerItem;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitScope_Note;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitScope_Output;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kAudioUnitScope_Part;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kInstrumentType_AUPreset;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kInstrumentType_Audiofile;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kInstrumentType_DLSPreset;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kInstrumentType_EXS24;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kInstrumentType_SF2Preset;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_BankName;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_DualSchedulingMode;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_GroupOutputBus;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_InstrumentCount;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_InstrumentName;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_InstrumentNumber;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_MIDIXMLNames;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_PartGroup;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_SoundBankData;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_SoundBankFSRef;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_SoundBankFSSpec;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_SoundBankURL;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_StreamFromDisk;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_SupportsStartStopNote;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::kMusicDeviceProperty_UsesInternalReverb;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kMusicDeviceSampleFrameMask_IsScheduled;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kMusicDeviceSampleFrameMask_SampleOffset;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kNumberOfResponseFrequencies;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kOfflinePreflight_NotRequired;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kOfflinePreflight_Optional;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kOfflinePreflight_Required;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kOtherPluginFormat_AU;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kOtherPluginFormat_Undefined;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kOtherPluginFormat_kMAS;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kOtherPluginFormat_kVST;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kRenderQuality_High;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kRenderQuality_Low;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kRenderQuality_Max;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kRenderQuality_Medium;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kRenderQuality_Min;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kSpeakerConfiguration_5_0;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kSpeakerConfiguration_5_1;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kSpeakerConfiguration_HeadPhones;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kSpeakerConfiguration_Quad;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::kSpeakerConfiguration_Stereo;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AU3DMixerAttenuationCurve;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AU3DMixerRenderingFlags;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUChannelInfo;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::AUDependentParameter;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUEventSampleTime;
#[cfg(all(feature = "AudioUnitProperties", feature = "objc2-core-foundation"))]
pub use self::__AudioUnitProperties::AUHostIdentifier;
#[cfg(all(feature = "AudioUnitProperties", feature = "objc2-core-foundation"))]
pub use self::__AudioUnitProperties::AUHostVersionIdentifier;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioUnitProperties",
    feature = "objc2-core-audio-types"
))]
pub use self::__AudioUnitProperties::AUInputSamplesInOutputCallbackStruct;
#[cfg(all(
    feature = "AudioUnitProperties",
    feature = "objc2-core-audio-types",
    feature = "objc2-core-midi"
))]
pub use self::__AudioUnitProperties::AUMIDIOutputCallback;
#[cfg(all(
    feature = "AudioUnitProperties",
    feature = "objc2-core-audio-types",
    feature = "objc2-core-midi"
))]
pub use self::__AudioUnitProperties::AUMIDIOutputCallbackStruct;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUNumVersion;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::AUParameterMIDIMapping;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUParameterMIDIMappingFlags;
#[cfg(all(feature = "AudioUnitProperties", feature = "objc2-core-foundation"))]
pub use self::__AudioUnitProperties::AUPreset;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioUnitProperties",
    feature = "objc2-core-audio-types"
))]
pub use self::__AudioUnitProperties::AURenderCallbackStruct;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUReverbRoomType;
#[cfg(all(feature = "AudioUnitProperties", feature = "objc2-core-foundation"))]
pub use self::__AudioUnitProperties::AUSamplerBankPresetData;
#[cfg(all(feature = "AudioUnitProperties", feature = "objc2-core-foundation"))]
pub use self::__AudioUnitProperties::AUSamplerInstrumentData;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUScheduledAudioSliceFlags;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUSpatialMixerAttenuationCurve;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUSpatialMixerOutputType;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUSpatialMixerPersonalizedHRTFMode;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUSpatialMixerPointSourceInHeadMode;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUSpatialMixerRenderingFlags;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUSpatialMixerSourceMode;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUSpatializationAlgorithm;
#[cfg(all(feature = "AudioUnitProperties", feature = "block2"))]
pub use self::__AudioUnitProperties::AUVoiceIOMutedSpeechActivityEventListener;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUVoiceIOOtherAudioDuckingConfiguration;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUVoiceIOOtherAudioDuckingLevel;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AUVoiceIOSpeechActivityEvent;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AudioOutputUnitMIDICallbacks;
#[cfg(all(feature = "AudioUnitProperties", feature = "objc2-core-audio-types"))]
pub use self::__AudioUnitProperties::AudioOutputUnitStartAtTimeParams;
#[cfg(all(feature = "AudioUnitProperties", feature = "objc2-core-foundation"))]
pub use self::__AudioUnitProperties::AudioUnitCocoaViewInfo;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "AudioUnitProperties"
))]
pub use self::__AudioUnitProperties::AudioUnitConnection;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AudioUnitExternalBuffer;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AudioUnitFrequencyResponseBin;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitProperties"))]
pub use self::__AudioUnitProperties::AudioUnitMIDIControlMapping;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AudioUnitMeterClipping;
#[cfg(all(feature = "AudioUnitProperties", feature = "objc2-core-audio-types"))]
pub use self::__AudioUnitProperties::AudioUnitOtherPluginDesc;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AudioUnitParameterHistoryInfo;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioUnitProperties",
    feature = "objc2-core-foundation"
))]
pub use self::__AudioUnitProperties::AudioUnitParameterIDName;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioUnitProperties",
    feature = "objc2-core-foundation"
))]
pub use self::__AudioUnitProperties::AudioUnitParameterInfo;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioUnitProperties",
    feature = "objc2-core-foundation"
))]
pub use self::__AudioUnitProperties::AudioUnitParameterNameInfo;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AudioUnitParameterOptions;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioUnitProperties",
    feature = "objc2-core-foundation"
))]
pub use self::__AudioUnitProperties::AudioUnitParameterStringFromValue;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AudioUnitParameterUnit;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioUnitProperties",
    feature = "objc2-core-foundation"
))]
pub use self::__AudioUnitProperties::AudioUnitParameterValueFromString;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioUnitProperties",
    feature = "objc2-core-foundation"
))]
pub use self::__AudioUnitProperties::AudioUnitParameterValueName;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioUnitProperties",
    feature = "objc2-core-audio-types"
))]
pub use self::__AudioUnitProperties::AudioUnitParameterValueTranslation;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AudioUnitPresetMAS_SettingData;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AudioUnitPresetMAS_Settings;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::AudioUnitRemoteControlEvent;
#[cfg(all(feature = "AudioUnitProperties", feature = "block2"))]
pub use self::__AudioUnitProperties::AudioUnitRemoteControlEventListener;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::HostCallbackInfo;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::HostCallback_GetBeatAndTempo;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::HostCallback_GetMusicalTimeLocation;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::HostCallback_GetTransportState;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::HostCallback_GetTransportState2;
#[cfg(feature = "AudioUnitProperties")]
pub use self::__AudioUnitProperties::MixerDistanceParams;
#[cfg(all(feature = "AUComponent", feature = "AudioUnitUtilities"))]
pub use self::__AudioUnitUtilities::kAUParameterListener_AnyParameter;
#[cfg(feature = "AudioUnitUtilities")]
pub use self::__AudioUnitUtilities::AUEventListenerRef;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "AudioUnitUtilities"
))]
pub use self::__AudioUnitUtilities::AUListenerAddParameter;
#[cfg(feature = "AudioUnitUtilities")]
pub use self::__AudioUnitUtilities::AUListenerBase;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "AudioUnitUtilities",
    feature = "objc2-core-foundation"
))]
pub use self::__AudioUnitUtilities::AUListenerCreate;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "AudioUnitUtilities",
    feature = "block2",
    feature = "dispatch2"
))]
pub use self::__AudioUnitUtilities::AUListenerCreateWithDispatchQueue;
#[cfg(feature = "AudioUnitUtilities")]
pub use self::__AudioUnitUtilities::AUListenerDispose;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "AudioUnitUtilities"
))]
pub use self::__AudioUnitUtilities::AUListenerRemoveParameter;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "AudioUnitUtilities"
))]
pub use self::__AudioUnitUtilities::AUParameterFormatValue;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "AudioUnitUtilities",
    feature = "block2"
))]
pub use self::__AudioUnitUtilities::AUParameterListenerBlock;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "AudioUnitUtilities"
))]
pub use self::__AudioUnitUtilities::AUParameterListenerNotify;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "AudioUnitUtilities"
))]
pub use self::__AudioUnitUtilities::AUParameterListenerProc;
#[cfg(feature = "AudioUnitUtilities")]
pub use self::__AudioUnitUtilities::AUParameterListenerRef;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "AudioUnitUtilities"
))]
pub use self::__AudioUnitUtilities::AUParameterSet;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "AudioUnitUtilities"
))]
pub use self::__AudioUnitUtilities::AUParameterValueFromLinear;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "AudioUnitUtilities"
))]
pub use self::__AudioUnitUtilities::AUParameterValueToLinear;
#[cfg(feature = "AudioUnitUtilities")]
pub use self::__AudioUnitUtilities::AudioUnitEventType;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_EditDestinationBegin;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_EditDestinationEnd;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_EditSourceBegin;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_EditSourceEnd;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_Generic;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_Index;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_KeySignature;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_ProgramEnd;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_ProgramStart;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_RegionEnd;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_RegionStart;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_RegionSyncPoint;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_ReleaseLoopEnd;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_ReleaseLoopStart;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_SavedPlayPosition;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_SelectionEnd;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_SelectionStart;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_SustainLoopEnd;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_SustainLoopStart;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_Tempo;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_TimeSignature;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_TrackEnd;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAFMarkerType_TrackStart;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_AudioDataChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_ChannelLayoutChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_EditCommentsChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_FileType;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_FileVersion_Initial;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_FillerChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_FormatListID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_InfoStringsChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_InstrumentChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_MIDIChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_MagicCookieID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_MarkerChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_OverviewChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_PacketTableChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_PeakChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_RegionChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_SMPTE_TimeType2398;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_SMPTE_TimeType24;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_SMPTE_TimeType25;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_SMPTE_TimeType2997;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_SMPTE_TimeType2997Drop;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_SMPTE_TimeType30;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_SMPTE_TimeType30Drop;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_SMPTE_TimeType50;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_SMPTE_TimeType5994;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_SMPTE_TimeType5994Drop;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_SMPTE_TimeType60;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_SMPTE_TimeType60Drop;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_SMPTE_TimeTypeNone;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_StreamDescriptionChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_StringsChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_UMIDChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_UUIDChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::kCAF_iXMLChunkID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFAudioDescription;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFAudioFormatListItem;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFChunkHeader;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFDataChunk;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFFileHeader;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFFormatFlags;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFInfoStrings;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFInstrumentChunk;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFMarker;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFMarkerChunk;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFOverviewChunk;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFOverviewSample;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFPacketTableHeader;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFPeakChunk;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFPositionPeak;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFRegion;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFRegionChunk;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFRegionFlags;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFStringID;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFStrings;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAFUMIDChunk;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAF_SMPTE_Time;
#[cfg(feature = "CAFFile")]
pub use self::__CAFFile::CAF_UUID_ChunkHeader;
#[cfg(feature = "CAShow")]
pub use self::__CAShow::CAShow;
#[cfg(all(feature = "CAShow", feature = "libc"))]
pub use self::__CAShow::CAShowFile;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileError_AsyncWriteBufferOverflow;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileError_AsyncWriteTooLarge;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileError_InvalidChannelMap;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileError_InvalidDataFormat;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileError_InvalidOperationOrder;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileError_InvalidProperty;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileError_InvalidPropertySize;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileError_InvalidSeek;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileError_MaxPacketSizeUnknown;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileError_NonPCMClientFormat;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFilePacketTableInfoOverride_UseFileValue;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFilePacketTableInfoOverride_UseFileValueIfValid;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileProperty_AudioConverter;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileProperty_AudioFile;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileProperty_ClientChannelLayout;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileProperty_ClientDataFormat;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileProperty_ClientMaxPacketSize;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileProperty_CodecManufacturer;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileProperty_ConverterConfig;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileProperty_FileChannelLayout;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileProperty_FileDataFormat;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileProperty_FileLengthFrames;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileProperty_FileMaxPacketSize;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileProperty_IOBuffer;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileProperty_IOBufferSizeBytes;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::kExtAudioFileProperty_PacketTable;
#[cfg(all(
    feature = "AudioFile",
    feature = "ExtendedAudioFile",
    feature = "objc2-core-audio-types",
    feature = "objc2-core-foundation"
))]
pub use self::__ExtendedAudioFile::ExtAudioFileCreateWithURL;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::ExtAudioFileDispose;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::ExtAudioFileGetProperty;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::ExtAudioFileGetPropertyInfo;
#[cfg(all(feature = "ExtendedAudioFile", feature = "objc2-core-foundation"))]
pub use self::__ExtendedAudioFile::ExtAudioFileOpenURL;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::ExtAudioFilePacketTableInfoOverride;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::ExtAudioFilePropertyID;
#[cfg(all(feature = "ExtendedAudioFile", feature = "objc2-core-audio-types"))]
pub use self::__ExtendedAudioFile::ExtAudioFileRead;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::ExtAudioFileRef;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::ExtAudioFileSeek;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::ExtAudioFileSetProperty;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::ExtAudioFileTell;
#[cfg(all(feature = "AudioFile", feature = "ExtendedAudioFile"))]
pub use self::__ExtendedAudioFile::ExtAudioFileWrapAudioFileID;
#[cfg(all(feature = "ExtendedAudioFile", feature = "objc2-core-audio-types"))]
pub use self::__ExtendedAudioFile::ExtAudioFileWrite;
#[cfg(all(feature = "ExtendedAudioFile", feature = "objc2-core-audio-types"))]
pub use self::__ExtendedAudioFile::ExtAudioFileWriteAsync;
#[cfg(feature = "ExtendedAudioFile")]
pub use self::__ExtendedAudioFile::OpaqueExtAudioFile;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::kMusicDeviceMIDIEventListSelect;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::kMusicDeviceMIDIEventSelect;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::kMusicDevicePrepareInstrumentSelect;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::kMusicDeviceRange;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::kMusicDeviceReleaseInstrumentSelect;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::kMusicDeviceStartNoteSelect;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::kMusicDeviceStopNoteSelect;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::kMusicDeviceSysExSelect;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::kMusicNoteEvent_Unused;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::kMusicNoteEvent_UseGroupInstrument;
#[cfg(all(feature = "AudioComponent", feature = "MusicDevice"))]
pub use self::__MusicDevice::MusicDeviceComponent;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::MusicDeviceGroupID;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::MusicDeviceInstrumentID;
#[cfg(all(feature = "AudioComponent", feature = "MusicDevice"))]
pub use self::__MusicDevice::MusicDeviceMIDIEvent;
#[cfg(all(
    feature = "AudioComponent",
    feature = "MusicDevice",
    feature = "objc2-core-midi"
))]
pub use self::__MusicDevice::MusicDeviceMIDIEventList;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::MusicDeviceMIDIEventProc;
#[cfg(all(feature = "AUComponent", feature = "MusicDevice"))]
pub use self::__MusicDevice::MusicDeviceNoteParams;
#[cfg(all(feature = "AudioComponent", feature = "MusicDevice"))]
pub use self::__MusicDevice::MusicDevicePrepareInstrument;
#[cfg(all(feature = "AudioComponent", feature = "MusicDevice"))]
pub use self::__MusicDevice::MusicDeviceReleaseInstrument;
#[cfg(all(
    feature = "AUComponent",
    feature = "AudioComponent",
    feature = "MusicDevice"
))]
pub use self::__MusicDevice::MusicDeviceStartNote;
#[cfg(all(feature = "AUComponent", feature = "MusicDevice"))]
pub use self::__MusicDevice::MusicDeviceStartNoteProc;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::MusicDeviceStdNoteParams;
#[cfg(all(feature = "AudioComponent", feature = "MusicDevice"))]
pub use self::__MusicDevice::MusicDeviceStopNote;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::MusicDeviceStopNoteProc;
#[cfg(all(feature = "AudioComponent", feature = "MusicDevice"))]
pub use self::__MusicDevice::MusicDeviceSysEx;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::MusicDeviceSysExProc;
#[cfg(feature = "MusicDevice")]
pub use self::__MusicDevice::NoteInstanceID;
#[cfg(all(feature = "AUComponent", feature = "MusicDevice"))]
pub use self::__MusicDevice::NoteParamsControlValue;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kAudioToolboxErr_CannotDoInCurrentContext;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kAudioToolboxErr_EndOfTrack;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kAudioToolboxErr_IllegalTrackDestination;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kAudioToolboxErr_InvalidEventType;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kAudioToolboxErr_InvalidPlayerState;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kAudioToolboxErr_InvalidSequenceType;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kAudioToolboxErr_NoSequence;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kAudioToolboxErr_StartOfTrack;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kAudioToolboxErr_TrackIndexError;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kAudioToolboxErr_TrackNotFound;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kAudioToolboxError_NoTrackDestination;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kMusicEventType_AUPreset;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kMusicEventType_ExtendedControl;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kMusicEventType_ExtendedNote;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kMusicEventType_ExtendedTempo;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kMusicEventType_MIDIChannelMessage;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kMusicEventType_MIDINoteMessage;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kMusicEventType_MIDIRawData;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kMusicEventType_Meta;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kMusicEventType_NULL;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kMusicEventType_Parameter;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kMusicEventType_User;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kSequenceTrackProperty_AutomatedParameters;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kSequenceTrackProperty_LoopInfo;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kSequenceTrackProperty_MuteStatus;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kSequenceTrackProperty_OffsetTime;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kSequenceTrackProperty_SoloStatus;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kSequenceTrackProperty_TimeResolution;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::kSequenceTrackProperty_TrackLength;
#[cfg(all(
    feature = "AUComponent",
    feature = "MusicPlayer",
    feature = "objc2-core-foundation"
))]
pub use self::__MusicPlayer::AUPresetEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::CABarBeatTime;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::DisposeMusicEventIterator;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::DisposeMusicPlayer;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::DisposeMusicSequence;
#[cfg(all(
    feature = "AUComponent",
    feature = "MusicDevice",
    feature = "MusicPlayer"
))]
pub use self::__MusicPlayer::ExtendedControlEvent;
#[cfg(all(
    feature = "AUComponent",
    feature = "MusicDevice",
    feature = "MusicPlayer"
))]
pub use self::__MusicPlayer::ExtendedNoteOnEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::ExtendedTempoEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MIDIChannelMessage;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MIDIMetaEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MIDINoteMessage;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MIDIRawData;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicEventIterator;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicEventIteratorDeleteEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicEventIteratorGetEventInfo;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicEventIteratorHasCurrentEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicEventIteratorHasNextEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicEventIteratorHasPreviousEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicEventIteratorNextEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicEventIteratorPreviousEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicEventIteratorSeek;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicEventIteratorSetEventInfo;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicEventIteratorSetEventTime;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicEventType;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicEventUserData;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicPlayer;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicPlayerGetBeatsForHostTime;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicPlayerGetHostTimeForBeats;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicPlayerGetPlayRateScalar;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicPlayerGetSequence;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicPlayerGetTime;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicPlayerIsPlaying;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicPlayerPreroll;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicPlayerSetPlayRateScalar;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicPlayerSetSequence;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicPlayerSetTime;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicPlayerStart;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicPlayerStop;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequence;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceBarBeatTimeToBeats;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceBeatsToBarBeatTime;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceDisposeTrack;
#[cfg(all(feature = "MusicPlayer", feature = "objc2-core-foundation"))]
pub use self::__MusicPlayer::MusicSequenceFileCreate;
#[cfg(all(feature = "MusicPlayer", feature = "objc2-core-foundation"))]
pub use self::__MusicPlayer::MusicSequenceFileCreateData;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceFileFlags;
#[cfg(all(feature = "MusicPlayer", feature = "objc2-core-foundation"))]
pub use self::__MusicPlayer::MusicSequenceFileLoad;
#[cfg(all(feature = "MusicPlayer", feature = "objc2-core-foundation"))]
pub use self::__MusicPlayer::MusicSequenceFileLoadData;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceFileTypeID;
#[cfg(all(feature = "AUGraph", feature = "MusicPlayer"))]
pub use self::__MusicPlayer::MusicSequenceGetAUGraph;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceGetBeatsForSeconds;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceGetIndTrack;
#[cfg(all(feature = "MusicPlayer", feature = "objc2-core-foundation"))]
pub use self::__MusicPlayer::MusicSequenceGetInfoDictionary;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceGetSecondsForBeats;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceGetSequenceType;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceGetTempoTrack;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceGetTrackCount;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceGetTrackIndex;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceLoadFlags;
#[cfg(all(feature = "MusicPlayer", feature = "objc2-core-foundation"))]
pub use self::__MusicPlayer::MusicSequenceLoadSMFDataWithFlags;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceNewTrack;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceReverse;
#[cfg(all(feature = "MusicPlayer", feature = "objc2-core-foundation"))]
pub use self::__MusicPlayer::MusicSequenceSaveSMFData;
#[cfg(all(feature = "AUGraph", feature = "MusicPlayer"))]
pub use self::__MusicPlayer::MusicSequenceSetAUGraph;
#[cfg(all(feature = "MusicPlayer", feature = "objc2-core-midi"))]
pub use self::__MusicPlayer::MusicSequenceSetMIDIEndpoint;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceSetSequenceType;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceSetUserCallback;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceType;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicSequenceUserCallback;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTimeStamp;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrack;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackClear;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackCopyInsert;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackCut;
#[cfg(all(feature = "MusicPlayer", feature = "objc2-core-midi"))]
pub use self::__MusicPlayer::MusicTrackGetDestMIDIEndpoint;
#[cfg(all(feature = "AUGraph", feature = "MusicPlayer"))]
pub use self::__MusicPlayer::MusicTrackGetDestNode;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackGetProperty;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackGetSequence;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackLoopInfo;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackMerge;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackMoveEvents;
#[cfg(all(
    feature = "AUComponent",
    feature = "MusicPlayer",
    feature = "objc2-core-foundation"
))]
pub use self::__MusicPlayer::MusicTrackNewAUPresetEvent;
#[cfg(all(
    feature = "AUComponent",
    feature = "MusicDevice",
    feature = "MusicPlayer"
))]
pub use self::__MusicPlayer::MusicTrackNewExtendedControlEvent;
#[cfg(all(
    feature = "AUComponent",
    feature = "MusicDevice",
    feature = "MusicPlayer"
))]
pub use self::__MusicPlayer::MusicTrackNewExtendedNoteEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackNewExtendedTempoEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackNewMIDIChannelEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackNewMIDINoteEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackNewMIDIRawDataEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackNewMetaEvent;
#[cfg(all(feature = "AUComponent", feature = "MusicPlayer"))]
pub use self::__MusicPlayer::MusicTrackNewParameterEvent;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackNewUserEvent;
#[cfg(all(feature = "MusicPlayer", feature = "objc2-core-midi"))]
pub use self::__MusicPlayer::MusicTrackSetDestMIDIEndpoint;
#[cfg(all(feature = "AUGraph", feature = "MusicPlayer"))]
pub use self::__MusicPlayer::MusicTrackSetDestNode;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::MusicTrackSetProperty;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::NewMusicEventIterator;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::NewMusicPlayer;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::NewMusicSequence;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::NewMusicTrackFrom;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::OpaqueMusicEventIterator;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::OpaqueMusicPlayer;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::OpaqueMusicSequence;
#[cfg(feature = "MusicPlayer")]
pub use self::__MusicPlayer::OpaqueMusicTrack;
#[cfg(all(feature = "AUComponent", feature = "MusicPlayer"))]
pub use self::__MusicPlayer::ParameterEvent;
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-audio")]
use objc2_core_audio::*;
#[cfg(feature = "objc2-core-audio-types")]
use objc2_core_audio_types::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-midi")]
use objc2_core_midi::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audio_toolbox_version?language=objc)
pub const AUDIO_TOOLBOX_VERSION: c_uint = 1060;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kinstrumentinfokey_name?language=objc)
pub const kInstrumentInfoKey_Name: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"name\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kinstrumentinfokey_msb?language=objc)
pub const kInstrumentInfoKey_MSB: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"MSB\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kinstrumentinfokey_lsb?language=objc)
pub const kInstrumentInfoKey_LSB: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"LSB\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kinstrumentinfokey_program?language=objc)
pub const kInstrumentInfoKey_Program: &CStr =
    unsafe { CStr::from_bytes_with_nul_unchecked(b"program\0") };
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiohardwareserviceproperty_servicerestarted?language=objc)
#[cfg(feature = "objc2-core-audio")]
pub const kAudioHardwareServiceProperty_ServiceRestarted: AudioObjectPropertySelector = 0x73727374;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiohardwareservicedeviceproperty_virtualmainvolume?language=objc)
#[cfg(feature = "objc2-core-audio")]
pub const kAudioHardwareServiceDeviceProperty_VirtualMainVolume: AudioObjectPropertySelector =
    0x766d7663;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiohardwareservicedeviceproperty_virtualmastervolume?language=objc)
#[cfg(feature = "objc2-core-audio")]
#[deprecated]
pub const kAudioHardwareServiceDeviceProperty_VirtualMasterVolume: AudioObjectPropertySelector =
    kAudioHardwareServiceDeviceProperty_VirtualMainVolume;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiohardwareservicedeviceproperty_virtualmainbalance?language=objc)
#[cfg(feature = "objc2-core-audio")]
pub const kAudioHardwareServiceDeviceProperty_VirtualMainBalance: AudioObjectPropertySelector =
    0x766d6263;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiohardwareservicedeviceproperty_virtualmasterbalance?language=objc)
#[cfg(feature = "objc2-core-audio")]
#[deprecated]
pub const kAudioHardwareServiceDeviceProperty_VirtualMasterBalance: AudioObjectPropertySelector =
    kAudioHardwareServiceDeviceProperty_VirtualMainBalance;

/// Queries an AudioObject about whether or not it has the given property.
///
/// Parameter `inObjectID`: The AudioObject to query.
///
/// Parameter `inAddress`: An AudioObjectPropertyAddress indicating which property is being queried.
///
/// Returns: A Boolean indicating whether or not the AudioObject has the given property.
#[cfg(feature = "objc2-core-audio")]
#[deprecated = "no longer supported"]
#[inline]
pub unsafe extern "C-unwind" fn AudioHardwareServiceHasProperty(
    in_object_id: AudioObjectID,
    in_address: *const AudioObjectPropertyAddress,
) -> bool {
    extern "C-unwind" {
        fn AudioHardwareServiceHasProperty(
            in_object_id: AudioObjectID,
            in_address: *const AudioObjectPropertyAddress,
        ) -> Boolean;
    }
    let ret = unsafe { AudioHardwareServiceHasProperty(in_object_id, in_address) };
    ret != 0
}

extern "C-unwind" {
    /// Queries an AudioObject about whether or not the given property can be set using
    /// AudioHardwareServiceSetPropertyData.
    ///
    /// Parameter `inObjectID`: The AudioObject to query.
    ///
    /// Parameter `inAddress`: An AudioObjectPropertyAddress indicating which property is being queried.
    ///
    /// Parameter `outIsSettable`: A Boolean indicating whether or not the property can be set.
    ///
    /// Returns: An OSStatus indicating success or failure.
    #[cfg(feature = "objc2-core-audio")]
    #[deprecated = "no longer supported"]
    pub fn AudioHardwareServiceIsPropertySettable(
        in_object_id: AudioObjectID,
        in_address: *const AudioObjectPropertyAddress,
        out_is_settable: *mut Boolean,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Queries an AudioObject to find the size of the data for the given property.
    ///
    /// Parameter `inObjectID`: The AudioObject to query.
    ///
    /// Parameter `inAddress`: An AudioObjectPropertyAddress indicating which property is being queried.
    ///
    /// Parameter `inQualifierDataSize`: A UInt32 indicating the size of the buffer pointed to by inQualifierData.
    /// Note that not all properties require qualification, in which case this
    /// value will be 0.
    ///
    /// Parameter `inQualifierData`: A buffer of data to be used in determining the data of the property being
    /// queried. Note that not all properties require qualification, in which case
    /// this value will be NULL.
    ///
    /// Parameter `outDataSize`: A UInt32 indicating how many bytes the data for the given property occupies.
    ///
    /// Returns: An OSStatus indicating success or failure.
    #[cfg(feature = "objc2-core-audio")]
    #[deprecated = "no longer supported"]
    pub fn AudioHardwareServiceGetPropertyDataSize(
        in_object_id: AudioObjectID,
        in_address: *const AudioObjectPropertyAddress,
        in_qualifier_data_size: u32,
        in_qualifier_data: *const c_void,
        out_data_size: *mut u32,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Queries an AudioObject to get the data of the given property and places it in
    /// the provided buffer.
    ///
    /// Parameter `inObjectID`: The AudioObject to query.
    ///
    /// Parameter `inAddress`: An AudioObjectPropertyAddress indicating which property is being queried.
    ///
    /// Parameter `inQualifierDataSize`: A UInt32 indicating the size of the buffer pointed to by inQualifierData.
    /// Note that not all properties require qualification, in which case this
    /// value will be 0.
    ///
    /// Parameter `inQualifierData`: A buffer of data to be used in determining the data of the property being
    /// queried. Note that not all properties require qualification, in which case
    /// this value will be NULL.
    ///
    /// Parameter `ioDataSize`: A UInt32 which on entry indicates the size of the buffer pointed to by
    /// outData and on exit indicates how much of the buffer was used.
    ///
    /// Parameter `outData`: The buffer into which the AudioObject will put the data for the given
    /// property.
    ///
    /// Returns: An OSStatus indicating success or failure.
    #[cfg(feature = "objc2-core-audio")]
    #[deprecated = "no longer supported"]
    pub fn AudioHardwareServiceGetPropertyData(
        in_object_id: AudioObjectID,
        in_address: *const AudioObjectPropertyAddress,
        in_qualifier_data_size: u32,
        in_qualifier_data: *const c_void,
        io_data_size: *mut u32,
        out_data: *mut c_void,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Tells an AudioObject to change the value of the given property using the
    /// provided data.
    ///
    /// Note that the value of the property should not be considered changed until the
    /// HAL has called the listeners as many properties values are changed
    /// asynchronously.
    ///
    /// Parameter `inObjectID`: The AudioObject to change.
    ///
    /// Parameter `inAddress`: An AudioObjectPropertyAddress indicating which property is being changed.
    ///
    /// Parameter `inQualifierDataSize`: A UInt32 indicating the size of the buffer pointed to by inQualifierData.
    /// Note that not all properties require qualification, in which case this
    /// value will be 0.
    ///
    /// Parameter `inQualifierData`: A buffer of data to be used in determining the data of the property being
    /// queried. Note that not all properties require qualification, in which case
    /// this value will be NULL.
    ///
    /// Parameter `inDataSize`: A UInt32 indicating the size of the buffer pointed to by inData.
    ///
    /// Parameter `inData`: The buffer containing the data to be used to change the property's value.
    ///
    /// Returns: An OSStatus indicating success or failure.
    #[cfg(feature = "objc2-core-audio")]
    #[deprecated = "no longer supported"]
    pub fn AudioHardwareServiceSetPropertyData(
        in_object_id: AudioObjectID,
        in_address: *const AudioObjectPropertyAddress,
        in_qualifier_data_size: u32,
        in_qualifier_data: *const c_void,
        in_data_size: u32,
        in_data: *const c_void,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Registers the given AudioObjectPropertyListenerProc to receive notifications
    /// when the given properties change.
    ///
    /// Parameter `inObjectID`: The AudioObject to register the listener with.
    ///
    /// Parameter `inAddress`: The AudioObjectPropertyAddresses indicating which property the listener
    /// should be notified about.
    ///
    /// Parameter `inListener`: The AudioObjectPropertyListenerProc to call.
    ///
    /// Parameter `inClientData`: A pointer to client data that is passed to the listener when it is called.
    ///
    /// Returns: An OSStatus indicating success or failure.
    #[cfg(feature = "objc2-core-audio")]
    #[deprecated = "no longer supported"]
    pub fn AudioHardwareServiceAddPropertyListener(
        in_object_id: AudioObjectID,
        in_address: *const AudioObjectPropertyAddress,
        in_listener: AudioObjectPropertyListenerProc,
        in_client_data: *mut c_void,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Unregisters the given AudioObjectPropertyListenerProc from receiving
    /// notifications when the given properties change.
    ///
    /// Parameter `inObjectID`: The AudioObject to unregister the listener from.
    ///
    /// Parameter `inAddress`: The AudioObjectPropertyAddresses indicating which property the listener
    /// will stop being notified about.
    ///
    /// Parameter `inListener`: The AudioObjectPropertyListenerProc being removed.
    ///
    /// Parameter `inClientData`: A pointer to client data that is passed to the listener when it is called.
    ///
    /// Returns: An OSStatus indicating success or failure.
    #[cfg(feature = "objc2-core-audio")]
    #[deprecated = "no longer supported"]
    pub fn AudioHardwareServiceRemovePropertyListener(
        in_object_id: AudioObjectID,
        in_address: *const AudioObjectPropertyAddress,
        in_listener: AudioObjectPropertyListenerProc,
        in_client_data: *mut c_void,
    ) -> OSStatus;
}

/// represents an instance of an AudioFileComponent.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponent?language=objc)
#[cfg(feature = "AudioComponent")]
pub type AudioFileComponent = AudioComponentInstance;

/// a four char code for a property ID.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentpropertyid?language=objc)
pub type AudioFileComponentPropertyID = u32;

extern "C-unwind" {
    /// creates a new (or initialises an existing) audio file specified by the URL.
    ///
    /// creates a new (or initialises an existing) audio file specified by the URL.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inFileRef`: an CFURLRef fully specifying the path of the file to create/initialise
    ///
    /// Parameter `inFormat`: an AudioStreamBasicDescription describing the data format that will be
    /// added to the audio file.
    ///
    /// Parameter `inFlags`: relevant flags for creating/opening the file.
    /// if kAudioFileFlags_EraseFile is set, it will erase an existing file
    /// if not set, then the Create call will fail if the URL is an existing file
    ///
    /// Returns: returns noErr if successful.
    #[cfg(all(
        feature = "AudioComponent",
        feature = "objc2-core-audio-types",
        feature = "objc2-core-foundation"
    ))]
    pub fn AudioFileComponentCreateURL(
        in_component: AudioFileComponent,
        in_file_ref: &CFURL,
        in_format: NonNull<AudioStreamBasicDescription>,
        in_flags: u32,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Open an existing audio file.
    ///
    /// Open an existing audio file for reading or reading and writing.
    ///
    /// Parameter `inComponent`: an AudioFileComponent.
    ///
    /// Parameter `inFileRef`: the CFURLRef of an existing audio file.
    ///
    /// Parameter `inPermissions`: use the permission constants.
    ///
    /// Parameter `inFileDescriptor`: an open file descriptor.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(all(feature = "AudioComponent", feature = "objc2-core-foundation"))]
    pub fn AudioFileComponentOpenURL(
        in_component: AudioFileComponent,
        in_file_ref: &CFURL,
        in_permissions: i8,
        in_file_descriptor: c_int,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileOpenWithCallbacks
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inClientData`: a constant that will be passed to your callbacks.
    ///
    /// Parameter `inReadFunc`: a function that will be called when AudioFile needs to read data.
    ///
    /// Parameter `inWriteFunc`: a function that will be called when AudioFile needs to write data.
    ///
    /// Parameter `inGetSizeFunc`: a function that will be called when AudioFile needs to know the file size.
    ///
    /// Parameter `inSetSizeFunc`: a function that will be called when AudioFile needs to set the file size.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(all(feature = "AudioComponent", feature = "AudioFile"))]
    pub fn AudioFileComponentOpenWithCallbacks(
        in_component: AudioFileComponent,
        in_client_data: NonNull<c_void>,
        in_read_func: AudioFile_ReadProc,
        in_write_func: AudioFile_WriteProc,
        in_get_size_func: AudioFile_GetSizeProc,
        in_set_size_func: AudioFile_SetSizeProc,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileInitializeWithCallbacks
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inClientData`: a constant that will be passed to your callbacks.
    ///
    /// Parameter `inReadFunc`: a function that will be called when AudioFile needs to read data.
    ///
    /// Parameter `inWriteFunc`: a function that will be called when AudioFile needs to write data.
    ///
    /// Parameter `inGetSizeFunc`: a function that will be called when AudioFile needs to know the file size.
    ///
    /// Parameter `inSetSizeFunc`: a function that will be called when AudioFile needs to set the file size.
    ///
    /// Parameter `inFileType`: an AudioFileTypeID indicating the type of audio file to which to initialize the file.
    ///
    /// Parameter `inFormat`: an AudioStreamBasicDescription describing the data format that will be
    /// added to the audio file.
    ///
    /// Parameter `inFlags`: relevant flags for creating/opening the file. Currently zero.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(all(
        feature = "AudioComponent",
        feature = "AudioFile",
        feature = "objc2-core-audio-types"
    ))]
    pub fn AudioFileComponentInitializeWithCallbacks(
        in_component: AudioFileComponent,
        in_client_data: NonNull<c_void>,
        in_read_func: AudioFile_ReadProc,
        in_write_func: AudioFile_WriteProc,
        in_get_size_func: AudioFile_GetSizeProc,
        in_set_size_func: AudioFile_SetSizeProc,
        in_file_type: u32,
        in_format: NonNull<AudioStreamBasicDescription>,
        in_flags: u32,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileClose.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentCloseFile(in_component: AudioFileComponent) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileOptimize.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentOptimize(in_component: AudioFileComponent) -> OSStatus;
}

/// implements AudioFileReadBytes.
///
///
/// Returns kAudioFileEndOfFileError when read encounters end of file.
///
/// Parameter `inComponent`: an AudioFileComponent
///
/// Parameter `inUseCache`: true if it is desired to cache the data upon read, else false
///
/// Parameter `inStartingByte`: the byte offset of the audio data desired to be returned
///
/// Parameter `ioNumBytes`: on input, the number of bytes to read, on output, the number of
/// bytes actually read.
///
/// Parameter `outBuffer`: outBuffer should be a void * to user allocated memory large enough for the requested bytes.
///
/// Returns: returns noErr if successful.
#[cfg(feature = "AudioComponent")]
#[inline]
pub unsafe extern "C-unwind" fn AudioFileComponentReadBytes(
    in_component: AudioFileComponent,
    in_use_cache: bool,
    in_starting_byte: i64,
    io_num_bytes: NonNull<u32>,
    out_buffer: NonNull<c_void>,
) -> OSStatus {
    extern "C-unwind" {
        fn AudioFileComponentReadBytes(
            in_component: AudioFileComponent,
            in_use_cache: Boolean,
            in_starting_byte: i64,
            io_num_bytes: NonNull<u32>,
            out_buffer: NonNull<c_void>,
        ) -> OSStatus;
    }
    unsafe {
        AudioFileComponentReadBytes(
            in_component,
            in_use_cache as _,
            in_starting_byte,
            io_num_bytes,
            out_buffer,
        )
    }
}

/// implements AudioFileWriteBytes.
///
/// Parameter `inComponent`: an AudioFileComponent
///
/// Parameter `inUseCache`: true if it is desired to cache the data upon write, else false
///
/// Parameter `inStartingByte`: the byte offset where the audio data should be written
///
/// Parameter `ioNumBytes`: on input, the number of bytes to write, on output, the number of
/// bytes actually written.
///
/// Parameter `inBuffer`: inBuffer should be a void * containing the bytes to be written
///
/// Returns: returns noErr if successful.
#[cfg(feature = "AudioComponent")]
#[inline]
pub unsafe extern "C-unwind" fn AudioFileComponentWriteBytes(
    in_component: AudioFileComponent,
    in_use_cache: bool,
    in_starting_byte: i64,
    io_num_bytes: NonNull<u32>,
    in_buffer: NonNull<c_void>,
) -> OSStatus {
    extern "C-unwind" {
        fn AudioFileComponentWriteBytes(
            in_component: AudioFileComponent,
            in_use_cache: Boolean,
            in_starting_byte: i64,
            io_num_bytes: NonNull<u32>,
            in_buffer: NonNull<c_void>,
        ) -> OSStatus;
    }
    unsafe {
        AudioFileComponentWriteBytes(
            in_component,
            in_use_cache as _,
            in_starting_byte,
            io_num_bytes,
            in_buffer,
        )
    }
}

/// implements AudioFileReadPackets.
///
/// For all uncompressed formats, packets == frames.
/// ioNumPackets less than requested indicates end of file.
///
///
/// Parameter `inComponent`: an AudioFileComponent
///
/// Parameter `inUseCache`: true if it is desired to cache the data upon read, else false
///
/// Parameter `outNumBytes`: on output, the number of bytes actually returned
///
/// Parameter `outPacketDescriptions`: on output, an array of packet descriptions describing
/// the packets being returned. NULL may be passed for this
/// parameter. Nothing will be returned for linear pcm data.
///
/// Parameter `inStartingPacket`: the packet index of the first packet desired to be returned
///
/// Parameter `ioNumPackets`: on input, the number of packets to read, on output, the number of
/// packets actually read.
///
/// Parameter `outBuffer`: outBuffer should be a pointer to user allocated memory of size:
/// number of packets requested times file's maximum (or upper bound on)
/// packet size.
///
/// Returns: returns noErr if successful.
#[cfg(all(feature = "AudioComponent", feature = "objc2-core-audio-types"))]
#[inline]
pub unsafe extern "C-unwind" fn AudioFileComponentReadPackets(
    in_component: AudioFileComponent,
    in_use_cache: bool,
    out_num_bytes: NonNull<u32>,
    out_packet_descriptions: *mut AudioStreamPacketDescription,
    in_starting_packet: i64,
    io_num_packets: NonNull<u32>,
    out_buffer: NonNull<c_void>,
) -> OSStatus {
    extern "C-unwind" {
        fn AudioFileComponentReadPackets(
            in_component: AudioFileComponent,
            in_use_cache: Boolean,
            out_num_bytes: NonNull<u32>,
            out_packet_descriptions: *mut AudioStreamPacketDescription,
            in_starting_packet: i64,
            io_num_packets: NonNull<u32>,
            out_buffer: NonNull<c_void>,
        ) -> OSStatus;
    }
    unsafe {
        AudioFileComponentReadPackets(
            in_component,
            in_use_cache as _,
            out_num_bytes,
            out_packet_descriptions,
            in_starting_packet,
            io_num_packets,
            out_buffer,
        )
    }
}

/// implements AudioFileReadPacketData.
///
/// For all uncompressed formats, packets == frames.
/// If the byte size of the number packets requested is
/// less than the buffer size, ioNumBytes will be reduced.
/// If the buffer is too small for the number of packets
/// requested, ioNumPackets and ioNumBytes will be reduced
/// to the number of packets that can be accommodated and their byte size.
/// Returns kAudioFileEndOfFileError when read encounters end of file.
///
///
/// Parameter `inComponent`: an AudioFileComponent
///
/// Parameter `inUseCache`: true if it is desired to cache the data upon read, else false
///
/// Parameter `ioNumBytes`: on input the size of outBuffer in bytes.
/// on output, the number of bytes actually returned.
///
/// Parameter `outPacketDescriptions`: on output, an array of packet descriptions describing
/// the packets being returned. NULL may be passed for this
/// parameter. Nothing will be returned for linear pcm data.
///
/// Parameter `inStartingPacket`: the packet index of the first packet desired to be returned
///
/// Parameter `ioNumPackets`: on input, the number of packets to read, on output, the number of
/// packets actually read.
///
/// Parameter `outBuffer`: outBuffer should be a pointer to user allocated memory.
///
/// Returns: returns noErr if successful.
#[cfg(all(feature = "AudioComponent", feature = "objc2-core-audio-types"))]
#[inline]
pub unsafe extern "C-unwind" fn AudioFileComponentReadPacketData(
    in_component: AudioFileComponent,
    in_use_cache: bool,
    io_num_bytes: NonNull<u32>,
    out_packet_descriptions: *mut AudioStreamPacketDescription,
    in_starting_packet: i64,
    io_num_packets: NonNull<u32>,
    out_buffer: NonNull<c_void>,
) -> OSStatus {
    extern "C-unwind" {
        fn AudioFileComponentReadPacketData(
            in_component: AudioFileComponent,
            in_use_cache: Boolean,
            io_num_bytes: NonNull<u32>,
            out_packet_descriptions: *mut AudioStreamPacketDescription,
            in_starting_packet: i64,
            io_num_packets: NonNull<u32>,
            out_buffer: NonNull<c_void>,
        ) -> OSStatus;
    }
    unsafe {
        AudioFileComponentReadPacketData(
            in_component,
            in_use_cache as _,
            io_num_bytes,
            out_packet_descriptions,
            in_starting_packet,
            io_num_packets,
            out_buffer,
        )
    }
}

/// implements AudioFileWritePackets.
///
/// For all uncompressed formats, packets == frames.
///
/// Parameter `inComponent`: an AudioFileComponent
///
/// Parameter `inUseCache`: true if it is desired to cache the data upon write, else false
///
/// Parameter `inNumBytes`: the number of bytes being provided for write
///
/// Parameter `inPacketDescriptions`: an array of packet descriptions describing the packets being
/// provided. Not all formats require packet descriptions to be
/// provided. NULL may be passed if no descriptions are required.
///
/// Parameter `inStartingPacket`: the packet index of where the first packet provided should be placed.
///
/// Parameter `ioNumPackets`: on input, the number of packets to write, on output, the number of
/// packets actually written.
///
/// Parameter `inBuffer`: a void * to user allocated memory containing the packets to write.
///
/// Returns: returns noErr if successful.
#[cfg(all(feature = "AudioComponent", feature = "objc2-core-audio-types"))]
#[inline]
pub unsafe extern "C-unwind" fn AudioFileComponentWritePackets(
    in_component: AudioFileComponent,
    in_use_cache: bool,
    in_num_bytes: u32,
    in_packet_descriptions: *const AudioStreamPacketDescription,
    in_starting_packet: i64,
    io_num_packets: NonNull<u32>,
    in_buffer: NonNull<c_void>,
) -> OSStatus {
    extern "C-unwind" {
        fn AudioFileComponentWritePackets(
            in_component: AudioFileComponent,
            in_use_cache: Boolean,
            in_num_bytes: u32,
            in_packet_descriptions: *const AudioStreamPacketDescription,
            in_starting_packet: i64,
            io_num_packets: NonNull<u32>,
            in_buffer: NonNull<c_void>,
        ) -> OSStatus;
    }
    unsafe {
        AudioFileComponentWritePackets(
            in_component,
            in_use_cache as _,
            in_num_bytes,
            in_packet_descriptions,
            in_starting_packet,
            io_num_packets,
            in_buffer,
        )
    }
}

extern "C-unwind" {
    /// implements AudioFileGetPropertyInfo.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inPropertyID`: an AudioFileProperty constant.
    ///
    /// Parameter `outPropertySize`: the size in bytes of the current value of the property. In order to get the property value,
    /// you will need a buffer of this size.
    ///
    /// Parameter `outWritable`: will be set to 1 if writable, or 0 if read only.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentGetPropertyInfo(
        in_component: AudioFileComponent,
        in_property_id: AudioFileComponentPropertyID,
        out_property_size: *mut u32,
        out_writable: *mut u32,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileGetProperty.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inPropertyID`: an AudioFileProperty constant.
    ///
    /// Parameter `ioPropertyDataSize`: on input the size of the outPropertyData buffer. On output the number of bytes written to the buffer.
    ///
    /// Parameter `outPropertyData`: the buffer in which to write the property data.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentGetProperty(
        in_component: AudioFileComponent,
        in_property_id: AudioFileComponentPropertyID,
        io_property_data_size: NonNull<u32>,
        out_property_data: NonNull<c_void>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileSetProperty.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inPropertyID`: an AudioFileProperty constant.
    ///
    /// Parameter `inPropertyDataSize`: the size of the property data.
    ///
    /// Parameter `inPropertyData`: the buffer containing the property data.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentSetProperty(
        in_component: AudioFileComponent,
        in_property_id: AudioFileComponentPropertyID,
        in_property_data_size: u32,
        in_property_data: NonNull<c_void>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileCountUserData
    ///
    /// "User Data" refers to chunks in AIFF, CAF and WAVE files, or resources
    /// in Sound Designer II files, and possibly other things in other files.
    /// For simplicity, referred to below as "chunks".
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inUserDataID`: the four char code of the chunk.
    ///
    /// Parameter `outNumberItems`: on output, if successful, number of chunks of this type in the file.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentCountUserData(
        in_component: AudioFileComponent,
        in_user_data_id: u32,
        out_number_items: NonNull<u32>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileGetUserDataSize
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inUserDataID`: the four char code of the chunk.
    ///
    /// Parameter `inIndex`: an index specifying which chunk if there are more than one.
    ///
    /// Parameter `outUserDataSize`: on output, if successful, the size of the user data chunk.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentGetUserDataSize(
        in_component: AudioFileComponent,
        in_user_data_id: u32,
        in_index: u32,
        out_user_data_size: NonNull<u32>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileGetUserDataSize64
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inUserDataID`: the four char code of the chunk.
    ///
    /// Parameter `inIndex`: an index specifying which chunk if there are more than one.
    ///
    /// Parameter `outUserDataSize`: on output, if successful, the size of the user data chunk.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentGetUserDataSize64(
        in_component: AudioFileComponent,
        in_user_data_id: u32,
        in_index: u32,
        out_user_data_size: NonNull<u64>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileGetUserData.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inUserDataID`: the four char code of the chunk.
    ///
    /// Parameter `inIndex`: an index specifying which chunk if there are more than one.
    ///
    /// Parameter `ioUserDataSize`: the size of the buffer on input, size of bytes copied to buffer on output
    ///
    /// Parameter `outUserData`: a pointer to a buffer in which to copy the chunk data.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentGetUserData(
        in_component: AudioFileComponent,
        in_user_data_id: u32,
        in_index: u32,
        io_user_data_size: NonNull<u32>,
        out_user_data: NonNull<c_void>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileGetUserDataAtOffset.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inUserDataID`: the four char code of the chunk.
    ///
    /// Parameter `inIndex`: an index specifying which chunk if there are more than one.
    ///
    /// Parameter `inOffset`: offset from the first byte of the chunk to the first byte to get.
    ///
    /// Parameter `ioUserDataSize`: the size of the buffer on input, size of bytes copied to buffer on output
    ///
    /// Parameter `outUserData`: a pointer to a buffer in which to copy the chunk data.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentGetUserDataAtOffset(
        in_component: AudioFileComponent,
        in_user_data_id: u32,
        in_index: u32,
        in_offset: i64,
        io_user_data_size: NonNull<u32>,
        out_user_data: NonNull<c_void>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileSetUserData.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inUserDataID`: the four char code of the chunk.
    ///
    /// Parameter `inIndex`: an index specifying which chunk if there are more than one.
    ///
    /// Parameter `inUserDataSize`: on input the size of the data to copy, on output, size of bytes copied from the buffer
    ///
    /// Parameter `inUserData`: a pointer to a buffer from which to copy the chunk data
    /// (only the contents of the chunk, not including the chunk header).
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentSetUserData(
        in_component: AudioFileComponent,
        in_user_data_id: u32,
        in_index: u32,
        in_user_data_size: u32,
        in_user_data: NonNull<c_void>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileRemoveUserData.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inUserDataID`: the four char code of the chunk.
    ///
    /// Parameter `inIndex`: an index specifying which chunk if there are more than one.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentRemoveUserData(
        in_component: AudioFileComponent,
        in_user_data_id: u32,
        in_index: u32,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// used by the AudioFile API to determine if this component is appropriate for handling a file.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inExtension`: a CFString containing a file name extension.
    ///
    /// Parameter `outResult`: on output, is set to 1 if the extension is recognized by this component, 0 if not.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(all(feature = "AudioComponent", feature = "objc2-core-foundation"))]
    pub fn AudioFileComponentExtensionIsThisFormat(
        in_component: AudioFileComponent,
        in_extension: &CFString,
        out_result: NonNull<u32>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// used by the AudioFile API to determine if this component is appropriate for handling a file.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inDataByteSize`: the size of inData in bytes.
    ///
    /// Parameter `inData`: a pointer to a buffer of audio file data.
    ///
    /// Parameter `outResult`: on output, is set to 1 if the file is recognized by this component, 0 if not.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentFileDataIsThisFormat(
        in_component: AudioFileComponent,
        in_data_byte_size: u32,
        in_data: NonNull<c_void>,
        out_result: NonNull<u32>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// deprecated. use AudioFileComponentFileDataIsThisFormat instead.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inFileRefNum`: a refNum of a file.
    ///
    /// Parameter `outResult`: on output, is set to 1 if the file is recognized by this component, 0 if not.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    #[deprecated = "no longer supported"]
    pub fn AudioFileComponentFileIsThisFormat(
        in_component: AudioFileComponent,
        in_file_ref_num: i16,
        out_result: NonNull<u32>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// deprecated. use AudioFileComponentFileDataIsThisFormat instead.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inClientData`: a constant that will be passed to your callbacks.
    ///
    /// Parameter `inReadFunc`: a function that will be called when AudioFile needs to read data.
    ///
    /// Parameter `inWriteFunc`: a function that will be called when AudioFile needs to write data.
    ///
    /// Parameter `inGetSizeFunc`: a function that will be called when AudioFile needs to know the file size.
    ///
    /// Parameter `inSetSizeFunc`: a function that will be called when AudioFile needs to set the file size.
    ///
    /// Parameter `outResult`: on output, is set to 1 if the file data is recognized by this component, 0 if not.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(all(feature = "AudioComponent", feature = "AudioFile"))]
    #[deprecated = "no longer supported"]
    pub fn AudioFileComponentDataIsThisFormat(
        in_component: AudioFileComponent,
        in_client_data: *mut c_void,
        in_read_func: AudioFile_ReadProc,
        in_write_func: AudioFile_WriteProc,
        in_get_size_func: AudioFile_GetSizeProc,
        in_set_size_func: AudioFile_SetSizeProc,
        out_result: NonNull<u32>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileGetGlobalInfoSize.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inPropertyID`: an AudioFileGlobalInfo property constant.
    ///
    /// Parameter `inSpecifierSize`: The size of the specifier data.
    ///
    /// Parameter `inSpecifier`: A specifier is a buffer of data used as an input argument to some of the global info properties.
    ///
    /// Parameter `outPropertySize`: the size in bytes of the current value of the property. In order to get the property value,
    /// you will need a buffer of this size.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentGetGlobalInfoSize(
        in_component: AudioFileComponent,
        in_property_id: AudioFileComponentPropertyID,
        in_specifier_size: u32,
        in_specifier: *const c_void,
        out_property_size: NonNull<u32>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// implements AudioFileGetGlobalInfo.
    ///
    /// Parameter `inComponent`: an AudioFileComponent
    ///
    /// Parameter `inPropertyID`: an AudioFileGlobalInfo property constant.
    ///
    /// Parameter `inSpecifierSize`: The size of the specifier data.
    ///
    /// Parameter `inSpecifier`: A specifier is a buffer of data used as an input argument to some of the global info properties.
    ///
    /// Parameter `ioPropertyDataSize`: on input the size of the outPropertyData buffer. On output the number of bytes written to the buffer.
    ///
    /// Parameter `outPropertyData`: the buffer in which to write the property data.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "AudioComponent")]
    pub fn AudioFileComponentGetGlobalInfo(
        in_component: AudioFileComponent,
        in_property_id: AudioFileComponentPropertyID,
        in_specifier_size: u32,
        in_specifier: *const c_void,
        io_property_data_size: NonNull<u32>,
        out_property_data: NonNull<c_void>,
    ) -> OSStatus;
}

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilecomponent_canread?language=objc)
#[cfg(feature = "AudioFile")]
pub const kAudioFileComponent_CanRead: AudioFilePropertyID = 0x636e7264;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilecomponent_canwrite?language=objc)
#[cfg(feature = "AudioFile")]
pub const kAudioFileComponent_CanWrite: AudioFilePropertyID = 0x636e7772;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilecomponent_filetypename?language=objc)
#[cfg(feature = "AudioFile")]
pub const kAudioFileComponent_FileTypeName: AudioFilePropertyID = 0x66746e6d;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilecomponent_utisfortype?language=objc)
#[cfg(feature = "AudioFile")]
pub const kAudioFileComponent_UTIsForType: AudioFilePropertyID = 0x66757469;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilecomponent_mimetypesfortype?language=objc)
#[cfg(feature = "AudioFile")]
pub const kAudioFileComponent_MIMETypesForType: AudioFilePropertyID = 0x666d696d;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilecomponent_extensionsfortype?language=objc)
#[cfg(feature = "AudioFile")]
pub const kAudioFileComponent_ExtensionsForType: AudioFilePropertyID = 0x66657874;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilecomponent_availableformatids?language=objc)
#[cfg(feature = "AudioFile")]
pub const kAudioFileComponent_AvailableFormatIDs: AudioFilePropertyID = 0x666d6964;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilecomponent_availablestreamdescriptionsforformat?language=objc)
#[cfg(feature = "AudioFile")]
pub const kAudioFileComponent_AvailableStreamDescriptionsForFormat: AudioFilePropertyID =
    0x73646964;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilecomponent_fastdispatchtable?language=objc)
#[cfg(feature = "AudioFile")]
pub const kAudioFileComponent_FastDispatchTable: AudioFilePropertyID = 0x66646674;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilecomponent_hfstypecodesfortype?language=objc)
#[cfg(feature = "AudioFile")]
pub const kAudioFileComponent_HFSTypeCodesForType: AudioFilePropertyID = 0x66686673;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilecreateselect?language=objc)
pub const kAudioFileCreateSelect: c_uint = 0x0001;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofileopenselect?language=objc)
pub const kAudioFileOpenSelect: c_uint = 0x0002;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofileinitializeselect?language=objc)
pub const kAudioFileInitializeSelect: c_uint = 0x0003;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofileopenwithcallbacksselect?language=objc)
pub const kAudioFileOpenWithCallbacksSelect: c_uint = 0x0004;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofileinitializewithcallbacksselect?language=objc)
pub const kAudioFileInitializeWithCallbacksSelect: c_uint = 0x0005;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilecloseselect?language=objc)
pub const kAudioFileCloseSelect: c_uint = 0x0006;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofileoptimizeselect?language=objc)
pub const kAudioFileOptimizeSelect: c_uint = 0x0007;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilereadbytesselect?language=objc)
pub const kAudioFileReadBytesSelect: c_uint = 0x0008;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilewritebytesselect?language=objc)
pub const kAudioFileWriteBytesSelect: c_uint = 0x0009;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilereadpacketsselect?language=objc)
pub const kAudioFileReadPacketsSelect: c_uint = 0x000A;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilewritepacketsselect?language=objc)
pub const kAudioFileWritePacketsSelect: c_uint = 0x000B;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilegetpropertyinfoselect?language=objc)
pub const kAudioFileGetPropertyInfoSelect: c_uint = 0x000C;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilegetpropertyselect?language=objc)
pub const kAudioFileGetPropertySelect: c_uint = 0x000D;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilesetpropertyselect?language=objc)
pub const kAudioFileSetPropertySelect: c_uint = 0x000E;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofileextensionisthisformatselect?language=objc)
pub const kAudioFileExtensionIsThisFormatSelect: c_uint = 0x000F;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilefileisthisformatselect?language=objc)
pub const kAudioFileFileIsThisFormatSelect: c_uint = 0x0010;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofiledataisthisformatselect?language=objc)
pub const kAudioFileDataIsThisFormatSelect: c_uint = 0x0011;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilegetglobalinfosizeselect?language=objc)
pub const kAudioFileGetGlobalInfoSizeSelect: c_uint = 0x0012;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilegetglobalinfoselect?language=objc)
pub const kAudioFileGetGlobalInfoSelect: c_uint = 0x0013;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilecountuserdataselect?language=objc)
pub const kAudioFileCountUserDataSelect: c_uint = 0x0014;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilegetuserdatasizeselect?language=objc)
pub const kAudioFileGetUserDataSizeSelect: c_uint = 0x0015;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilegetuserdataselect?language=objc)
pub const kAudioFileGetUserDataSelect: c_uint = 0x0016;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilesetuserdataselect?language=objc)
pub const kAudioFileSetUserDataSelect: c_uint = 0x0017;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofileremoveuserdataselect?language=objc)
pub const kAudioFileRemoveUserDataSelect: c_uint = 0x0018;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilecreateurlselect?language=objc)
pub const kAudioFileCreateURLSelect: c_uint = 0x0019;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofileopenurlselect?language=objc)
pub const kAudioFileOpenURLSelect: c_uint = 0x001A;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilefiledataisthisformatselect?language=objc)
pub const kAudioFileFileDataIsThisFormatSelect: c_uint = 0x001B;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilereadpacketdataselect?language=objc)
pub const kAudioFileReadPacketDataSelect: c_uint = 0x001C;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilegetuserdatasize64select?language=objc)
pub const kAudioFileGetUserDataSize64Select: c_uint = 0x001D;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kaudiofilegetuserdataatoffsetselect?language=objc)
pub const kAudioFileGetUserDataAtOffsetSelect: c_uint = 0x001E;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/readbytesfdf?language=objc)
pub type ReadBytesFDF = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        Boolean,
        i64,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/writebytesfdf?language=objc)
pub type WriteBytesFDF = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        Boolean,
        i64,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/readpacketsfdf?language=objc)
#[cfg(feature = "objc2-core-audio-types")]
pub type ReadPacketsFDF = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        Boolean,
        NonNull<u32>,
        *mut AudioStreamPacketDescription,
        i64,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/readpacketdatafdf?language=objc)
#[cfg(feature = "objc2-core-audio-types")]
pub type ReadPacketDataFDF = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        Boolean,
        NonNull<u32>,
        *mut AudioStreamPacketDescription,
        i64,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/writepacketsfdf?language=objc)
#[cfg(feature = "objc2-core-audio-types")]
pub type WritePacketsFDF = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        Boolean,
        u32,
        *const AudioStreamPacketDescription,
        i64,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/getpropertyinfofdf?language=objc)
#[cfg(feature = "AudioFile")]
pub type GetPropertyInfoFDF = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        AudioFilePropertyID,
        *mut u32,
        *mut u32,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/getpropertyfdf?language=objc)
#[cfg(feature = "AudioFile")]
pub type GetPropertyFDF = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        AudioFilePropertyID,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/setpropertyfdf?language=objc)
#[cfg(feature = "AudioFile")]
pub type SetPropertyFDF = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        AudioFilePropertyID,
        u32,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/countuserdatafdf?language=objc)
pub type CountUserDataFDF =
    Option<unsafe extern "C-unwind" fn(NonNull<c_void>, u32, NonNull<u32>) -> OSStatus>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/getuserdatasizefdf?language=objc)
pub type GetUserDataSizeFDF =
    Option<unsafe extern "C-unwind" fn(NonNull<c_void>, u32, u32, NonNull<u32>) -> OSStatus>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/getuserdatafdf?language=objc)
pub type GetUserDataFDF = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        u32,
        u32,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/setuserdatafdf?language=objc)
pub type SetUserDataFDF = Option<
    unsafe extern "C-unwind" fn(NonNull<c_void>, u32, u32, u32, NonNull<c_void>) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilefdftable?language=objc)
#[cfg(all(feature = "AudioFile", feature = "objc2-core-audio-types"))]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct AudioFileFDFTable {
    pub mComponentStorage: NonNull<c_void>,
    pub mReadBytesFDF: ReadBytesFDF,
    pub mWriteBytesFDF: WriteBytesFDF,
    pub mReadPacketsFDF: ReadPacketsFDF,
    pub mWritePacketsFDF: WritePacketsFDF,
    pub mGetPropertyInfoFDF: GetPropertyInfoFDF,
    pub mGetPropertyFDF: GetPropertyFDF,
    pub mSetPropertyFDF: SetPropertyFDF,
    pub mCountUserDataFDF: CountUserDataFDF,
    pub mGetUserDataSizeFDF: GetUserDataSizeFDF,
    pub mGetUserDataFDF: GetUserDataFDF,
    pub mSetUserDataFDF: SetUserDataFDF,
}

#[cfg(all(feature = "AudioFile", feature = "objc2-core-audio-types"))]
unsafe impl Encode for AudioFileFDFTable {
    const ENCODING: Encoding = Encoding::Struct(
        "AudioFileFDFTable",
        &[
            <NonNull<c_void>>::ENCODING,
            <ReadBytesFDF>::ENCODING,
            <WriteBytesFDF>::ENCODING,
            <ReadPacketsFDF>::ENCODING,
            <WritePacketsFDF>::ENCODING,
            <GetPropertyInfoFDF>::ENCODING,
            <GetPropertyFDF>::ENCODING,
            <SetPropertyFDF>::ENCODING,
            <CountUserDataFDF>::ENCODING,
            <GetUserDataSizeFDF>::ENCODING,
            <GetUserDataFDF>::ENCODING,
            <SetUserDataFDF>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "AudioFile", feature = "objc2-core-audio-types"))]
unsafe impl RefEncode for AudioFileFDFTable {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilefdftableextended?language=objc)
#[cfg(all(feature = "AudioFile", feature = "objc2-core-audio-types"))]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct AudioFileFDFTableExtended {
    pub mComponentStorage: NonNull<c_void>,
    pub mReadBytesFDF: ReadBytesFDF,
    pub mWriteBytesFDF: WriteBytesFDF,
    pub mReadPacketsFDF: ReadPacketsFDF,
    pub mWritePacketsFDF: WritePacketsFDF,
    pub mGetPropertyInfoFDF: GetPropertyInfoFDF,
    pub mGetPropertyFDF: GetPropertyFDF,
    pub mSetPropertyFDF: SetPropertyFDF,
    pub mCountUserDataFDF: CountUserDataFDF,
    pub mGetUserDataSizeFDF: GetUserDataSizeFDF,
    pub mGetUserDataFDF: GetUserDataFDF,
    pub mSetUserDataFDF: SetUserDataFDF,
    pub mReadPacketDataFDF: ReadPacketDataFDF,
}

#[cfg(all(feature = "AudioFile", feature = "objc2-core-audio-types"))]
unsafe impl Encode for AudioFileFDFTableExtended {
    const ENCODING: Encoding = Encoding::Struct(
        "AudioFileFDFTableExtended",
        &[
            <NonNull<c_void>>::ENCODING,
            <ReadBytesFDF>::ENCODING,
            <WriteBytesFDF>::ENCODING,
            <ReadPacketsFDF>::ENCODING,
            <WritePacketsFDF>::ENCODING,
            <GetPropertyInfoFDF>::ENCODING,
            <GetPropertyFDF>::ENCODING,
            <SetPropertyFDF>::ENCODING,
            <CountUserDataFDF>::ENCODING,
            <GetUserDataSizeFDF>::ENCODING,
            <GetUserDataFDF>::ENCODING,
            <SetUserDataFDF>::ENCODING,
            <ReadPacketDataFDF>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "AudioFile", feature = "objc2-core-audio-types"))]
unsafe impl RefEncode for AudioFileFDFTableExtended {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentcreateurlproc?language=objc)
#[cfg(all(feature = "objc2-core-audio-types", feature = "objc2-core-foundation"))]
pub type AudioFileComponentCreateURLProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        NonNull<CFURL>,
        NonNull<AudioStreamBasicDescription>,
        u32,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentopenurlproc?language=objc)
#[cfg(feature = "objc2-core-foundation")]
pub type AudioFileComponentOpenURLProc =
    Option<unsafe extern "C-unwind" fn(NonNull<c_void>, NonNull<CFURL>, i8, c_int) -> OSStatus>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentopenwithcallbacksproc?language=objc)
#[cfg(feature = "AudioFile")]
pub type AudioFileComponentOpenWithCallbacksProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        NonNull<c_void>,
        AudioFile_ReadProc,
        AudioFile_WriteProc,
        AudioFile_GetSizeProc,
        AudioFile_SetSizeProc,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentinitializewithcallbacksproc?language=objc)
#[cfg(all(feature = "AudioFile", feature = "objc2-core-audio-types"))]
pub type AudioFileComponentInitializeWithCallbacksProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        NonNull<c_void>,
        AudioFile_ReadProc,
        AudioFile_WriteProc,
        AudioFile_GetSizeProc,
        AudioFile_SetSizeProc,
        u32,
        NonNull<AudioStreamBasicDescription>,
        u32,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentcloseproc?language=objc)
pub type AudioFileComponentCloseProc =
    Option<unsafe extern "C-unwind" fn(NonNull<c_void>) -> OSStatus>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentoptimizeproc?language=objc)
pub type AudioFileComponentOptimizeProc =
    Option<unsafe extern "C-unwind" fn(NonNull<c_void>) -> OSStatus>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentreadbytesproc?language=objc)
pub type AudioFileComponentReadBytesProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        Boolean,
        i64,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentwritebytesproc?language=objc)
pub type AudioFileComponentWriteBytesProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        Boolean,
        i64,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentreadpacketsproc?language=objc)
#[cfg(feature = "objc2-core-audio-types")]
pub type AudioFileComponentReadPacketsProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        Boolean,
        NonNull<u32>,
        *mut AudioStreamPacketDescription,
        i64,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentreadpacketdataproc?language=objc)
#[cfg(feature = "objc2-core-audio-types")]
pub type AudioFileComponentReadPacketDataProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        Boolean,
        NonNull<u32>,
        *mut AudioStreamPacketDescription,
        i64,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentwritepacketsproc?language=objc)
#[cfg(feature = "objc2-core-audio-types")]
pub type AudioFileComponentWritePacketsProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        Boolean,
        u32,
        *const AudioStreamPacketDescription,
        i64,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentgetpropertyinfoproc?language=objc)
pub type AudioFileComponentGetPropertyInfoProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        AudioFileComponentPropertyID,
        *mut u32,
        *mut u32,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentgetpropertyproc?language=objc)
pub type AudioFileComponentGetPropertyProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        AudioFileComponentPropertyID,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentsetpropertyproc?language=objc)
pub type AudioFileComponentSetPropertyProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        AudioFileComponentPropertyID,
        u32,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentcountuserdataproc?language=objc)
pub type AudioFileComponentCountUserDataProc =
    Option<unsafe extern "C-unwind" fn(NonNull<c_void>, u32, NonNull<u32>) -> OSStatus>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentgetuserdatasizeproc?language=objc)
pub type AudioFileComponentGetUserDataSizeProc =
    Option<unsafe extern "C-unwind" fn(NonNull<c_void>, u32, u32, NonNull<u32>) -> OSStatus>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentgetuserdatasize64proc?language=objc)
pub type AudioFileComponentGetUserDataSize64Proc =
    Option<unsafe extern "C-unwind" fn(NonNull<c_void>, u32, u32, NonNull<u64>) -> OSStatus>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentgetuserdataproc?language=objc)
pub type AudioFileComponentGetUserDataProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        u32,
        u32,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentgetuserdataatoffsetproc?language=objc)
pub type AudioFileComponentGetUserDataAtOffsetProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        u32,
        u32,
        i64,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentsetuserdataproc?language=objc)
pub type AudioFileComponentSetUserDataProc = Option<
    unsafe extern "C-unwind" fn(NonNull<c_void>, u32, u32, u32, NonNull<c_void>) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentremoveuserdataproc?language=objc)
pub type AudioFileComponentRemoveUserDataProc =
    Option<unsafe extern "C-unwind" fn(NonNull<c_void>, u32, u32) -> OSStatus>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentextensionisthisformatproc?language=objc)
#[cfg(feature = "objc2-core-foundation")]
pub type AudioFileComponentExtensionIsThisFormatProc = Option<
    unsafe extern "C-unwind" fn(NonNull<c_void>, NonNull<CFString>, NonNull<u32>) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentfiledataisthisformatproc?language=objc)
pub type AudioFileComponentFileDataIsThisFormatProc = Option<
    unsafe extern "C-unwind" fn(NonNull<c_void>, u32, NonNull<c_void>, NonNull<u32>) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentgetglobalinfosizeproc?language=objc)
pub type AudioFileComponentGetGlobalInfoSizeProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        AudioFileComponentPropertyID,
        u32,
        *const c_void,
        NonNull<u32>,
    ) -> OSStatus,
>;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/audiofilecomponentgetglobalinfoproc?language=objc)
pub type AudioFileComponentGetGlobalInfoProc = Option<
    unsafe extern "C-unwind" fn(
        NonNull<c_void>,
        AudioFileComponentPropertyID,
        u32,
        *const c_void,
        NonNull<u32>,
        NonNull<c_void>,
    ) -> OSStatus,
>;

/// The properties of a CoreAudioClock, accessible via CAClockGetProperty and
/// CAClockSetProperty.
///
///
/// Type: CAClockTimebase. Selects the internal time reference for the clock
/// (currently, host time, an audio device, or audio output unit).
///
/// Type: according to the internal timebase. If the timebase is
/// kCAClockTimebase_AudioDevice, the value is an AudioDeviceID. For
/// kCAClockTimebase_AudioOutputUnit, the value is an AudioUnit.
///
/// Type: CAClockSyncMode. Selects between internal synchronization and multiple
/// external synchronization modes such as MIDI Time Code and MIDI beat clock.
///
/// Type: according to the sync mode. For kCAClockSyncMode_MIDIClockTransport or
/// kCAClockSyncMode_MTCTransport, the value is a MIDIEndpointRef.
///
/// Type: CAClockSMPTEFormat. Specifies the SMPTE format (fps, drop or non-drop)
/// expected for received SMPTE messages, and used for transmitted SMPTE
/// messages and SMPTE time representations.
///
/// Type: CAClockSeconds. The SMPTE time, represented in seconds since
/// 00:00:00:00, corresponding to a timeline position of 0 seconds.
///
/// Type: array of MIDIEndpointRef. When non-empty, the clock will transmit
/// MIDI beat clock to the MIDI endpoints in this list. (As of macOS 10.6,
/// the endpoints may be virtual sources. Previously, they had to be destinations.)
///
/// Type: array of MIDIEndpointRef. When non-empty, the clock will transmit
/// MIDI Time Code to the MIDI endpoints in this list. (As of macOS 10.6,
/// the endpoints may be virtual sources. Previously, they had to be destinations.)
///
/// Type: CAClockSeconds. When the sync mode is MIDI Time Code, this controls
/// how long the reader will keep running after the last MTC message is received
/// before stopping (default: 1 sec). Should be at least ~4 SMPTE frames in
/// duration.
///
/// Type: array of CATempoMapEntry. Specifies a tempo map for the clock,
/// defining the relationship between timeline positions in seconds and musical
/// beats. Defaults to a constant tempo of 120 bpm.
///
/// Type: array of CAMeterTrackEntry. Specifies the positions of musical time
/// signature changes in the timeline. Used only for converting between beats
/// and CABarBeatTime's (a display representation of a beat time).
///
/// Type: CFStringRef. Sets a name for the clock. When a client sets the
/// property, the clock retains a reference to the string. When a client gets
/// the property, it receives a borrowed reference (i.e. the client must not
/// release the string).
///
/// Type: UInt32. Specifies whether MIDI Song Position Pointer messages are
/// sent to the clock's MIDI clock destinations (if any). Available starting
/// in macOS 10.6.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/caclockpropertyid?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CAClockPropertyID(pub u32);
impl CAClockPropertyID {
    #[doc(alias = "kCAClockProperty_InternalTimebase")]
    pub const InternalTimebase: Self = Self(0x696e7462);
    #[doc(alias = "kCAClockProperty_TimebaseSource")]
    pub const TimebaseSource: Self = Self(0x69746273);
    #[doc(alias = "kCAClockProperty_SyncMode")]
    pub const SyncMode: Self = Self(0x73796e6d);
    #[doc(alias = "kCAClockProperty_SyncSource")]
    pub const SyncSource: Self = Self(0x73796e73);
    #[doc(alias = "kCAClockProperty_SMPTEFormat")]
    pub const SMPTEFormat: Self = Self(0x736d7066);
    #[doc(alias = "kCAClockProperty_SMPTEOffset")]
    pub const SMPTEOffset: Self = Self(0x736d706f);
    #[doc(alias = "kCAClockProperty_MIDIClockDestinations")]
    pub const MIDIClockDestinations: Self = Self(0x6d626364);
    #[doc(alias = "kCAClockProperty_MTCDestinations")]
    pub const MTCDestinations: Self = Self(0x6d746364);
    #[doc(alias = "kCAClockProperty_MTCFreewheelTime")]
    pub const MTCFreewheelTime: Self = Self(0x6d746677);
    #[doc(alias = "kCAClockProperty_TempoMap")]
    pub const TempoMap: Self = Self(0x746d706f);
    #[doc(alias = "kCAClockProperty_MeterTrack")]
    pub const MeterTrack: Self = Self(0x6d657472);
    #[doc(alias = "kCAClockProperty_Name")]
    pub const Name: Self = Self(0x6e616d65);
    #[doc(alias = "kCAClockProperty_SendMIDISPP")]
    pub const SendMIDISPP: Self = Self(0x6d737070);
}

unsafe impl Encode for CAClockPropertyID {
    const ENCODING: Encoding = u32::ENCODING;
}

unsafe impl RefEncode for CAClockPropertyID {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// The available internal hardware time references for a clock.
///
///
/// The clock's reference time is host time (as returned
/// by
/// <code>
/// mach_absolute_time()
/// </code>
/// or
/// <code>
/// HostTime()
/// </code>
/// ).
///
/// The clock's reference time is derived from an audio
/// device.
///
/// The clock's reference time is derived from the audio
/// device addressed by an output Audio Unit.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/caclocktimebase?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CAClockTimebase(pub u32);
impl CAClockTimebase {
    #[doc(alias = "kCAClockTimebase_HostTime")]
    pub const HostTime: Self = Self(0x686f7374);
    #[doc(alias = "kCAClockTimebase_AudioDevice")]
    pub const AudioDevice: Self = Self(0x61756469);
    #[doc(alias = "kCAClockTimebase_AudioOutputUnit")]
    pub const AudioOutputUnit: Self = Self(0x61756f75);
}

unsafe impl Encode for CAClockTimebase {
    const ENCODING: Encoding = u32::ENCODING;
}

unsafe impl RefEncode for CAClockTimebase {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Specifies internal synchronization, or an external sync source type.
///
///
/// The clock is not driven by an external sync source.
///
/// The clock is driven by MIDI beat clock received from a CoreMIDI source
/// endpoint.
///
/// The clock is driven by MIDI Time Code received from a CoreMIDI source
/// endpoint.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/caclocksyncmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CAClockSyncMode(pub u32);
impl CAClockSyncMode {
    #[doc(alias = "kCAClockSyncMode_Internal")]
    pub const Internal: Self = Self(0x696e7472);
    #[doc(alias = "kCAClockSyncMode_MIDIClockTransport")]
    pub const MIDIClockTransport: Self = Self(0x6d636c6b);
    #[doc(alias = "kCAClockSyncMode_MTCTransport")]
    pub const MTCTransport: Self = Self(0x6d6d7463);
}

unsafe impl Encode for CAClockSyncMode {
    const ENCODING: Encoding = u32::ENCODING;
}

unsafe impl RefEncode for CAClockSyncMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// A SMPTE format, specifying the frames per second (fps) and
/// whether it is drop frame.
///
/// The possible values of a CAClockSMPTEFormat are found in
/// <CoreAudioTypes
/// /CoreAudioTypes.h>.
/// Values include kSMPTETimeType30, kSMPTETimeType30Drop, etc. Note that formats with more than 30
/// fps are not usable with MIDI Time Code.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/caclocksmpteformat?language=objc)
#[cfg(feature = "objc2-core-audio-types")]
pub type CAClockSMPTEFormat = SMPTETimeType;

/// The messages sent to a CAClockListenerProc to notify the client of
/// changes to the clock's state.
///
///
/// A new start time was set or received from an external sync source.
///
/// The clock's time has started moving.
///
/// The clock's time has stopped moving.
///
/// The client has called CAClockArm().
///
/// The client has called CAClockDisarm().
///
/// A clock property has been changed.
///
/// The clock is receiving SMPTE (MTC) messages in a SMPTE format that does not
/// match the clock's SMPTE format.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/caclockmessage?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CAClockMessage(pub u32);
impl CAClockMessage {
    #[doc(alias = "kCAClockMessage_StartTimeSet")]
    pub const StartTimeSet: Self = Self(0x7374696d);
    #[doc(alias = "kCAClockMessage_Started")]
    pub const Started: Self = Self(0x73747274);
    #[doc(alias = "kCAClockMessage_Stopped")]
    pub const Stopped: Self = Self(0x73746f70);
    #[doc(alias = "kCAClockMessage_Armed")]
    pub const Armed: Self = Self(0x61726d64);
    #[doc(alias = "kCAClockMessage_Disarmed")]
    pub const Disarmed: Self = Self(0x6461726d);
    #[doc(alias = "kCAClockMessage_PropertyChanged")]
    pub const PropertyChanged: Self = Self(0x70636867);
    #[doc(alias = "kCAClockMessage_WrongSMPTEFormat")]
    pub const WrongSMPTEFormat: Self = Self(0x3f736d70);
}

unsafe impl Encode for CAClockMessage {
    const ENCODING: Encoding = u32::ENCODING;
}

unsafe impl RefEncode for CAClockMessage {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// The various units in which a clock can represent and report time.
///
///
/// Absolute host time, as returned by
/// <code>
/// mach_absolute_time()
/// </code>
/// .
///
/// Absolute audio samples, as a Float64. Available when the internal timebase
/// is an audio device (or audio output unit). The units are in arbitrary sample
/// numbers, corresponding to the audio device's current time, and at the
/// device's current sample rate.
///
/// Musical beats, as a Float64. This is a position on the clock's timeline.
///
/// Seconds, as a Float64. This is a position on the clock's timeline.
///
/// Seconds, as a Float64. This is the same as kCAClockTimeFormat_Seconds,
/// except that the clock's SMPTE offset has been applied.
///
/// SMPTETime structure.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/caclocktimeformat?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CAClockTimeFormat(pub u32);
impl CAClockTimeFormat {
    #[doc(alias = "kCAClockTimeFormat_HostTime")]
    pub const HostTime: Self = Self(0x686f7374);
    #[doc(alias = "kCAClockTimeFormat_Samples")]
    pub const Samples: Self = Self(0x73616d70);
    #[doc(alias = "kCAClockTimeFormat_Beats")]
    pub const Beats: Self = Self(0x62656174);
    #[doc(alias = "kCAClockTimeFormat_Seconds")]
    pub const Seconds: Self = Self(0x73656373);
    #[doc(alias = "kCAClockTimeFormat_SMPTESeconds")]
    pub const SMPTESeconds: Self = Self(0x736d7073);
    #[doc(alias = "kCAClockTimeFormat_SMPTETime")]
    pub const SMPTETime: Self = Self(0x736d7074);
    #[doc(alias = "kCAClockTimeFormat_AbsoluteSeconds")]
    pub const AbsoluteSeconds: Self = Self(0x61736563);
}

unsafe impl Encode for CAClockTimeFormat {
    const ENCODING: Encoding = u32::ENCODING;
}

unsafe impl RefEncode for CAClockTimeFormat {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kcaclock_unknownpropertyerror?language=objc)
pub const kCAClock_UnknownPropertyError: OSStatus = -66816;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kcaclock_invalidpropertysizeerror?language=objc)
pub const kCAClock_InvalidPropertySizeError: OSStatus = -66815;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kcaclock_invalidtimeformaterror?language=objc)
pub const kCAClock_InvalidTimeFormatError: OSStatus = -66814;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kcaclock_invalidsyncmodeerror?language=objc)
pub const kCAClock_InvalidSyncModeError: OSStatus = -66813;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kcaclock_invalidsyncsourceerror?language=objc)
pub const kCAClock_InvalidSyncSourceError: OSStatus = -66812;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kcaclock_invalidtimebaseerror?language=objc)
pub const kCAClock_InvalidTimebaseError: OSStatus = -66811;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kcaclock_invalidtimebasesourceerror?language=objc)
pub const kCAClock_InvalidTimebaseSourceError: OSStatus = -66810;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kcaclock_invalidsmpteformaterror?language=objc)
pub const kCAClock_InvalidSMPTEFormatError: OSStatus = -66809;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kcaclock_invalidsmpteoffseterror?language=objc)
pub const kCAClock_InvalidSMPTEOffsetError: OSStatus = -66808;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kcaclock_invaliduniterror?language=objc)
pub const kCAClock_InvalidUnitError: OSStatus = -66807;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kcaclock_invalidplayrateerror?language=objc)
pub const kCAClock_InvalidPlayRateError: OSStatus = -66806;
/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/kcaclock_cannotsettimeerror?language=objc)
pub const kCAClock_CannotSetTimeError: OSStatus = -66805;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/opaquecaclock?language=objc)
#[repr(C)]
#[derive(Debug)]
pub struct OpaqueCAClock {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for OpaqueCAClock {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("OpaqueCAClock", &[]));
}

/// A reference to a Core Audio Clock object.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/caclockref?language=objc)
pub type CAClockRef = *mut OpaqueCAClock;

/// MIDI quarter notes (see MIDI specs)
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/caclockbeats?language=objc)
pub type CAClockBeats = f64;

/// A musical tempo in beats per minute.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/caclocktempo?language=objc)
pub type CAClockTempo = f64;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/caclocksamples?language=objc)
pub type CAClockSamples = f64;

/// [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/caclockseconds?language=objc)
pub type CAClockSeconds = f64;

/// A client-supplied function called when the clock's state changes.
///
///
/// Parameter `userData`: The value passed to CAClockAddListener when the callback function
/// was installed.
///
/// Parameter `message`: Signifies the kind of event which occurred.
///
/// Parameter `param`: This value is specific to the message (currently no messages have values).
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/caclocklistenerproc?language=objc)
pub type CAClockListenerProc =
    Option<unsafe extern "C-unwind" fn(NonNull<c_void>, CAClockMessage, NonNull<c_void>)>;

/// A tempo change event.
///
/// The clock's tempo map defines the correspondence between seconds and musical
/// beats, and is used in conversions between the two.
///
///
/// The beat time at which the tempo changes.
///
/// The new tempo as of that time.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/catempomapentry?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CATempoMapEntry {
    pub beats: CAClockBeats,
    pub tempoBPM: CAClockTempo,
}

unsafe impl Encode for CATempoMapEntry {
    const ENCODING: Encoding = Encoding::Struct(
        "CATempoMapEntry",
        &[<CAClockBeats>::ENCODING, <CAClockTempo>::ENCODING],
    );
}

unsafe impl RefEncode for CATempoMapEntry {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// A time signature change event.
///
/// The meter track is used for converting between beats as floating-point
/// numbers (CAClockBeats) and their display representations (CABarBeatTime).
///
///
/// The beat time at which the time signature (meter) changes.
///
/// The numerator of the new time signature.
///
/// The denominator of the new time signature (1, 2, 4, 8, etc.).
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/audiotoolbox/cametertrackentry?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CAMeterTrackEntry {
    pub beats: CAClockBeats,
    pub meterNumer: u16,
    pub meterDenom: u16,
}

unsafe impl Encode for CAMeterTrackEntry {
    const ENCODING: Encoding = Encoding::Struct(
        "CAMeterTrackEntry",
        &[<CAClockBeats>::ENCODING, <u16>::ENCODING, <u16>::ENCODING],
    );
}

unsafe impl RefEncode for CAMeterTrackEntry {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    /// Create a new clock object.
    ///
    ///
    /// Parameter `inReservedFlags`: Must be 0.
    ///
    ///
    /// Parameter `outCAClock`: Must be non-null. On successful return, the new clock object.
    ///
    ///
    /// Returns: An OSStatus error code.
    pub fn CAClockNew(in_reserved_flags: u32, out_ca_clock: NonNull<CAClockRef>) -> OSStatus;
}

extern "C-unwind" {
    /// Dispose a clock object.
    ///
    ///
    /// Parameter `inCAClock`: The clock object to be disposed.
    ///
    ///
    /// Returns: An OSStatus error code.
    pub fn CAClockDispose(in_ca_clock: CAClockRef) -> OSStatus;
}

extern "C-unwind" {
    /// Gets information about a clock's property.
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Parameter `inPropertyID`: The property being queried.
    ///
    ///
    /// Parameter `outSize`: If non-null, on exit, this is set to the size of the
    /// property's value.
    ///
    ///
    /// Parameter `outWritable`: If non-null, on exit, this indicates whether the
    /// property value is settable.
    ///
    ///
    /// Returns: An OSStatus error code.
    pub fn CAClockGetPropertyInfo(
        in_ca_clock: CAClockRef,
        in_property_id: CAClockPropertyID,
        out_size: *mut u32,
        out_writable: *mut Boolean,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Gets the current value of a clock's property.
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Parameter `inPropertyID`: The property being fetched.
    ///
    ///
    /// Parameter `ioPropertyDataSize`: On entry, the size (in bytes) of the memory pointed to
    /// by outPropertyData. On exit, the actual size of the
    /// property data returned.
    ///
    ///
    /// Parameter `outPropertyData`: The value of the property is copied to the memory
    /// this points to.
    ///
    ///
    /// Returns: An OSStatus error code.
    pub fn CAClockGetProperty(
        in_ca_clock: CAClockRef,
        in_property_id: CAClockPropertyID,
        io_property_data_size: NonNull<u32>,
        out_property_data: NonNull<c_void>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Changes the value of a clock's property.
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Parameter `inPropertyID`: The property being set.
    ///
    ///
    /// Parameter `inPropertyDataSize`: The size of the property data, in bytes.
    ///
    ///
    /// Parameter `inPropertyData`: Points to the property's new value.
    ///
    ///
    /// Returns: An OSStatus error code.
    pub fn CAClockSetProperty(
        in_ca_clock: CAClockRef,
        in_property_id: CAClockPropertyID,
        in_property_data_size: u32,
        in_property_data: NonNull<c_void>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Adds a callback function to receive notifications of changes to the clock's
    /// state.
    ///
    /// Note: The CAClockListenerProc may be called on a realtime thread internal to
    /// the clock object.
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Parameter `inListenerProc`: The callback function.
    ///
    ///
    /// Parameter `inUserData`: This value is passed to the callback function, in the userData
    /// parameter.
    ///
    ///
    /// Returns: An OSStatus error code.
    pub fn CAClockAddListener(
        in_ca_clock: CAClockRef,
        in_listener_proc: CAClockListenerProc,
        in_user_data: NonNull<c_void>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Removes a listener callback function.
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Parameter `inListenerProc`: The callback function.
    ///
    ///
    /// Parameter `inUserData`: The same value as was passed for inUserData when this
    /// function was registered with CAClockAddListener. (This
    /// allows a single callback function to be registered more
    /// than once, with different userData arguments.)
    ///
    ///
    /// Returns: An OSStatus error code.
    pub fn CAClockRemoveListener(
        in_ca_clock: CAClockRef,
        in_listener_proc: CAClockListenerProc,
        in_user_data: NonNull<c_void>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Begin advancing the clock on its media timeline.
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Returns: An OSStatus error code.
    pub fn CAClockStart(in_ca_clock: CAClockRef) -> OSStatus;
}

extern "C-unwind" {
    /// Stop advancing the clock on its media timeline.
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Returns: An OSStatus error code.
    pub fn CAClockStop(in_ca_clock: CAClockRef) -> OSStatus;
}

extern "C-unwind" {
    /// Allow received sync messages to start the clock.
    ///
    /// If a clock is following and being controlled by an external transport
    /// (e.g. MIDI Time Code), call this to indicate that the client is ready to
    /// start its transport in response to the external transport having started.
    ///
    /// The external time source will set the clock's start position and start
    /// the clock.
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Returns: An OSStatus error code.
    pub fn CAClockArm(in_ca_clock: CAClockRef) -> OSStatus;
}

extern "C-unwind" {
    /// Disallow received sync messages from starting the clock.
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Returns: An OSStatus error code.
    pub fn CAClockDisarm(in_ca_clock: CAClockRef) -> OSStatus;
}

extern "C-unwind" {
    /// Alter the clock's playback rate.
    ///
    /// Adjusts the ratio between the timebase and media time; e.g. at 0.5, the
    /// media time will move half as quickly as timebase time.
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Parameter `inPlayRate`: The clock's desired play rate.
    ///
    ///
    /// Returns: An OSStatus error code.
    pub fn CAClockSetPlayRate(in_ca_clock: CAClockRef, in_play_rate: f64) -> OSStatus;
}

extern "C-unwind" {
    /// Obtain the clock's playback rate.
    ///
    /// Returns the clock's current play rate. If the clock is internally synced,
    /// this will be the last rate set by CAClockSetPlayRate. If the clock is
    /// externally synced, it will be the rate of the external sync source, where
    /// 1.0 means that it is running at exactly the same rate as the clock's
    /// timebase. (2.0 means twice as fast).
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Parameter `outPlayRate`: On exit, the clock's playback rate.
    ///
    ///
    /// Returns: An OSStatus error code.
    pub fn CAClockGetPlayRate(in_ca_clock: CAClockRef, out_play_rate: NonNull<f64>) -> OSStatus;
}

extern "C-unwind" {
    /// Converts seconds to a SMPTE time representation.
    ///
    /// Converts seconds on the media timeline to a SMPTE time. The clock's current
    /// SMPTE format and offset must be set appropriately.
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Parameter `inSeconds`: The number of seconds to be converted (e.g. 3600 = 1 hour).
    ///
    ///
    /// Parameter `inSubframeDivisor`: The number of subframes per frame desired in outSMPTETime.
    ///
    ///
    /// Parameter `outSMPTETime`: On exit, the SMPTE time corresponding to inSeconds.
    ///
    ///
    /// Returns: An OSStatus error code.
    #[cfg(feature = "objc2-core-audio-types")]
    pub fn CAClockSecondsToSMPTETime(
        in_ca_clock: CAClockRef,
        in_seconds: CAClockSeconds,
        in_subframe_divisor: u16,
        out_smpte_time: NonNull<SMPTETime>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Converts a SMPTE time representation to seconds.
    ///
    /// Converts SMPTE time to seconds on the media timeline. The clock's current
    /// SMPTE format and offset must be set appropriately.
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Parameter `inSMPTETime`: The SMPTE time to be converted to seconds.
    ///
    ///
    /// Parameter `outSeconds`: On exit, the number of seconds corresponding to inSMPTETime.
    ///
    ///
    /// Returns: An OSStatus error code.
    #[cfg(feature = "objc2-core-audio-types")]
    pub fn CAClockSMPTETimeToSeconds(
        in_ca_clock: CAClockRef,
        in_smpte_time: NonNull<SMPTETime>,
        out_seconds: NonNull<CAClockSeconds>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Converts a number of beats to a CABarBeatTime structure.
    ///
    /// Converts a beat position on the media timeline to a CABarBeatTime, using the
    /// clock's meter track. Examples using 4/4 time and a subbeat divisor of 480:
    ///
    /// inBeats | outBarBeatTime: bars . beats . units
    /// --------|-------------------------------------
    /// 0        | 1.1.0
    /// 1        | 1.2.0
    /// 4        | 2.1.0
    /// 4.5        | 2.1.240
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Parameter `inBeats`: The absolute beat count to be converted.
    ///
    ///
    /// Parameter `inSubbeatDivisor`: The number of units per beat.
    ///
    ///
    /// Parameter `outBarBeatTime`: On exit, the bar/beat/subbeat time corresponding to inBeats.
    ///
    ///
    /// Returns: An OSStatus error code.
    #[cfg(feature = "MusicPlayer")]
    pub fn CAClockBeatsToBarBeatTime(
        in_ca_clock: CAClockRef,
        in_beats: CAClockBeats,
        in_subbeat_divisor: u16,
        out_bar_beat_time: NonNull<CABarBeatTime>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Converts a CABarBeatTime structure to a number of beats.
    ///
    /// Converts a CABarBeatTime structure (bars/beats/subbeats) to a beat
    /// position, using the clock's meter track.
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Parameter `inBarBeatTime`: The bar/beat/subunit time to be converted to beats.
    ///
    ///
    /// Parameter `outBeats`: On exit, the number of absolute beats corresponding to inBarBeatTime.
    ///
    ///
    /// Returns: An OSStatus error code.
    #[cfg(feature = "MusicPlayer")]
    pub fn CAClockBarBeatTimeToBeats(
        in_ca_clock: CAClockRef,
        in_bar_beat_time: NonNull<CABarBeatTime>,
        out_beats: NonNull<CAClockBeats>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Provides MIDI messages to a clock without using CoreMIDI
    ///
    /// In some situations, a client may wish to drive a clock using MIDI Time Code or
    /// beat clock obtained from a source other than Core MIDI. To do so,
    /// construct MIDIPacketLists containing the timecode or beat clock messages,
    /// and pass them to this function.
    ///
    ///
    /// Parameter `inCAClock`: The clock object.
    ///
    ///
    /// Parameter `inMIDIPacketList`: The MIDI events to be parsed.
    ///
    ///
    /// Returns: An OSStatus error code.
    #[cfg(feature = "objc2-core-midi")]
    pub fn CAClockParseMIDI(
        in_ca_clock: CAClockRef,
        in_midi_packet_list: NonNull<MIDIPacketList>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// This will return the name of a sound bank from a DLS or SF2 bank.
    /// The name should be released by the caller.
    ///
    ///
    /// Parameter `inURL`: The URL for the sound bank.
    ///
    /// Parameter `outName`: A pointer to a CFStringRef to be created and returned by the function.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CopyNameFromSoundBank(in_url: &CFURL, out_name: NonNull<*const CFString>) -> OSStatus;
}

extern "C-unwind" {
    /// This will return a CFArray of CFDictionaries, one per instrument found in the DLS or SF2 bank.
    /// Each dictionary will contain four items accessed via CFStringRef versions of the keys kInstrumentInfoKey_MSB,
    /// kInstrumentInfoKey_LSB, kInstrumentInfoKey_Program, and kInstrumentInfoKey_Name.
    /// MSB: An NSNumberRef for the most-significant byte of the bank number.  GM melodic banks will return 120 (0x78).
    /// GM percussion banks will return 121 (0x79).  Custom banks will return their literal value.
    /// LSB: An NSNumberRef for the least-significant byte of the bank number.  All GM banks will return
    /// the bank variation number (0-127).
    /// Program Number: An NSNumberRef for the program number (0-127) of an instrument within a particular bank.
    /// Name: A CFStringRef containing the name of the instrument.
    ///
    /// Using these MSB, LSB, and Program values will guarantee that the correct instrument is loaded by the DLS synth
    /// or Sampler Audio Unit.
    /// The CFArray should be released by the caller.
    ///
    ///
    /// Parameter `inURL`: The URL for the sound bank.
    ///
    /// Parameter `outInstrumentInfo`: A pointer to a CFArrayRef to be created and returned by the function.
    ///
    /// Returns: returns noErr if successful.
    #[cfg(feature = "objc2-core-foundation")]
    pub fn CopyInstrumentInfoFromSoundBank(
        in_url: &CFURL,
        out_instrument_info: NonNull<*const CFArray>,
    ) -> OSStatus;
}
