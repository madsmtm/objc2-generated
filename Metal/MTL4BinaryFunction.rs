//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Represents reflection information for a binary function.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metal/mtl4binaryfunctionreflection?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTL4BinaryFunctionReflection;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for MTL4BinaryFunctionReflection {}
);

impl MTL4BinaryFunctionReflection {
    extern_methods!();
}

/// Methods declared on superclass `NSObject`.
impl MTL4BinaryFunctionReflection {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_protocol!(
    /// Represents a binary function.
    ///
    /// A binary function is a shader that you precompile from Metal IR to GPU machine code.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metal/mtl4binaryfunction?language=objc)
    pub unsafe trait MTL4BinaryFunction: NSObjectProtocol {
        /// Obtains the optional name of this binary function.
        #[unsafe(method(name))]
        #[unsafe(method_family = none)]
        unsafe fn name(&self) -> Option<Retained<NSString>>;

        /// Obtains reflection information for this binary function.
        #[unsafe(method(reflection))]
        #[unsafe(method_family = none)]
        unsafe fn reflection(&self) -> Option<Retained<MTL4BinaryFunctionReflection>>;

        #[cfg(feature = "MTLLibrary")]
        /// Describes the type of this binary function.
        #[unsafe(method(functionType))]
        #[unsafe(method_family = none)]
        unsafe fn functionType(&self) -> MTLFunctionType;
    }
);
