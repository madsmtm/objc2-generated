//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Groups together functions to link.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metal/mtl4linkedfunctions?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTL4LinkedFunctions;
);

extern_conformance!(
    unsafe impl NSCopying for MTL4LinkedFunctions {}
);

unsafe impl CopyingHelper for MTL4LinkedFunctions {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for MTL4LinkedFunctions {}
);

impl MTL4LinkedFunctions {
    extern_methods!(
        #[cfg(feature = "MTL4FunctionDescriptor")]
        /// Provides an array of functions to link at the Metal IR level.
        #[unsafe(method(functionDescriptors))]
        #[unsafe(method_family = none)]
        pub unsafe fn functionDescriptors(
            &self,
        ) -> Option<Retained<NSArray<MTL4FunctionDescriptor>>>;

        #[cfg(feature = "MTL4FunctionDescriptor")]
        /// Setter for [`functionDescriptors`][Self::functionDescriptors].
        #[unsafe(method(setFunctionDescriptors:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFunctionDescriptors(
            &self,
            function_descriptors: Option<&NSArray<MTL4FunctionDescriptor>>,
        );

        #[cfg(feature = "MTL4BinaryFunction")]
        /// Provides an array of binary functions to link.
        #[unsafe(method(binaryFunctions))]
        #[unsafe(method_family = none)]
        pub unsafe fn binaryFunctions(
            &self,
        ) -> Option<Retained<NSArray<ProtocolObject<dyn MTL4BinaryFunction>>>>;

        #[cfg(feature = "MTL4BinaryFunction")]
        /// Setter for [`binaryFunctions`][Self::binaryFunctions].
        #[unsafe(method(setBinaryFunctions:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBinaryFunctions(
            &self,
            binary_functions: Option<&NSArray<ProtocolObject<dyn MTL4BinaryFunction>>>,
        );

        #[cfg(feature = "MTL4FunctionDescriptor")]
        /// Provides an array of private functions to link at the Metal IR level.
        ///
        /// You specify private functions to link separately from ``functionDescriptors`` because pipelines don't export private
        /// functions as ``MTLFunctionHandle`` instances.
        /// - Note: You can link private functions even when your ``MTLDevice`` doesn't support function pointers.
        #[unsafe(method(privateFunctionDescriptors))]
        #[unsafe(method_family = none)]
        pub unsafe fn privateFunctionDescriptors(
            &self,
        ) -> Option<Retained<NSArray<MTL4FunctionDescriptor>>>;

        #[cfg(feature = "MTL4FunctionDescriptor")]
        /// Setter for [`privateFunctionDescriptors`][Self::privateFunctionDescriptors].
        #[unsafe(method(setPrivateFunctionDescriptors:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPrivateFunctionDescriptors(
            &self,
            private_function_descriptors: Option<&NSArray<MTL4FunctionDescriptor>>,
        );

        #[cfg(feature = "MTL4FunctionDescriptor")]
        /// Assigns groups of functions to match call-site attributes in shader code.
        ///
        /// Function groups help the compiler reduce the number of candidate functions it needs to evaluate for shader function
        /// calls, potentially increasing runtime performance.
        #[unsafe(method(groups))]
        #[unsafe(method_family = none)]
        pub unsafe fn groups(
            &self,
        ) -> Option<Retained<NSDictionary<NSString, NSArray<MTL4FunctionDescriptor>>>>;

        #[cfg(feature = "MTL4FunctionDescriptor")]
        /// Setter for [`groups`][Self::groups].
        #[unsafe(method(setGroups:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setGroups(
            &self,
            groups: Option<&NSDictionary<NSString, NSArray<MTL4FunctionDescriptor>>>,
        );
    );
}

/// Methods declared on superclass `NSObject`.
impl MTL4LinkedFunctions {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
