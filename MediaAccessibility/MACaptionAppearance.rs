//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;
#[cfg(feature = "objc2-core-text")]
use objc2_core_text::*;

use crate::*;

extern "C" {
    /// CFNotification sent when any user-defined captioning settings are changed.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mediaaccessibility/kmacaptionappearancesettingschangednotification?language=objc)
    pub static kMACaptionAppearanceSettingsChangedNotification: &'static CFString;
}

/// MACaptionAppearanceDomain is used to specify which domain of preferences to access.
///
///
/// The user-defined preferences. This domain should be passed to retrieve settings that should be used to render captions.
///
/// The system defaults which will not change during a user session. These settings should be used for comparison, not to render captions. For example, when rendering a glyph some caption render engines need to get the user-defined font and the system-defined font to determeine the final pixel size to render a glyph. Most render engines will never need to use this domain.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/mediaaccessibility/macaptionappearancedomain?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MACaptionAppearanceDomain(pub CFIndex);
impl MACaptionAppearanceDomain {
    #[doc(alias = "kMACaptionAppearanceDomainDefault")]
    pub const Default: Self = Self(0);
    #[doc(alias = "kMACaptionAppearanceDomainUser")]
    pub const User: Self = Self(1);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for MACaptionAppearanceDomain {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for MACaptionAppearanceDomain {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// MACaptionAppearanceDisplayType is used to specify the the type of captions that should be displayed
///
///
/// Only forced captions for translation should be displayed.
///
/// If the language of the audio track differs from the system locale then captions matching the system locale should be displayed (if available).
///
/// The best available captioning track should always be displayed, whether it be CC, SDH, or subtitles.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/mediaaccessibility/macaptionappearancedisplaytype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MACaptionAppearanceDisplayType(pub CFIndex);
impl MACaptionAppearanceDisplayType {
    #[doc(alias = "kMACaptionAppearanceDisplayTypeForcedOnly")]
    pub const ForcedOnly: Self = Self(0);
    #[doc(alias = "kMACaptionAppearanceDisplayTypeAutomatic")]
    pub const Automatic: Self = Self(1);
    #[doc(alias = "kMACaptionAppearanceDisplayTypeAlwaysOn")]
    pub const AlwaysOn: Self = Self(2);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for MACaptionAppearanceDisplayType {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for MACaptionAppearanceDisplayType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// MACaptionAppearanceBehavior is used to determine how a preference value should be used.
///
///
/// The value should override any content, application, or otherwise-defined values.
///
/// Content, application, or otherwise-defined values should override the returned value. If no other value is defined, then the return value should be used.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/mediaaccessibility/macaptionappearancebehavior?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MACaptionAppearanceBehavior(pub CFIndex);
impl MACaptionAppearanceBehavior {
    #[doc(alias = "kMACaptionAppearanceBehaviorUseValue")]
    pub const UseValue: Self = Self(0);
    #[doc(alias = "kMACaptionAppearanceBehaviorUseContentIfAvailable")]
    pub const UseContentIfAvailable: Self = Self(1);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for MACaptionAppearanceBehavior {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for MACaptionAppearanceBehavior {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// MACaptionAppearanceFontStyle is used to specify a font style
///
///
/// Default font style.
///
/// Font style for fonts similar to Courier.
///
/// Font style for fonts similar to Times New Roman.
///
/// Font style for fonts similar to Helvetica Monospaced.
///
/// Font style for fonts similar to Arial.
///
/// Font style for fonts similar to Dom and Impress.
///
/// Font style for fonts similar to Coronet and Marigold.
///
/// Font style for fonts similar to Engravers Gothic.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/mediaaccessibility/macaptionappearancefontstyle?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MACaptionAppearanceFontStyle(pub CFIndex);
impl MACaptionAppearanceFontStyle {
    #[doc(alias = "kMACaptionAppearanceFontStyleDefault")]
    pub const Default: Self = Self(0);
    #[doc(alias = "kMACaptionAppearanceFontStyleMonospacedWithSerif")]
    pub const MonospacedWithSerif: Self = Self(1);
    #[doc(alias = "kMACaptionAppearanceFontStyleProportionalWithSerif")]
    pub const ProportionalWithSerif: Self = Self(2);
    #[doc(alias = "kMACaptionAppearanceFontStyleMonospacedWithoutSerif")]
    pub const MonospacedWithoutSerif: Self = Self(3);
    #[doc(alias = "kMACaptionAppearanceFontStyleProportionalWithoutSerif")]
    pub const ProportionalWithoutSerif: Self = Self(4);
    #[doc(alias = "kMACaptionAppearanceFontStyleCasual")]
    pub const Casual: Self = Self(5);
    #[doc(alias = "kMACaptionAppearanceFontStyleCursive")]
    pub const Cursive: Self = Self(6);
    #[doc(alias = "kMACaptionAppearanceFontStyleSmallCapital")]
    pub const SmallCapital: Self = Self(7);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for MACaptionAppearanceFontStyle {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for MACaptionAppearanceFontStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// MACaptionAppearanceTextEdgeStyle is used to specify a text-edge style.
///
///
/// Undefined edge style.
///
/// No edge style.
///
/// Raised edge style.
///
/// Depressed edge style.
///
/// Uniform edge style.
///
/// Shadow edge style.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/mediaaccessibility/macaptionappearancetextedgestyle?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MACaptionAppearanceTextEdgeStyle(pub CFIndex);
impl MACaptionAppearanceTextEdgeStyle {
    #[doc(alias = "kMACaptionAppearanceTextEdgeStyleUndefined")]
    pub const Undefined: Self = Self(0);
    #[doc(alias = "kMACaptionAppearanceTextEdgeStyleNone")]
    pub const None: Self = Self(1);
    #[doc(alias = "kMACaptionAppearanceTextEdgeStyleRaised")]
    pub const Raised: Self = Self(2);
    #[doc(alias = "kMACaptionAppearanceTextEdgeStyleDepressed")]
    pub const Depressed: Self = Self(3);
    #[doc(alias = "kMACaptionAppearanceTextEdgeStyleUniform")]
    pub const Uniform: Self = Self(4);
    #[doc(alias = "kMACaptionAppearanceTextEdgeStyleDropShadow")]
    pub const DropShadow: Self = Self(5);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for MACaptionAppearanceTextEdgeStyle {
    const ENCODING: Encoding = CFIndex::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for MACaptionAppearanceTextEdgeStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// A media characteristic that indicates that a track or media selection option includes legible content in the language of its specified locale that:
    /// - describes music and
    /// - describes sound other than spoken dialog, such as sound effects and significant silences, occurring in program audio.
    ///
    /// Legible tracks provided for accessibility purposes are typically tagged both with this characteristic as well as with MAMediaCharacteristicTranscribesSpokenDialogForAccessibility.
    /// A legible track provided for accessibility purposes that's associated with an audio track without music and without sound other than spoken dialog -- lacking even significant silences -- can be tagged with this characteristic, because it trivially meets these requirements.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mediaaccessibility/mamediacharacteristicdescribesmusicandsoundforaccessibility?language=objc)
    pub static MAMediaCharacteristicDescribesMusicAndSoundForAccessibility: &'static CFString;
}

extern "C" {
    /// A media characteristic that indicates that a track or media selection option includes legible content in the language of its specified locale that:
    /// - transcribes spoken dialog and
    /// - identifies speakers whenever other visual cues are insufficient for a viewer to determine who is speaking.
    ///
    /// Legible tracks provided for accessibility purposes are typically tagged both with this characteristic as well as with MAMediaCharacteristicDescribesMusicAndSoundForAccessibility.
    /// A legible track provided for accessibility purposes that's associated with an audio track that has no spoken dialog can be tagged with this characteristic, because it trivially meets these requirements.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mediaaccessibility/mamediacharacteristictranscribesspokendialogforaccessibility?language=objc)
    pub static MAMediaCharacteristicTranscribesSpokenDialogForAccessibility: &'static CFString;
}

extern "C-unwind" {
    /// Called by clients to inform accessibility products that captions have been displayed onscreen.
    ///
    /// Parameter `strings`: An array of CFStringRef or CFAttributedStringRef objects that represent the text that is being displayed. An empty array is used to indicate that no captions are being displayed.
    pub fn MACaptionAppearanceDidDisplayCaptions(strings: &CFArray);
}

extern "C-unwind" {
    /// Adds a user's selected caption language to stack of languages.
    ///
    /// Parameter `domain`: Preference domain, see
    ///
    /// ```text
    ///  MACaptionAppearanceDomain
    /// ```
    ///
    ///
    /// Parameter `language`: Canonical language identifier (see
    ///
    /// ```text
    ///  CFLocale
    /// ```
    ///
    /// ) of the user's preferred caption language.
    ///
    /// Returns: <code>
    /// true
    /// </code>
    /// if addition was successful. Unsuccessful additions are most liketly the result of invalid language codes.
    ///
    /// After a language is added it will appear first in the array returned by MACaptionAppearanceCopySelectedLanguages. Applications should call this anytime a user selects a specific languages for captioning tracks.
    ///
    /// For example, an AVFoundation clients may execute the following code in response to a user selecting a captioning track:
    /// <code>
    /// // in response to a user selection (from a pop-up menu or any other UI affordance), make the selection effective
    /// -[AVPlayerItem selectMediaOption:legibleOption inMediaSelectionGroup:legibleGroup];
    ///
    /// // now update system-wide captioning preferences by registering the language of the option selected by the user
    /// MACaptionAppearanceAddSelectedLanguage(kMACaptionAppearanceDomainUser, (CFStringRef)[[legibleOption locale] localeIdentifier]);
    /// </code>
    pub fn MACaptionAppearanceAddSelectedLanguage(
        domain: MACaptionAppearanceDomain,
        language: &CFString,
    ) -> bool;
}

/// Copies the user's preferred caption languages.
///
///
/// Parameter `domain`: Preference domain, see
///
/// ```text
///  MACaptionAppearanceDomain
/// ```
///
/// .
///
///
/// Returns: Ordered array of preferred canonical language identifiers.
///
///
/// Languages added using MACaptionAppearanceAddSelectedLanguage are normalized, and thus the contents of this array may have slightly different strings than those passed into MACaptionAppearanceAddSelectedLanguage.
#[inline]
pub unsafe extern "C-unwind" fn MACaptionAppearanceCopySelectedLanguages(
    domain: MACaptionAppearanceDomain,
) -> CFRetained<CFArray> {
    extern "C-unwind" {
        fn MACaptionAppearanceCopySelectedLanguages(
            domain: MACaptionAppearanceDomain,
        ) -> Option<NonNull<CFArray>>;
    }
    let ret = unsafe { MACaptionAppearanceCopySelectedLanguages(domain) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

extern "C-unwind" {
    /// User preference representing what type of captions should be displayed
    ///
    /// Parameter `domain`: Preference domain, see
    ///
    /// ```text
    ///  MACaptionAppearanceDomain
    /// ```
    ///
    /// .
    ///
    /// Returns: User preference representing what type of captions should be displayed. See
    ///
    /// ```text
    ///  MACaptionAppearanceDisplayType
    /// ```
    ///
    /// .
    pub fn MACaptionAppearanceGetDisplayType(
        domain: MACaptionAppearanceDomain,
    ) -> MACaptionAppearanceDisplayType;
}

extern "C-unwind" {
    /// User preference representing what type of captions should be displayed
    ///
    /// Parameter `domain`: Preference domain, see
    ///
    /// ```text
    ///  MACaptionAppearanceDomain
    /// ```
    ///
    /// .
    ///
    /// Parameter `displayType`: Captions display type, see
    ///
    /// ```text
    ///  MACaptionAppearanceDisplayType
    /// ```
    ///
    /// .
    pub fn MACaptionAppearanceSetDisplayType(
        domain: MACaptionAppearanceDomain,
        display_type: MACaptionAppearanceDisplayType,
    );
}

/// User preference for captioning media characteristic
///
/// Parameter `domain`: Preference domain, see
///
/// ```text
///  MACaptionAppearanceDomain
/// ```
///
/// .
///
/// Returns: An array containing the preferred order of media characteristics for captions.
#[inline]
pub unsafe extern "C-unwind" fn MACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics(
    domain: MACaptionAppearanceDomain,
) -> CFRetained<CFArray> {
    extern "C-unwind" {
        fn MACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics(
            domain: MACaptionAppearanceDomain,
        ) -> Option<NonNull<CFArray>>;
    }
    let ret = unsafe { MACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics(domain) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

extern "C-unwind" {
    /// Provides a boolean indicating if the currently-active style has been customized by the user. This is useful for some clients who may need different fallback strategies for customized styles vs system-default styles.
    ///
    /// Parameter `domain`: Preference domain, see
    ///
    /// ```text
    ///  MACaptionAppearanceDomain
    /// ```
    ///
    /// .
    ///
    /// Returns: A boolean indicating if the currently-active style has been customized by the user
    pub fn MACaptionAppearanceIsCustomized(domain: MACaptionAppearanceDomain) -> bool;
}

/// User preference for foreground/text color.
///
/// Parameter `domain`: Preference domain, see
///
/// ```text
///  MACaptionAppearanceDomain
/// ```
///
/// .
///
/// Parameter `behavior`: (see
///
/// ```text
///  MACaptionAppearanceBehavior
/// ```
///
/// )
///
/// Returns: User preference for foreground/text color.
#[cfg(feature = "objc2-core-graphics")]
#[inline]
pub unsafe extern "C-unwind" fn MACaptionAppearanceCopyForegroundColor(
    domain: MACaptionAppearanceDomain,
    behavior: *mut MACaptionAppearanceBehavior,
) -> CFRetained<CGColor> {
    extern "C-unwind" {
        fn MACaptionAppearanceCopyForegroundColor(
            domain: MACaptionAppearanceDomain,
            behavior: *mut MACaptionAppearanceBehavior,
        ) -> Option<NonNull<CGColor>>;
    }
    let ret = unsafe { MACaptionAppearanceCopyForegroundColor(domain, behavior) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

/// User preference for background color.
///
/// The background color is the color behind each caption glyph.
///
/// Parameter `domain`: Preference domain, see
///
/// ```text
///  MACaptionAppearanceDomain
/// ```
///
/// .
///
/// Parameter `behavior`: (see
///
/// ```text
///  MACaptionAppearanceBehavior
/// ```
///
/// )
///
/// Returns: User preference for background color.
#[cfg(feature = "objc2-core-graphics")]
#[inline]
pub unsafe extern "C-unwind" fn MACaptionAppearanceCopyBackgroundColor(
    domain: MACaptionAppearanceDomain,
    behavior: *mut MACaptionAppearanceBehavior,
) -> CFRetained<CGColor> {
    extern "C-unwind" {
        fn MACaptionAppearanceCopyBackgroundColor(
            domain: MACaptionAppearanceDomain,
            behavior: *mut MACaptionAppearanceBehavior,
        ) -> Option<NonNull<CGColor>>;
    }
    let ret = unsafe { MACaptionAppearanceCopyBackgroundColor(domain, behavior) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

/// User preference for window color.
///
/// The window color is the color of a box behind all of the caption glyphs.
///
/// Parameter `domain`: Preference domain, see
///
/// ```text
///  MACaptionAppearanceDomain
/// ```
///
/// .
///
/// Parameter `behavior`: (see
///
/// ```text
///  MACaptionAppearanceBehavior
/// ```
///
/// )
///
/// Returns: User preference for window color.
#[cfg(feature = "objc2-core-graphics")]
#[inline]
pub unsafe extern "C-unwind" fn MACaptionAppearanceCopyWindowColor(
    domain: MACaptionAppearanceDomain,
    behavior: *mut MACaptionAppearanceBehavior,
) -> CFRetained<CGColor> {
    extern "C-unwind" {
        fn MACaptionAppearanceCopyWindowColor(
            domain: MACaptionAppearanceDomain,
            behavior: *mut MACaptionAppearanceBehavior,
        ) -> Option<NonNull<CGColor>>;
    }
    let ret = unsafe { MACaptionAppearanceCopyWindowColor(domain, behavior) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

extern "C-unwind" {
    /// User preference for foreground opacity.
    ///
    /// Parameter `domain`: Preference domain, see
    ///
    /// ```text
    ///  MACaptionAppearanceDomain
    /// ```
    ///
    /// .
    ///
    /// Parameter `behavior`: (see
    ///
    /// ```text
    ///  MACaptionAppearanceBehavior
    /// ```
    ///
    /// )
    ///
    /// Returns: User preference for foreground opacity.
    pub fn MACaptionAppearanceGetForegroundOpacity(
        domain: MACaptionAppearanceDomain,
        behavior: *mut MACaptionAppearanceBehavior,
    ) -> CGFloat;
}

extern "C-unwind" {
    /// User preference for background opacity.
    ///
    /// Parameter `domain`: Preference domain, see
    ///
    /// ```text
    ///  MACaptionAppearanceDomain
    /// ```
    ///
    /// .
    ///
    /// Parameter `behavior`: (see
    ///
    /// ```text
    ///  MACaptionAppearanceBehavior
    /// ```
    ///
    /// )
    ///
    /// Returns: User preference for background opacity.
    pub fn MACaptionAppearanceGetBackgroundOpacity(
        domain: MACaptionAppearanceDomain,
        behavior: *mut MACaptionAppearanceBehavior,
    ) -> CGFloat;
}

extern "C-unwind" {
    /// User preference for window opacity.
    ///
    /// Parameter `domain`: Preference domain, see
    ///
    /// ```text
    ///  MACaptionAppearanceDomain
    /// ```
    ///
    /// .
    ///
    /// Parameter `behavior`: (see
    ///
    /// ```text
    ///  MACaptionAppearanceBehavior
    /// ```
    ///
    /// )
    ///
    /// Returns: User preference for window opacity.
    pub fn MACaptionAppearanceGetWindowOpacity(
        domain: MACaptionAppearanceDomain,
        behavior: *mut MACaptionAppearanceBehavior,
    ) -> CGFloat;
}

extern "C-unwind" {
    /// User preference for caption-window corner radius.
    ///
    /// Parameter `domain`: Preference domain, see
    ///
    /// ```text
    ///  MACaptionAppearanceDomain
    /// ```
    ///
    /// .
    ///
    /// Parameter `behavior`: (see
    ///
    /// ```text
    ///  MACaptionAppearanceBehavior
    /// ```
    ///
    /// )
    ///
    /// Returns: User preference for caption-window corner radius.
    pub fn MACaptionAppearanceGetWindowRoundedCornerRadius(
        domain: MACaptionAppearanceDomain,
        behavior: *mut MACaptionAppearanceBehavior,
    ) -> CGFloat;
}

/// User font preference for the specified style.
///
/// Parameter `domain`: Preference domain, see
///
/// ```text
///  MACaptionAppearanceDomain
/// ```
///
/// .
///
/// Parameter `behavior`: (see
///
/// ```text
///  MACaptionAppearanceBehavior
/// ```
///
/// )
///
/// Parameter `fontStyle`: Font style, see
///
/// ```text
///  MACaptionAppearanceFontStyle
/// ```
///
/// .
///
/// Returns: User font preference for the specified style.
#[cfg(feature = "objc2-core-text")]
#[inline]
pub unsafe extern "C-unwind" fn MACaptionAppearanceCopyFontDescriptorForStyle(
    domain: MACaptionAppearanceDomain,
    behavior: *mut MACaptionAppearanceBehavior,
    font_style: MACaptionAppearanceFontStyle,
) -> CFRetained<CTFontDescriptor> {
    extern "C-unwind" {
        fn MACaptionAppearanceCopyFontDescriptorForStyle(
            domain: MACaptionAppearanceDomain,
            behavior: *mut MACaptionAppearanceBehavior,
            font_style: MACaptionAppearanceFontStyle,
        ) -> Option<NonNull<CTFontDescriptor>>;
    }
    let ret =
        unsafe { MACaptionAppearanceCopyFontDescriptorForStyle(domain, behavior, font_style) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

extern "C-unwind" {
    /// User preference for font scaling.
    ///
    /// Parameter `domain`: Preference domain, see
    ///
    /// ```text
    ///  MACaptionAppearanceDomain
    /// ```
    ///
    /// .
    ///
    /// Parameter `behavior`: (see
    ///
    /// ```text
    ///  MACaptionAppearanceBehavior
    /// ```
    ///
    /// )
    ///
    /// Returns: User font scaling preference for the specified style.
    pub fn MACaptionAppearanceGetRelativeCharacterSize(
        domain: MACaptionAppearanceDomain,
        behavior: *mut MACaptionAppearanceBehavior,
    ) -> CGFloat;
}

extern "C-unwind" {
    /// User preference for text edge style.
    ///
    /// Parameter `domain`: Preference domain, see
    ///
    /// ```text
    ///  MACaptionAppearanceDomain
    /// ```
    ///
    /// .
    ///
    /// Parameter `behavior`: (see
    ///
    /// ```text
    ///  MACaptionAppearanceBehavior
    /// ```
    ///
    /// )
    ///
    /// Returns: User preference for text edge style.
    pub fn MACaptionAppearanceGetTextEdgeStyle(
        domain: MACaptionAppearanceDomain,
        behavior: *mut MACaptionAppearanceBehavior,
    ) -> MACaptionAppearanceTextEdgeStyle;
}

/// Copies all system and user defined profiles, each represented by a CFString containing a non-human-readable ID
///
/// Returns: An array of strings where each string represents a unique caption profile ID.
#[inline]
pub unsafe extern "C-unwind" fn MACaptionAppearanceCopyProfileIDs() -> CFRetained<CFArray> {
    extern "C-unwind" {
        fn MACaptionAppearanceCopyProfileIDs() -> Option<NonNull<CFArray>>;
    }
    let ret = unsafe { MACaptionAppearanceCopyProfileIDs() };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

extern "C-unwind" {
    /// Sets the currently-selected caption drawing profileID system wide. Behavior is undefined if NULL or an invalid profileID is provided
    ///
    /// Parameter `profileID`: The profileID to make active.
    pub fn MACaptionAppearanceSetActiveProfileID(profile_id: &CFString);
}

/// Gets the currently-selected caption drawing profileID system wide.
///
/// Returns: The currently-selected profileID.
#[inline]
pub unsafe extern "C-unwind" fn MACaptionAppearanceCopyActiveProfileID() -> CFRetained<CFString> {
    extern "C-unwind" {
        fn MACaptionAppearanceCopyActiveProfileID() -> Option<NonNull<CFString>>;
    }
    let ret = unsafe { MACaptionAppearanceCopyActiveProfileID() };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

/// Copies the human-readable name of a profileID
///
/// Parameter `profileID`: The profileID to copy the name of
///
/// Returns: A human-readable name of the provided profileID
#[inline]
pub unsafe extern "C-unwind" fn MACaptionAppearanceCopyProfileName(
    profile_id: &CFString,
) -> CFRetained<CFString> {
    extern "C-unwind" {
        fn MACaptionAppearanceCopyProfileName(profile_id: &CFString) -> Option<NonNull<CFString>>;
    }
    let ret = unsafe { MACaptionAppearanceCopyProfileName(profile_id) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

extern "C-unwind" {
    /// Executes a block of code as if the provided profileID was active. This is used in cases such as a need to get the fonts and colors of a profileID without changing the currently selected profileID.
    ///
    /// Parameter `profileID`: The profileID which will appear active when executing the block
    ///
    /// Parameter `aBlock`: the block of code to execute
    #[cfg(feature = "block2")]
    pub fn MACaptionAppearanceExecuteBlockForProfileID(
        profile_id: &CFString,
        a_block: &block2::DynBlock<dyn Fn()>,
    );
}
