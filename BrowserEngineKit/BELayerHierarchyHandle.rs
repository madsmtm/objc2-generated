//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/browserenginekit/belayerhierarchyhandle?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct BELayerHierarchyHandle;
);

unsafe impl Send for BELayerHierarchyHandle {}

unsafe impl Sync for BELayerHierarchyHandle {}

extern_conformance!(
    unsafe impl NSCoding for BELayerHierarchyHandle {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for BELayerHierarchyHandle {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for BELayerHierarchyHandle {}
);

impl BELayerHierarchyHandle {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(feature = "libc")]
        /// takes ownership of the port right (even if it returns nil).
        #[unsafe(method(handleWithPort:data:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn handleWithPort_data_error(
            port: libc::mach_port_t,
            data: &NSData,
        ) -> Result<Retained<BELayerHierarchyHandle>, Retained<NSError>>;

        #[cfg(all(feature = "block2", feature = "libc"))]
        /// passes a copy of the send right or `MACH_PORT_NULL` if inert.
        /// the receiver is responsible for disposing of `copiedPort`.
        /// the port and data should be consumed together and _only_ once by `init(port:data:)`.
        #[unsafe(method(encodeWithBlock:))]
        #[unsafe(method_family = none)]
        pub unsafe fn encodeWithBlock(
            &self,
            block: &block2::DynBlock<dyn Fn(libc::mach_port_t, NonNull<NSData>) + '_>,
        );
    );
}
