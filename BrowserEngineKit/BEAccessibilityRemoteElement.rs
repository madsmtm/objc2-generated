//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// BEAccessibilityRemoteHostElement connects the accessibility hierarchy of two separate processes. The remote host and remote elements share the same identifier to facilitate this connection. To use this, return this remote element from an object in your view hierarchy via its `accessibilityElements` method.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/browserenginekit/beaccessibilityremotehostelement?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct BEAccessibilityRemoteHostElement;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for BEAccessibilityRemoteHostElement {}
);

impl BEAccessibilityRemoteHostElement {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "libc")]
        /// Initializes a remote element in the hosting process.
        ///
        /// Parameter `identifier`: Unique identifier to connect this remote element to the remote element it hosts. This should be unique per pair of remote elements.
        ///
        /// Parameter `remotePid`: The PID of the hosted remote element's process.
        #[unsafe(method(initWithIdentifier:remotePid:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithIdentifier_remotePid(
            this: Allocated<Self>,
            identifier: &NSString,
            remote_pid: libc::pid_t,
        ) -> Retained<Self>;

        /// The accessibility ancestor of this element.
        ///
        /// This may be used by accessibility technologies to traverse from the remote element to the elements above it in the hierarchy.
        #[unsafe(method(accessibilityContainer))]
        #[unsafe(method_family = none)]
        pub unsafe fn accessibilityContainer(&self) -> Option<Retained<AnyObject>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`accessibilityContainer`][Self::accessibilityContainer].
        #[unsafe(method(setAccessibilityContainer:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAccessibilityContainer(&self, accessibility_container: Option<&AnyObject>);
    );
}

/// Methods declared on superclass `NSObject`.
impl BEAccessibilityRemoteHostElement {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// BEAccessibilityRemoteElement represents the destination of a BEAccessibilityRemoteHostElement in a different process. The elements it contains are defined by the `accessibilityElements` API. `BEAccessibilityRemoteElement` does not need to be returned in any element array.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/browserenginekit/beaccessibilityremoteelement?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct BEAccessibilityRemoteElement;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for BEAccessibilityRemoteElement {}
);

impl BEAccessibilityRemoteElement {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "libc")]
        /// Initializes and registers a remote element. This element doesn't need to be returned anywhere.
        ///
        /// Parameter `identifier`: Unique identifier to connect this remote element to the hosting remote element. This should be unique per pair of remote elements.
        ///
        /// Parameter `hostPid`: The PID of the host's remote element process.
        #[unsafe(method(initWithIdentifier:hostPid:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithIdentifier_hostPid(
            this: Allocated<Self>,
            identifier: &NSString,
            host_pid: libc::pid_t,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
impl BEAccessibilityRemoteElement {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
