//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-photos")]
#[cfg(not(target_os = "watchos"))]
use objc2_photos::*;

use crate::*;

/// A mode that determines which representation
/// `PHPickerViewController`should provide for an asset given a type identifier, if multiple representations are available.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phpickerconfigurationassetrepresentationmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct PHPickerConfigurationAssetRepresentationMode(pub NSInteger);
impl PHPickerConfigurationAssetRepresentationMode {
    /// Uses the best representation determined by the system. This may change in future releases.
    #[doc(alias = "PHPickerConfigurationAssetRepresentationModeAutomatic")]
    pub const Automatic: Self = Self(0);
    /// Uses the current representation to avoid transcoding if possible.
    #[doc(alias = "PHPickerConfigurationAssetRepresentationModeCurrent")]
    pub const Current: Self = Self(1);
    /// Uses the most compatible representation if possible, even if transcoding is required.
    #[doc(alias = "PHPickerConfigurationAssetRepresentationModeCompatible")]
    pub const Compatible: Self = Self(2);
}

unsafe impl Encode for PHPickerConfigurationAssetRepresentationMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for PHPickerConfigurationAssetRepresentationMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

unsafe impl Send for PHPickerConfigurationAssetRepresentationMode {}

unsafe impl Sync for PHPickerConfigurationAssetRepresentationMode {}

/// An enum that determines how
/// `PHPickerViewController`handles user selection.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phpickerconfigurationselection?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct PHPickerConfigurationSelection(pub NSInteger);
impl PHPickerConfigurationSelection {
    /// Uses the default selection behavior.
    #[doc(alias = "PHPickerConfigurationSelectionDefault")]
    pub const Default: Self = Self(0);
    /// Uses the selection order made by the user. Selected assets are numbered.
    #[doc(alias = "PHPickerConfigurationSelectionOrdered")]
    pub const Ordered: Self = Self(1);
    /// Selection can be delivered continuously.
    #[doc(alias = "PHPickerConfigurationSelectionContinuous")]
    pub const Continuous: Self = Self(2);
    /// Selection can be delivered continuously and uses the selection order made by the user. Selected assets are numbered.
    #[doc(alias = "PHPickerConfigurationSelectionContinuousAndOrdered")]
    pub const ContinuousAndOrdered: Self = Self(3);
}

unsafe impl Encode for PHPickerConfigurationSelection {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for PHPickerConfigurationSelection {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

unsafe impl Send for PHPickerConfigurationSelection {}

unsafe impl Sync for PHPickerConfigurationSelection {}

/// An enum that determines the mode of
/// `PHPickerViewController.`
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phpickermode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct PHPickerMode(pub NSInteger);
impl PHPickerMode {
    /// Default picker mode.
    #[doc(alias = "PHPickerModeDefault")]
    pub const Default: Self = Self(0);
    /// Compact picker mode (single row).
    #[doc(alias = "PHPickerModeCompact")]
    pub const Compact: Self = Self(1);
}

unsafe impl Encode for PHPickerMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for PHPickerMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Constants that specify one or a set of
/// `PHPickerViewController`capabilities.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phpickercapabilities?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct PHPickerCapabilities(pub NSUInteger);
bitflags::bitflags! {
    impl PHPickerCapabilities: NSUInteger {
/// No specified capabilities.
        #[doc(alias = "PHPickerCapabilitiesNone")]
        const None = 0;
/// The search bar.
        #[doc(alias = "PHPickerCapabilitiesSearch")]
        const Search = 1<<0;
/// The staging area.
        #[doc(alias = "PHPickerCapabilitiesStagingArea")]
        const StagingArea = 1<<1;
/// The sidebar or the albums tab.
        #[doc(alias = "PHPickerCapabilitiesCollectionNavigation")]
        const CollectionNavigation = 1<<2;
/// The "Cancel" and the "Add" (if possible) button.
        #[doc(alias = "PHPickerCapabilitiesSelectionActions")]
        const SelectionActions = 1<<3;
/// Show intervention UI explaining potential risks for kids or teens if a sensitive asset is selected. Analysis and intervention will only be performed if "Communication Safety" is enabled in ScreenTime.
        #[doc(alias = "PHPickerCapabilitiesSensitivityAnalysisIntervention")]
        const SensitivityAnalysisIntervention = 1<<4;
    }
}

unsafe impl Encode for PHPickerCapabilities {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for PHPickerCapabilities {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// A filter that restricts which types of assets
    /// `PHPickerViewController`can show.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phpickerfilter?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHPickerFilter;
);

extern_conformance!(
    unsafe impl NSCopying for PHPickerFilter {}
);

unsafe impl CopyingHelper for PHPickerFilter {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for PHPickerFilter {}
);

impl PHPickerFilter {
    extern_methods!(
        /// The filter for images.
        #[unsafe(method(imagesFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn imagesFilter() -> Retained<PHPickerFilter>;

        /// The filter for videos.
        #[unsafe(method(videosFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn videosFilter() -> Retained<PHPickerFilter>;

        /// The filter for live photos.
        #[unsafe(method(livePhotosFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn livePhotosFilter() -> Retained<PHPickerFilter>;

        /// The filter for Depth Effect photos.
        #[unsafe(method(depthEffectPhotosFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn depthEffectPhotosFilter() -> Retained<PHPickerFilter>;

        /// The filter for bursts.
        #[unsafe(method(burstsFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn burstsFilter() -> Retained<PHPickerFilter>;

        /// The filter for panorama photos.
        #[unsafe(method(panoramasFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn panoramasFilter() -> Retained<PHPickerFilter>;

        /// The filter for screenshots.
        #[unsafe(method(screenshotsFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn screenshotsFilter() -> Retained<PHPickerFilter>;

        /// The filter for screen recordings.
        #[unsafe(method(screenRecordingsFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn screenRecordingsFilter() -> Retained<PHPickerFilter>;

        /// The filter for Cinematic videos.
        #[unsafe(method(cinematicVideosFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn cinematicVideosFilter() -> Retained<PHPickerFilter>;

        /// The filter for Slow-Mo videos.
        #[unsafe(method(slomoVideosFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn slomoVideosFilter() -> Retained<PHPickerFilter>;

        /// The filter for time-lapse videos.
        #[unsafe(method(timelapseVideosFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn timelapseVideosFilter() -> Retained<PHPickerFilter>;

        /// The filter for spatial media.
        #[unsafe(method(spatialMediaFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn spatialMediaFilter() -> Retained<PHPickerFilter>;

        #[cfg(feature = "objc2-photos")]
        #[cfg(not(target_os = "watchos"))]
        /// Returns a new filter based on the asset playback style.
        #[unsafe(method(playbackStyleFilter:))]
        #[unsafe(method_family = none)]
        pub unsafe fn playbackStyleFilter(
            playback_style: PHAssetPlaybackStyle,
        ) -> Retained<PHPickerFilter>;

        /// Returns a new filter formed by OR-ing the filters in a given array.
        #[unsafe(method(anyFilterMatchingSubfilters:))]
        #[unsafe(method_family = none)]
        pub unsafe fn anyFilterMatchingSubfilters(
            subfilters: &NSArray<PHPickerFilter>,
        ) -> Retained<PHPickerFilter>;

        /// Returns a new filter formed by AND-ing the filters in a given array.
        #[unsafe(method(allFilterMatchingSubfilters:))]
        #[unsafe(method_family = none)]
        pub unsafe fn allFilterMatchingSubfilters(
            subfilters: &NSArray<PHPickerFilter>,
        ) -> Retained<PHPickerFilter>;

        /// Returns a new filter formed by negating the given filter.
        #[unsafe(method(notFilterOfSubfilter:))]
        #[unsafe(method_family = none)]
        pub unsafe fn notFilterOfSubfilter(subfilter: &PHPickerFilter) -> Retained<PHPickerFilter>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// An update configuration for
    /// `PHPickerViewController.`
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phpickerupdateconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHPickerUpdateConfiguration;
);

extern_conformance!(
    unsafe impl NSCopying for PHPickerUpdateConfiguration {}
);

unsafe impl CopyingHelper for PHPickerUpdateConfiguration {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for PHPickerUpdateConfiguration {}
);

impl PHPickerUpdateConfiguration {
    extern_methods!(
        /// The maximum number of assets that can be selected.
        #[unsafe(method(selectionLimit))]
        #[unsafe(method_family = none)]
        pub unsafe fn selectionLimit(&self) -> NSInteger;

        /// Setter for [`selectionLimit`][Self::selectionLimit].
        #[unsafe(method(setSelectionLimit:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSelectionLimit(&self, selection_limit: NSInteger);

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Edges of the picker that have no margin between the content and the edge (e.g. without bars in between).
        #[unsafe(method(edgesWithoutContentMargins))]
        #[unsafe(method_family = none)]
        pub unsafe fn edgesWithoutContentMargins(&self) -> NSDirectionalRectEdge;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Setter for [`edgesWithoutContentMargins`][Self::edgesWithoutContentMargins].
        #[unsafe(method(setEdgesWithoutContentMargins:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEdgesWithoutContentMargins(
            &self,
            edges_without_content_margins: NSDirectionalRectEdge,
        );
    );
}

/// Methods declared on superclass `NSObject`.
impl PHPickerUpdateConfiguration {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// A configuration for
    /// `PHPickerViewController.`
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phpickerconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHPickerConfiguration;
);

extern_conformance!(
    unsafe impl NSCopying for PHPickerConfiguration {}
);

unsafe impl CopyingHelper for PHPickerConfiguration {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for PHPickerConfiguration {}
);

impl PHPickerConfiguration {
    extern_methods!(
        /// The preferred representation mode of selected assets. Default is
        /// `PHPickerConfigurationAssetRepresentationModeAutomatic.`
        /// Setting
        /// `preferredAssetRepresentationMode`to
        /// `PHPickerConfigurationAssetRepresentationModeAutomatic`means the best representation determined by the system will be used.
        #[unsafe(method(preferredAssetRepresentationMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn preferredAssetRepresentationMode(
            &self,
        ) -> PHPickerConfigurationAssetRepresentationMode;

        /// Setter for [`preferredAssetRepresentationMode`][Self::preferredAssetRepresentationMode].
        #[unsafe(method(setPreferredAssetRepresentationMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPreferredAssetRepresentationMode(
            &self,
            preferred_asset_representation_mode: PHPickerConfigurationAssetRepresentationMode,
        );

        /// The selection behavior of the picker. Default is
        /// `PHPickerConfigurationSelectionDefault.`
        #[unsafe(method(selection))]
        #[unsafe(method_family = none)]
        pub unsafe fn selection(&self) -> PHPickerConfigurationSelection;

        /// Setter for [`selection`][Self::selection].
        #[unsafe(method(setSelection:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSelection(&self, selection: PHPickerConfigurationSelection);

        /// The maximum number of assets that can be selected. Default is 1.
        ///
        /// Setting
        /// `selectionLimit`to 0 means maximum supported by the system.
        #[unsafe(method(selectionLimit))]
        #[unsafe(method_family = none)]
        pub unsafe fn selectionLimit(&self) -> NSInteger;

        /// Setter for [`selectionLimit`][Self::selectionLimit].
        #[unsafe(method(setSelectionLimit:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSelectionLimit(&self, selection_limit: NSInteger);

        /// Types of assets that can be shown. Default is
        /// `nil.`
        /// Setting
        /// `filter`to
        /// `nil`means all asset types can be shown.
        #[unsafe(method(filter))]
        #[unsafe(method_family = none)]
        pub unsafe fn filter(&self) -> Option<Retained<PHPickerFilter>>;

        /// Setter for [`filter`][Self::filter].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setFilter:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFilter(&self, filter: Option<&PHPickerFilter>);

        /// Local identifiers of assets to be shown as selected when the picker is presented. Default is an empty array.
        ///
        /// `preselectedAssetIdentifiers`should be an empty array if
        /// `selectionLimit`is 1 or
        /// `photoLibrary`is not specified. Returned item providers for preselected assets are always empty.
        #[unsafe(method(preselectedAssetIdentifiers))]
        #[unsafe(method_family = none)]
        pub unsafe fn preselectedAssetIdentifiers(&self) -> Retained<NSArray<NSString>>;

        /// Setter for [`preselectedAssetIdentifiers`][Self::preselectedAssetIdentifiers].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setPreselectedAssetIdentifiers:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPreselectedAssetIdentifiers(
            &self,
            preselected_asset_identifiers: &NSArray<NSString>,
        );

        /// The mode of the picker. Default is
        /// `PHPickerModeDefault.`
        #[unsafe(method(mode))]
        #[unsafe(method_family = none)]
        pub unsafe fn mode(&self) -> PHPickerMode;

        /// Setter for [`mode`][Self::mode].
        #[unsafe(method(setMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMode(&self, mode: PHPickerMode);

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Edges of the picker that have no margin between the content and the edge (e.g. without bars in between). Default is
        /// `NSDirectionalRectEdgeNone.`
        #[unsafe(method(edgesWithoutContentMargins))]
        #[unsafe(method_family = none)]
        pub unsafe fn edgesWithoutContentMargins(&self) -> NSDirectionalRectEdge;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Setter for [`edgesWithoutContentMargins`][Self::edgesWithoutContentMargins].
        #[unsafe(method(setEdgesWithoutContentMargins:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEdgesWithoutContentMargins(
            &self,
            edges_without_content_margins: NSDirectionalRectEdge,
        );

        /// Capabilities of the picker that should be disabled. Default is
        /// `PHPickerCapabilitiesNone.`
        #[unsafe(method(disabledCapabilities))]
        #[unsafe(method_family = none)]
        pub unsafe fn disabledCapabilities(&self) -> PHPickerCapabilities;

        /// Setter for [`disabledCapabilities`][Self::disabledCapabilities].
        #[unsafe(method(setDisabledCapabilities:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDisabledCapabilities(&self, disabled_capabilities: PHPickerCapabilities);

        #[cfg(feature = "objc2-photos")]
        #[cfg(not(target_os = "watchos"))]
        /// Initializes a new configuration with the
        /// `photoLibrary`the picker should use.
        #[unsafe(method(initWithPhotoLibrary:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithPhotoLibrary(
            this: Allocated<Self>,
            photo_library: &PHPhotoLibrary,
        ) -> Retained<Self>;

        /// Initializes a new configuration with the system photo library. This configuration never returns asset identifiers.
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
impl PHPickerConfiguration {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// A user selected asset from
    /// `PHPickerViewController.`
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phpickerresult?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct PHPickerResult;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for PHPickerResult {}
);

impl PHPickerResult {
    extern_methods!(
        /// Representations of the selected asset.
        #[unsafe(method(itemProvider))]
        #[unsafe(method_family = none)]
        pub unsafe fn itemProvider(&self) -> Retained<NSItemProvider>;

        /// The local identifier of the selected asset.
        #[unsafe(method(assetIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn assetIdentifier(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_protocol!(
    /// A set of methods that the delegate must implement to respond to
    /// `PHPickerViewController`user events.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/photosui/phpickerviewcontrollerdelegate?language=objc)
    pub unsafe trait PHPickerViewControllerDelegate:
        NSObjectProtocol + MainThreadOnly
    {
        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Called when the user completes a selection or dismisses
        /// `PHPickerViewController`using the cancel button.
        ///
        /// The picker won't be automatically dismissed when this method is called.
        #[unsafe(method(picker:didFinishPicking:))]
        #[unsafe(method_family = none)]
        unsafe fn picker_didFinishPicking(
            &self,
            picker: &PHPickerViewController,
            results: &NSArray<PHPickerResult>,
        );
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/photosui/phpickerviewcontroller?language=objc)
    #[unsafe(super(NSViewController, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    pub struct PHPickerViewController;
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSCoding for PHPickerViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSEditor for PHPickerViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSObjectProtocol for PHPickerViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSSeguePerforming for PHPickerViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSUserInterfaceItemIdentification for PHPickerViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl PHPickerViewController {
    extern_methods!(
        /// The configuration passed in during initialization.
        #[unsafe(method(configuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn configuration(&self) -> Retained<PHPickerConfiguration>;

        /// The delegate to be notified.
        #[unsafe(method(delegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn PHPickerViewControllerDelegate>>>;

        /// Setter for [`delegate`][Self::delegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        #[unsafe(method(setDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn PHPickerViewControllerDelegate>>,
        );

        /// Initializes a new picker with the
        /// `configuration`the picker should use.
        #[unsafe(method(initWithConfiguration:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithConfiguration(
            this: Allocated<Self>,
            configuration: &PHPickerConfiguration,
        ) -> Retained<Self>;

        /// Updates the picker using the configuration.
        #[unsafe(method(updatePickerUsingConfiguration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn updatePickerUsingConfiguration(
            &self,
            configuration: &PHPickerUpdateConfiguration,
        );

        /// Deselects selected assets in the picker.
        ///
        /// Does nothing if asset identifiers are invalid or not selected, or
        /// `photoLibrary`is not specified in the configuration.
        #[unsafe(method(deselectAssetsWithIdentifiers:))]
        #[unsafe(method_family = none)]
        pub unsafe fn deselectAssetsWithIdentifiers(&self, identifiers: &NSArray<NSString>);

        /// Reorders selected assets in the picker. A
        /// `nil``afterIdentifier`means moving to the front.
        ///
        /// Does nothing if asset identifiers are invalid or not selected, or
        /// `photoLibrary`is not specified in the configuration.
        #[unsafe(method(moveAssetWithIdentifier:afterAssetWithIdentifier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn moveAssetWithIdentifier_afterAssetWithIdentifier(
            &self,
            identifier: &NSString,
            after_identifier: Option<&NSString>,
        );

        /// Scrolls content to the initial position if possible.
        #[unsafe(method(scrollToInitialPosition))]
        #[unsafe(method_family = none)]
        pub unsafe fn scrollToInitialPosition(&self);

        /// Zooms in content if possible.
        #[unsafe(method(zoomIn))]
        #[unsafe(method_family = none)]
        pub unsafe fn zoomIn(&self);

        /// Zooms out content if possible.
        #[unsafe(method(zoomOut))]
        #[unsafe(method_family = none)]
        pub unsafe fn zoomOut(&self);

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(initWithNibName:bundle:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithNibName_bundle(
            this: Allocated<Self>,
            nib_name_or_nil: Option<&NSNibName>,
            nib_bundle_or_nil: Option<&NSBundle>,
        ) -> Retained<Self>;

        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    );
}
