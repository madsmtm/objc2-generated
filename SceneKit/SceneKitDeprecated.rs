//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// Light Attributes
    ///
    /// Attributes affecting the lighting computations.
    ///
    /// These keys are deprecated in 10.10. Please use the properties of SCNLight instead.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnlightattenuationstartkey?language=objc)
    #[deprecated = "Use SCNLight.attenuationStartDistance instead"]
    pub static SCNLightAttenuationStartKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnlightattenuationendkey?language=objc)
    #[deprecated = "Use SCNLight.attenuationEndDistance instead"]
    pub static SCNLightAttenuationEndKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnlightattenuationfalloffexponentkey?language=objc)
    #[deprecated = "Use SCNLight.attenuationFalloffExponent instead"]
    pub static SCNLightAttenuationFalloffExponentKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnlightspotinneranglekey?language=objc)
    #[deprecated = "Use SCNLight.spotInnerAngle instead"]
    pub static SCNLightSpotInnerAngleKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnlightspotouteranglekey?language=objc)
    #[deprecated = "Use SCNLight.spotOuterAngle instead"]
    pub static SCNLightSpotOuterAngleKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnlightshadownearclippingkey?language=objc)
    #[deprecated = "Use SCNLight.zNear instead"]
    pub static SCNLightShadowNearClippingKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnlightshadowfarclippingkey?language=objc)
    #[deprecated = "Use SCNLight.zFar instead"]
    pub static SCNLightShadowFarClippingKey: &'static NSString;
}

/// SCNDeprecated.
#[cfg(feature = "SCNLight")]
impl SCNLight {
    extern_methods!(
        /// Parameter `key`: The key for which to return the corresponding attribute.
        ///
        /// Returns the attribute for the specified key. The valid keys are described in the "Light Attributes" constants.
        #[deprecated = "Use SCNLight properties instead"]
        #[unsafe(method(attributeForKey:))]
        #[unsafe(method_family = none)]
        pub unsafe fn attributeForKey(&self, key: &NSString) -> Option<Retained<AnyObject>>;

        /// Parameter `attribute`: The attribute for the property identified by key.
        ///
        /// Parameter `key`: The name of a property.
        ///
        /// Set the specified attribute for the specified key. The valid keys are described in the "Light Attributes" constants.
        ///
        /// # Safety
        ///
        /// `attribute` should be of the correct type.
        #[deprecated = "Use SCNLight properties instead"]
        #[unsafe(method(setAttribute:forKey:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAttribute_forKey(&self, attribute: Option<&AnyObject>, key: &NSString);
    );
}

#[cfg(all(feature = "SCNLight", feature = "SCNTechnique"))]
extern_conformance!(
    unsafe impl SCNTechniqueSupport for SCNLight {}
);

/// SCNDeprecated.
#[cfg(feature = "SCNCamera")]
impl SCNCamera {
    extern_methods!(
        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the receiver's focal radius. Animatable.
        ///
        /// Determines the maximum amount of blur for objects out of focus. Defaults to 0.
        #[deprecated = "Use fStop instead"]
        #[unsafe(method(focalBlurRadius))]
        #[unsafe(method_family = none)]
        pub unsafe fn focalBlurRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`focalBlurRadius`][Self::focalBlurRadius].
        #[deprecated = "Use fStop instead"]
        #[unsafe(method(setFocalBlurRadius:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFocalBlurRadius(&self, focal_blur_radius: CGFloat);

        /// Determines the receiver's field of view on the X axis (in degree). Animatable.
        ///
        /// When both xFov and yFov are null an yFov of 60° is used. When both are set, the one that best fits the renderer's aspect ratio is used. When only one is set, it is used. Defaults to 0.
        #[deprecated = "Use -[SCNCamera fieldOfView] or -[SCNCamera focalLength] instead"]
        #[unsafe(method(xFov))]
        #[unsafe(method_family = none)]
        pub unsafe fn xFov(&self) -> c_double;

        /// Setter for [`xFov`][Self::xFov].
        #[deprecated = "Use -[SCNCamera fieldOfView] or -[SCNCamera focalLength] instead"]
        #[unsafe(method(setXFov:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setXFov(&self, x_fov: c_double);

        /// Determines the receiver's field of view on the Y axis (in degree). Animatable.
        ///
        /// When both xFov and yFov are null an yFov of 60° is used. When both are set, the one that best fits the renderer's aspect ratio is used. When only one is set, it is used. Defaults to 0.
        #[deprecated = "Use -[SCNCamera fieldOfView] or -[SCNCamera focalLength] instead"]
        #[unsafe(method(yFov))]
        #[unsafe(method_family = none)]
        pub unsafe fn yFov(&self) -> c_double;

        /// Setter for [`yFov`][Self::yFov].
        #[deprecated = "Use -[SCNCamera fieldOfView] or -[SCNCamera focalLength] instead"]
        #[unsafe(method(setYFov:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setYFov(&self, y_fov: c_double);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the receiver's aperture. Animatable.
        ///
        /// Defaults to 1/8.0.
        #[deprecated = "Use -[SCNCamera fStop] instead with fStop = sensorHeight / aperture."]
        #[unsafe(method(aperture))]
        #[unsafe(method_family = none)]
        pub unsafe fn aperture(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`aperture`][Self::aperture].
        #[deprecated = "Use -[SCNCamera fStop] instead with fStop = sensorHeight / aperture."]
        #[unsafe(method(setAperture:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAperture(&self, aperture: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the receiver's focal size. Animatable.
        ///
        /// Determines the size of the area around focalDistance where the objects are in focus. Defaults to 0.
        #[deprecated]
        #[unsafe(method(focalSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn focalSize(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`focalSize`][Self::focalSize].
        #[deprecated]
        #[unsafe(method(setFocalSize:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFocalSize(&self, focal_size: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the receiver's focal distance. Animatable.
        ///
        /// When non zero, the focal distance determines how the camera focuses the objects in the 3d scene. Defaults to 10.0 prior to macOS 10.13, iOS 11, tvOS 11 and watchOS 4. Defaults to 2.5 otherwise.
        #[deprecated]
        #[unsafe(method(focalDistance))]
        #[unsafe(method_family = none)]
        pub unsafe fn focalDistance(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`focalDistance`][Self::focalDistance].
        #[deprecated]
        #[unsafe(method(setFocalDistance:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFocalDistance(&self, focal_distance: CGFloat);
    );
}

/// SCNDeprecated.
#[cfg(feature = "SCNRenderer")]
impl SCNRenderer {
    extern_methods!(
        /// renders the receiver's scene at the current system time.
        ///
        /// This method only work if the receiver was allocated with an OpenGL context and it is deprecated (use renderAtTime: instead). Use renderAtTime:withEncoder:pass:commandQueue: to render with Metal.
        #[deprecated]
        #[unsafe(method(render))]
        #[unsafe(method_family = none)]
        pub unsafe fn render(&self);
    );
}

/// SCNDeprecated.
#[cfg(feature = "SCNMaterialProperty")]
impl SCNMaterialProperty {
    extern_methods!(
        /// Determines the receiver's border color (CGColorRef or NSColor). Animatable.
        ///
        /// The border color is ignored on iOS and is always considered as clear color (0,0,0,0) when the texture has an alpha channel and opaque back (0,0,0,1) otherwise.
        #[deprecated = "Deprecated"]
        #[unsafe(method(borderColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderColor(&self) -> Option<Retained<AnyObject>>;

        /// Setter for [`borderColor`][Self::borderColor].
        ///
        /// # Safety
        ///
        /// `border_color` should be of the correct type.
        #[deprecated = "Deprecated"]
        #[unsafe(method(setBorderColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderColor(&self, border_color: Option<&AnyObject>);
    );
}
