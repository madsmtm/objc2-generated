//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnviewoption?language=objc)
// NS_TYPED_ENUM
pub type SCNViewOption = NSString;

extern "C" {
    /// Pass it as the key in the options dictionary given to initWithFrame:options:. The value is a NSNumber wrapping a SCNRenderingAPI. You can also select the preferred rendering API directly from the SCNView inspector in InterfaceBuilder.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnpreferredrenderingapikey?language=objc)
    pub static SCNPreferredRenderingAPIKey: &'static SCNViewOption;
}

extern "C" {
    /// The value is directly a id
    /// <MTLDevice
    /// >.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnpreferreddevicekey?language=objc)
    pub static SCNPreferredDeviceKey: &'static SCNViewOption;
}

extern "C" {
    /// The value is a NSNumber wrapping a BOOL. Defaults to NO.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnpreferlowpowerdevicekey?language=objc)
    pub static SCNPreferLowPowerDeviceKey: &'static SCNViewOption;
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scncameracontrolconfiguration?language=objc)
    pub unsafe trait SCNCameraControlConfiguration: NSObjectProtocol {
        #[unsafe(method(autoSwitchToFreeCamera))]
        #[unsafe(method_family = none)]
        unsafe fn autoSwitchToFreeCamera(&self) -> bool;

        /// Setter for [`autoSwitchToFreeCamera`][Self::autoSwitchToFreeCamera].
        #[unsafe(method(setAutoSwitchToFreeCamera:))]
        #[unsafe(method_family = none)]
        unsafe fn setAutoSwitchToFreeCamera(&self, auto_switch_to_free_camera: bool);

        #[unsafe(method(allowsTranslation))]
        #[unsafe(method_family = none)]
        unsafe fn allowsTranslation(&self) -> bool;

        /// Setter for [`allowsTranslation`][Self::allowsTranslation].
        #[unsafe(method(setAllowsTranslation:))]
        #[unsafe(method_family = none)]
        unsafe fn setAllowsTranslation(&self, allows_translation: bool);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(flyModeVelocity))]
        #[unsafe(method_family = none)]
        unsafe fn flyModeVelocity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`flyModeVelocity`][Self::flyModeVelocity].
        #[unsafe(method(setFlyModeVelocity:))]
        #[unsafe(method_family = none)]
        unsafe fn setFlyModeVelocity(&self, fly_mode_velocity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(panSensitivity))]
        #[unsafe(method_family = none)]
        unsafe fn panSensitivity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`panSensitivity`][Self::panSensitivity].
        #[unsafe(method(setPanSensitivity:))]
        #[unsafe(method_family = none)]
        unsafe fn setPanSensitivity(&self, pan_sensitivity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(truckSensitivity))]
        #[unsafe(method_family = none)]
        unsafe fn truckSensitivity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`truckSensitivity`][Self::truckSensitivity].
        #[unsafe(method(setTruckSensitivity:))]
        #[unsafe(method_family = none)]
        unsafe fn setTruckSensitivity(&self, truck_sensitivity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(rotationSensitivity))]
        #[unsafe(method_family = none)]
        unsafe fn rotationSensitivity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`rotationSensitivity`][Self::rotationSensitivity].
        #[unsafe(method(setRotationSensitivity:))]
        #[unsafe(method_family = none)]
        unsafe fn setRotationSensitivity(&self, rotation_sensitivity: CGFloat);
    }
);

extern_class!(
    /// A SCNView is a subclass of NSView that can display a SCNScene
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnview?language=objc)
    #[unsafe(super(NSView, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    pub struct SCNView;
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAccessibility for SCNView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAccessibilityElementProtocol for SCNView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAnimatablePropertyContainer for SCNView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAppearanceCustomization for SCNView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSCoding for SCNView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSDraggingDestination for SCNView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSObjectProtocol for SCNView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSUserInterfaceItemIdentification for SCNView {}
);

#[cfg(all(feature = "SCNSceneRenderer", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl SCNSceneRenderer for SCNView {}
);

#[cfg(all(feature = "SCNTechnique", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl SCNTechniqueSupport for SCNView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl SCNView {
    extern_methods!(
        /// Initializes and returns a newly allocated SCNView object with a specified frame rectangle.
        ///
        /// Parameter `frame`: The frame rectangle for the created view object.
        ///
        /// Parameter `options`: An optional dictionary. See "View initialization options" above.
        #[unsafe(method(initWithFrame:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame_options(
            this: Allocated<Self>,
            frame: NSRect,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Retained<Self>;

        #[cfg(feature = "SCNScene")]
        /// Specifies the scene of the receiver
        #[unsafe(method(scene))]
        #[unsafe(method_family = none)]
        pub unsafe fn scene(&self) -> Option<Retained<SCNScene>>;

        #[cfg(feature = "SCNScene")]
        /// Setter for [`scene`][Self::scene].
        #[unsafe(method(setScene:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setScene(&self, scene: Option<&SCNScene>);

        /// When set to YES, the view continously redraw at the display link frame rate. When set to NO the view will only redraw when something change or animates in the receiver's scene. Defaults to NO.
        #[unsafe(method(rendersContinuously))]
        #[unsafe(method_family = none)]
        pub unsafe fn rendersContinuously(&self) -> bool;

        /// Setter for [`rendersContinuously`][Self::rendersContinuously].
        #[unsafe(method(setRendersContinuously:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRendersContinuously(&self, renders_continuously: bool);

        /// Specifies the background color of the receiver. Defaults to opaque white.
        #[unsafe(method(backgroundColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn backgroundColor(&self) -> Retained<NSColor>;

        /// Setter for [`backgroundColor`][Self::backgroundColor].
        #[unsafe(method(setBackgroundColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBackgroundColor(&self, background_color: &NSColor);

        /// A Boolean value that determines whether the user can manipulate the point of view used to render the scene.
        ///
        /// When set to YES, the user can manipulate the current point of view with the mouse or the trackpad. The scene graph and existing cameras won't be modified by this action. The default value of this property is NO.
        /// Note that the primary purpose of this property is to aid in debugging your application. You may want to implement your own camera controller suitable for your application.
        /// The built-in camera controller let you:
        /// - drag the mouse to rotate the camera around the scene
        /// - drag+cmd to rotate the camera in local space
        /// - drag+shift to rotate using sticky axis
        /// - use the scroll wheel or alt+drag the mouse to translate the camera on its local X,Y plan
        /// - alt+scroll wheel to move the camera forward/backward
        /// - rotate gesture (trackpad only) to roll the camera (rotation around the Z axis)
        /// - pinch gesture (trackpad only) move the camera forward/backward
        /// - alt + pinch gesture (trackpad only) to zoom-in / zoom-out (change the field of view of the camera)
        #[unsafe(method(allowsCameraControl))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsCameraControl(&self) -> bool;

        /// Setter for [`allowsCameraControl`][Self::allowsCameraControl].
        #[unsafe(method(setAllowsCameraControl:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsCameraControl(&self, allows_camera_control: bool);

        /// An object describing the current configuration of the event handler which pilot the default camera controller.
        ///
        /// This object will be used to configure the event handler when allowCameraControl is set to YES.
        #[unsafe(method(cameraControlConfiguration))]
        #[unsafe(method_family = none)]
        pub unsafe fn cameraControlConfiguration(
            &self,
        ) -> Retained<ProtocolObject<dyn SCNCameraControlConfiguration>>;

        #[cfg(feature = "SCNCameraController")]
        /// Returns the default SCNCameraController used to drive the current point of view when allowCameraController is set to YES.
        #[unsafe(method(defaultCameraController))]
        #[unsafe(method_family = none)]
        pub unsafe fn defaultCameraController(&self) -> Retained<SCNCameraController>;

        /// Draws the contents of the view and returns them as a new image object
        ///
        /// This method is thread-safe and may be called at any time.
        #[unsafe(method(snapshot))]
        #[unsafe(method_family = none)]
        pub unsafe fn snapshot(&self) -> Retained<NSImage>;

        /// This action method begins playing the scene at its current location.
        ///
        /// Parameter `sender`: The object (such as a button or menu item) sending the message to play the scene.
        ///
        /// This method does not do anything if the scene is already playing.
        #[unsafe(method(play:))]
        #[unsafe(method_family = none)]
        pub unsafe fn play(&self, sender: Option<&AnyObject>);

        /// This action method pauses the scene playback.
        ///
        /// Parameter `sender`: The object (such as a button or menu item) sending the message to pause the scene.
        ///
        /// This method does not do anything if the scene is already paused.
        #[unsafe(method(pause:))]
        #[unsafe(method_family = none)]
        pub unsafe fn pause(&self, sender: Option<&AnyObject>);

        /// This action method stops the scene playback and resets the current time to the start time of the scene.
        ///
        /// Parameter `sender`: The object (such as a button or menu item) sending the message to stop playing the scene.
        #[unsafe(method(stop:))]
        #[unsafe(method_family = none)]
        pub unsafe fn stop(&self, sender: Option<&AnyObject>);

        /// The rate you want the view to redraw its contents.
        ///
        /// When your application sets its preferred frame rate, the view chooses a frame rate as close to that as possible based on the capabilities of the screen the view is displayed on. The actual frame rate chosen is usually a factor of the maximum refresh rate of the screen to provide a consistent frame rate. For example, if the maximum refresh rate of the screen is 60 frames per second, that is also the highest frame rate the view sets as the actual frame rate. However, if you ask for a lower frame rate, it might choose 30, 20, 15 or some other factor to be the actual frame rate. Your application should choose a frame rate that it can consistently maintain.
        /// The default value is 0 which means the display link will fire at the native cadence of the display hardware.
        #[unsafe(method(preferredFramesPerSecond))]
        #[unsafe(method_family = none)]
        pub unsafe fn preferredFramesPerSecond(&self) -> NSInteger;

        /// Setter for [`preferredFramesPerSecond`][Self::preferredFramesPerSecond].
        #[unsafe(method(setPreferredFramesPerSecond:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPreferredFramesPerSecond(&self, preferred_frames_per_second: NSInteger);

        /// Specifies whether the drawable is resized asynchonously during a live resize operation. Defaults to YES.
        ///
        /// If set to YES, the actual viewport size during a live resize can be retrieved using currentViewport (see SCNSceneRenderer.h)
        #[unsafe(method(drawableResizesAsynchronously))]
        #[unsafe(method_family = none)]
        pub unsafe fn drawableResizesAsynchronously(&self) -> bool;

        /// Setter for [`drawableResizesAsynchronously`][Self::drawableResizesAsynchronously].
        #[unsafe(method(setDrawableResizesAsynchronously:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDrawableResizesAsynchronously(
            &self,
            drawable_resizes_asynchronously: bool,
        );

        /// Specifies the OpenGL context associated with the receiver.
        ///
        /// This property returns nil and has no effect if the current API is Metal.
        #[deprecated = "OpenGL API deprecated, please use Metal instead. (Define SCN_SILENCE_GL_DEPRECATION to silence these warnings)"]
        #[unsafe(method(openGLContext))]
        #[unsafe(method_family = none)]
        pub unsafe fn openGLContext(&self) -> Option<Retained<NSOpenGLContext>>;

        /// Setter for [`openGLContext`][Self::openGLContext].
        #[deprecated = "OpenGL API deprecated, please use Metal instead. (Define SCN_SILENCE_GL_DEPRECATION to silence these warnings)"]
        #[unsafe(method(setOpenGLContext:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOpenGLContext(&self, open_gl_context: Option<&NSOpenGLContext>);

        #[cfg(feature = "SCNSceneRenderer")]
        /// Defaults to SCNAntialiasingModeMultisampling4X on macOS and SCNAntialiasingModeNone on iOS.
        #[unsafe(method(antialiasingMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn antialiasingMode(&self) -> SCNAntialiasingMode;

        #[cfg(feature = "SCNSceneRenderer")]
        /// Setter for [`antialiasingMode`][Self::antialiasingMode].
        #[unsafe(method(setAntialiasingMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAntialiasingMode(&self, antialiasing_mode: SCNAntialiasingMode);

        /// Specifies the pixel format of the receiver.
        ///
        /// This property returns nil and has no effect if the current API is Metal.
        #[deprecated = "OpenGL API deprecated, please use Metal instead. (Define SCN_SILENCE_GL_DEPRECATION to silence these warnings)"]
        #[unsafe(method(pixelFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn pixelFormat(&self) -> Option<Retained<NSOpenGLPixelFormat>>;

        /// Setter for [`pixelFormat`][Self::pixelFormat].
        #[deprecated = "OpenGL API deprecated, please use Metal instead. (Define SCN_SILENCE_GL_DEPRECATION to silence these warnings)"]
        #[unsafe(method(setPixelFormat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPixelFormat(&self, pixel_format: Option<&NSOpenGLPixelFormat>);
    );
}

/// Methods declared on superclass `NSView`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl SCNView {
    extern_methods!(
        #[unsafe(method(initWithFrame:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame_rect: NSRect) -> Retained<Self>;

        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    );
}

/// Methods declared on superclass `NSResponder`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl SCNView {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl SCNView {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}
