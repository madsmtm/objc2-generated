//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "dispatch2")]
use dispatch2::*;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// A custom timing function for SCNActions. Input time will be between 0.0 and 1.0
/// over the duration of the action. Return values must be 0.0-1.0 and increasing
/// and the function must return 1.0 when the input time reaches 1.0.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnactiontimingfunction?language=objc)
#[cfg(feature = "block2")]
pub type SCNActionTimingFunction = *mut block2::DynBlock<dyn Fn(c_float) -> c_float>;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnactionable?language=objc)
    pub unsafe trait SCNActionable: NSObjectProtocol {
        /// Adds an action to the list of actions executed by the node.
        #[unsafe(method(runAction:))]
        #[unsafe(method_family = none)]
        unsafe fn runAction(&self, action: &SCNAction);

        #[cfg(feature = "block2")]
        /// Adds an action to the list of actions executed by the node. Your block is called when the action completes.
        #[unsafe(method(runAction:completionHandler:))]
        #[unsafe(method_family = none)]
        unsafe fn runAction_completionHandler(
            &self,
            action: &SCNAction,
            block: Option<&block2::DynBlock<dyn Fn()>>,
        );

        /// Adds an identifiable action to the list of actions executed by the node.
        #[unsafe(method(runAction:forKey:))]
        #[unsafe(method_family = none)]
        unsafe fn runAction_forKey(&self, action: &SCNAction, key: Option<&NSString>);

        #[cfg(feature = "block2")]
        /// Adds an identifiable action to the list of actions executed by the node. Your block is called when the action completes.
        ///
        /// # Safety
        ///
        /// `block` block must be sendable.
        #[unsafe(method(runAction:forKey:completionHandler:))]
        #[unsafe(method_family = none)]
        unsafe fn runAction_forKey_completionHandler(
            &self,
            action: &SCNAction,
            key: Option<&NSString>,
            block: Option<&block2::DynBlock<dyn Fn()>>,
        );

        /// Returns a Boolean value that indicates whether the node is executing actions.
        #[unsafe(method(hasActions))]
        #[unsafe(method_family = none)]
        unsafe fn hasActions(&self) -> bool;

        /// Returns an action associated with a specific key.
        #[unsafe(method(actionForKey:))]
        #[unsafe(method_family = none)]
        unsafe fn actionForKey(&self, key: &NSString) -> Option<Retained<SCNAction>>;

        /// Removes an action associated with a specific key.
        #[unsafe(method(removeActionForKey:))]
        #[unsafe(method_family = none)]
        unsafe fn removeActionForKey(&self, key: &NSString);

        /// Ends and removes all actions from the node.
        #[unsafe(method(removeAllActions))]
        #[unsafe(method_family = none)]
        unsafe fn removeAllActions(&self);

        /// Returns an array containing the keys of all actions currently attached to the receiver.
        #[unsafe(method(actionKeys))]
        #[unsafe(method_family = none)]
        unsafe fn actionKeys(&self) -> Retained<NSArray<NSString>>;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnaction?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNAction;
);

extern_conformance!(
    unsafe impl NSCoding for SCNAction {}
);

extern_conformance!(
    unsafe impl NSCopying for SCNAction {}
);

unsafe impl CopyingHelper for SCNAction {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for SCNAction {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SCNAction {}
);

impl SCNAction {
    extern_methods!(
        /// This is the expected duration of an actionâ€™s animation. The actual time an action takes to complete is modified by the speed property of the action.
        #[unsafe(method(duration))]
        #[unsafe(method_family = none)]
        pub unsafe fn duration(&self) -> NSTimeInterval;

        /// Setter for [`duration`][Self::duration].
        #[unsafe(method(setDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDuration(&self, duration: NSTimeInterval);

        #[cfg(feature = "SceneKitTypes")]
        /// The timing mode used to execute an action.
        #[unsafe(method(timingMode))]
        #[unsafe(method_family = none)]
        pub unsafe fn timingMode(&self) -> SCNActionTimingMode;

        #[cfg(feature = "SceneKitTypes")]
        /// Setter for [`timingMode`][Self::timingMode].
        #[unsafe(method(setTimingMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTimingMode(&self, timing_mode: SCNActionTimingMode);

        #[cfg(feature = "block2")]
        /// When set, prodives a custom timing via a block. Applies after
        /// the 'timingMode' property is taken into account, defaults to nil
        ///
        /// See: SCNActionTimingFunction
        #[unsafe(method(timingFunction))]
        #[unsafe(method_family = none)]
        pub unsafe fn timingFunction(&self) -> SCNActionTimingFunction;

        #[cfg(feature = "block2")]
        /// Setter for [`timingFunction`][Self::timingFunction].
        ///
        /// # Safety
        ///
        /// `timing_function` must be a valid pointer or null.
        #[unsafe(method(setTimingFunction:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTimingFunction(&self, timing_function: SCNActionTimingFunction);

        #[cfg(feature = "objc2-core-foundation")]
        /// A speed factor that modifies how fast an action runs. Defaults to 1.
        #[unsafe(method(speed))]
        #[unsafe(method_family = none)]
        pub unsafe fn speed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`speed`][Self::speed].
        #[unsafe(method(setSpeed:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSpeed(&self, speed: CGFloat);

        /// Creates an action that reverses the behavior of another action.
        #[unsafe(method(reversedAction))]
        #[unsafe(method_family = none)]
        pub unsafe fn reversedAction(&self) -> Retained<SCNAction>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(moveByX:y:z:duration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn moveByX_y_z_duration(
            delta_x: CGFloat,
            delta_y: CGFloat,
            delta_z: CGFloat,
            duration: NSTimeInterval,
        ) -> Retained<SCNAction>;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(moveBy:duration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn moveBy_duration(
            delta: SCNVector3,
            duration: NSTimeInterval,
        ) -> Retained<SCNAction>;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(moveTo:duration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn moveTo_duration(
            location: SCNVector3,
            duration: NSTimeInterval,
        ) -> Retained<SCNAction>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(rotateByX:y:z:duration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn rotateByX_y_z_duration(
            x_angle: CGFloat,
            y_angle: CGFloat,
            z_angle: CGFloat,
            duration: NSTimeInterval,
        ) -> Retained<SCNAction>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(rotateToX:y:z:duration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn rotateToX_y_z_duration(
            x_angle: CGFloat,
            y_angle: CGFloat,
            z_angle: CGFloat,
            duration: NSTimeInterval,
        ) -> Retained<SCNAction>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(rotateToX:y:z:duration:shortestUnitArc:))]
        #[unsafe(method_family = none)]
        pub unsafe fn rotateToX_y_z_duration_shortestUnitArc(
            x_angle: CGFloat,
            y_angle: CGFloat,
            z_angle: CGFloat,
            duration: NSTimeInterval,
            shortest_unit_arc: bool,
        ) -> Retained<SCNAction>;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(rotateByAngle:aroundAxis:duration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn rotateByAngle_aroundAxis_duration(
            angle: CGFloat,
            axis: SCNVector3,
            duration: NSTimeInterval,
        ) -> Retained<SCNAction>;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(rotateToAxisAngle:duration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn rotateToAxisAngle_duration(
            axis_angle: SCNVector4,
            duration: NSTimeInterval,
        ) -> Retained<SCNAction>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(scaleBy:duration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn scaleBy_duration(scale: CGFloat, sec: NSTimeInterval) -> Retained<SCNAction>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(scaleTo:duration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn scaleTo_duration(scale: CGFloat, sec: NSTimeInterval) -> Retained<SCNAction>;

        #[unsafe(method(sequence:))]
        #[unsafe(method_family = none)]
        pub unsafe fn sequence(actions: &NSArray<SCNAction>) -> Retained<SCNAction>;

        #[unsafe(method(group:))]
        #[unsafe(method_family = none)]
        pub unsafe fn group(actions: &NSArray<SCNAction>) -> Retained<SCNAction>;

        #[unsafe(method(repeatAction:count:))]
        #[unsafe(method_family = none)]
        pub unsafe fn repeatAction_count(
            action: &SCNAction,
            count: NSUInteger,
        ) -> Retained<SCNAction>;

        #[unsafe(method(repeatActionForever:))]
        #[unsafe(method_family = none)]
        pub unsafe fn repeatActionForever(action: &SCNAction) -> Retained<SCNAction>;

        #[unsafe(method(fadeInWithDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn fadeInWithDuration(sec: NSTimeInterval) -> Retained<SCNAction>;

        #[unsafe(method(fadeOutWithDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn fadeOutWithDuration(sec: NSTimeInterval) -> Retained<SCNAction>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(fadeOpacityBy:duration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn fadeOpacityBy_duration(
            factor: CGFloat,
            sec: NSTimeInterval,
        ) -> Retained<SCNAction>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(fadeOpacityTo:duration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn fadeOpacityTo_duration(
            opacity: CGFloat,
            sec: NSTimeInterval,
        ) -> Retained<SCNAction>;

        #[unsafe(method(hide))]
        #[unsafe(method_family = none)]
        pub unsafe fn hide() -> Retained<SCNAction>;

        #[unsafe(method(unhide))]
        #[unsafe(method_family = none)]
        pub unsafe fn unhide() -> Retained<SCNAction>;

        #[unsafe(method(waitForDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn waitForDuration(sec: NSTimeInterval) -> Retained<SCNAction>;

        #[unsafe(method(waitForDuration:withRange:))]
        #[unsafe(method_family = none)]
        pub unsafe fn waitForDuration_withRange(
            sec: NSTimeInterval,
            duration_range: NSTimeInterval,
        ) -> Retained<SCNAction>;

        #[unsafe(method(removeFromParentNode))]
        #[unsafe(method_family = none)]
        pub unsafe fn removeFromParentNode() -> Retained<SCNAction>;

        #[cfg(all(feature = "SCNNode", feature = "block2"))]
        /// # Safety
        ///
        /// `block` block must be sendable.
        #[unsafe(method(runBlock:))]
        #[unsafe(method_family = none)]
        pub unsafe fn runBlock(
            block: &block2::DynBlock<dyn Fn(NonNull<SCNNode>)>,
        ) -> Retained<SCNAction>;

        #[cfg(all(feature = "SCNNode", feature = "block2", feature = "dispatch2"))]
        /// # Safety
        ///
        /// - `block` block must be sendable.
        /// - `queue` possibly has additional threading requirements.
        #[unsafe(method(runBlock:queue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn runBlock_queue(
            block: &block2::DynBlock<dyn Fn(NonNull<SCNNode>)>,
            queue: &DispatchQueue,
        ) -> Retained<SCNAction>;

        #[unsafe(method(javaScriptActionWithScript:duration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn javaScriptActionWithScript_duration(
            script: &NSString,
            seconds: NSTimeInterval,
        ) -> Retained<SCNAction>;

        #[cfg(all(
            feature = "SCNNode",
            feature = "block2",
            feature = "objc2-core-foundation"
        ))]
        /// # Safety
        ///
        /// `block` block must be sendable.
        #[unsafe(method(customActionWithDuration:actionBlock:))]
        #[unsafe(method_family = none)]
        pub unsafe fn customActionWithDuration_actionBlock(
            seconds: NSTimeInterval,
            block: &block2::DynBlock<dyn Fn(NonNull<SCNNode>, CGFloat)>,
        ) -> Retained<SCNAction>;

        #[cfg(feature = "SCNAudioSource")]
        /// Creates an action that plays a sound
        ///
        /// Parameter `source`: The audio source to play (see SCNAudioSource.h)
        ///
        /// Parameter `wait`: If YES, then the duration of this action is the same
        /// as the length of the audio playback. If NO, the action is considered
        /// to have completed immediately.
        #[unsafe(method(playAudioSource:waitForCompletion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn playAudioSource_waitForCompletion(
            source: &SCNAudioSource,
            wait: bool,
        ) -> Retained<SCNAction>;
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNAction {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
