//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-metal")]
#[cfg(not(target_os = "watchos"))]
use objc2_metal::*;

use crate::*;

/// Filtering modes
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnfiltermode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNFilterMode(pub NSInteger);
impl SCNFilterMode {
    #[doc(alias = "SCNFilterModeNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "SCNFilterModeNearest")]
    pub const Nearest: Self = Self(1);
    #[doc(alias = "SCNFilterModeLinear")]
    pub const Linear: Self = Self(2);
}

unsafe impl Encode for SCNFilterMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNFilterMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Wrap modes
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnwrapmode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNWrapMode(pub NSInteger);
impl SCNWrapMode {
    #[doc(alias = "SCNWrapModeClamp")]
    pub const Clamp: Self = Self(1);
    #[doc(alias = "SCNWrapModeRepeat")]
    pub const Repeat: Self = Self(2);
    #[doc(alias = "SCNWrapModeClampToBorder")]
    pub const ClampToBorder: Self = Self(3);
    #[doc(alias = "SCNWrapModeMirror")]
    pub const Mirror: Self = Self(4);
}

unsafe impl Encode for SCNWrapMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNWrapMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// The contents of a SCNMaterial slot
    ///
    /// This can be used to specify the various properties of SCNMaterial slots such as diffuse, ambient, etc.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnmaterialproperty?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNMaterialProperty;
);

extern_conformance!(
    unsafe impl NSCoding for SCNMaterialProperty {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for SCNMaterialProperty {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SCNMaterialProperty {}
);

#[cfg(feature = "SCNAnimation")]
extern_conformance!(
    unsafe impl SCNAnimatable for SCNMaterialProperty {}
);

impl SCNMaterialProperty {
    extern_methods!(
        /// Creates and initialize a property instance with the specified contents.
        ///
        /// # Safety
        ///
        /// `contents` should be of the correct type.
        #[unsafe(method(materialPropertyWithContents:))]
        #[unsafe(method_family = none)]
        pub unsafe fn materialPropertyWithContents(contents: &AnyObject) -> Retained<Self>;

        /// Specifies the receiver's contents. This can be a color (NSColor, UIColor, CGColorRef), an image (NSImage, UIImage, CGImageRef), a layer (CALayer), a path (NSString or NSURL), a SpriteKit scene (SKScene), a texture (SKTexture, id
        /// <MTLTexture
        /// > or GLKTextureInfo), or a floating value between 0 and 1 (NSNumber) for metalness and roughness properties. AVCaptureDevice is supported on iOS 11 and AVPlayer is supported on macOS 10.13, iOS 11 and tvOS 11. Animatable when set to a color.
        ///
        /// Setting the contents to an instance of SKTexture will automatically update the wrapS, wrapT, contentsTransform, minification, magnification and mip filters according to the SKTexture settings.
        /// When a cube map is expected (e.g. SCNMaterial.reflective, SCNScene.background, SCNScene.lightingEnvironment) you can use
        /// 1. A horizontal strip image                          where `6 * image.height ==     image.width`
        /// 2. A vertical strip image                            where `    image.height == 6 * image.width`
        /// 3. A spherical projection image (latitude/longitude) where `2 * image.height ==     image.width`
        /// 4. A NSArray of 6 images. This array must contain images of the exact same dimensions, in the following order, in a left-handed coordinate system: +X, -X, +Y, -Y, +Z, -Z (or Right, Left, Top, Bottom, Front, Back).
        #[unsafe(method(contents))]
        #[unsafe(method_family = none)]
        pub unsafe fn contents(&self) -> Option<Retained<AnyObject>>;

        /// Setter for [`contents`][Self::contents].
        ///
        /// # Safety
        ///
        /// `contents` should be of the correct type.
        #[unsafe(method(setContents:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setContents(&self, contents: Option<&AnyObject>);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the receiver's intensity. This intensity is used to modulate the properties in several ways.
        /// It dims the diffuse, specular and emission properties, it varies the bumpiness of the normal property and the
        /// filter property is blended with white. Default value is 1.0. Animatable.
        #[unsafe(method(intensity))]
        #[unsafe(method_family = none)]
        pub unsafe fn intensity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`intensity`][Self::intensity].
        #[unsafe(method(setIntensity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setIntensity(&self, intensity: CGFloat);

        /// Specifies the filter type to use when rendering the contents (specified in the `contents' property).
        ///
        /// The minification filter is used when to reduce the size of image data. See above the list of available modes. Defaults to SCNFilterModeLinear.
        #[unsafe(method(minificationFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn minificationFilter(&self) -> SCNFilterMode;

        /// Setter for [`minificationFilter`][Self::minificationFilter].
        #[unsafe(method(setMinificationFilter:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMinificationFilter(&self, minification_filter: SCNFilterMode);

        /// Specifies the filter type to use when rendering the the contents (specified in the `contents' property).
        ///
        /// The magnification filter is used when to increase the size of image data. See above the list of available modes. Defaults to SCNFilterModeLinear.
        #[unsafe(method(magnificationFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn magnificationFilter(&self) -> SCNFilterMode;

        /// Setter for [`magnificationFilter`][Self::magnificationFilter].
        #[unsafe(method(setMagnificationFilter:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMagnificationFilter(&self, magnification_filter: SCNFilterMode);

        /// Specifies the mipmap filter to use during minification.
        ///
        /// Defaults to SCNFilterModeNearest starting macOS 10.12, iOS 10, tvOS 10 and watchOS 3. Defaults to SCNFilterModeNone in previous versions.
        #[unsafe(method(mipFilter))]
        #[unsafe(method_family = none)]
        pub unsafe fn mipFilter(&self) -> SCNFilterMode;

        /// Setter for [`mipFilter`][Self::mipFilter].
        #[unsafe(method(setMipFilter:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMipFilter(&self, mip_filter: SCNFilterMode);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
        #[cfg(not(target_os = "watchos"))]
        /// Determines the receiver's contents transform. Animatable.
        #[unsafe(method(contentsTransform))]
        #[unsafe(method_family = none)]
        pub unsafe fn contentsTransform(&self) -> SCNMatrix4;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
        #[cfg(not(target_os = "watchos"))]
        /// Setter for [`contentsTransform`][Self::contentsTransform].
        #[unsafe(method(setContentsTransform:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setContentsTransform(&self, contents_transform: SCNMatrix4);

        /// Determines the receiver's wrap mode for the s texture coordinate. Defaults to SCNWrapModeClamp.
        #[unsafe(method(wrapS))]
        #[unsafe(method_family = none)]
        pub unsafe fn wrapS(&self) -> SCNWrapMode;

        /// Setter for [`wrapS`][Self::wrapS].
        #[unsafe(method(setWrapS:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWrapS(&self, wrap_s: SCNWrapMode);

        /// Determines the receiver's wrap mode for the t texture coordinate. Defaults to SCNWrapModeClamp.
        #[unsafe(method(wrapT))]
        #[unsafe(method_family = none)]
        pub unsafe fn wrapT(&self) -> SCNWrapMode;

        /// Setter for [`wrapT`][Self::wrapT].
        #[unsafe(method(setWrapT:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWrapT(&self, wrap_t: SCNWrapMode);

        /// Determines the receiver's mapping channel. Defaults to 0.
        ///
        /// Geometries potentially have multiple sources of texture coordinates. Every source has a unique mapping channel index. The mapping channel allows to select which source of texture coordinates is used to map the content of the receiver.
        #[unsafe(method(mappingChannel))]
        #[unsafe(method_family = none)]
        pub unsafe fn mappingChannel(&self) -> NSInteger;

        /// Setter for [`mappingChannel`][Self::mappingChannel].
        #[unsafe(method(setMappingChannel:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMappingChannel(&self, mapping_channel: NSInteger);

        #[cfg(feature = "SceneKitTypes")]
        /// Specifies the texture components to sample in the shader. Defaults to SCNColorMaskRed for displacement property, and to SCNColorMaskAll for other properties.
        ///
        /// Use this property to when using a texture that combine multiple informations in the different texture components. For example if you pack the roughness in red and metalness in blue etc... You can specify what component to use from the texture for this given material property. This property is only supported by Metal renderers.
        #[unsafe(method(textureComponents))]
        #[unsafe(method_family = none)]
        pub unsafe fn textureComponents(&self) -> SCNColorMask;

        #[cfg(feature = "SceneKitTypes")]
        /// Setter for [`textureComponents`][Self::textureComponents].
        #[unsafe(method(setTextureComponents:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTextureComponents(&self, texture_components: SCNColorMask);

        #[cfg(feature = "objc2-core-foundation")]
        /// Specifies the receiver's max anisotropy. Defaults to MAXFLOAT.
        ///
        /// Anisotropic filtering reduces blur and preserves detail at extreme viewing angles.
        #[unsafe(method(maxAnisotropy))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxAnisotropy(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`maxAnisotropy`][Self::maxAnisotropy].
        #[unsafe(method(setMaxAnisotropy:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMaxAnisotropy(&self, max_anisotropy: CGFloat);

        /// Returns an object suitable for a scene's `lightingEnvironment.contents` and initialized with data that was previously created by `+precomputedLightingEnvironmentDataForContents:device:error:`.
        #[unsafe(method(precomputedLightingEnvironmentContentsWithURL:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn precomputedLightingEnvironmentContentsWithURL_error(
            url: &NSURL,
        ) -> Result<Retained<AnyObject>, Retained<NSError>>;

        /// Returns an object suitable for a scene's `lightingEnvironment.contents` and initialized with data that was previously created by `+precomputedLightingEnvironmentDataForContents:device:error:`.
        #[unsafe(method(precomputedLightingEnvironmentContentsWithData:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn precomputedLightingEnvironmentContentsWithData_error(
            data: &NSData,
        ) -> Result<Retained<AnyObject>, Retained<NSError>>;

        #[cfg(feature = "objc2-metal")]
        #[cfg(not(target_os = "watchos"))]
        /// Returns an `NSData` instance containing the result of CPU and GPU-intensive operations that is suitable for caching.
        ///
        /// This method can be leveraged in a custom offline asset pipeline, or at run time at a convenient time before the scene is presented to the user.
        ///
        /// # Safety
        ///
        /// `contents` should be of the correct type.
        #[unsafe(method(precomputedLightingEnvironmentDataForContents:device:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn precomputedLightingEnvironmentDataForContents_device_error(
            contents: &AnyObject,
            device: Option<&ProtocolObject<dyn MTLDevice>>,
        ) -> Result<Retained<NSData>, Retained<NSError>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNMaterialProperty {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
