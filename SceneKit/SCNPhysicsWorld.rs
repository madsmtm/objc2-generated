//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicstestoption?language=objc)
// NS_TYPED_ENUM
pub type SCNPhysicsTestOption = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicstestcollisionbitmaskkey?language=objc)
    pub static SCNPhysicsTestCollisionBitMaskKey: &'static SCNPhysicsTestOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicstestsearchmodekey?language=objc)
    pub static SCNPhysicsTestSearchModeKey: &'static SCNPhysicsTestOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicstestbackfacecullingkey?language=objc)
    pub static SCNPhysicsTestBackfaceCullingKey: &'static SCNPhysicsTestOption;
}

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicstestsearchmode?language=objc)
// NS_TYPED_ENUM
pub type SCNPhysicsTestSearchMode = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicstestsearchmodeany?language=objc)
    pub static SCNPhysicsTestSearchModeAny: &'static SCNPhysicsTestSearchMode;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicstestsearchmodeclosest?language=objc)
    pub static SCNPhysicsTestSearchModeClosest: &'static SCNPhysicsTestSearchMode;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicstestsearchmodeall?language=objc)
    pub static SCNPhysicsTestSearchModeAll: &'static SCNPhysicsTestSearchMode;
}

extern_protocol!(
    /// The SCNPhysicsContactDelegate protocol is to be implemented by delegates that want to be notified when a contact occured.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicscontactdelegate?language=objc)
    pub unsafe trait SCNPhysicsContactDelegate: NSObjectProtocol {
        #[cfg(feature = "SCNPhysicsContact")]
        #[optional]
        #[unsafe(method(physicsWorld:didBeginContact:))]
        #[unsafe(method_family = none)]
        unsafe fn physicsWorld_didBeginContact(
            &self,
            world: &SCNPhysicsWorld,
            contact: &SCNPhysicsContact,
        );

        #[cfg(feature = "SCNPhysicsContact")]
        #[optional]
        #[unsafe(method(physicsWorld:didUpdateContact:))]
        #[unsafe(method_family = none)]
        unsafe fn physicsWorld_didUpdateContact(
            &self,
            world: &SCNPhysicsWorld,
            contact: &SCNPhysicsContact,
        );

        #[cfg(feature = "SCNPhysicsContact")]
        #[optional]
        #[unsafe(method(physicsWorld:didEndContact:))]
        #[unsafe(method_family = none)]
        unsafe fn physicsWorld_didEndContact(
            &self,
            world: &SCNPhysicsWorld,
            contact: &SCNPhysicsContact,
        );
    }
);

extern_class!(
    /// The SCNPhysicsWorld class describes and allows to control the physics simulation of a 3d scene.
    ///
    /// The SCNPhysicsWorld class should not be allocated directly but retrieved from the SCNScene class using the physicsWorld property.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnphysicsworld?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNPhysicsWorld;
);

extern_conformance!(
    unsafe impl NSCoding for SCNPhysicsWorld {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for SCNPhysicsWorld {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SCNPhysicsWorld {}
);

impl SCNPhysicsWorld {
    extern_methods!(
        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        #[unsafe(method(gravity))]
        #[unsafe(method_family = none)]
        pub unsafe fn gravity(&self) -> SCNVector3;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
        /// Setter for [`gravity`][Self::gravity].
        #[unsafe(method(setGravity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setGravity(&self, gravity: SCNVector3);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(speed))]
        #[unsafe(method_family = none)]
        pub unsafe fn speed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`speed`][Self::speed].
        #[unsafe(method(setSpeed:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSpeed(&self, speed: CGFloat);

        #[unsafe(method(timeStep))]
        #[unsafe(method_family = none)]
        pub unsafe fn timeStep(&self) -> NSTimeInterval;

        /// Setter for [`timeStep`][Self::timeStep].
        #[unsafe(method(setTimeStep:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTimeStep(&self, time_step: NSTimeInterval);

        #[unsafe(method(contactDelegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn contactDelegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn SCNPhysicsContactDelegate>>>;

        /// Setter for [`contactDelegate`][Self::contactDelegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        #[unsafe(method(setContactDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setContactDelegate(
            &self,
            contact_delegate: Option<&ProtocolObject<dyn SCNPhysicsContactDelegate>>,
        );

        #[cfg(feature = "SCNPhysicsBehavior")]
        #[unsafe(method(addBehavior:))]
        #[unsafe(method_family = none)]
        pub unsafe fn addBehavior(&self, behavior: &SCNPhysicsBehavior);

        #[cfg(feature = "SCNPhysicsBehavior")]
        #[unsafe(method(removeBehavior:))]
        #[unsafe(method_family = none)]
        pub unsafe fn removeBehavior(&self, behavior: &SCNPhysicsBehavior);

        #[unsafe(method(removeAllBehaviors))]
        #[unsafe(method_family = none)]
        pub unsafe fn removeAllBehaviors(&self);

        #[cfg(feature = "SCNPhysicsBehavior")]
        #[unsafe(method(allBehaviors))]
        #[unsafe(method_family = none)]
        pub unsafe fn allBehaviors(&self) -> Retained<NSArray<SCNPhysicsBehavior>>;

        #[cfg(all(
            feature = "SCNHitTest",
            feature = "SceneKitTypes",
            feature = "objc2-core-foundation"
        ))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(rayTestWithSegmentFromPoint:toPoint:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn rayTestWithSegmentFromPoint_toPoint_options(
            &self,
            origin: SCNVector3,
            dest: SCNVector3,
            options: Option<&NSDictionary<SCNPhysicsTestOption, AnyObject>>,
        ) -> Retained<NSArray<SCNHitTestResult>>;

        #[cfg(all(feature = "SCNPhysicsBody", feature = "SCNPhysicsContact"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(contactTestBetweenBody:andBody:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn contactTestBetweenBody_andBody_options(
            &self,
            body_a: &SCNPhysicsBody,
            body_b: &SCNPhysicsBody,
            options: Option<&NSDictionary<SCNPhysicsTestOption, AnyObject>>,
        ) -> Retained<NSArray<SCNPhysicsContact>>;

        #[cfg(all(feature = "SCNPhysicsBody", feature = "SCNPhysicsContact"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(contactTestWithBody:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn contactTestWithBody_options(
            &self,
            body: &SCNPhysicsBody,
            options: Option<&NSDictionary<SCNPhysicsTestOption, AnyObject>>,
        ) -> Retained<NSArray<SCNPhysicsContact>>;

        #[cfg(all(
            feature = "SCNPhysicsContact",
            feature = "SCNPhysicsShape",
            feature = "SceneKitTypes",
            feature = "objc2-quartz-core"
        ))]
        #[cfg(not(target_os = "watchos"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(convexSweepTestWithShape:fromTransform:toTransform:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn convexSweepTestWithShape_fromTransform_toTransform_options(
            &self,
            shape: &SCNPhysicsShape,
            from: SCNMatrix4,
            to: SCNMatrix4,
            options: Option<&NSDictionary<SCNPhysicsTestOption, AnyObject>>,
        ) -> Retained<NSArray<SCNPhysicsContact>>;

        #[unsafe(method(updateCollisionPairs))]
        #[unsafe(method_family = none)]
        pub unsafe fn updateCollisionPairs(&self);
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNPhysicsWorld {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
