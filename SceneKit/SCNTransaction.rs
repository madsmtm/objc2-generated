//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
use objc2_quartz_core::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scntransaction?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNTransaction;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for SCNTransaction {}
);

impl SCNTransaction {
    extern_methods!(
        #[unsafe(method(begin))]
        #[unsafe(method_family = none)]
        pub unsafe fn begin();

        #[unsafe(method(commit))]
        #[unsafe(method_family = none)]
        pub unsafe fn commit();

        #[unsafe(method(flush))]
        #[unsafe(method_family = none)]
        pub unsafe fn flush();

        #[unsafe(method(lock))]
        #[unsafe(method_family = none)]
        pub unsafe fn lock();

        #[unsafe(method(unlock))]
        #[unsafe(method_family = none)]
        pub unsafe fn unlock();

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(animationDuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn animationDuration() -> CFTimeInterval;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`animationDuration`][Self::animationDuration].
        #[unsafe(method(setAnimationDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAnimationDuration(animation_duration: CFTimeInterval);

        #[cfg(feature = "objc2-quartz-core")]
        #[cfg(not(target_os = "watchos"))]
        #[unsafe(method(animationTimingFunction))]
        #[unsafe(method_family = none)]
        pub unsafe fn animationTimingFunction() -> Option<Retained<CAMediaTimingFunction>>;

        #[cfg(feature = "objc2-quartz-core")]
        #[cfg(not(target_os = "watchos"))]
        /// Setter for [`animationTimingFunction`][Self::animationTimingFunction].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setAnimationTimingFunction:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAnimationTimingFunction(
            animation_timing_function: Option<&CAMediaTimingFunction>,
        );

        #[unsafe(method(disableActions))]
        #[unsafe(method_family = none)]
        pub unsafe fn disableActions() -> bool;

        /// Setter for [`disableActions`][Self::disableActions].
        #[unsafe(method(setDisableActions:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDisableActions(disable_actions: bool);

        #[cfg(feature = "block2")]
        #[unsafe(method(completionBlock))]
        #[unsafe(method_family = none)]
        pub unsafe fn completionBlock() -> *mut block2::DynBlock<dyn Fn()>;

        #[cfg(feature = "block2")]
        /// Setter for [`completionBlock`][Self::completionBlock].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setCompletionBlock:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCompletionBlock(completion_block: Option<&block2::DynBlock<dyn Fn()>>);

        #[unsafe(method(valueForKey:))]
        #[unsafe(method_family = none)]
        pub unsafe fn valueForKey(key: &NSString) -> Option<Retained<AnyObject>>;

        /// # Safety
        ///
        /// `value` should be of the correct type.
        #[unsafe(method(setValue:forKey:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setValue_forKey(value: Option<&AnyObject>, key: &NSString);
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNTransaction {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
