//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scncameraprojectiondirection?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNCameraProjectionDirection(pub NSInteger);
impl SCNCameraProjectionDirection {
    #[doc(alias = "SCNCameraProjectionDirectionVertical")]
    pub const Vertical: Self = Self(0);
    #[doc(alias = "SCNCameraProjectionDirectionHorizontal")]
    pub const Horizontal: Self = Self(1);
}

unsafe impl Encode for SCNCameraProjectionDirection {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNCameraProjectionDirection {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// SCNCamera represents a camera that can be attached to a SCNNode.
    ///
    /// A node with a camera can be used as a point of view to visualize a 3D scene.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scncamera?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNCamera;
);

extern_conformance!(
    unsafe impl NSCoding for SCNCamera {}
);

extern_conformance!(
    unsafe impl NSCopying for SCNCamera {}
);

unsafe impl CopyingHelper for SCNCamera {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for SCNCamera {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SCNCamera {}
);

#[cfg(feature = "SCNAnimation")]
extern_conformance!(
    unsafe impl SCNAnimatable for SCNCamera {}
);

#[cfg(feature = "SCNTechnique")]
extern_conformance!(
    unsafe impl SCNTechniqueSupport for SCNCamera {}
);

impl SCNCamera {
    extern_methods!(
        /// Creates and returns a camera instance.
        #[unsafe(method(camera))]
        #[unsafe(method_family = none)]
        pub unsafe fn camera() -> Retained<Self>;

        /// Determines the name of the receiver.
        #[unsafe(method(name))]
        #[unsafe(method_family = none)]
        pub unsafe fn name(&self) -> Option<Retained<NSString>>;

        /// Setter for [`name`][Self::name].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setName(&self, name: Option<&NSString>);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the receiver's field of view (in degree). Defaults to 60Â°. Animatable.
        ///
        /// The fieldOfView is automatically updated when the sensorHeight or focalLength are set. Setting the fieldOfView will update the focalLength according to the new fieldOfView and the current sensorHeight.
        #[unsafe(method(fieldOfView))]
        #[unsafe(method_family = none)]
        pub unsafe fn fieldOfView(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`fieldOfView`][Self::fieldOfView].
        #[unsafe(method(setFieldOfView:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFieldOfView(&self, field_of_view: CGFloat);

        /// Determines whether the fieldOfView (or orthographicScale) is vertical or horizontal. Defaults to vertical.
        #[unsafe(method(projectionDirection))]
        #[unsafe(method_family = none)]
        pub unsafe fn projectionDirection(&self) -> SCNCameraProjectionDirection;

        /// Setter for [`projectionDirection`][Self::projectionDirection].
        #[unsafe(method(setProjectionDirection:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setProjectionDirection(
            &self,
            projection_direction: SCNCameraProjectionDirection,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the receiver's focal length in millimeter. Defaults to 50mm. Animatable.
        ///
        /// The focalLength is automatically updated when the sensorHeight or fieldOfView are set. Setting the focalLength will update the fieldOfView according to the new focalLength and the current sensorHeight.
        #[unsafe(method(focalLength))]
        #[unsafe(method_family = none)]
        pub unsafe fn focalLength(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`focalLength`][Self::focalLength].
        #[unsafe(method(setFocalLength:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFocalLength(&self, focal_length: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the vertical size of the sensor in millimeter. Defaults to 24mm. Animatable.
        ///
        /// Setting the sensorHeight will automatically update the fieldOfView according to the new sensorHeight and the current focalLength.
        #[unsafe(method(sensorHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn sensorHeight(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`sensorHeight`][Self::sensorHeight].
        #[unsafe(method(setSensorHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSensorHeight(&self, sensor_height: CGFloat);

        /// Determines the receiver's near value. Animatable.
        ///
        /// The near value determines the minimal distance between the camera and a visible surface. If a surface is closer to the camera than this minimal distance, then the surface is clipped. The near value must be different than zero. Defaults to 1.
        #[unsafe(method(zNear))]
        #[unsafe(method_family = none)]
        pub unsafe fn zNear(&self) -> c_double;

        /// Setter for [`zNear`][Self::zNear].
        #[unsafe(method(setZNear:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setZNear(&self, z_near: c_double);

        /// Determines the receiver's far value. Animatable.
        ///
        /// The far value determines the maximal distance between the camera and a visible surface. If a surface is further from the camera than this maximal distance, then the surface is clipped. Defaults to 100.
        #[unsafe(method(zFar))]
        #[unsafe(method_family = none)]
        pub unsafe fn zFar(&self) -> c_double;

        /// Setter for [`zFar`][Self::zFar].
        #[unsafe(method(setZFar:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setZFar(&self, z_far: c_double);

        /// Determines whether the receiver automatically adjusts the zFar value. Defaults to NO.
        ///
        /// When set to YES, the near and far planes are automatically set to fit the bounding box of the entire scene at render time.
        #[unsafe(method(automaticallyAdjustsZRange))]
        #[unsafe(method_family = none)]
        pub unsafe fn automaticallyAdjustsZRange(&self) -> bool;

        /// Setter for [`automaticallyAdjustsZRange`][Self::automaticallyAdjustsZRange].
        #[unsafe(method(setAutomaticallyAdjustsZRange:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAutomaticallyAdjustsZRange(&self, automatically_adjusts_z_range: bool);

        /// Determines whether the receiver uses an orthographic projection or not. Defaults to NO.
        #[unsafe(method(usesOrthographicProjection))]
        #[unsafe(method_family = none)]
        pub unsafe fn usesOrthographicProjection(&self) -> bool;

        /// Setter for [`usesOrthographicProjection`][Self::usesOrthographicProjection].
        #[unsafe(method(setUsesOrthographicProjection:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setUsesOrthographicProjection(&self, uses_orthographic_projection: bool);

        /// Determines the receiver's orthographic scale value. Animatable. Defaults to 1.
        ///
        /// This setting determines the size of the camera's visible area. This is only enabled when usesOrthographicProjection is set to YES.
        #[unsafe(method(orthographicScale))]
        #[unsafe(method_family = none)]
        pub unsafe fn orthographicScale(&self) -> c_double;

        /// Setter for [`orthographicScale`][Self::orthographicScale].
        #[unsafe(method(setOrthographicScale:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOrthographicScale(&self, orthographic_scale: c_double);

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
        #[cfg(not(target_os = "watchos"))]
        /// Determines the projection transform used by the camera to project the world onscreen.
        #[unsafe(method(projectionTransform))]
        #[unsafe(method_family = none)]
        pub unsafe fn projectionTransform(&self) -> SCNMatrix4;

        #[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
        #[cfg(not(target_os = "watchos"))]
        /// Setter for [`projectionTransform`][Self::projectionTransform].
        #[unsafe(method(setProjectionTransform:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setProjectionTransform(&self, projection_transform: SCNMatrix4);

        #[cfg(all(
            feature = "SceneKitTypes",
            feature = "objc2-core-foundation",
            feature = "objc2-quartz-core"
        ))]
        #[cfg(not(target_os = "watchos"))]
        #[unsafe(method(projectionTransformWithViewportSize:))]
        #[unsafe(method_family = none)]
        pub unsafe fn projectionTransformWithViewportSize(
            &self,
            viewport_size: CGSize,
        ) -> SCNMatrix4;

        /// Determines if the receiver has depth of field. Defaults to NO.
        #[unsafe(method(wantsDepthOfField))]
        #[unsafe(method_family = none)]
        pub unsafe fn wantsDepthOfField(&self) -> bool;

        /// Setter for [`wantsDepthOfField`][Self::wantsDepthOfField].
        #[unsafe(method(setWantsDepthOfField:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWantsDepthOfField(&self, wants_depth_of_field: bool);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the receiver's focus distance. Animatable.
        ///
        /// Defaults to 2.5
        #[unsafe(method(focusDistance))]
        #[unsafe(method_family = none)]
        pub unsafe fn focusDistance(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`focusDistance`][Self::focusDistance].
        #[unsafe(method(setFocusDistance:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFocusDistance(&self, focus_distance: CGFloat);

        /// Determines the receiver's sample count for depth of field effect.
        ///
        /// Defaults to 25.
        #[unsafe(method(focalBlurSampleCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn focalBlurSampleCount(&self) -> NSInteger;

        /// Setter for [`focalBlurSampleCount`][Self::focalBlurSampleCount].
        #[unsafe(method(setFocalBlurSampleCount:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFocalBlurSampleCount(&self, focal_blur_sample_count: NSInteger);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the receiver's fstop. Animatable.
        ///
        /// Defaults to 5.6.
        #[unsafe(method(fStop))]
        #[unsafe(method_family = none)]
        pub unsafe fn fStop(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`fStop`][Self::fStop].
        #[unsafe(method(setFStop:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFStop(&self, f_stop: CGFloat);

        /// Determines the receiver's blade count of the aperture.
        ///
        /// Defaults to 6.
        #[unsafe(method(apertureBladeCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn apertureBladeCount(&self) -> NSInteger;

        /// Setter for [`apertureBladeCount`][Self::apertureBladeCount].
        #[unsafe(method(setApertureBladeCount:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setApertureBladeCount(&self, aperture_blade_count: NSInteger);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the intensity of the motion blur. Animatable. Defaults to 0.
        ///
        /// An intensity of zero means no motion blur. The intensity should not exceeed 1.
        #[unsafe(method(motionBlurIntensity))]
        #[unsafe(method_family = none)]
        pub unsafe fn motionBlurIntensity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`motionBlurIntensity`][Self::motionBlurIntensity].
        #[unsafe(method(setMotionBlurIntensity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMotionBlurIntensity(&self, motion_blur_intensity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the intensity of the screen space ambient occlusion. Animatable.
        ///
        /// defaults to 0.
        #[unsafe(method(screenSpaceAmbientOcclusionIntensity))]
        #[unsafe(method_family = none)]
        pub unsafe fn screenSpaceAmbientOcclusionIntensity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`screenSpaceAmbientOcclusionIntensity`][Self::screenSpaceAmbientOcclusionIntensity].
        #[unsafe(method(setScreenSpaceAmbientOcclusionIntensity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setScreenSpaceAmbientOcclusionIntensity(
            &self,
            screen_space_ambient_occlusion_intensity: CGFloat,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the screen space ambient occlusion radius in scene unit. Animatable.
        ///
        /// defaults to 5.
        #[unsafe(method(screenSpaceAmbientOcclusionRadius))]
        #[unsafe(method_family = none)]
        pub unsafe fn screenSpaceAmbientOcclusionRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`screenSpaceAmbientOcclusionRadius`][Self::screenSpaceAmbientOcclusionRadius].
        #[unsafe(method(setScreenSpaceAmbientOcclusionRadius:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setScreenSpaceAmbientOcclusionRadius(
            &self,
            screen_space_ambient_occlusion_radius: CGFloat,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines self occlusion bias in scene unit.
        ///
        /// defaults to 0.03.
        #[unsafe(method(screenSpaceAmbientOcclusionBias))]
        #[unsafe(method_family = none)]
        pub unsafe fn screenSpaceAmbientOcclusionBias(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`screenSpaceAmbientOcclusionBias`][Self::screenSpaceAmbientOcclusionBias].
        #[unsafe(method(setScreenSpaceAmbientOcclusionBias:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setScreenSpaceAmbientOcclusionBias(
            &self,
            screen_space_ambient_occlusion_bias: CGFloat,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the depth blur threshold in scene unit.
        ///
        /// defaults to 0.2.
        #[unsafe(method(screenSpaceAmbientOcclusionDepthThreshold))]
        #[unsafe(method_family = none)]
        pub unsafe fn screenSpaceAmbientOcclusionDepthThreshold(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`screenSpaceAmbientOcclusionDepthThreshold`][Self::screenSpaceAmbientOcclusionDepthThreshold].
        #[unsafe(method(setScreenSpaceAmbientOcclusionDepthThreshold:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setScreenSpaceAmbientOcclusionDepthThreshold(
            &self,
            screen_space_ambient_occlusion_depth_threshold: CGFloat,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the normal blur threshold.
        ///
        /// defaults to 0.3.
        #[unsafe(method(screenSpaceAmbientOcclusionNormalThreshold))]
        #[unsafe(method_family = none)]
        pub unsafe fn screenSpaceAmbientOcclusionNormalThreshold(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`screenSpaceAmbientOcclusionNormalThreshold`][Self::screenSpaceAmbientOcclusionNormalThreshold].
        #[unsafe(method(setScreenSpaceAmbientOcclusionNormalThreshold:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setScreenSpaceAmbientOcclusionNormalThreshold(
            &self,
            screen_space_ambient_occlusion_normal_threshold: CGFloat,
        );

        /// Determines if the receiver has a high dynamic range. Defaults to NO.
        #[unsafe(method(wantsHDR))]
        #[unsafe(method_family = none)]
        pub unsafe fn wantsHDR(&self) -> bool;

        /// Setter for [`wantsHDR`][Self::wantsHDR].
        #[unsafe(method(setWantsHDR:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWantsHDR(&self, wants_hdr: bool);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the logarithmic exposure biasing, in EV. Defaults to 0.
        #[unsafe(method(exposureOffset))]
        #[unsafe(method_family = none)]
        pub unsafe fn exposureOffset(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`exposureOffset`][Self::exposureOffset].
        #[unsafe(method(setExposureOffset:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setExposureOffset(&self, exposure_offset: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the average gray level desired in the final image. Defaults to 0.18.
        #[unsafe(method(averageGray))]
        #[unsafe(method_family = none)]
        pub unsafe fn averageGray(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`averageGray`][Self::averageGray].
        #[unsafe(method(setAverageGray:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAverageGray(&self, average_gray: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the smallest luminance level that will be mapped to white in the final image. Defaults to 1.
        #[unsafe(method(whitePoint))]
        #[unsafe(method_family = none)]
        pub unsafe fn whitePoint(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`whitePoint`][Self::whitePoint].
        #[unsafe(method(setWhitePoint:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWhitePoint(&self, white_point: CGFloat);

        /// Determines if the receiver should simulate an eye and continuously adjust to luminance. Defaults to YES.
        #[unsafe(method(wantsExposureAdaptation))]
        #[unsafe(method_family = none)]
        pub unsafe fn wantsExposureAdaptation(&self) -> bool;

        /// Setter for [`wantsExposureAdaptation`][Self::wantsExposureAdaptation].
        #[unsafe(method(setWantsExposureAdaptation:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWantsExposureAdaptation(&self, wants_exposure_adaptation: bool);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the exposure adaptation speed when going from bright areas to dark areas. Defaults to 0.4.
        #[unsafe(method(exposureAdaptationBrighteningSpeedFactor))]
        #[unsafe(method_family = none)]
        pub unsafe fn exposureAdaptationBrighteningSpeedFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`exposureAdaptationBrighteningSpeedFactor`][Self::exposureAdaptationBrighteningSpeedFactor].
        #[unsafe(method(setExposureAdaptationBrighteningSpeedFactor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setExposureAdaptationBrighteningSpeedFactor(
            &self,
            exposure_adaptation_brightening_speed_factor: CGFloat,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the exposure adaptation speed when going from dark areas to bright areas. Defaults to 0.6.
        #[unsafe(method(exposureAdaptationDarkeningSpeedFactor))]
        #[unsafe(method_family = none)]
        pub unsafe fn exposureAdaptationDarkeningSpeedFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`exposureAdaptationDarkeningSpeedFactor`][Self::exposureAdaptationDarkeningSpeedFactor].
        #[unsafe(method(setExposureAdaptationDarkeningSpeedFactor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setExposureAdaptationDarkeningSpeedFactor(
            &self,
            exposure_adaptation_darkening_speed_factor: CGFloat,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the minimum exposure offset of the adaptation, in EV. Defaults to -15.
        #[unsafe(method(minimumExposure))]
        #[unsafe(method_family = none)]
        pub unsafe fn minimumExposure(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`minimumExposure`][Self::minimumExposure].
        #[unsafe(method(setMinimumExposure:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMinimumExposure(&self, minimum_exposure: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the maximum exposure offset of the adaptation, in EV. Defaults to -15.
        #[unsafe(method(maximumExposure))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumExposure(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`maximumExposure`][Self::maximumExposure].
        #[unsafe(method(setMaximumExposure:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMaximumExposure(&self, maximum_exposure: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the luminance threshold for the bloom effect. Animatable. Defaults to 1.
        #[unsafe(method(bloomThreshold))]
        #[unsafe(method_family = none)]
        pub unsafe fn bloomThreshold(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`bloomThreshold`][Self::bloomThreshold].
        #[unsafe(method(setBloomThreshold:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBloomThreshold(&self, bloom_threshold: CGFloat);

        /// Determines the number of blur iterations. Defaults to 1.
        #[unsafe(method(bloomIterationCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn bloomIterationCount(&self) -> NSInteger;

        /// Setter for [`bloomIterationCount`][Self::bloomIterationCount].
        #[unsafe(method(setBloomIterationCount:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBloomIterationCount(&self, bloom_iteration_count: NSInteger);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines how the bloom iterations are spread. Defaults to 0.
        #[unsafe(method(bloomIterationSpread))]
        #[unsafe(method_family = none)]
        pub unsafe fn bloomIterationSpread(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`bloomIterationSpread`][Self::bloomIterationSpread].
        #[unsafe(method(setBloomIterationSpread:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBloomIterationSpread(&self, bloom_iteration_spread: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the intensity of the bloom effect. Animatable. Defaults to 0 (no effect).
        #[unsafe(method(bloomIntensity))]
        #[unsafe(method_family = none)]
        pub unsafe fn bloomIntensity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`bloomIntensity`][Self::bloomIntensity].
        #[unsafe(method(setBloomIntensity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBloomIntensity(&self, bloom_intensity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Determines the radius of the bloom effect in points. Animatable. Defaults to 4.
        #[unsafe(method(bloomBlurRadius))]
        #[unsafe(method_family = none)]
        pub unsafe fn bloomBlurRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`bloomBlurRadius`][Self::bloomBlurRadius].
        #[unsafe(method(setBloomBlurRadius:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBloomBlurRadius(&self, bloom_blur_radius: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Controls the shape of the vignetting effect. Defaults to 0 (no effect).
        #[unsafe(method(vignettingPower))]
        #[unsafe(method_family = none)]
        pub unsafe fn vignettingPower(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`vignettingPower`][Self::vignettingPower].
        #[unsafe(method(setVignettingPower:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setVignettingPower(&self, vignetting_power: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Controls the intensity of the vignetting effect. Defaults to 0 (no effect).
        #[unsafe(method(vignettingIntensity))]
        #[unsafe(method_family = none)]
        pub unsafe fn vignettingIntensity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`vignettingIntensity`][Self::vignettingIntensity].
        #[unsafe(method(setVignettingIntensity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setVignettingIntensity(&self, vignetting_intensity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Controls the strength of the color shift effect. Defaults to 0 (no effect).
        #[unsafe(method(colorFringeStrength))]
        #[unsafe(method_family = none)]
        pub unsafe fn colorFringeStrength(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`colorFringeStrength`][Self::colorFringeStrength].
        #[unsafe(method(setColorFringeStrength:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setColorFringeStrength(&self, color_fringe_strength: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Controls the intensity of the color shift effect. Defaults to 1.
        #[unsafe(method(colorFringeIntensity))]
        #[unsafe(method_family = none)]
        pub unsafe fn colorFringeIntensity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`colorFringeIntensity`][Self::colorFringeIntensity].
        #[unsafe(method(setColorFringeIntensity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setColorFringeIntensity(&self, color_fringe_intensity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Controls the overall saturation of the scene. Defaults to 1 (no effect).
        #[unsafe(method(saturation))]
        #[unsafe(method_family = none)]
        pub unsafe fn saturation(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`saturation`][Self::saturation].
        #[unsafe(method(setSaturation:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSaturation(&self, saturation: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Controls the overall contrast of the scene. Defaults to 0 (no effect).
        #[unsafe(method(contrast))]
        #[unsafe(method_family = none)]
        pub unsafe fn contrast(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`contrast`][Self::contrast].
        #[unsafe(method(setContrast:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setContrast(&self, contrast: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Controls the intensity of the grain. Defaults to 0 (no effect).
        #[unsafe(method(grainIntensity))]
        #[unsafe(method_family = none)]
        pub unsafe fn grainIntensity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`grainIntensity`][Self::grainIntensity].
        #[unsafe(method(setGrainIntensity:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setGrainIntensity(&self, grain_intensity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Controls the scale of the grain. Defaults to 1.
        #[unsafe(method(grainScale))]
        #[unsafe(method_family = none)]
        pub unsafe fn grainScale(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`grainScale`][Self::grainScale].
        #[unsafe(method(setGrainScale:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setGrainScale(&self, grain_scale: CGFloat);

        /// Determines if the grain is colored or not. Defaults to NO.
        #[unsafe(method(grainIsColored))]
        #[unsafe(method_family = none)]
        pub unsafe fn grainIsColored(&self) -> bool;

        /// Setter for [`grainIsColored`][Self::grainIsColored].
        #[unsafe(method(setGrainIsColored:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setGrainIsColored(&self, grain_is_colored: bool);

        #[cfg(feature = "objc2-core-foundation")]
        /// Controls the overall white balance temperature of the scene. Defaults to 0 (no effect).
        #[unsafe(method(whiteBalanceTemperature))]
        #[unsafe(method_family = none)]
        pub unsafe fn whiteBalanceTemperature(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`whiteBalanceTemperature`][Self::whiteBalanceTemperature].
        #[unsafe(method(setWhiteBalanceTemperature:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWhiteBalanceTemperature(&self, white_balance_temperature: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Controls the overall white balance tint of the scene. Defaults to 0 (no effect).
        #[unsafe(method(whiteBalanceTint))]
        #[unsafe(method_family = none)]
        pub unsafe fn whiteBalanceTint(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`whiteBalanceTint`][Self::whiteBalanceTint].
        #[unsafe(method(setWhiteBalanceTint:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWhiteBalanceTint(&self, white_balance_tint: CGFloat);

        #[cfg(feature = "SCNMaterialProperty")]
        /// Specifies a lookup texture to apply color grading. The contents must a 2D image representing `n` slices of a unit color cube texture, arranged in an horizontal row of `n` images. For instance, a color cube of dimension 16x16x16 should be provided as an image of size 256x16.
        #[unsafe(method(colorGrading))]
        #[unsafe(method_family = none)]
        pub unsafe fn colorGrading(&self) -> Retained<SCNMaterialProperty>;

        /// Determines the node categories that are visible from the receiver. Defaults to all bits set.
        #[unsafe(method(categoryBitMask))]
        #[unsafe(method_family = none)]
        pub unsafe fn categoryBitMask(&self) -> NSUInteger;

        /// Setter for [`categoryBitMask`][Self::categoryBitMask].
        #[unsafe(method(setCategoryBitMask:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCategoryBitMask(&self, category_bit_mask: NSUInteger);
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNCamera {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
