//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// Scene source properties
    ///
    /// File contributors. The values are dictionaries populated with keys documented in the "Contributor dictionary keys" group.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceassetcontributorskey?language=objc)
    pub static SCNSceneSourceAssetContributorsKey: &'static NSString;
}

extern "C" {
    /// When the file was created. The value is a NSDate instance.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceassetcreateddatekey?language=objc)
    pub static SCNSceneSourceAssetCreatedDateKey: &'static NSString;
}

extern "C" {
    /// When the file was last modified. The value is a NSDate instance.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceassetmodifieddatekey?language=objc)
    pub static SCNSceneSourceAssetModifiedDateKey: &'static NSString;
}

extern "C" {
    /// The up axis of the file. If the file is oriented Y-up, for example, then this is the string
    /// @
    /// "0.0 1.0 0.0"
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceassetupaxiskey?language=objc)
    pub static SCNSceneSourceAssetUpAxisKey: &'static NSString;
}

extern "C" {
    /// The unit used in the file. The value is a dictionary populated with keys documented in the "Unit dictionary keys" group.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceassetunitkey?language=objc)
    pub static SCNSceneSourceAssetUnitKey: &'static NSString;
}

extern "C" {
    /// Contributor dictionary keys
    ///
    /// Authoring tool used to create the file. The corresponding value is an NSString.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceassetauthoringtoolkey?language=objc)
    pub static SCNSceneSourceAssetAuthoringToolKey: &'static NSString;
}

extern "C" {
    /// The file's author. The corresponding value is an NSString.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceassetauthorkey?language=objc)
    pub static SCNSceneSourceAssetAuthorKey: &'static NSString;
}

extern "C" {
    /// Unit dictionary keys
    ///
    /// The name (NSString) of the unit
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceassetunitnamekey?language=objc)
    pub static SCNSceneSourceAssetUnitNameKey: &'static NSString;
}

extern "C" {
    /// A NSNumber encapsulating a floating-point value indicating how many meters the unit is. For example, if the name is
    /// @
    /// "centimeter", then this will be 0.01.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceassetunitmeterkey?language=objc)
    pub static SCNSceneSourceAssetUnitMeterKey: &'static NSString;
}

/// Scene loading options
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceloadingoption?language=objc)
// NS_TYPED_ENUM
pub type SCNSceneSourceLoadingOption = NSString;

extern "C" {
    /// Enable to try to guess acceptable normals for the vertices if none are given in the file
    ///
    /// Use this with a boolean value encapsulated in a NSNumber. The default value is NO.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourcecreatenormalsifabsentkey?language=objc)
    pub static SCNSceneSourceCreateNormalsIfAbsentKey: &'static SCNSceneSourceLoadingOption;
}

extern "C" {
    /// Pass YES in order to perform the document validation.
    ///
    /// This option can be set in the options dictionary of the SCNScene and SCNSceneSource loading methods.
    /// The value for this option should be a boolean NSNumber. If its boolean value is YES (the default is NO),
    /// SceneKit will attempt to check the document for consistency.
    /// If the document doesn't pass the consistency check it is then not loaded and an error is returned.
    /// This is slower, but for security reasons it should be set to YES if you are not sure the files you load are valid and have not been tampered with.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourcecheckconsistencykey?language=objc)
    pub static SCNSceneSourceCheckConsistencyKey: &'static SCNSceneSourceLoadingOption;
}

extern "C" {
    /// Pass YES to flatten the scene graph when possible.
    ///
    /// This option can be set in the options dictionary of the SCNScene and SCNSceneSource loading methods.
    /// The value for this option should be a boolean NSNumber. If its boolean value is YES (the default is NO),
    /// SceneKit will attempt to reduce the scene graph by merging the geometries.
    /// This option is suitable to preview a 3D scene efficiently and when manipulating the scene graph is not needed.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceflattenscenekey?language=objc)
    pub static SCNSceneSourceFlattenSceneKey: &'static SCNSceneSourceLoadingOption;
}

extern "C" {
    /// Pass YES in order to enable the safe mode.
    ///
    /// This option can be set in the options dictionary of the SCNScene and SCNSceneSource loading methods.
    /// The value for this option should be a boolean NSNumber. If its boolean value is YES (the default is NO),
    /// SceneKit will forbid network accesses, prevent the loading of resources from arbitrary directories, and will not execute
    /// any code present in the loaded files.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceusesafemodekey?language=objc)
    #[deprecated = "No longer supported"]
    pub static SCNSceneSourceUseSafeModeKey: &'static SCNSceneSourceLoadingOption;
}

extern "C" {
    /// Pass an array of directory URLs where SceneKit should look for resources
    ///
    /// By default, SceneKit will look for the external resources it cannot find in the parent directory of the imported file.
    /// You can add additional directories by setting an array of URLs for this key when calling sceneWithOptions:error:.
    /// This is recommended if you want to construct your scene source from a data object, not from an URL,
    /// and need to load resources whose paths are not absolute.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceassetdirectoryurlskey?language=objc)
    pub static SCNSceneSourceAssetDirectoryURLsKey: &'static SCNSceneSourceLoadingOption;
}

extern "C" {
    /// Pass YES in order to override assets URLs with the directory URLs passed via SCNSceneSourceAssetDirectoryURLsKey.
    ///
    /// By default, SceneKit will look for the external resources using the paths/urls as described in the imported file.
    /// You can force SceneKit to only search for extern resources within the directories specified by the SCNSceneSourceAssetDirectoryURLsKey key.
    /// This can be useful to load a file and its resources from a specific bundle for instance.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceoverrideasseturlskey?language=objc)
    pub static SCNSceneSourceOverrideAssetURLsKey: &'static SCNSceneSourceLoadingOption;
}

extern "C" {
    /// Pass YES to interpret the 3D format of the file in a strict way.
    ///
    /// This option defaults to NO. In this case SceneKit will try to read any additional metadata present in the file to
    /// enable additional features and make the rendering as close as possible to the original intent. If you pass YES,
    /// SceneKit will instead only consider features which are part of the file format specification.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourcestrictconformancekey?language=objc)
    pub static SCNSceneSourceStrictConformanceKey: &'static SCNSceneSourceLoadingOption;
}

extern "C" {
    /// Pass the units you want the scene to be converted to (in meter).
    ///
    /// Use this with a floating value encapsulated in a NSNumber. The default value is nil which means no conversion done. Passing a non-zero value will convert the scene coordinates so that 1 unit corresponds to N meters. For example pass 0.01 for 1 unit == 1 centimeter, pass 0.3048 for 1 unit == 1 foot...
    /// For better physics simulation it is recommended to use 1 unit equals to 1 meter.
    /// This option has no effect for SCN files or if the asset is already compressed by Xcode (use the compression options instead).
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceconvertunitstometerskey?language=objc)
    pub static SCNSceneSourceConvertUnitsToMetersKey: &'static SCNSceneSourceLoadingOption;
}

extern "C" {
    /// Pass YES if a scene should be converted to Y up if it currently has a different up axis.
    ///
    /// Use this with a boolean value encapsulated in a NSNumber. The default value is NO.
    /// This option has no effect for SCN files or if the asset is already compressed by Xcode (use the compression options instead).
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceconverttoyupkey?language=objc)
    pub static SCNSceneSourceConvertToYUpKey: &'static SCNSceneSourceLoadingOption;
}

extern "C" {
    /// Pass one of the value below to specify what to do with loaded animations.
    ///
    /// See below for the description of each individual key. Defaults to SCNSceneSourceAnimationImportPolicyPlayRepeatedly. On 10.9 and before the behavior is SCNSceneSourceAnimationImportPolicyPlayUsingSceneTimeBase. For compatibility reason if the application was built on 10.9 or before the default behavior is SCNSceneSourceAnimationImportPolicyPlayUsingSceneTimeBase.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceanimationimportpolicykey?language=objc)
    pub static SCNSceneSourceAnimationImportPolicyKey: &'static SCNSceneSourceLoadingOption;
}

extern "C" {
    /// Pass YES to make SceneKit preserve the original topology instead of triangulating at load time. This can be useful to get better results when subdividing a geometry.
    ///
    /// Defaults to YES starting macOS 10.15, iOS 13, tvOS 13 and watchOS 6. Defaults to NO in previous versions.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceloadingoptionpreserveoriginaltopology?language=objc)
    pub static SCNSceneSourceLoadingOptionPreserveOriginalTopology:
        &'static SCNSceneSourceLoadingOption;
}

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceanimationimportpolicy?language=objc)
// NS_TYPED_ENUM
pub type SCNSceneSourceAnimationImportPolicy = NSString;

extern "C" {
    /// Add animations to the scene and play them once (repeatCount set to 1).
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceanimationimportpolicyplay?language=objc)
    pub static SCNSceneSourceAnimationImportPolicyPlay:
        &'static SCNSceneSourceAnimationImportPolicy;
}

extern "C" {
    /// Add animations to the scene and play them repeatedly (repeatCount set to infinity).
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceanimationimportpolicyplayrepeatedly?language=objc)
    pub static SCNSceneSourceAnimationImportPolicyPlayRepeatedly:
        &'static SCNSceneSourceAnimationImportPolicy;
}

extern "C" {
    /// Only keep animations in the SCNSceneSource and don't add to the animatable elements of the scene.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceanimationimportpolicydonotplay?language=objc)
    pub static SCNSceneSourceAnimationImportPolicyDoNotPlay:
        &'static SCNSceneSourceAnimationImportPolicy;
}

extern "C" {
    /// Add animations to the scene and play them using the SCNView/SCNRenderer's scene time (usesSceneTimeBase set to YES)
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourceanimationimportpolicyplayusingscenetimebase?language=objc)
    pub static SCNSceneSourceAnimationImportPolicyPlayUsingSceneTimeBase:
        &'static SCNSceneSourceAnimationImportPolicy;
}

extern "C" {
    /// Key to access the detailed validation errors.
    ///
    /// This key will be present in the user info dictionary of errors created by the various sceneWithOptions: methods.
    /// When present, the value associated with it is an array of detailed errors found by the consistency checker
    /// which represent consistency errors in the 3D file. Some metadata about these detailed errors is available
    /// in their user info dictionary using the other keys (SCNConsistency*) defined in this file.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scndetailederrorskey?language=objc)
    pub static SCNDetailedErrorsKey: &'static NSString;
}

extern "C" {
    /// For XML-based formats, the ID of the element where the error occurred.
    ///
    /// When the element does not have an ID, the ID of the closest parent element which has one is returned.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnconsistencyelementiderrorkey?language=objc)
    pub static SCNConsistencyElementIDErrorKey: &'static NSString;
}

extern "C" {
    /// For XML-based formats, the tag name of the element where the error occurred.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnconsistencyelementtypeerrorkey?language=objc)
    pub static SCNConsistencyElementTypeErrorKey: &'static NSString;
}

extern "C" {
    /// For text-based formats, the line number where an error occurred.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnconsistencylinenumbererrorkey?language=objc)
    pub static SCNConsistencyLineNumberErrorKey: &'static NSString;
}

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnconsistencyinvalidurierror?language=objc)
pub const SCNConsistencyInvalidURIError: c_uint = 1000;
/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnconsistencyinvalidcounterror?language=objc)
pub const SCNConsistencyInvalidCountError: c_uint = 1001;
/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnconsistencyinvalidargumenterror?language=objc)
pub const SCNConsistencyInvalidArgumentError: c_uint = 1002;
/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnconsistencymissingelementerror?language=objc)
pub const SCNConsistencyMissingElementError: c_uint = 1003;
/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnconsistencymissingattributeerror?language=objc)
pub const SCNConsistencyMissingAttributeError: c_uint = 1004;
/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnconsistencyxmlschemavalidationerror?language=objc)
pub const SCNConsistencyXMLSchemaValidationError: c_uint = 1005;

/// Represents a phase of the loading process.
///
/// Each of these constants (except SCNSceneSourceStatusError) represents a phase of the loading process. "Parsing" means that the document is being deserialized, "validating" that it's being checked for consistency, "processing" that the resulting object is being loaded. New values might be added to this enumeration to make it more detailed; however the values will always be ordered in the same order as the corresponding phases are executed.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourcestatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SCNSceneSourceStatus(pub NSInteger);
impl SCNSceneSourceStatus {
    #[doc(alias = "SCNSceneSourceStatusError")]
    pub const Error: Self = Self(-1);
    #[doc(alias = "SCNSceneSourceStatusParsing")]
    pub const Parsing: Self = Self(4);
    #[doc(alias = "SCNSceneSourceStatusValidating")]
    pub const Validating: Self = Self(8);
    #[doc(alias = "SCNSceneSourceStatusProcessing")]
    pub const Processing: Self = Self(12);
    #[doc(alias = "SCNSceneSourceStatusComplete")]
    pub const Complete: Self = Self(16);
}

unsafe impl Encode for SCNSceneSourceStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for SCNSceneSourceStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesourcestatushandler?language=objc)
#[cfg(feature = "block2")]
pub type SCNSceneSourceStatusHandler =
    *mut block2::DynBlock<dyn Fn(c_float, SCNSceneSourceStatus, *mut NSError, NonNull<Bool>)>;

extern_class!(
    /// SCNSceneSource objects, abstract the data-reading task. A scene source can read scene data from a URL or a NSData object.
    /// After creating a SCNSceneSource object for the appropriate source, you can obtain scenes using SCNSceneSource methods.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnscenesource?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNSceneSource;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for SCNSceneSource {}
);

impl SCNSceneSource {
    extern_methods!(
        /// Creates and initialize a SCNSceneSource instance.
        ///
        /// Parameter `url`: The URL to read scenes from.
        ///
        /// Parameter `options`: An optional dictionary for future extensions.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(sceneSourceWithURL:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn sceneSourceWithURL_options(
            url: &NSURL,
            options: Option<&NSDictionary<SCNSceneSourceLoadingOption, AnyObject>>,
        ) -> Option<Retained<Self>>;

        /// Creates and initialize a SCNSceneSource instance.
        ///
        /// Parameter `data`: The scene data.
        ///
        /// Parameter `options`: An optional dictionary for future extensions.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(sceneSourceWithData:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn sceneSourceWithData_options(
            data: &NSData,
            options: Option<&NSDictionary<SCNSceneSourceLoadingOption, AnyObject>>,
        ) -> Option<Retained<Self>>;

        /// Initialize a SCNSceneSource instance from a URL.
        ///
        /// Parameter `url`: The URL to read scenes from.
        ///
        /// Parameter `options`: An optional dictionary for future extensions.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithURL:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithURL_options(
            this: Allocated<Self>,
            url: &NSURL,
            options: Option<&NSDictionary<SCNSceneSourceLoadingOption, AnyObject>>,
        ) -> Option<Retained<Self>>;

        /// Initialize a SCNSceneSource instance from a NSData object.
        ///
        /// Parameter `data`: The data to read scenes from.
        ///
        /// Parameter `options`: An optional dictionary for future extensions.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithData:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithData_options(
            this: Allocated<Self>,
            data: &NSData,
            options: Option<&NSDictionary<SCNSceneSourceLoadingOption, AnyObject>>,
        ) -> Option<Retained<Self>>;

        /// The receiver's URL (if any).
        #[unsafe(method(url))]
        #[unsafe(method_family = none)]
        pub unsafe fn url(&self) -> Option<Retained<NSURL>>;

        /// The receiver's data (if any).
        #[unsafe(method(data))]
        #[unsafe(method_family = none)]
        pub unsafe fn data(&self) -> Option<Retained<NSData>>;

        #[cfg(all(feature = "SCNScene", feature = "block2"))]
        /// Creates and initializes the scene described in the 3D file with the specified options and lets you monitor the progress.
        ///
        /// Parameter `options`: A dictionary of options. The valid keys are described in the "Scene loading options" section.
        ///
        /// Parameter `statusHandler`: This block will be called repeatedly while the scene is being loaded.
        /// - The first argument, overallProgress, is a floating-point number between 0 and 1. 0 means the loading process has just started and 1 that it is complete.
        /// - The second argument, status, tells you what the source is currently doing. It takes one of the values in the SCNSceneSourceStatus enum. New values might be added to this enum in the future.
        /// - If status == SCNSceneStatusError, then error will contain more information about the failure, and the method will return nil after having called the block. Otherwise error will be nil.
        /// - Set *stop to YES if you want the source to abort the loading operation.
        ///
        /// # Safety
        ///
        /// - `options` generic should be of the correct type.
        /// - `status_handler` must be a valid pointer or null.
        #[unsafe(method(sceneWithOptions:statusHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn sceneWithOptions_statusHandler(
            &self,
            options: Option<&NSDictionary<SCNSceneSourceLoadingOption, AnyObject>>,
            status_handler: SCNSceneSourceStatusHandler,
        ) -> Option<Retained<SCNScene>>;

        #[cfg(feature = "SCNScene")]
        /// Creates and initializes the scene described in the 3D file with the specified options.
        ///
        /// Parameter `options`: A dictionary of options. The valid keys are described in the "Scene loading options" section.
        ///
        /// Parameter `error`: If this method returns nil, an error providing more information is returned by reference.
        ///
        /// This simpler version is equivalent to providing a block to sceneWithOptions:statusHandler: and checking the "error"
        /// parameter of the block if the status is SCNSceneStatusError.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(sceneWithOptions:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn sceneWithOptions_error(
            &self,
            options: Option<&NSDictionary<SCNSceneSourceLoadingOption, AnyObject>>,
        ) -> Result<Retained<SCNScene>, Retained<NSError>>;

        /// Parameter `key`: The key for which to return the corresponding property.
        ///
        /// Returns the property as defined in the 3D file for the given key. See keys above.
        #[unsafe(method(propertyForKey:))]
        #[unsafe(method_family = none)]
        pub unsafe fn propertyForKey(&self, key: &NSString) -> Option<Retained<AnyObject>>;

        /// Returns the instance of "entryClass" found in the receiver's library with the id "uid".
        ///
        /// Parameter `uid`: The id of the entry to find as specified in the source file
        ///
        /// Parameter `entryClass`: Specifies the type of the object to be returned. It can be one of the following classes: SCNMaterial, SCNGeometry, SCNScene, SCNNode, CAAnimation, SCNLight, SCNCamera, SCNSkinner, SCNMorpher, NSImage
        ///
        /// Returns NULL if the receiver's library doesn't contains such an uid for the specified type.
        ///
        /// # Safety
        ///
        /// `entry_class` probably has further requirements.
        #[unsafe(method(entryWithIdentifier:withClass:))]
        #[unsafe(method_family = none)]
        pub unsafe fn entryWithIdentifier_withClass(
            &self,
            uid: &NSString,
            entry_class: &AnyClass,
        ) -> Option<Retained<AnyObject>>;

        /// Returns the IDs found in the receiver's library for the class "entryClass".
        ///
        /// Parameter `entryClass`: Specifies the type of the object referenced by the returned IDs. It can be one of the following classes: SCNMaterial, SCNScene, SCNGeometry, SCNNode, CAAnimation, SCNLight, SCNCamera, SCNSkinner, SCNMorpher, NSImage
        ///
        /// # Safety
        ///
        /// `entry_class` probably has further requirements.
        #[unsafe(method(identifiersOfEntriesWithClass:))]
        #[unsafe(method_family = none)]
        pub unsafe fn identifiersOfEntriesWithClass(
            &self,
            entry_class: &AnyClass,
        ) -> Retained<NSArray<NSString>>;

        #[cfg(feature = "block2")]
        /// Returns the entries in the receiver's library that pass a test in a given Block.
        ///
        /// Parameter `predicate`: The block to apply to entries in the library. The block takes three arguments: "entry" is an entry in the library, "identifier" is the ID of this entry and "stop" is a reference to a Boolean value. The block can set the value to YES to stop further processing of the library. The stop argument is an out-only argument. You should only ever set this Boolean to YES within the Block. The Block returns a Boolean value that indicates whether "entry" passed the test.
        ///
        /// The entry is an instance of one of following classes: SCNMaterial, SCNScene, SCNGeometry, SCNNode, CAAnimation, SCNLight, SCNCamera, SCNSkinner, SCNMorpher, NSImage.
        #[unsafe(method(entriesPassingTest:))]
        #[unsafe(method_family = none)]
        pub unsafe fn entriesPassingTest(
            &self,
            predicate: &block2::DynBlock<
                dyn Fn(NonNull<AnyObject>, NonNull<NSString>, NonNull<Bool>) -> Bool + '_,
            >,
        ) -> Retained<NSArray<AnyObject>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNSceneSource {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
