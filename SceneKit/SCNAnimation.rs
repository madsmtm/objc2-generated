//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-quartz-core")]
#[cfg(not(target_os = "watchos"))]
use objc2_quartz_core::*;

use crate::*;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnanimationprotocol?language=objc)
    #[doc(alias = "SCNAnimation")]
    #[name = "SCNAnimation"]
    pub unsafe trait SCNAnimationProtocol: NSObjectProtocol {}
);

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnanimationdidstartblock?language=objc)
#[cfg(feature = "block2")]
pub type SCNAnimationDidStartBlock = *mut block2::DynBlock<
    dyn Fn(NonNull<SCNAnimation>, NonNull<ProtocolObject<dyn SCNAnimatable>>),
>;

/// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnanimationdidstopblock?language=objc)
#[cfg(feature = "block2")]
pub type SCNAnimationDidStopBlock = *mut block2::DynBlock<
    dyn Fn(NonNull<SCNAnimation>, NonNull<ProtocolObject<dyn SCNAnimatable>>, Bool),
>;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scntimingfunction?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNTimingFunction;
);

extern_conformance!(
    unsafe impl NSCoding for SCNTimingFunction {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for SCNTimingFunction {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SCNTimingFunction {}
);

impl SCNTimingFunction {
    extern_methods!(
        #[cfg(feature = "SceneKitTypes")]
        #[unsafe(method(functionWithTimingMode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn functionWithTimingMode(
            timing_mode: SCNActionTimingMode,
        ) -> Retained<SCNTimingFunction>;

        #[cfg(feature = "objc2-quartz-core")]
        #[cfg(not(target_os = "watchos"))]
        #[unsafe(method(functionWithCAMediaTimingFunction:))]
        #[unsafe(method_family = none)]
        pub unsafe fn functionWithCAMediaTimingFunction(
            ca_timing_function: &CAMediaTimingFunction,
        ) -> Retained<SCNTimingFunction>;
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNTimingFunction {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_protocol!(
    /// The SCNAnimatable protocol defines an animatable property. Objects that implement this protocol can be animated through these methods.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnanimatable?language=objc)
    pub unsafe trait SCNAnimatable: NSObjectProtocol {
        /// Adds and runs an animation
        ///
        /// Parameter `animation`: Added animation.
        ///
        /// Parameter `key`: May be any string such that only one animation per unique key is added per animatable object.
        ///
        /// Only SCNAnimation (preferred), CABasicAnimation, CAKeyframeAnimation and CAAnimationGroup are supported.
        /// The animation starts playing right away. The animation is automatically removed on completion unless if removedOnCompletion is explicitly set to NO.
        ///
        /// See also: -[id
        /// <SCNAnimation
        /// > removedOnCompletion]
        #[unsafe(method(addAnimation:forKey:))]
        #[unsafe(method_family = none)]
        unsafe fn addAnimation_forKey(
            &self,
            animation: &ProtocolObject<dyn SCNAnimationProtocol>,
            key: Option<&NSString>,
        );

        /// Add an animation player.
        ///
        /// Parameter `player`: Added animation player.
        ///
        /// Parameter `key`: May be any string such that only one animation per unique key is added per animatable object.
        ///
        /// The animation player is not removed automatically on completion.
        /// The animation doesn't start playing immediatelly. Call "play" on the player to start playing it.
        ///
        /// See also: -[SCNAnimationPlayer play]
        #[unsafe(method(addAnimationPlayer:forKey:))]
        #[unsafe(method_family = none)]
        unsafe fn addAnimationPlayer_forKey(
            &self,
            player: &SCNAnimationPlayer,
            key: Option<&NSString>,
        );

        /// Remove all animations.
        #[unsafe(method(removeAllAnimations))]
        #[unsafe(method_family = none)]
        unsafe fn removeAllAnimations(&self);

        #[cfg(feature = "objc2-core-foundation")]
        /// Smoothly remove all animations.
        ///
        /// Parameter `duration`: The blend out duration used to remove the animation.
        #[unsafe(method(removeAllAnimationsWithBlendOutDuration:))]
        #[unsafe(method_family = none)]
        unsafe fn removeAllAnimationsWithBlendOutDuration(&self, duration: CGFloat);

        /// Remove the animation with the given identifier.
        ///
        /// Parameter `key`: The identifier for the animation to remove.
        #[unsafe(method(removeAnimationForKey:))]
        #[unsafe(method_family = none)]
        unsafe fn removeAnimationForKey(&self, key: &NSString);

        #[cfg(feature = "objc2-core-foundation")]
        /// Smoothly remove the animation with the given identifier.
        ///
        /// Parameter `key`: The identifier for the animation to remove.
        ///
        /// Parameter `duration`: The blend out duration used to remove the animation.
        #[unsafe(method(removeAnimationForKey:blendOutDuration:))]
        #[unsafe(method_family = none)]
        unsafe fn removeAnimationForKey_blendOutDuration(&self, key: &NSString, duration: CGFloat);

        /// Returns an array containing the keys of all animations currently attached to the receiver.
        #[unsafe(method(animationKeys))]
        #[unsafe(method_family = none)]
        unsafe fn animationKeys(&self) -> Retained<NSArray<NSString>>;

        /// Returns the animation player with the given identifier
        ///
        /// Parameter `key`: The identifier for the animation player to retrieve.
        ///
        /// This will return nil if no such animation player exists.
        #[unsafe(method(animationPlayerForKey:))]
        #[unsafe(method_family = none)]
        unsafe fn animationPlayerForKey(
            &self,
            key: &NSString,
        ) -> Option<Retained<SCNAnimationPlayer>>;

        #[cfg(feature = "objc2-core-foundation")]
        /// Smoothly remove the animation with the given identifier.
        ///
        /// Parameter `key`: The identifier for the animation to remove.
        ///
        /// Parameter `duration`: The fade out duration used to remove the animation.
        #[deprecated]
        #[unsafe(method(removeAnimationForKey:fadeOutDuration:))]
        #[unsafe(method_family = none)]
        unsafe fn removeAnimationForKey_fadeOutDuration(&self, key: &NSString, duration: CGFloat);

        #[cfg(feature = "objc2-quartz-core")]
        #[cfg(not(target_os = "watchos"))]
        /// Returns the animation with the given identifier
        ///
        /// Parameter `key`: The identifier for the animation to retrieve.
        ///
        /// This will return nil if no such animation exists.
        /// Attempting to modify any properties of the returned object will result in undefined behavior.
        #[deprecated]
        #[unsafe(method(animationForKey:))]
        #[unsafe(method_family = none)]
        unsafe fn animationForKey(&self, key: &NSString) -> Option<Retained<CAAnimation>>;

        /// Pause the animation with the given identifier.
        ///
        /// Parameter `key`: The identifier for the animation to pause.
        #[deprecated = "Use -[SCNAnimationPlayer setPaused:] instead"]
        #[unsafe(method(pauseAnimationForKey:))]
        #[unsafe(method_family = none)]
        unsafe fn pauseAnimationForKey(&self, key: &NSString);

        /// Resume the animation with the given identifier.
        ///
        /// Parameter `key`: The identifier for the animation to resume.
        #[deprecated = "Use -[SCNAnimationPlayer setPaused:] instead"]
        #[unsafe(method(resumeAnimationForKey:))]
        #[unsafe(method_family = none)]
        unsafe fn resumeAnimationForKey(&self, key: &NSString);

        #[cfg(feature = "objc2-core-foundation")]
        /// Update the animation speed of the animation with the given identifier.
        ///
        /// Parameter `speed`: The new speed of the animation.
        ///
        /// Parameter `key`: The identifier for the animation to update.
        #[deprecated = "Use -[SCNAnimationPlayer setSpeed:] instead"]
        #[unsafe(method(setSpeed:forAnimationKey:))]
        #[unsafe(method_family = none)]
        unsafe fn setSpeed_forAnimationKey(&self, speed: CGFloat, key: &NSString);

        /// Returns whether the animation for the specified identifier is paused.
        ///
        /// Parameter `key`: The identifier for the animation to query.
        #[deprecated = "Use -[SCNAnimationPlayer paused] instead"]
        #[unsafe(method(isAnimationForKeyPaused:))]
        #[unsafe(method_family = none)]
        unsafe fn isAnimationForKeyPaused(&self, key: &NSString) -> bool;
    }
);

extern_class!(
    /// SCNAnimation represents an animation that targets a specific key path.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnanimation?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNAnimation;
);

extern_conformance!(
    unsafe impl NSCoding for SCNAnimation {}
);

extern_conformance!(
    unsafe impl NSCopying for SCNAnimation {}
);

unsafe impl CopyingHelper for SCNAnimation {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for SCNAnimation {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SCNAnimation {}
);

extern_conformance!(
    unsafe impl SCNAnimationProtocol for SCNAnimation {}
);

impl SCNAnimation {
    extern_methods!(
        /// Loads and returns an animation loaded from the specified URL.
        ///
        ///
        /// Parameter `animationUrl`: The url to load.
        #[unsafe(method(animationWithContentsOfURL:))]
        #[unsafe(method_family = none)]
        pub unsafe fn animationWithContentsOfURL(animation_url: &NSURL) -> Retained<SCNAnimation>;

        /// Loads and returns the animation with the specified name in the current application bundle.
        ///
        ///
        /// Parameter `animationName`: The name of the animation to load.
        #[unsafe(method(animationNamed:))]
        #[unsafe(method_family = none)]
        pub unsafe fn animationNamed(animation_name: &NSString) -> Retained<SCNAnimation>;

        #[cfg(feature = "objc2-quartz-core")]
        #[cfg(not(target_os = "watchos"))]
        /// Returns a SCNAnimation initialized from a CAAnimation.
        ///
        ///
        /// Parameter `caAnimation`: The CAAnimation to initialize from.
        ///
        /// Only CABasicAnimation, CAKeyframeAnimation and CAAnimationGroup are currently supported.
        #[unsafe(method(animationWithCAAnimation:))]
        #[unsafe(method_family = none)]
        pub unsafe fn animationWithCAAnimation(
            ca_animation: &CAAnimation,
        ) -> Retained<SCNAnimation>;

        /// The duration of the animation in seconds. Defaults to 0.
        #[unsafe(method(duration))]
        #[unsafe(method_family = none)]
        pub unsafe fn duration(&self) -> NSTimeInterval;

        /// Setter for [`duration`][Self::duration].
        #[unsafe(method(setDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDuration(&self, duration: NSTimeInterval);

        /// The key-path describing the property to be animated for single-property animations, nil for animations targetting multiple nodes. defaults to nil.
        /// The key-path uses the KVC syntax. It's also possible to target a specific sub-node with the following syntax:
        /// /
        /// <node
        /// -name>.property1.property2.field    (field is optional,
        /// <node
        /// -name> is the name of the targeted node).
        #[unsafe(method(keyPath))]
        #[unsafe(method_family = none)]
        pub unsafe fn keyPath(&self) -> Option<Retained<NSString>>;

        /// Setter for [`keyPath`][Self::keyPath].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setKeyPath:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setKeyPath(&self, key_path: Option<&NSString>);

        /// A timing function defining the pacing of the animation. Defaults to nil indicating linear pacing.
        #[unsafe(method(timingFunction))]
        #[unsafe(method_family = none)]
        pub unsafe fn timingFunction(&self) -> Retained<SCNTimingFunction>;

        /// Setter for [`timingFunction`][Self::timingFunction].
        #[unsafe(method(setTimingFunction:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTimingFunction(&self, timing_function: &SCNTimingFunction);

        /// Determines the receiver's blend-in duration.
        ///
        /// When the blendInDuration is greater than zero, the effect of the animation progressively increase from 0% to 100% during the specified duration.
        #[unsafe(method(blendInDuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn blendInDuration(&self) -> NSTimeInterval;

        /// Setter for [`blendInDuration`][Self::blendInDuration].
        #[unsafe(method(setBlendInDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBlendInDuration(&self, blend_in_duration: NSTimeInterval);

        /// Determines the receiver's blend-out duration.
        ///
        /// When the blendOutDuration is greater than zero, the effect of the animation progressively decrease from 100% to 0% at the end of the animation duration.
        #[unsafe(method(blendOutDuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn blendOutDuration(&self) -> NSTimeInterval;

        /// Setter for [`blendOutDuration`][Self::blendOutDuration].
        #[unsafe(method(setBlendOutDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBlendOutDuration(&self, blend_out_duration: NSTimeInterval);

        /// When true, the animation is removed from the render tree once its active duration has passed. Defaults to YES.
        #[unsafe(method(isRemovedOnCompletion))]
        #[unsafe(method_family = none)]
        pub unsafe fn isRemovedOnCompletion(&self) -> bool;

        /// Setter for [`isRemovedOnCompletion`][Self::isRemovedOnCompletion].
        #[unsafe(method(setRemovedOnCompletion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRemovedOnCompletion(&self, removed_on_completion: bool);

        /// When true, the animation is applied to the model tree once its active duration has passed. Defaults to NO.
        #[unsafe(method(isAppliedOnCompletion))]
        #[unsafe(method_family = none)]
        pub unsafe fn isAppliedOnCompletion(&self) -> bool;

        /// Setter for [`isAppliedOnCompletion`][Self::isAppliedOnCompletion].
        #[unsafe(method(setAppliedOnCompletion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAppliedOnCompletion(&self, applied_on_completion: bool);

        #[cfg(feature = "objc2-core-foundation")]
        /// The repeat count of the object. May be fractional. Defaults to 0.
        #[unsafe(method(repeatCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn repeatCount(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`repeatCount`][Self::repeatCount].
        #[unsafe(method(setRepeatCount:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRepeatCount(&self, repeat_count: CGFloat);

        /// When true, the object plays backwards after playing forwards. Defaults to NO.
        #[unsafe(method(autoreverses))]
        #[unsafe(method_family = none)]
        pub unsafe fn autoreverses(&self) -> bool;

        /// Setter for [`autoreverses`][Self::autoreverses].
        #[unsafe(method(setAutoreverses:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAutoreverses(&self, autoreverses: bool);

        /// The relative delay to start the animation, in relation to its parent animation if applicable. Defaults to 0.
        ///
        /// This property is bridged with CoreAnimations's beginTime. However, for top level animations, startDelay is relative to the current time (unlike CAAnimation's beginTime that is absolute). So if a CAAnimation has a non-zero beginTime, startDelay is initialized as caAnimation.beginTime - CACurrentMediaTime().
        #[unsafe(method(startDelay))]
        #[unsafe(method_family = none)]
        pub unsafe fn startDelay(&self) -> NSTimeInterval;

        /// Setter for [`startDelay`][Self::startDelay].
        #[unsafe(method(setStartDelay:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setStartDelay(&self, start_delay: NSTimeInterval);

        /// Additional offset in active local time. i.e. to convert from parent
        /// time tp to active local time t: t = (tp - begin) * speed + offset.
        /// Defaults to 0.
        #[unsafe(method(timeOffset))]
        #[unsafe(method_family = none)]
        pub unsafe fn timeOffset(&self) -> NSTimeInterval;

        /// Setter for [`timeOffset`][Self::timeOffset].
        #[unsafe(method(setTimeOffset:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTimeOffset(&self, time_offset: NSTimeInterval);

        /// When true, the animation remains active after its active duration and evaluates to its end value. Defaults to NO.
        #[unsafe(method(fillsForward))]
        #[unsafe(method_family = none)]
        pub unsafe fn fillsForward(&self) -> bool;

        /// Setter for [`fillsForward`][Self::fillsForward].
        #[unsafe(method(setFillsForward:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFillsForward(&self, fills_forward: bool);

        /// When true, the animation is active before its active duration and evaluates to its start value. Defaults to NO.
        #[unsafe(method(fillsBackward))]
        #[unsafe(method_family = none)]
        pub unsafe fn fillsBackward(&self) -> bool;

        /// Setter for [`fillsBackward`][Self::fillsBackward].
        #[unsafe(method(setFillsBackward:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFillsBackward(&self, fills_backward: bool);

        /// Determines whether the receiver is evaluated using the scene time or the system time. Defaults to NO.
        ///
        /// A scene-time based animation is evaluated using the "sceneTime" value of the renderer that renders the scene.
        /// The "sceneTime" base is typically used by players or editors that need to preview, edit and being able to change the evaluation time.
        ///
        /// See: SCNSceneSourceAnimationImportPolicyKey
        #[unsafe(method(usesSceneTimeBase))]
        #[unsafe(method_family = none)]
        pub unsafe fn usesSceneTimeBase(&self) -> bool;

        /// Setter for [`usesSceneTimeBase`][Self::usesSceneTimeBase].
        #[unsafe(method(setUsesSceneTimeBase:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setUsesSceneTimeBase(&self, uses_scene_time_base: bool);

        #[cfg(feature = "block2")]
        /// Called when the animation starts.
        #[unsafe(method(animationDidStart))]
        #[unsafe(method_family = none)]
        pub unsafe fn animationDidStart(&self) -> SCNAnimationDidStartBlock;

        #[cfg(feature = "block2")]
        /// Setter for [`animationDidStart`][Self::animationDidStart].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setAnimationDidStart:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAnimationDidStart(&self, animation_did_start: SCNAnimationDidStartBlock);

        #[cfg(feature = "block2")]
        /// Called when the animation either completes its active duration or
        /// is removed from the object it is attached to (i.e. the layer). The 'completed' argument of SCNAnimationDidStopBlock
        /// is true if the animation reached the end of its active duration without being removed.
        #[unsafe(method(animationDidStop))]
        #[unsafe(method_family = none)]
        pub unsafe fn animationDidStop(&self) -> SCNAnimationDidStopBlock;

        #[cfg(feature = "block2")]
        /// Setter for [`animationDidStop`][Self::animationDidStop].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setAnimationDidStop:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAnimationDidStop(&self, animation_did_stop: SCNAnimationDidStopBlock);

        /// Specifies the animation events attached to the receiver.
        ///
        /// See: SCNAnimationEvent
        #[unsafe(method(animationEvents))]
        #[unsafe(method_family = none)]
        pub unsafe fn animationEvents(&self) -> Option<Retained<NSArray<SCNAnimationEvent>>>;

        /// Setter for [`animationEvents`][Self::animationEvents].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setAnimationEvents:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAnimationEvents(
            &self,
            animation_events: Option<&NSArray<SCNAnimationEvent>>,
        );

        /// When true the value specified by the animation will be "added" to
        /// the current presentation value of the property to produce the new
        /// presentation value. The addition function is type-dependent, e.g.
        /// for affine transforms the two matrices are concatenated. Defaults to
        /// NO.
        #[unsafe(method(isAdditive))]
        #[unsafe(method_family = none)]
        pub unsafe fn isAdditive(&self) -> bool;

        /// Setter for [`isAdditive`][Self::isAdditive].
        #[unsafe(method(setAdditive:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAdditive(&self, additive: bool);

        /// The `cumulative' property affects how repeating animations produce
        /// their result. If true then the current value of the animation is the
        /// value at the end of the previous repeat cycle, plus the value of the
        /// current repeat cycle. If false, the value is simply the value
        /// calculated for the current repeat cycle. Defaults to NO.
        #[unsafe(method(isCumulative))]
        #[unsafe(method_family = none)]
        pub unsafe fn isCumulative(&self) -> bool;

        /// Setter for [`isCumulative`][Self::isCumulative].
        #[unsafe(method(setCumulative:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCumulative(&self, cumulative: bool);
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNAnimation {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// SCNAnimationPlayer let you control when and how to play and blend an animation
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnanimationplayer?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNAnimationPlayer;
);

extern_conformance!(
    unsafe impl NSCoding for SCNAnimationPlayer {}
);

extern_conformance!(
    unsafe impl NSCopying for SCNAnimationPlayer {}
);

unsafe impl CopyingHelper for SCNAnimationPlayer {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for SCNAnimationPlayer {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SCNAnimationPlayer {}
);

extern_conformance!(
    unsafe impl SCNAnimatable for SCNAnimationPlayer {}
);

impl SCNAnimationPlayer {
    extern_methods!(
        /// Initialize an animation player with an animation
        ///
        /// Parameter `animation`: The animation to play
        #[unsafe(method(animationPlayerWithAnimation:))]
        #[unsafe(method_family = none)]
        pub unsafe fn animationPlayerWithAnimation(
            animation: &SCNAnimation,
        ) -> Retained<SCNAnimationPlayer>;

        /// The played animation
        #[unsafe(method(animation))]
        #[unsafe(method_family = none)]
        pub unsafe fn animation(&self) -> Retained<SCNAnimation>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The speed to play the animation at. Defaults to 1.0. Animatable
        #[unsafe(method(speed))]
        #[unsafe(method_family = none)]
        pub unsafe fn speed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`speed`][Self::speed].
        #[unsafe(method(setSpeed:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSpeed(&self, speed: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        /// Controls the influence of the played animation. When set to 1 the animation is applied without any blending. When set to less than 1, the animation value is blent with the current presentation value of the animated property. Defaults to 1.0. Animatable.
        #[unsafe(method(blendFactor))]
        #[unsafe(method_family = none)]
        pub unsafe fn blendFactor(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`blendFactor`][Self::blendFactor].
        #[unsafe(method(setBlendFactor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBlendFactor(&self, blend_factor: CGFloat);

        /// Specifies if the animation is paused. Defaults to NO.
        #[unsafe(method(paused))]
        #[unsafe(method_family = none)]
        pub unsafe fn paused(&self) -> bool;

        /// Setter for [`paused`][Self::paused].
        #[unsafe(method(setPaused:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaused(&self, paused: bool);

        /// Set paused to NO and restart playing from the beginning of the animation.
        #[unsafe(method(play))]
        #[unsafe(method_family = none)]
        pub unsafe fn play(&self);

        /// Stop the animation.
        #[unsafe(method(stop))]
        #[unsafe(method_family = none)]
        pub unsafe fn stop(&self);

        /// Stop the animation and smoothly blend out the animation over the specified duration.
        #[unsafe(method(stopWithBlendOutDuration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn stopWithBlendOutDuration(&self, duration: NSTimeInterval);
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNAnimationPlayer {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

/// Signature for the block executed when the animation event is triggered.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnanimationeventblock?language=objc)
#[cfg(feature = "block2")]
pub type SCNAnimationEventBlock = *mut block2::DynBlock<
    dyn Fn(NonNull<ProtocolObject<dyn SCNAnimationProtocol>>, NonNull<AnyObject>, Bool),
>;

extern_class!(
    /// SCNAnimationEvent encapsulates a block to trigger at a specific time.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnanimationevent?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNAnimationEvent;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for SCNAnimationEvent {}
);

impl SCNAnimationEvent {
    extern_methods!(
        #[cfg(all(feature = "block2", feature = "objc2-core-foundation"))]
        /// Returns an animation event instance
        ///
        /// Parameter `time`: The relative time to trigger the event.
        ///
        /// Parameter `eventBlock`: The block to call when the event is triggered.
        ///
        /// "time" is relative to animation duration and therefor it has to be a value in the range [0,1].
        #[unsafe(method(animationEventWithKeyTime:block:))]
        #[unsafe(method_family = none)]
        pub unsafe fn animationEventWithKeyTime_block(
            time: CGFloat,
            event_block: SCNAnimationEventBlock,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNAnimationEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
