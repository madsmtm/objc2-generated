// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::unportable_markdown)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "SceneKit", kind = "framework")]
extern "C" {}

#[cfg(feature = "ModelIO")]
#[path = "ModelIO.rs"]
mod __ModelIO;
#[cfg(feature = "SCNAction")]
#[path = "SCNAction.rs"]
mod __SCNAction;
#[cfg(feature = "SCNAnimation")]
#[path = "SCNAnimation.rs"]
mod __SCNAnimation;
#[cfg(feature = "SCNAudioSource")]
#[path = "SCNAudioSource.rs"]
mod __SCNAudioSource;
#[cfg(feature = "SCNBoundingVolume")]
#[path = "SCNBoundingVolume.rs"]
mod __SCNBoundingVolume;
#[cfg(feature = "SCNCAAnimationExtensions")]
#[path = "SCNCAAnimationExtensions.rs"]
mod __SCNCAAnimationExtensions;
#[cfg(feature = "SCNCamera")]
#[path = "SCNCamera.rs"]
mod __SCNCamera;
#[cfg(feature = "SCNCameraController")]
#[path = "SCNCameraController.rs"]
mod __SCNCameraController;
#[cfg(feature = "SCNConstraint")]
#[path = "SCNConstraint.rs"]
mod __SCNConstraint;
#[cfg(feature = "SCNGeometry")]
#[path = "SCNGeometry.rs"]
mod __SCNGeometry;
#[cfg(feature = "SCNHitTest")]
#[path = "SCNHitTest.rs"]
mod __SCNHitTest;
#[cfg(feature = "SCNJavascript")]
#[path = "SCNJavascript.rs"]
mod __SCNJavascript;
#[cfg(feature = "SCNLayer")]
#[path = "SCNLayer.rs"]
mod __SCNLayer;
#[cfg(feature = "SCNLevelOfDetail")]
#[path = "SCNLevelOfDetail.rs"]
mod __SCNLevelOfDetail;
#[cfg(feature = "SCNLight")]
#[path = "SCNLight.rs"]
mod __SCNLight;
#[cfg(feature = "SCNMaterial")]
#[path = "SCNMaterial.rs"]
mod __SCNMaterial;
#[cfg(feature = "SCNMaterialProperty")]
#[path = "SCNMaterialProperty.rs"]
mod __SCNMaterialProperty;
#[cfg(feature = "SCNMorpher")]
#[path = "SCNMorpher.rs"]
mod __SCNMorpher;
#[cfg(feature = "SCNNode")]
#[path = "SCNNode.rs"]
mod __SCNNode;
#[cfg(feature = "SCNParametricGeometry")]
#[path = "SCNParametricGeometry.rs"]
mod __SCNParametricGeometry;
#[cfg(feature = "SCNParticleSystem")]
#[path = "SCNParticleSystem.rs"]
mod __SCNParticleSystem;
#[cfg(feature = "SCNPhysicsBehavior")]
#[path = "SCNPhysicsBehavior.rs"]
mod __SCNPhysicsBehavior;
#[cfg(feature = "SCNPhysicsBody")]
#[path = "SCNPhysicsBody.rs"]
mod __SCNPhysicsBody;
#[cfg(feature = "SCNPhysicsContact")]
#[path = "SCNPhysicsContact.rs"]
mod __SCNPhysicsContact;
#[cfg(feature = "SCNPhysicsField")]
#[path = "SCNPhysicsField.rs"]
mod __SCNPhysicsField;
#[cfg(feature = "SCNPhysicsShape")]
#[path = "SCNPhysicsShape.rs"]
mod __SCNPhysicsShape;
#[cfg(feature = "SCNPhysicsWorld")]
#[path = "SCNPhysicsWorld.rs"]
mod __SCNPhysicsWorld;
#[cfg(feature = "SCNReferenceNode")]
#[path = "SCNReferenceNode.rs"]
mod __SCNReferenceNode;
#[cfg(feature = "SCNRenderer")]
#[path = "SCNRenderer.rs"]
mod __SCNRenderer;
#[cfg(feature = "SCNScene")]
#[path = "SCNScene.rs"]
mod __SCNScene;
#[cfg(feature = "SCNSceneRenderer")]
#[path = "SCNSceneRenderer.rs"]
mod __SCNSceneRenderer;
#[cfg(feature = "SCNSceneSource")]
#[path = "SCNSceneSource.rs"]
mod __SCNSceneSource;
#[cfg(feature = "SCNShadable")]
#[path = "SCNShadable.rs"]
mod __SCNShadable;
#[cfg(feature = "SCNSkinner")]
#[path = "SCNSkinner.rs"]
mod __SCNSkinner;
#[cfg(feature = "SCNTechnique")]
#[path = "SCNTechnique.rs"]
mod __SCNTechnique;
#[cfg(feature = "SCNTransaction")]
#[path = "SCNTransaction.rs"]
mod __SCNTransaction;
#[cfg(feature = "SCNView")]
#[path = "SCNView.rs"]
mod __SCNView;
#[cfg(feature = "SceneKitAvailability")]
#[path = "SceneKitAvailability.rs"]
mod __SceneKitAvailability;
#[cfg(feature = "SceneKitDeprecated")]
#[path = "SceneKitDeprecated.rs"]
mod __SceneKitDeprecated;
#[cfg(feature = "SceneKitTypes")]
#[path = "SceneKitTypes.rs"]
mod __SceneKitTypes;

#[cfg(feature = "ModelIO")]
pub use self::__ModelIO::MDLAssetSCNModelIO;
#[cfg(feature = "ModelIO")]
pub use self::__ModelIO::MDLCameraSCNModelIO;
#[cfg(feature = "ModelIO")]
pub use self::__ModelIO::MDLLightSCNModelIO;
#[cfg(feature = "ModelIO")]
pub use self::__ModelIO::MDLMaterialSCNModelIO;
#[cfg(feature = "ModelIO")]
pub use self::__ModelIO::MDLMeshSCNModelIO;
#[cfg(feature = "ModelIO")]
pub use self::__ModelIO::MDLObjectSCNModelIO;
#[cfg(feature = "ModelIO")]
pub use self::__ModelIO::MDLSubmeshSCNModelIO;
#[cfg(feature = "SCNAction")]
pub use self::__SCNAction::SCNAction;
#[cfg(all(feature = "SCNAction", feature = "block2"))]
pub use self::__SCNAction::SCNActionTimingFunction;
#[cfg(feature = "SCNAction")]
pub use self::__SCNAction::SCNActionable;
#[cfg(feature = "SCNAnimation")]
pub use self::__SCNAnimation::SCNAnimatable;
#[cfg(feature = "SCNAnimation")]
pub use self::__SCNAnimation::SCNAnimation;
#[cfg(all(feature = "SCNAnimation", feature = "block2"))]
pub use self::__SCNAnimation::SCNAnimationDidStartBlock;
#[cfg(all(feature = "SCNAnimation", feature = "block2"))]
pub use self::__SCNAnimation::SCNAnimationDidStopBlock;
#[cfg(feature = "SCNAnimation")]
pub use self::__SCNAnimation::SCNAnimationEvent;
#[cfg(all(feature = "SCNAnimation", feature = "block2"))]
pub use self::__SCNAnimation::SCNAnimationEventBlock;
#[cfg(feature = "SCNAnimation")]
pub use self::__SCNAnimation::SCNAnimationPlayer;
#[cfg(feature = "SCNAnimation")]
pub use self::__SCNAnimation::SCNAnimationProtocol;
#[cfg(feature = "SCNAnimation")]
pub use self::__SCNAnimation::SCNTimingFunction;
#[cfg(feature = "SCNAudioSource")]
pub use self::__SCNAudioSource::SCNAudioPlayer;
#[cfg(feature = "SCNAudioSource")]
pub use self::__SCNAudioSource::SCNAudioSource;
#[cfg(feature = "SCNBoundingVolume")]
pub use self::__SCNBoundingVolume::SCNBoundingVolume;
#[cfg(feature = "SCNCAAnimationExtensions")]
pub use self::__SCNCAAnimationExtensions::CAAnimationSceneKitAdditions;
#[cfg(feature = "SCNCamera")]
pub use self::__SCNCamera::SCNCamera;
#[cfg(feature = "SCNCamera")]
pub use self::__SCNCamera::SCNCameraProjectionDirection;
#[cfg(feature = "SCNCameraController")]
pub use self::__SCNCameraController::SCNCameraController;
#[cfg(feature = "SCNCameraController")]
pub use self::__SCNCameraController::SCNCameraControllerDelegate;
#[cfg(feature = "SCNCameraController")]
pub use self::__SCNCameraController::SCNInteractionMode;
#[cfg(feature = "SCNConstraint")]
pub use self::__SCNConstraint::SCNAccelerationConstraint;
#[cfg(feature = "SCNConstraint")]
pub use self::__SCNConstraint::SCNAvoidOccluderConstraint;
#[cfg(feature = "SCNConstraint")]
pub use self::__SCNConstraint::SCNAvoidOccluderConstraintDelegate;
#[cfg(feature = "SCNConstraint")]
pub use self::__SCNConstraint::SCNBillboardAxis;
#[cfg(feature = "SCNConstraint")]
pub use self::__SCNConstraint::SCNBillboardConstraint;
#[cfg(feature = "SCNConstraint")]
pub use self::__SCNConstraint::SCNConstraint;
#[cfg(feature = "SCNConstraint")]
pub use self::__SCNConstraint::SCNDistanceConstraint;
#[cfg(feature = "SCNConstraint")]
pub use self::__SCNConstraint::SCNIKConstraint;
#[cfg(feature = "SCNConstraint")]
pub use self::__SCNConstraint::SCNLookAtConstraint;
#[cfg(feature = "SCNConstraint")]
pub use self::__SCNConstraint::SCNReplicatorConstraint;
#[cfg(feature = "SCNConstraint")]
pub use self::__SCNConstraint::SCNSliderConstraint;
#[cfg(feature = "SCNConstraint")]
pub use self::__SCNConstraint::SCNTransformConstraint;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometry;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometryElement;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometryPrimitiveType;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometrySource;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometrySourceSemantic;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometrySourceSemanticBoneIndices;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometrySourceSemanticBoneWeights;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometrySourceSemanticColor;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometrySourceSemanticEdgeCrease;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometrySourceSemanticNormal;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometrySourceSemanticTangent;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometrySourceSemanticTexcoord;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometrySourceSemanticVertex;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometrySourceSemanticVertexCrease;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNGeometryTessellator;
#[cfg(feature = "SCNGeometry")]
pub use self::__SCNGeometry::SCNTessellationSmoothingMode;
#[cfg(feature = "SCNHitTest")]
pub use self::__SCNHitTest::SCNHitTestBackFaceCullingKey;
#[cfg(feature = "SCNHitTest")]
pub use self::__SCNHitTest::SCNHitTestBoundingBoxOnlyKey;
#[cfg(feature = "SCNHitTest")]
pub use self::__SCNHitTest::SCNHitTestClipToZRangeKey;
#[cfg(feature = "SCNHitTest")]
pub use self::__SCNHitTest::SCNHitTestFirstFoundOnlyKey;
#[cfg(feature = "SCNHitTest")]
pub use self::__SCNHitTest::SCNHitTestIgnoreChildNodesKey;
#[cfg(feature = "SCNHitTest")]
pub use self::__SCNHitTest::SCNHitTestIgnoreHiddenNodesKey;
#[cfg(feature = "SCNHitTest")]
pub use self::__SCNHitTest::SCNHitTestOption;
#[cfg(feature = "SCNHitTest")]
pub use self::__SCNHitTest::SCNHitTestOptionCategoryBitMask;
#[cfg(feature = "SCNHitTest")]
pub use self::__SCNHitTest::SCNHitTestOptionIgnoreLightArea;
#[cfg(feature = "SCNHitTest")]
pub use self::__SCNHitTest::SCNHitTestOptionSearchMode;
#[cfg(feature = "SCNHitTest")]
pub use self::__SCNHitTest::SCNHitTestResult;
#[cfg(feature = "SCNHitTest")]
pub use self::__SCNHitTest::SCNHitTestRootNodeKey;
#[cfg(feature = "SCNHitTest")]
pub use self::__SCNHitTest::SCNHitTestSearchMode;
#[cfg(feature = "SCNHitTest")]
pub use self::__SCNHitTest::SCNHitTestSortResultsKey;
#[cfg(all(feature = "SCNJavascript", feature = "objc2-javascript-core"))]
#[cfg(not(target_os = "watchos"))]
pub use self::__SCNJavascript::SCNExportJavaScriptModule;
#[cfg(all(feature = "SCNLayer", feature = "objc2-quartz-core"))]
#[cfg(not(target_os = "watchos"))]
pub use self::__SCNLayer::SCNLayer;
#[cfg(feature = "SCNLevelOfDetail")]
pub use self::__SCNLevelOfDetail::SCNLevelOfDetail;
#[cfg(feature = "SCNLight")]
pub use self::__SCNLight::SCNLight;
#[cfg(feature = "SCNLight")]
pub use self::__SCNLight::SCNLightAreaType;
#[cfg(feature = "SCNLight")]
pub use self::__SCNLight::SCNLightProbeType;
#[cfg(feature = "SCNLight")]
pub use self::__SCNLight::SCNLightProbeUpdateType;
#[cfg(feature = "SCNLight")]
pub use self::__SCNLight::SCNLightType;
#[cfg(feature = "SCNLight")]
pub use self::__SCNLight::SCNLightTypeAmbient;
#[cfg(feature = "SCNLight")]
pub use self::__SCNLight::SCNLightTypeArea;
#[cfg(feature = "SCNLight")]
pub use self::__SCNLight::SCNLightTypeDirectional;
#[cfg(feature = "SCNLight")]
pub use self::__SCNLight::SCNLightTypeIES;
#[cfg(feature = "SCNLight")]
pub use self::__SCNLight::SCNLightTypeOmni;
#[cfg(feature = "SCNLight")]
pub use self::__SCNLight::SCNLightTypeProbe;
#[cfg(feature = "SCNLight")]
pub use self::__SCNLight::SCNLightTypeSpot;
#[cfg(feature = "SCNLight")]
pub use self::__SCNLight::SCNShadowMode;
#[cfg(feature = "SCNMaterial")]
pub use self::__SCNMaterial::SCNBlendMode;
#[cfg(feature = "SCNMaterial")]
pub use self::__SCNMaterial::SCNCullMode;
#[cfg(feature = "SCNMaterial")]
pub use self::__SCNMaterial::SCNFillMode;
#[cfg(feature = "SCNMaterial")]
pub use self::__SCNMaterial::SCNLightingModel;
#[cfg(feature = "SCNMaterial")]
pub use self::__SCNMaterial::SCNLightingModelBlinn;
#[cfg(feature = "SCNMaterial")]
pub use self::__SCNMaterial::SCNLightingModelConstant;
#[cfg(feature = "SCNMaterial")]
pub use self::__SCNMaterial::SCNLightingModelLambert;
#[cfg(feature = "SCNMaterial")]
pub use self::__SCNMaterial::SCNLightingModelPhong;
#[cfg(feature = "SCNMaterial")]
pub use self::__SCNMaterial::SCNLightingModelPhysicallyBased;
#[cfg(feature = "SCNMaterial")]
pub use self::__SCNMaterial::SCNLightingModelShadowOnly;
#[cfg(feature = "SCNMaterial")]
pub use self::__SCNMaterial::SCNMaterial;
#[cfg(feature = "SCNMaterial")]
pub use self::__SCNMaterial::SCNTransparencyMode;
#[cfg(feature = "SCNMaterialProperty")]
pub use self::__SCNMaterialProperty::SCNFilterMode;
#[cfg(feature = "SCNMaterialProperty")]
pub use self::__SCNMaterialProperty::SCNMaterialProperty;
#[cfg(feature = "SCNMaterialProperty")]
pub use self::__SCNMaterialProperty::SCNWrapMode;
#[cfg(feature = "SCNMorpher")]
pub use self::__SCNMorpher::SCNMorpher;
#[cfg(feature = "SCNMorpher")]
pub use self::__SCNMorpher::SCNMorpherCalculationMode;
#[cfg(feature = "SCNNode")]
pub use self::__SCNNode::SCNModelTransform;
#[cfg(feature = "SCNNode")]
pub use self::__SCNNode::SCNModelViewProjectionTransform;
#[cfg(feature = "SCNNode")]
pub use self::__SCNNode::SCNModelViewTransform;
#[cfg(feature = "SCNNode")]
pub use self::__SCNNode::SCNMovabilityHint;
#[cfg(feature = "SCNNode")]
pub use self::__SCNNode::SCNNode;
#[cfg(feature = "SCNNode")]
pub use self::__SCNNode::SCNNodeFocusBehavior;
#[cfg(feature = "SCNNode")]
pub use self::__SCNNode::SCNNodeRendererDelegate;
#[cfg(feature = "SCNNode")]
pub use self::__SCNNode::SCNNormalTransform;
#[cfg(feature = "SCNNode")]
pub use self::__SCNNode::SCNProjectionTransform;
#[cfg(feature = "SCNNode")]
pub use self::__SCNNode::SCNViewTransform;
#[cfg(all(feature = "SCNGeometry", feature = "SCNParametricGeometry"))]
pub use self::__SCNParametricGeometry::SCNBox;
#[cfg(all(feature = "SCNGeometry", feature = "SCNParametricGeometry"))]
pub use self::__SCNParametricGeometry::SCNCapsule;
#[cfg(feature = "SCNParametricGeometry")]
pub use self::__SCNParametricGeometry::SCNChamferMode;
#[cfg(all(feature = "SCNGeometry", feature = "SCNParametricGeometry"))]
pub use self::__SCNParametricGeometry::SCNCone;
#[cfg(all(feature = "SCNGeometry", feature = "SCNParametricGeometry"))]
pub use self::__SCNParametricGeometry::SCNCylinder;
#[cfg(all(feature = "SCNGeometry", feature = "SCNParametricGeometry"))]
pub use self::__SCNParametricGeometry::SCNFloor;
#[cfg(all(feature = "SCNGeometry", feature = "SCNParametricGeometry"))]
pub use self::__SCNParametricGeometry::SCNPlane;
#[cfg(all(feature = "SCNGeometry", feature = "SCNParametricGeometry"))]
pub use self::__SCNParametricGeometry::SCNPyramid;
#[cfg(all(feature = "SCNGeometry", feature = "SCNParametricGeometry"))]
pub use self::__SCNParametricGeometry::SCNShape;
#[cfg(all(feature = "SCNGeometry", feature = "SCNParametricGeometry"))]
pub use self::__SCNParametricGeometry::SCNSphere;
#[cfg(all(feature = "SCNGeometry", feature = "SCNParametricGeometry"))]
pub use self::__SCNParametricGeometry::SCNText;
#[cfg(all(feature = "SCNGeometry", feature = "SCNParametricGeometry"))]
pub use self::__SCNParametricGeometry::SCNTorus;
#[cfg(all(feature = "SCNGeometry", feature = "SCNParametricGeometry"))]
pub use self::__SCNParametricGeometry::SCNTube;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticleBirthDirection;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticleBirthLocation;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticleBlendMode;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticleEvent;
#[cfg(all(feature = "SCNParticleSystem", feature = "block2"))]
pub use self::__SCNParticleSystem::SCNParticleEventBlock;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticleImageSequenceAnimationMode;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticleInputMode;
#[cfg(all(feature = "SCNParticleSystem", feature = "block2"))]
pub use self::__SCNParticleSystem::SCNParticleModifierBlock;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticleModifierStage;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticleOrientationMode;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticleProperty;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyAngle;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyAngularVelocity;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyBounce;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyCharge;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyColor;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyContactNormal;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyContactPoint;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyController;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyFrame;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyFrameRate;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyFriction;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyLife;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyOpacity;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyPosition;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyRotationAxis;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertySize;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticlePropertyVelocity;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticleSortingMode;
#[cfg(feature = "SCNParticleSystem")]
pub use self::__SCNParticleSystem::SCNParticleSystem;
#[cfg(feature = "SCNPhysicsBehavior")]
pub use self::__SCNPhysicsBehavior::SCNPhysicsBallSocketJoint;
#[cfg(feature = "SCNPhysicsBehavior")]
pub use self::__SCNPhysicsBehavior::SCNPhysicsBehavior;
#[cfg(feature = "SCNPhysicsBehavior")]
pub use self::__SCNPhysicsBehavior::SCNPhysicsConeTwistJoint;
#[cfg(feature = "SCNPhysicsBehavior")]
pub use self::__SCNPhysicsBehavior::SCNPhysicsHingeJoint;
#[cfg(feature = "SCNPhysicsBehavior")]
pub use self::__SCNPhysicsBehavior::SCNPhysicsSliderJoint;
#[cfg(feature = "SCNPhysicsBehavior")]
pub use self::__SCNPhysicsBehavior::SCNPhysicsVehicle;
#[cfg(feature = "SCNPhysicsBehavior")]
pub use self::__SCNPhysicsBehavior::SCNPhysicsVehicleWheel;
#[cfg(feature = "SCNPhysicsBody")]
pub use self::__SCNPhysicsBody::SCNPhysicsBody;
#[cfg(feature = "SCNPhysicsBody")]
pub use self::__SCNPhysicsBody::SCNPhysicsBodyType;
#[cfg(feature = "SCNPhysicsBody")]
pub use self::__SCNPhysicsBody::SCNPhysicsCollisionCategory;
#[cfg(feature = "SCNPhysicsContact")]
pub use self::__SCNPhysicsContact::SCNPhysicsContact;
#[cfg(all(
    feature = "SCNPhysicsField",
    feature = "SceneKitTypes",
    feature = "block2",
    feature = "objc2-core-foundation"
))]
pub use self::__SCNPhysicsField::SCNFieldForceEvaluator;
#[cfg(feature = "SCNPhysicsField")]
pub use self::__SCNPhysicsField::SCNPhysicsField;
#[cfg(feature = "SCNPhysicsField")]
pub use self::__SCNPhysicsField::SCNPhysicsFieldScope;
#[cfg(feature = "SCNPhysicsShape")]
pub use self::__SCNPhysicsShape::SCNPhysicsShape;
#[cfg(feature = "SCNPhysicsShape")]
pub use self::__SCNPhysicsShape::SCNPhysicsShapeKeepAsCompoundKey;
#[cfg(feature = "SCNPhysicsShape")]
pub use self::__SCNPhysicsShape::SCNPhysicsShapeOption;
#[cfg(feature = "SCNPhysicsShape")]
pub use self::__SCNPhysicsShape::SCNPhysicsShapeOptionCollisionMargin;
#[cfg(feature = "SCNPhysicsShape")]
pub use self::__SCNPhysicsShape::SCNPhysicsShapeScaleKey;
#[cfg(feature = "SCNPhysicsShape")]
pub use self::__SCNPhysicsShape::SCNPhysicsShapeType;
#[cfg(feature = "SCNPhysicsShape")]
pub use self::__SCNPhysicsShape::SCNPhysicsShapeTypeBoundingBox;
#[cfg(feature = "SCNPhysicsShape")]
pub use self::__SCNPhysicsShape::SCNPhysicsShapeTypeConcavePolyhedron;
#[cfg(feature = "SCNPhysicsShape")]
pub use self::__SCNPhysicsShape::SCNPhysicsShapeTypeConvexHull;
#[cfg(feature = "SCNPhysicsShape")]
pub use self::__SCNPhysicsShape::SCNPhysicsShapeTypeKey;
#[cfg(feature = "SCNPhysicsWorld")]
pub use self::__SCNPhysicsWorld::SCNPhysicsContactDelegate;
#[cfg(feature = "SCNPhysicsWorld")]
pub use self::__SCNPhysicsWorld::SCNPhysicsTestBackfaceCullingKey;
#[cfg(feature = "SCNPhysicsWorld")]
pub use self::__SCNPhysicsWorld::SCNPhysicsTestCollisionBitMaskKey;
#[cfg(feature = "SCNPhysicsWorld")]
pub use self::__SCNPhysicsWorld::SCNPhysicsTestOption;
#[cfg(feature = "SCNPhysicsWorld")]
pub use self::__SCNPhysicsWorld::SCNPhysicsTestSearchMode;
#[cfg(feature = "SCNPhysicsWorld")]
pub use self::__SCNPhysicsWorld::SCNPhysicsTestSearchModeAll;
#[cfg(feature = "SCNPhysicsWorld")]
pub use self::__SCNPhysicsWorld::SCNPhysicsTestSearchModeAny;
#[cfg(feature = "SCNPhysicsWorld")]
pub use self::__SCNPhysicsWorld::SCNPhysicsTestSearchModeClosest;
#[cfg(feature = "SCNPhysicsWorld")]
pub use self::__SCNPhysicsWorld::SCNPhysicsTestSearchModeKey;
#[cfg(feature = "SCNPhysicsWorld")]
pub use self::__SCNPhysicsWorld::SCNPhysicsWorld;
#[cfg(feature = "SCNReferenceNode")]
pub use self::__SCNReferenceNode::SCNReferenceLoadingPolicy;
#[cfg(all(feature = "SCNNode", feature = "SCNReferenceNode"))]
pub use self::__SCNReferenceNode::SCNReferenceNode;
#[cfg(feature = "SCNRenderer")]
pub use self::__SCNRenderer::SCNRenderer;
#[cfg(feature = "SCNScene")]
pub use self::__SCNScene::SCNScene;
#[cfg(feature = "SCNScene")]
pub use self::__SCNScene::SCNSceneAttribute;
#[cfg(feature = "SCNScene")]
pub use self::__SCNScene::SCNSceneEndTimeAttributeKey;
#[cfg(feature = "SCNScene")]
pub use self::__SCNScene::SCNSceneExportDelegate;
#[cfg(feature = "SCNScene")]
pub use self::__SCNScene::SCNSceneExportDestinationURL;
#[cfg(all(feature = "SCNScene", feature = "block2"))]
pub use self::__SCNScene::SCNSceneExportProgressHandler;
#[cfg(feature = "SCNScene")]
pub use self::__SCNScene::SCNSceneFrameRateAttributeKey;
#[cfg(feature = "SCNScene")]
pub use self::__SCNScene::SCNSceneStartTimeAttributeKey;
#[cfg(feature = "SCNScene")]
pub use self::__SCNScene::SCNSceneUpAxisAttributeKey;
#[cfg(feature = "SCNSceneRenderer")]
pub use self::__SCNSceneRenderer::SCNAntialiasingMode;
#[cfg(feature = "SCNSceneRenderer")]
pub use self::__SCNSceneRenderer::SCNDebugOptions;
#[cfg(feature = "SCNSceneRenderer")]
pub use self::__SCNSceneRenderer::SCNRenderingAPI;
#[cfg(feature = "SCNSceneRenderer")]
pub use self::__SCNSceneRenderer::SCNSceneRenderer;
#[cfg(feature = "SCNSceneRenderer")]
pub use self::__SCNSceneRenderer::SCNSceneRendererDelegate;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNConsistencyElementIDErrorKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNConsistencyElementTypeErrorKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNConsistencyInvalidArgumentError;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNConsistencyInvalidCountError;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNConsistencyInvalidURIError;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNConsistencyLineNumberErrorKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNConsistencyMissingAttributeError;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNConsistencyMissingElementError;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNConsistencyXMLSchemaValidationError;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNDetailedErrorsKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSource;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAnimationImportPolicy;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAnimationImportPolicyDoNotPlay;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAnimationImportPolicyKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAnimationImportPolicyPlay;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAnimationImportPolicyPlayRepeatedly;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAnimationImportPolicyPlayUsingSceneTimeBase;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAssetAuthorKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAssetAuthoringToolKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAssetContributorsKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAssetCreatedDateKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAssetDirectoryURLsKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAssetModifiedDateKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAssetUnitKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAssetUnitMeterKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAssetUnitNameKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceAssetUpAxisKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceCheckConsistencyKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceConvertToYUpKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceConvertUnitsToMetersKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceCreateNormalsIfAbsentKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceFlattenSceneKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceLoadingOption;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceLoadingOptionPreserveOriginalTopology;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceOverrideAssetURLsKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceStatus;
#[cfg(all(feature = "SCNSceneSource", feature = "block2"))]
pub use self::__SCNSceneSource::SCNSceneSourceStatusHandler;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceStrictConformanceKey;
#[cfg(feature = "SCNSceneSource")]
pub use self::__SCNSceneSource::SCNSceneSourceUseSafeModeKey;
#[cfg(all(
    feature = "SCNNode",
    feature = "SCNRenderer",
    feature = "SCNShadable",
    feature = "block2"
))]
pub use self::__SCNShadable::SCNBindingBlock;
#[cfg(all(
    feature = "SCNNode",
    feature = "SCNRenderer",
    feature = "SCNShadable",
    feature = "block2"
))]
pub use self::__SCNShadable::SCNBufferBindingBlock;
#[cfg(feature = "SCNShadable")]
pub use self::__SCNShadable::SCNBufferFrequency;
#[cfg(feature = "SCNShadable")]
pub use self::__SCNShadable::SCNBufferStream;
#[cfg(feature = "SCNShadable")]
pub use self::__SCNShadable::SCNProgram;
#[cfg(feature = "SCNShadable")]
pub use self::__SCNShadable::SCNProgramDelegate;
#[cfg(feature = "SCNShadable")]
pub use self::__SCNShadable::SCNProgramMappingChannelKey;
#[cfg(feature = "SCNShadable")]
pub use self::__SCNShadable::SCNShadable;
#[cfg(feature = "SCNShadable")]
pub use self::__SCNShadable::SCNShaderModifierEntryPoint;
#[cfg(feature = "SCNShadable")]
pub use self::__SCNShadable::SCNShaderModifierEntryPointFragment;
#[cfg(feature = "SCNShadable")]
pub use self::__SCNShadable::SCNShaderModifierEntryPointGeometry;
#[cfg(feature = "SCNShadable")]
pub use self::__SCNShadable::SCNShaderModifierEntryPointLightingModel;
#[cfg(feature = "SCNShadable")]
pub use self::__SCNShadable::SCNShaderModifierEntryPointSurface;
#[cfg(feature = "SCNSkinner")]
pub use self::__SCNSkinner::SCNSkinner;
#[cfg(feature = "SCNTechnique")]
pub use self::__SCNTechnique::SCNTechnique;
#[cfg(feature = "SCNTechnique")]
pub use self::__SCNTechnique::SCNTechniqueSupport;
#[cfg(feature = "SCNTransaction")]
pub use self::__SCNTransaction::SCNTransaction;
#[cfg(feature = "SCNView")]
pub use self::__SCNView::SCNCameraControlConfiguration;
#[cfg(feature = "SCNView")]
pub use self::__SCNView::SCNPreferLowPowerDeviceKey;
#[cfg(feature = "SCNView")]
pub use self::__SCNView::SCNPreferredDeviceKey;
#[cfg(feature = "SCNView")]
pub use self::__SCNView::SCNPreferredRenderingAPIKey;
#[cfg(all(feature = "SCNView", feature = "objc2-app-kit"))]
#[cfg(target_os = "macos")]
pub use self::__SCNView::SCNView;
#[cfg(feature = "SCNView")]
pub use self::__SCNView::SCNViewOption;
#[cfg(feature = "SceneKitDeprecated")]
pub use self::__SceneKitDeprecated::SCNLightAttenuationEndKey;
#[cfg(feature = "SceneKitDeprecated")]
pub use self::__SceneKitDeprecated::SCNLightAttenuationFalloffExponentKey;
#[cfg(feature = "SceneKitDeprecated")]
pub use self::__SceneKitDeprecated::SCNLightAttenuationStartKey;
#[cfg(feature = "SceneKitDeprecated")]
pub use self::__SceneKitDeprecated::SCNLightShadowFarClippingKey;
#[cfg(feature = "SceneKitDeprecated")]
pub use self::__SceneKitDeprecated::SCNLightShadowNearClippingKey;
#[cfg(feature = "SceneKitDeprecated")]
pub use self::__SceneKitDeprecated::SCNLightSpotInnerAngleKey;
#[cfg(feature = "SceneKitDeprecated")]
pub use self::__SceneKitDeprecated::SCNLightSpotOuterAngleKey;
#[cfg(feature = "SceneKitTypes")]
pub use self::__SceneKitTypes::NSValueSceneKitAdditions;
#[cfg(feature = "SceneKitTypes")]
pub use self::__SceneKitTypes::SCNActionTimingMode;
#[cfg(feature = "SceneKitTypes")]
pub use self::__SceneKitTypes::SCNColorMask;
#[cfg(feature = "SceneKitTypes")]
pub use self::__SceneKitTypes::SCNErrorDomain;
#[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
#[cfg(not(target_os = "watchos"))]
pub use self::__SceneKitTypes::SCNMatrix4;
#[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
#[cfg(not(target_os = "watchos"))]
pub use self::__SceneKitTypes::SCNMatrix4EqualToMatrix4;
#[cfg(all(
    feature = "SceneKitTypes",
    feature = "objc2-gl-kit",
    feature = "objc2-quartz-core"
))]
#[cfg(any(target_os = "macos", target_os = "ios", target_os = "tvos"))]
pub use self::__SceneKitTypes::SCNMatrix4FromGLKMatrix4;
#[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
#[cfg(not(target_os = "watchos"))]
pub use self::__SceneKitTypes::SCNMatrix4Identity;
#[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
#[cfg(not(target_os = "watchos"))]
pub use self::__SceneKitTypes::SCNMatrix4Invert;
#[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
#[cfg(not(target_os = "watchos"))]
pub use self::__SceneKitTypes::SCNMatrix4IsIdentity;
#[cfg(all(
    feature = "SceneKitTypes",
    feature = "objc2-core-foundation",
    feature = "objc2-quartz-core"
))]
#[cfg(not(target_os = "watchos"))]
pub use self::__SceneKitTypes::SCNMatrix4MakeRotation;
#[cfg(all(feature = "SceneKitTypes", feature = "objc2-quartz-core"))]
#[cfg(not(target_os = "watchos"))]
pub use self::__SceneKitTypes::SCNMatrix4Mult;
#[cfg(all(
    feature = "SceneKitTypes",
    feature = "objc2-core-foundation",
    feature = "objc2-quartz-core"
))]
#[cfg(not(target_os = "watchos"))]
pub use self::__SceneKitTypes::SCNMatrix4Rotate;
#[cfg(all(
    feature = "SceneKitTypes",
    feature = "objc2-core-foundation",
    feature = "objc2-quartz-core"
))]
#[cfg(not(target_os = "watchos"))]
pub use self::__SceneKitTypes::SCNMatrix4Scale;
#[cfg(all(
    feature = "SceneKitTypes",
    feature = "objc2-gl-kit",
    feature = "objc2-quartz-core"
))]
#[cfg(any(target_os = "macos", target_os = "ios", target_os = "tvos"))]
pub use self::__SceneKitTypes::SCNMatrix4ToGLKMatrix4;
#[cfg(feature = "SceneKitTypes")]
pub use self::__SceneKitTypes::SCNProgramCompilationError;
#[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
pub use self::__SceneKitTypes::SCNQuaternion;
#[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
pub use self::__SceneKitTypes::SCNVector3;
#[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
pub use self::__SceneKitTypes::SCNVector3EqualToVector3;
#[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
pub use self::__SceneKitTypes::SCNVector3Zero;
#[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
pub use self::__SceneKitTypes::SCNVector4;
#[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
pub use self::__SceneKitTypes::SCNVector4EqualToVector4;
#[cfg(all(feature = "SceneKitTypes", feature = "objc2-core-foundation"))]
pub use self::__SceneKitTypes::SCNVector4Zero;
