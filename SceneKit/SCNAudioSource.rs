//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-avf-audio")]
use objc2_avf_audio::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// The SCNAudioSource class represents an audio source that can be added to a SCNNode.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnaudiosource?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNAudioSource;
);

extern_conformance!(
    unsafe impl NSCoding for SCNAudioSource {}
);

extern_conformance!(
    unsafe impl NSCopying for SCNAudioSource {}
);

unsafe impl CopyingHelper for SCNAudioSource {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for SCNAudioSource {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SCNAudioSource {}
);

impl SCNAudioSource {
    extern_methods!(
        /// Convenience initializer that creates an AVAudioNode from the named audio asset in the main bundle.
        #[unsafe(method(initWithFileNamed:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFileNamed(
            this: Allocated<Self>,
            name: &NSString,
        ) -> Option<Retained<Self>>;

        /// Convenience initializer that creates an AVAudioNode from the URL that contain a audio asset.
        #[unsafe(method(initWithURL:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithURL(this: Allocated<Self>, url: &NSURL) -> Option<Retained<Self>>;

        /// Convenience class initializer that caches audioSources.
        #[unsafe(method(audioSourceNamed:))]
        #[unsafe(method_family = none)]
        pub unsafe fn audioSourceNamed(file_name: &NSString) -> Option<Retained<Self>>;

        /// Marks the audio source as positional so that the audio mix considers relative position and velocity with regards to the SCNSceneRenderer's current listener node. Defaults to YES.
        ///
        /// shouldStream must be set to false in order to get positional audio (see shouldStream).
        ///
        /// See: SCNSceneRenderer audioListener.
        #[unsafe(method(isPositional))]
        #[unsafe(method_family = none)]
        pub unsafe fn isPositional(&self) -> bool;

        /// Setter for [`isPositional`][Self::isPositional].
        #[unsafe(method(setPositional:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPositional(&self, positional: bool);

        /// The default volume for this audio buffer. Default is 1.0 (full volume).
        #[unsafe(method(volume))]
        #[unsafe(method_family = none)]
        pub unsafe fn volume(&self) -> c_float;

        /// Setter for [`volume`][Self::volume].
        #[unsafe(method(setVolume:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setVolume(&self, volume: c_float);

        /// The default rate for this audio buffer. Default is 1.0 (original rate of the audio source).
        #[unsafe(method(rate))]
        #[unsafe(method_family = none)]
        pub unsafe fn rate(&self) -> c_float;

        /// Setter for [`rate`][Self::rate].
        #[unsafe(method(setRate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRate(&self, rate: c_float);

        /// The default reverbBlend for this audio buffer. Default is 0.0 (no sound is sent to the reverb).
        #[unsafe(method(reverbBlend))]
        #[unsafe(method_family = none)]
        pub unsafe fn reverbBlend(&self) -> c_float;

        /// Setter for [`reverbBlend`][Self::reverbBlend].
        #[unsafe(method(setReverbBlend:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setReverbBlend(&self, reverb_blend: c_float);

        /// Specifies whether the audio source should loop or not. Defaults to NO.
        #[unsafe(method(loops))]
        #[unsafe(method_family = none)]
        pub unsafe fn loops(&self) -> bool;

        /// Setter for [`loops`][Self::loops].
        #[unsafe(method(setLoops:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setLoops(&self, loops: bool);

        /// Specifies whether the audio source should be streamed or not. Defaults to NO.
        #[unsafe(method(shouldStream))]
        #[unsafe(method_family = none)]
        pub unsafe fn shouldStream(&self) -> bool;

        /// Setter for [`shouldStream`][Self::shouldStream].
        #[unsafe(method(setShouldStream:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setShouldStream(&self, should_stream: bool);

        /// Load and uncompress the audio source in memory. This method has no effect if "shouldStream" is set to YES or if the audio source is already loaded.
        ///
        /// This method let you preload your audio sources. If an audio source is not preloaded, it will be loaded anyway when playing it.
        #[unsafe(method(load))]
        #[unsafe(method_family = none)]
        pub unsafe fn load(&self);
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNAudioSource {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/scenekit/scnaudioplayer?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SCNAudioPlayer;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for SCNAudioPlayer {}
);

impl SCNAudioPlayer {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Init an audio player with a source. Most people should use audioPlayerWithSource as it permits to recycle previous players instead of creating new ones for each instance.
        #[unsafe(method(initWithSource:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithSource(
            this: Allocated<Self>,
            source: &SCNAudioSource,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-avf-audio")]
        /// Init an audio player with an AVAudioNode. Most people should use audioPlayerWithAVAudioNode as it permits to recycle previous players instead of creating new ones for each instance.
        #[unsafe(method(initWithAVAudioNode:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithAVAudioNode(
            this: Allocated<Self>,
            audio_node: &AVAudioNode,
        ) -> Retained<Self>;

        /// Create an audio player with a source.
        #[unsafe(method(audioPlayerWithSource:))]
        #[unsafe(method_family = none)]
        pub unsafe fn audioPlayerWithSource(source: &SCNAudioSource) -> Retained<Self>;

        #[cfg(feature = "objc2-avf-audio")]
        /// Create an audio player with a custom AVAudioNode instance.
        #[unsafe(method(audioPlayerWithAVAudioNode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn audioPlayerWithAVAudioNode(audio_node: &AVAudioNode) -> Retained<Self>;

        #[cfg(feature = "block2")]
        /// This block is called when the playback starts in case a valid audio source is present.
        #[unsafe(method(willStartPlayback))]
        #[unsafe(method_family = none)]
        pub unsafe fn willStartPlayback(&self) -> *mut block2::DynBlock<dyn Fn()>;

        #[cfg(feature = "block2")]
        /// Setter for [`willStartPlayback`][Self::willStartPlayback].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setWillStartPlayback:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWillStartPlayback(
            &self,
            will_start_playback: Option<&block2::DynBlock<dyn Fn()>>,
        );

        #[cfg(feature = "block2")]
        /// This block is called when the playback stops in case a valid audio source is present.
        #[unsafe(method(didFinishPlayback))]
        #[unsafe(method_family = none)]
        pub unsafe fn didFinishPlayback(&self) -> *mut block2::DynBlock<dyn Fn()>;

        #[cfg(feature = "block2")]
        /// Setter for [`didFinishPlayback`][Self::didFinishPlayback].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setDidFinishPlayback:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDidFinishPlayback(
            &self,
            did_finish_playback: Option<&block2::DynBlock<dyn Fn()>>,
        );

        #[cfg(feature = "objc2-avf-audio")]
        /// The audioNode. If this player was not initialised with a custom AVAudioNode this contains the internal audio player node used by scene kit internally.
        #[unsafe(method(audioNode))]
        #[unsafe(method_family = none)]
        pub unsafe fn audioNode(&self) -> Option<Retained<AVAudioNode>>;

        /// The audioSource if there is one.
        #[unsafe(method(audioSource))]
        #[unsafe(method_family = none)]
        pub unsafe fn audioSource(&self) -> Option<Retained<SCNAudioSource>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl SCNAudioPlayer {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

/// SCNAudioSupport.
#[cfg(feature = "SCNNode")]
impl SCNNode {
    extern_methods!(
        /// Add an audio player to the node and starts playing it right away.
        #[unsafe(method(addAudioPlayer:))]
        #[unsafe(method_family = none)]
        pub unsafe fn addAudioPlayer(&self, player: &SCNAudioPlayer);

        /// Remove all audio players from this node and stop playing them.
        #[unsafe(method(removeAllAudioPlayers))]
        #[unsafe(method_family = none)]
        pub unsafe fn removeAllAudioPlayers(&self);

        /// Remove the given audio player from this node and stop playing it.
        #[unsafe(method(removeAudioPlayer:))]
        #[unsafe(method_family = none)]
        pub unsafe fn removeAudioPlayer(&self, player: &SCNAudioPlayer);

        /// Get an array with all the audio players connected and playing on this node.
        #[unsafe(method(audioPlayers))]
        #[unsafe(method_family = none)]
        pub unsafe fn audioPlayers(&self) -> Retained<NSArray<SCNAudioPlayer>>;
    );
}
