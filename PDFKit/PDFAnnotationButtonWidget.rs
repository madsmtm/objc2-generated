//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/pdfkit/pdfannotationbuttonwidget?language=objc)
    #[unsafe(super(PDFAnnotation, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "PDFAnnotation")]
    #[deprecated]
    pub struct PDFAnnotationButtonWidget;
);

#[cfg(feature = "PDFAnnotation")]
extern_conformance!(
    unsafe impl NSCoding for PDFAnnotationButtonWidget {}
);

#[cfg(feature = "PDFAnnotation")]
extern_conformance!(
    unsafe impl NSCopying for PDFAnnotationButtonWidget {}
);

#[cfg(feature = "PDFAnnotation")]
unsafe impl CopyingHelper for PDFAnnotationButtonWidget {
    type Result = Self;
}

#[cfg(feature = "PDFAnnotation")]
extern_conformance!(
    unsafe impl NSObjectProtocol for PDFAnnotationButtonWidget {}
);

#[cfg(feature = "PDFAnnotation")]
impl PDFAnnotationButtonWidget {
    extern_methods!(
        #[cfg(feature = "PDFAnnotationUtilities")]
        #[deprecated]
        #[unsafe(method(controlType))]
        #[unsafe(method_family = none)]
        pub unsafe fn controlType(&self) -> PDFWidgetControlType;

        #[cfg(feature = "PDFAnnotationUtilities")]
        #[deprecated]
        #[unsafe(method(setControlType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setControlType(&self, r#type: PDFWidgetControlType);

        #[deprecated]
        #[unsafe(method(state))]
        #[unsafe(method_family = none)]
        pub unsafe fn state(&self) -> NSInteger;

        #[deprecated]
        #[unsafe(method(setState:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setState(&self, value: NSInteger);

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        #[deprecated]
        #[unsafe(method(backgroundColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn backgroundColor(&self) -> Option<Retained<NSColor>>;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// # Safety
        ///
        /// `color` might not allow `None`.
        #[deprecated]
        #[unsafe(method(setBackgroundColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBackgroundColor(&self, color: Option<&NSColor>);

        #[deprecated]
        #[unsafe(method(allowsToggleToOff))]
        #[unsafe(method_family = none)]
        pub unsafe fn allowsToggleToOff(&self) -> bool;

        #[deprecated]
        #[unsafe(method(setAllowsToggleToOff:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAllowsToggleToOff(&self, allow_off: bool);

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        #[deprecated]
        #[unsafe(method(font))]
        #[unsafe(method_family = none)]
        pub unsafe fn font(&self) -> Option<Retained<NSFont>>;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// # Safety
        ///
        /// `font` might not allow `None`.
        #[deprecated]
        #[unsafe(method(setFont:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFont(&self, font: Option<&NSFont>);

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        #[deprecated]
        #[unsafe(method(fontColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn fontColor(&self) -> Option<Retained<NSColor>>;

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// # Safety
        ///
        /// `color` might not allow `None`.
        #[deprecated]
        #[unsafe(method(setFontColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFontColor(&self, color: Option<&NSColor>);

        #[deprecated]
        #[unsafe(method(caption))]
        #[unsafe(method_family = none)]
        pub unsafe fn caption(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `name` might not allow `None`.
        #[deprecated]
        #[unsafe(method(setCaption:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCaption(&self, name: Option<&NSString>);

        #[deprecated]
        #[unsafe(method(fieldName))]
        #[unsafe(method_family = none)]
        pub unsafe fn fieldName(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `name` might not allow `None`.
        #[deprecated]
        #[unsafe(method(setFieldName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFieldName(&self, name: Option<&NSString>);

        #[deprecated]
        #[unsafe(method(onStateValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn onStateValue(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `name` might not allow `None`.
        #[deprecated]
        #[unsafe(method(setOnStateValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOnStateValue(&self, name: Option<&NSString>);
    );
}

/// Methods declared on superclass `PDFAnnotation`.
#[cfg(feature = "PDFAnnotation")]
impl PDFAnnotationButtonWidget {
    extern_methods!(
        /// # Safety
        ///
        /// `properties` generic should be of the correct type.
        #[unsafe(method(initWithBounds:forType:withProperties:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithBounds_forType_withProperties(
            this: Allocated<Self>,
            bounds: NSRect,
            annotation_type: &PDFAnnotationSubtype,
            properties: Option<&NSDictionary>,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "PDFAnnotation")]
impl PDFAnnotationButtonWidget {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
