//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-ui-kit")]
use objc2_ui_kit::*;

use crate::*;

/// Composition result sent to the delegate upon user completion.
///
/// This result will inform of the user's choice in regards to email composition.  If the user
/// cancels the composition,
/// <tt>
/// MFMailComposeResultCancelled
/// </tt>
/// will be sent to the delegate.
/// Typically
/// <tt>
/// MFMailComposeResultSent
/// </tt>
/// or
/// <tt>
/// MFMailComposeResultSaved
/// </tt>
/// will
/// be sent, but
/// <tt>
/// MFMailComposeResultFailed
/// </tt>
/// will be sent in the case of failure.
/// </p>
/// Send may only be interpreted as a successful queueing of the message for later sending.
/// The actual send will occur when the device is able to send.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/messageui/mfmailcomposeresult?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MFMailComposeResult(pub NSInteger);
impl MFMailComposeResult {
    #[doc(alias = "MFMailComposeResultCancelled")]
    pub const Cancelled: Self = Self(0);
    #[doc(alias = "MFMailComposeResultSaved")]
    pub const Saved: Self = Self(1);
    #[doc(alias = "MFMailComposeResultSent")]
    pub const Sent: Self = Self(2);
    #[doc(alias = "MFMailComposeResultFailed")]
    pub const Failed: Self = Self(3);
}

unsafe impl Encode for MFMailComposeResult {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for MFMailComposeResult {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// Error domain for NSError values stemming from the MFMailCompose API.
    ///
    /// This error domain is used as the domain for all NSError instances stemmming from the
    /// MFMailCompose API.  Valid error code values are declared in the
    /// <tt>
    /// MFMailComposeErrorCode
    /// </tt>
    /// space.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/messageui/mfmailcomposeerrordomain?language=objc)
    pub static MFMailComposeErrorDomain: &'static NSErrorDomain;
}

/// Error codes for NSError values stemming from the MFMailCompose API.
///
/// These error codes are used as the codes for all NSError instances stemmming from the
/// MFMailCompose API.  These are the only valid values for NSError instances with the
/// <tt>
/// MFMailComposeErrorDomain
/// </tt>
/// domain.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/messageui/mfmailcomposeerrorcode?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MFMailComposeErrorCode(pub NSInteger);
impl MFMailComposeErrorCode {
    #[doc(alias = "MFMailComposeErrorCodeSaveFailed")]
    pub const SaveFailed: Self = Self(0);
    #[doc(alias = "MFMailComposeErrorCodeSendFailed")]
    pub const SendFailed: Self = Self(1);
}

unsafe impl Encode for MFMailComposeErrorCode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for MFMailComposeErrorCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// The MFMailComposeViewController class provides an interface for editing and sending email.
    ///
    /// The MFMailComposeViewController class manages all user interaction.  The client needs to set the recipient or
    /// recipients.  The client may also set the subject and the body of the message.  Attachments may be added, if
    /// so desired.  After setup, the client needs to only display the view.
    /// <p>
    /// The provided delegate will be informed
    /// of the user's composition completion and how they chose to complete the operation.
    /// </p>
    /// Prior to use, clients
    /// should verify the user has set up the device for sending email via
    /// <tt>
    /// +[MFMailComposeViewController canSendMail]
    /// </tt>
    /// .
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/messageui/mfmailcomposeviewcontroller?language=objc)
    #[unsafe(super(UINavigationController, UIViewController, UIResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-ui-kit")]
    pub struct MFMailComposeViewController;
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl NSCoding for MFMailComposeViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl NSObjectProtocol for MFMailComposeViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIAppearanceContainer for MFMailComposeViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIContentContainer for MFMailComposeViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIFocusEnvironment for MFMailComposeViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIResponderStandardEditActions for MFMailComposeViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UITraitEnvironment for MFMailComposeViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
impl MFMailComposeViewController {
    extern_methods!(
        /// Returns
        /// <tt>
        /// YES
        /// </tt>
        /// if the user has set up the device for sending email.
        ///
        /// The client may continue to set the recipients and content if the return value was
        /// <tt>
        /// YES
        /// </tt>
        /// .  If
        /// <tt>
        /// NO
        /// </tt>
        /// was the result, the client has a couple options.  It may choose to simply notify the user of the inability to
        /// send mail, or it may issue a "mailto" URL via
        /// <tt>
        /// -[UIApplication openURL:]
        /// </tt>
        /// .
        #[unsafe(method(canSendMail))]
        #[unsafe(method_family = none)]
        pub unsafe fn canSendMail(mtm: MainThreadMarker) -> bool;

        /// This property is the delegate for the MFMailComposeViewControllerDelegate method callbacks.
        #[unsafe(method(mailComposeDelegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn mailComposeDelegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn MFMailComposeViewControllerDelegate>>>;

        /// Setter for [`mailComposeDelegate`][Self::mailComposeDelegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        #[unsafe(method(setMailComposeDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMailComposeDelegate(
            &self,
            mail_compose_delegate: Option<&ProtocolObject<dyn MFMailComposeViewControllerDelegate>>,
        );

        /// This method sets the Subject header for the email message.
        ///
        /// This method will set the Subject header for the email message.  This should be called prior to display.
        /// Newlines are removed from the parameter.
        /// <p>
        /// After the view has been presented to the user, this method will no longer change the value.
        /// </p>
        ///
        /// Parameter `subject`: A NSString specifying the message's Subject header.
        #[unsafe(method(setSubject:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSubject(&self, subject: &NSString);

        /// This method sets the To header for the email message to the specified email addresses.
        ///
        /// This method will set the To header for the email message.  This should be called prior to display.
        /// <p>
        /// Recipient addresses should be specified as per RFC5322.
        /// </p>
        /// <p>
        /// After the view has been presented to the user, this method will no longer change the value.
        /// </p>
        ///
        /// Parameter `toRecipients`: A NSArray of NSString instances specifying the email addresses of recipients.
        #[unsafe(method(setToRecipients:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setToRecipients(&self, to_recipients: Option<&NSArray<NSString>>);

        /// This method sets the CC header for the email message to the specified email addresses.
        ///
        /// This method will set the CC header for the email message.  This should be called prior to display.
        /// <p>
        /// Recipient addresses should be specified as per RFC5322.
        /// </p>
        /// <p>
        /// After the view has been presented to the user, this method will no longer change the value.
        /// </p>
        ///
        /// Parameter `ccRecipients`: A NSArray of NSString instances specifying the email addresses of recipients.
        #[unsafe(method(setCcRecipients:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCcRecipients(&self, cc_recipients: Option<&NSArray<NSString>>);

        /// This method sets the BCC header for the email message to the specified email addresses.
        ///
        /// This method will set the BCC header for the email message.  This should be called prior to display.
        /// <p>
        /// Recipient addresses should be specified as per RFC5322.
        /// </p>
        /// <p>
        /// After the view has been presented to the user, this method will no longer change the value.
        /// </p>
        ///
        /// Parameter `bccRecipients`: A NSArray of NSString instances specifying the email addresses of recipients.
        #[unsafe(method(setBccRecipients:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBccRecipients(&self, bcc_recipients: Option<&NSArray<NSString>>);

        /// This method sets the body of the email message to the specified content.
        ///
        /// This method will set the body of the email message.  This should be called prior to display.
        /// The user's signature, if specified, will be added after the body content.
        ///
        /// Parameter `body`: A NSString containing the body contents of the email message.
        ///
        /// Parameter `isHTML`: A boolean value indicating if the body argument is to be interpreted as HTML content.
        #[unsafe(method(setMessageBody:isHTML:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMessageBody_isHTML(&self, body: &NSString, is_html: bool);

        /// This method adds the specified attachment to the email message.
        ///
        /// This method adds the specified attachment to the email message.  This should be called prior to display.
        /// Attachments will be appended to the end of the message.
        ///
        /// Parameter `attachment`: NSData containing the contents of the attachment.  Must not be
        /// <tt>
        /// nil
        /// </tt>
        /// .
        ///
        /// Parameter `mimeType`: NSString specifying the MIME type for the attachment, as specified by the IANA
        /// (http://www.iana.org/assignments/media-types/). Must not be
        /// <tt>
        /// nil
        /// </tt>
        /// .
        ///
        /// Parameter `filename`: NSString specifying the intended filename for the attachment.  This is displayed below
        /// the attachment's icon if the attachment is not decoded when displayed.  Must not be
        /// <tt>
        /// nil
        /// </tt>
        /// .
        #[unsafe(method(addAttachmentData:mimeType:fileName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn addAttachmentData_mimeType_fileName(
            &self,
            attachment: &NSData,
            mime_type: &NSString,
            filename: &NSString,
        );

        /// This method sets the preferred sending account of the email message.
        ///
        /// This method will set the sending account of the message to the specified email address if the user has an account with such an address set up. If there is no account with such an address, the default account will be used instead.
        /// The sending email address should be specified as per RFC5322.
        /// After the view has been presented to the user, this method will no longer change the value.
        ///
        /// Parameter `emailAddress`: A NSString specifying the preferred email address used to send this message.
        #[unsafe(method(setPreferredSendingEmailAddress:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPreferredSendingEmailAddress(&self, email_address: &NSString);

        #[cfg(feature = "block2")]
        /// Parameter `itemProvider`: specifying the intended content for collaboration
        ///
        /// Returns
        /// <tt>
        /// YES
        /// </tt>
        /// if the item provider was added to the composition successfully.
        ///
        /// If the return value is YES, the itemProvider was added to the composition.  The itemProvider must be non-nil.
        #[unsafe(method(insertCollaborationItemProvider:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn insertCollaborationItemProvider_completionHandler(
            &self,
            item_provider: &NSItemProvider,
            completion_handler: &block2::DynBlock<dyn Fn(Bool)>,
        );
    );
}

/// Methods declared on superclass `UINavigationController`.
#[cfg(feature = "objc2-ui-kit")]
impl MFMailComposeViewController {
    extern_methods!(
        /// # Safety
        ///
        /// - `navigation_bar_class` probably has further requirements.
        /// - `toolbar_class` probably has further requirements.
        #[unsafe(method(initWithNavigationBarClass:toolbarClass:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithNavigationBarClass_toolbarClass(
            this: Allocated<Self>,
            navigation_bar_class: Option<&AnyClass>,
            toolbar_class: Option<&AnyClass>,
        ) -> Retained<Self>;

        #[unsafe(method(initWithRootViewController:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithRootViewController(
            this: Allocated<Self>,
            root_view_controller: &UIViewController,
        ) -> Retained<Self>;

        #[unsafe(method(initWithNibName:bundle:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithNibName_bundle(
            this: Allocated<Self>,
            nib_name_or_nil: Option<&NSString>,
            nib_bundle_or_nil: Option<&NSBundle>,
        ) -> Retained<Self>;

        /// # Safety
        ///
        /// `a_decoder` possibly has further requirements.
        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "objc2-ui-kit")]
impl MFMailComposeViewController {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}

extern_protocol!(
    /// Protocol for delegate callbacks to MFMailComposeViewController instances.
    ///
    /// This protocol must be implemented for delegates of MFMailComposeViewController instances.  It will
    /// be called at various times while the user is composing, sending, saving, or canceling email composition.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/messageui/mfmailcomposeviewcontrollerdelegate?language=objc)
    pub unsafe trait MFMailComposeViewControllerDelegate: NSObjectProtocol {
        #[cfg(feature = "objc2-ui-kit")]
        /// Delegate callback which is called upon user's completion of email composition.
        ///
        /// This delegate callback will be called when the user completes the email composition.  How the user chose
        /// to complete this task will be given as one of the parameters to the callback.  Upon this call, the client
        /// should remove the view associated with the controller, typically by dismissing modally.
        ///
        /// Parameter `controller`: The MFMailComposeViewController instance which is returning the result.
        ///
        /// Parameter `result`: MFMailComposeResult indicating how the user chose to complete the composition process.
        ///
        /// Parameter `error`: NSError indicating the failure reason if failure did occur.  This will be
        /// <tt>
        /// nil
        /// </tt>
        /// if
        /// result did not indicate failure.
        #[optional]
        #[unsafe(method(mailComposeController:didFinishWithResult:error:))]
        #[unsafe(method_family = none)]
        unsafe fn mailComposeController_didFinishWithResult_error(
            &self,
            controller: &MFMailComposeViewController,
            result: MFMailComposeResult,
            error: Option<&NSError>,
        );
    }
);
