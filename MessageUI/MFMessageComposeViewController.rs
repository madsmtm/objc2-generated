//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-messages")]
#[cfg(not(target_os = "visionos"))]
use objc2_messages::*;
#[cfg(feature = "objc2-ui-kit")]
use objc2_ui_kit::*;

use crate::*;

/// Composition result sent to the delegate upon user completion.
///
/// This result will inform the client of the user's message composition action.  If the
/// user cancels the composition,
/// <tt>
/// MessageComposeResultCancelled
/// </tt>
/// will be sent to the delegate.
/// Typically
/// <tt>
/// MessageComposeResultSent
/// </tt>
/// will be sent, but
/// <tt>
/// MessageComposeResultFailed
/// </tt>
/// will
/// be sent in the case of failure.
/// </p>
/// Send may only be interpreted as a successful queueing of
/// the message for later sending. The actual send will occur when the device is able to send.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/messageui/messagecomposeresult?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MessageComposeResult(pub NSInteger);
impl MessageComposeResult {
    #[doc(alias = "MessageComposeResultCancelled")]
    pub const Cancelled: Self = Self(0);
    #[doc(alias = "MessageComposeResultSent")]
    pub const Sent: Self = Self(1);
    #[doc(alias = "MessageComposeResultFailed")]
    pub const Failed: Self = Self(2);
}

unsafe impl Encode for MessageComposeResult {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for MessageComposeResult {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/messageui/mfmessagecomposeviewcontrollerattachmenturl?language=objc)
    pub static MFMessageComposeViewControllerAttachmentURL: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/messageui/mfmessagecomposeviewcontrollerattachmentalternatefilename?language=objc)
    pub static MFMessageComposeViewControllerAttachmentAlternateFilename: &'static NSString;
}

extern "C" {
    /// Notification posted when the value of
    /// <tt>
    /// +[MFMessageComposeViewController canSendText]
    /// </tt>
    /// has changed.
    ///
    /// This notification is posted when the value of
    /// <tt>
    /// +[MFMessageComposeViewController canSendText]
    /// </tt>
    /// has changed. Clients should invalidate any caches and update UI as appropriate.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/messageui/mfmessagecomposeviewcontrollertextmessageavailabilitydidchangenotification?language=objc)
    pub static MFMessageComposeViewControllerTextMessageAvailabilityDidChangeNotification:
        &'static NSString;
}

extern "C" {
    /// UserInfo key for MFMessageComposeViewControllerTextMessageAvailabilityDidChangeNotification
    /// containing the value of
    /// <tt>
    /// +[MFMessageComposeViewController canSendText]
    /// </tt>
    ///
    /// The value of this key is an NSNumber containing a BOOL value. This value matches
    /// the result of
    /// <tt>
    /// +[MFMessageComposeViewController canSendText]
    /// </tt>
    /// .
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/messageui/mfmessagecomposeviewcontrollertextmessageavailabilitykey?language=objc)
    pub static MFMessageComposeViewControllerTextMessageAvailabilityKey: &'static NSString;
}

extern_class!(
    /// The MFMessageComposeViewController class provides an interface for editing and sending a message.
    ///
    /// The MFMessageComposeViewController class manages all user interaction.  The client needs to set
    /// the recipient or recipients.  The client may also set the body of the message. After setup, the
    /// client needs to only display the view.
    /// <p>
    /// The provided delegate will be informed of the user's composition completion and how they chose
    /// to complete the operation.
    /// </p>
    /// <p>
    /// Prior to use, clients should verify the user has set up the device for sending messages via
    /// <tt>
    /// +[MFMessageComposeViewController canSendText]
    /// </tt>
    /// .
    /// </p>
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/messageui/mfmessagecomposeviewcontroller?language=objc)
    #[unsafe(super(UINavigationController, UIViewController, UIResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-ui-kit")]
    pub struct MFMessageComposeViewController;
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl NSCoding for MFMessageComposeViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl NSObjectProtocol for MFMessageComposeViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIAppearanceContainer for MFMessageComposeViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIContentContainer for MFMessageComposeViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIFocusEnvironment for MFMessageComposeViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UIResponderStandardEditActions for MFMessageComposeViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
extern_conformance!(
    unsafe impl UITraitEnvironment for MFMessageComposeViewController {}
);

#[cfg(feature = "objc2-ui-kit")]
impl MFMessageComposeViewController {
    extern_methods!(
        /// Returns
        /// <tt>
        /// YES
        /// </tt>
        /// if the user has set up the device for sending text only messages.
        ///
        /// If the return value is YES, the client can set the recipients and body of the message.
        /// If the return value is NO, the client may notify the user of the failure, or the
        /// client may open an SMS URL via
        /// <tt>
        /// -[UIApplication openURL:]
        /// </tt>
        /// .
        #[unsafe(method(canSendText))]
        #[unsafe(method_family = none)]
        pub unsafe fn canSendText(mtm: MainThreadMarker) -> bool;

        /// Returns
        /// <tt>
        /// YES
        /// </tt>
        /// <tt>
        /// if the user has set up the device for including subjects in messages.
        /// </tt>
        /// .
        #[unsafe(method(canSendSubject))]
        #[unsafe(method_family = none)]
        pub unsafe fn canSendSubject(mtm: MainThreadMarker) -> bool;

        /// Returns
        /// <tt>
        /// YES
        /// </tt>
        /// <tt>
        /// if the user has set up the device for including attachments in messages.
        /// </tt>
        /// .
        #[unsafe(method(canSendAttachments))]
        #[unsafe(method_family = none)]
        pub unsafe fn canSendAttachments(mtm: MainThreadMarker) -> bool;

        /// Returns
        /// <tt>
        /// YES
        /// </tt>
        /// if the attachment at the specified URL could be accepted by the current composition.
        ///
        /// If the return value is YES, the UTI is acceptable for attachment to a message, a return value of NO
        /// indicates that the given UTI is unsupported.
        #[unsafe(method(isSupportedAttachmentUTI:))]
        #[unsafe(method_family = none)]
        pub unsafe fn isSupportedAttachmentUTI(uti: &NSString, mtm: MainThreadMarker) -> bool;

        /// This property is the delegate for the MFMessageComposeViewController method callbacks.
        #[unsafe(method(messageComposeDelegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn messageComposeDelegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn MFMessageComposeViewControllerDelegate>>>;

        /// Setter for [`messageComposeDelegate`][Self::messageComposeDelegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        #[unsafe(method(setMessageComposeDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMessageComposeDelegate(
            &self,
            message_compose_delegate: Option<
                &ProtocolObject<dyn MFMessageComposeViewControllerDelegate>,
            >,
        );

        /// Calling this method will disable the camera/attachment button in the view controller.  After the controller has been presented,
        /// this call will have no effect.  The camera / attachment button is visible by default.
        #[unsafe(method(disableUserAttachments))]
        #[unsafe(method_family = none)]
        pub unsafe fn disableUserAttachments(&self);

        /// This property sets the initial value of the To field for the message to the specified addresses.
        ///
        /// This property will set the initial value of the To field for the message from an NSArray of
        /// NSString instances specifying the message addresses of recipients. This should be called prior
        /// to display.
        /// <p>
        /// After the view has been presented to the user, this property will no longer change the value.
        /// </p>
        #[unsafe(method(recipients))]
        #[unsafe(method_family = none)]
        pub unsafe fn recipients(&self) -> Option<Retained<NSArray<NSString>>>;

        /// Setter for [`recipients`][Self::recipients].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setRecipients:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRecipients(&self, recipients: Option<&NSArray<NSString>>);

        /// This property sets the initial value of the body of the message to the specified content.
        ///
        /// This property will set the initial value of the body of the message.  This should be called prior
        /// to display.
        /// <p>
        /// After the view has been presented to the user, this property will no longer change the value.
        /// </p>
        #[unsafe(method(body))]
        #[unsafe(method_family = none)]
        pub unsafe fn body(&self) -> Option<Retained<NSString>>;

        /// Setter for [`body`][Self::body].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setBody:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBody(&self, body: Option<&NSString>);

        /// This property sets the initial value of the subject of the message to the specified content.
        ///
        /// This property will set the initial value of the subject of the message.  This should be called prior
        /// to display.
        /// <p>
        /// After the view has been presented to the user, this property will no longer change the value.
        /// </p>
        #[unsafe(method(subject))]
        #[unsafe(method_family = none)]
        pub unsafe fn subject(&self) -> Option<Retained<NSString>>;

        /// Setter for [`subject`][Self::subject].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setSubject:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSubject(&self, subject: Option<&NSString>);

        /// This property returns an NSArray of NSDictionaries describing the properties of the current attachments.
        ///
        /// This property returns an NSArray of NSDictionaries describing the properties of the current attachments.
        /// See MFMessageComposeViewControllerAttachmentURL, MFMessageComposeViewControllerAttachmentAlternateFilename.
        #[unsafe(method(attachments))]
        #[unsafe(method_family = none)]
        pub unsafe fn attachments(&self) -> Option<Retained<NSArray<NSDictionary>>>;

        #[cfg(feature = "objc2-messages")]
        #[cfg(not(target_os = "visionos"))]
        /// This property sets the initial interactive message.
        #[unsafe(method(message))]
        #[unsafe(method_family = none)]
        pub unsafe fn message(&self) -> Option<Retained<MSMessage>>;

        #[cfg(feature = "objc2-messages")]
        #[cfg(not(target_os = "visionos"))]
        /// Setter for [`message`][Self::message].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setMessage:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMessage(&self, message: Option<&MSMessage>);

        /// Returns
        /// <tt>
        /// YES
        /// </tt>
        /// if the attachment at the specified URL was added to the composition successfully.
        ///
        /// If the return value is YES, the attachment was added to the composition. If the return value is NO,
        /// the attachment was not added to the composition.  All attachment URLs must be file urls.  The file
        /// URL must not be NIL.  The alternate filename will be display to the user in leiu of the attachments URL.
        /// The alternate filename may be NIL.
        #[unsafe(method(addAttachmentURL:withAlternateFilename:))]
        #[unsafe(method_family = none)]
        pub unsafe fn addAttachmentURL_withAlternateFilename(
            &self,
            attachment_url: &NSURL,
            alternate_filename: Option<&NSString>,
        ) -> bool;

        /// Returns
        /// <tt>
        /// YES
        /// </tt>
        /// if the attachment was added to the composition successfully.
        ///
        /// If the return value is YES, the attachment was added to the composition. If the return value is NO,
        /// the attachment was not added to the composition.  The data and typeIdentifer must be non-nil.  typeIdentifier should be a valid Uniform Type Identifier.
        #[unsafe(method(addAttachmentData:typeIdentifier:filename:))]
        #[unsafe(method_family = none)]
        pub unsafe fn addAttachmentData_typeIdentifier_filename(
            &self,
            attachment_data: &NSData,
            uti: &NSString,
            filename: &NSString,
        ) -> bool;

        /// Parameter `itemProvider`: created from ShareSheet
        ///
        /// Returns
        /// <tt>
        /// YES
        /// </tt>
        /// if the item provider was added to the composition successfully.
        ///
        /// If the return value is YES, the itemProvider was added to the composition. If the return value is NO,
        /// the itemProvider was not added to the composition.  The itemProvider must be non-nil.
        #[unsafe(method(insertCollaborationItemProvider:))]
        #[unsafe(method_family = none)]
        pub unsafe fn insertCollaborationItemProvider(
            &self,
            item_provider: &NSItemProvider,
        ) -> bool;
    );
}

/// Methods declared on superclass `UINavigationController`.
#[cfg(feature = "objc2-ui-kit")]
impl MFMessageComposeViewController {
    extern_methods!(
        /// # Safety
        ///
        /// - `navigation_bar_class` probably has further requirements.
        /// - `toolbar_class` probably has further requirements.
        #[unsafe(method(initWithNavigationBarClass:toolbarClass:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithNavigationBarClass_toolbarClass(
            this: Allocated<Self>,
            navigation_bar_class: Option<&AnyClass>,
            toolbar_class: Option<&AnyClass>,
        ) -> Retained<Self>;

        #[unsafe(method(initWithRootViewController:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithRootViewController(
            this: Allocated<Self>,
            root_view_controller: &UIViewController,
        ) -> Retained<Self>;

        #[unsafe(method(initWithNibName:bundle:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithNibName_bundle(
            this: Allocated<Self>,
            nib_name_or_nil: Option<&NSString>,
            nib_bundle_or_nil: Option<&NSBundle>,
        ) -> Retained<Self>;

        /// # Safety
        ///
        /// `a_decoder` possibly has further requirements.
        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "objc2-ui-kit")]
impl MFMessageComposeViewController {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}

extern_protocol!(
    /// Protocol for delegate callbacks to MFMessageComposeViewControllerDelegate instances.
    ///
    /// This protocol will be implemented by delegates of MFMessageComposeViewController instances.
    /// It will be called at various times while the user is composing, sending, or canceling
    /// message composition.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/messageui/mfmessagecomposeviewcontrollerdelegate?language=objc)
    pub unsafe trait MFMessageComposeViewControllerDelegate: NSObjectProtocol {
        #[cfg(feature = "objc2-ui-kit")]
        /// Delegate callback which is called upon user's completion of message composition.
        ///
        /// This delegate callback will be called when the user completes the message composition.
        /// How the user chose to complete this task will be given as one of the parameters to the
        /// callback.  Upon this call, the client should remove the view associated with the controller,
        /// typically by dismissing modally.
        ///
        /// Parameter `controller`: The MFMessageComposeViewController instance which is returning the result.
        ///
        /// Parameter `result`: MessageComposeResult indicating how the user chose to complete the composition process.
        #[unsafe(method(messageComposeViewController:didFinishWithResult:))]
        #[unsafe(method_family = none)]
        unsafe fn messageComposeViewController_didFinishWithResult(
            &self,
            controller: &MFMessageComposeViewController,
            result: MessageComposeResult,
        );
    }
);
