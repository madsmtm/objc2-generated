//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/safariservices/sfextensionmessagekey?language=objc)
    pub static SFExtensionMessageKey: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/safariservices/sfextensionprofilekey?language=objc)
    pub static SFExtensionProfileKey: &'static NSString;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/safariservices/sfsafariapplication?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SFSafariApplication;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for SFSafariApplication {}
);

impl SFSafariApplication {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(all(feature = "SFSafariWindow", feature = "block2"))]
        /// Calls the completion handler with the active browser window.
        #[unsafe(method(getActiveWindowWithCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getActiveWindowWithCompletionHandler(
            completion_handler: &block2::DynBlock<dyn Fn(*mut SFSafariWindow)>,
        );

        #[cfg(all(feature = "SFSafariWindow", feature = "block2"))]
        /// Calls the completion handler with all currently open windows ordered front to back.
        #[unsafe(method(getAllWindowsWithCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getAllWindowsWithCompletionHandler(
            completion_handler: &block2::DynBlock<dyn Fn(NonNull<NSArray<SFSafariWindow>>)>,
        );

        #[cfg(all(feature = "SFSafariWindow", feature = "block2"))]
        /// Opens a new window with a tab containing the URL to pass in.
        #[unsafe(method(openWindowWithURL:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn openWindowWithURL_completionHandler(
            url: &NSURL,
            completion_handler: Option<&block2::DynBlock<dyn Fn(*mut SFSafariWindow)>>,
        );

        /// This will cause -validateToolbarItemInWindow:completionHandler: to be called on all windows, to let the extension update enabled states or badges of its toolbar items.
        #[unsafe(method(setToolbarItemsNeedUpdate))]
        #[unsafe(method_family = none)]
        pub unsafe fn setToolbarItemsNeedUpdate();

        #[cfg(all(feature = "block2", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        /// Gets an NSRunningApplication instance with information about the app that this extension is connected to.
        #[unsafe(method(getHostApplicationWithCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getHostApplicationWithCompletionHandler(
            completion_handler: &block2::DynBlock<dyn Fn(NonNull<NSRunningApplication>)>,
        );

        #[cfg(feature = "block2")]
        /// Opens Safari Extensions preferences and selects extension with the identifier.
        #[unsafe(method(showPreferencesForExtensionWithIdentifier:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn showPreferencesForExtensionWithIdentifier_completionHandler(
            identifier: &NSString,
            completion_handler: Option<&block2::DynBlock<dyn Fn(*mut NSError)>>,
        );

        #[cfg(feature = "block2")]
        /// # Safety
        ///
        /// `user_info` generic should be of the correct type.
        #[unsafe(method(dispatchMessageWithName:toExtensionWithIdentifier:userInfo:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn dispatchMessageWithName_toExtensionWithIdentifier_userInfo_completionHandler(
            message_name: &NSString,
            identifier: &NSString,
            user_info: Option<&NSDictionary<NSString, AnyObject>>,
            completion_handler: Option<&block2::DynBlock<dyn Fn(*mut NSError)>>,
        );
    );
}
