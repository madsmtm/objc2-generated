//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/safariservices/sfsafaripage?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SFSafariPage;
);

extern_conformance!(
    unsafe impl NSCoding for SFSafariPage {}
);

extern_conformance!(
    unsafe impl NSCopying for SFSafariPage {}
);

unsafe impl CopyingHelper for SFSafariPage {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for SFSafariPage {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SFSafariPage {}
);

impl SFSafariPage {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Dispatches a message to the content script injected in this page.
        ///
        /// # Safety
        ///
        /// `user_info` generic should be of the correct type.
        #[unsafe(method(dispatchMessageToScriptWithName:userInfo:))]
        #[unsafe(method_family = none)]
        pub unsafe fn dispatchMessageToScriptWithName_userInfo(
            &self,
            message_name: &NSString,
            user_info: Option<&NSDictionary<NSString, AnyObject>>,
        );

        /// Reloads the page.
        #[unsafe(method(reload))]
        #[unsafe(method_family = none)]
        pub unsafe fn reload(&self);

        #[cfg(all(feature = "SFSafariPageProperties", feature = "block2"))]
        /// This calls the completion handler with the properties of the page.
        #[unsafe(method(getPagePropertiesWithCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getPagePropertiesWithCompletionHandler(
            &self,
            completion_handler: &block2::DynBlock<dyn Fn(*mut SFSafariPageProperties)>,
        );

        #[cfg(all(feature = "SFSafariTab", feature = "block2"))]
        /// This calls the completion handler with the tab containing this page. This will return a non-nil tab for any pages being preloaded by Safari.
        #[unsafe(method(getContainingTabWithCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getContainingTabWithCompletionHandler(
            &self,
            completion_handler: &block2::DynBlock<dyn Fn(NonNull<SFSafariTab>)>,
        );

        #[cfg(all(feature = "block2", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        /// Gets a screenshot of the currently visible area of the page.
        #[unsafe(method(getScreenshotOfVisibleAreaWithCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getScreenshotOfVisibleAreaWithCompletionHandler(
            &self,
            completion_handler: &block2::DynBlock<dyn Fn(*mut NSImage)>,
        );
    );
}
