//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/safariservices/sfsafariextensionhandling?language=objc)
    pub unsafe trait SFSafariExtensionHandling: NSObjectProtocol {
        #[cfg(feature = "SFSafariPage")]
        /// This is called when a content script from an extension dispatches a message to the app extension.
        ///
        /// # Safety
        ///
        /// `user_info` generic should be of the correct type.
        #[optional]
        #[unsafe(method(messageReceivedWithName:fromPage:userInfo:))]
        #[unsafe(method_family = none)]
        unsafe fn messageReceivedWithName_fromPage_userInfo(
            &self,
            message_name: &NSString,
            page: &SFSafariPage,
            user_info: Option<&NSDictionary<NSString, AnyObject>>,
        );

        /// This is called when the extension's containing app dispatches a message to the app extension.
        ///
        /// # Safety
        ///
        /// `user_info` generic should be of the correct type.
        #[optional]
        #[unsafe(method(messageReceivedFromContainingAppWithName:userInfo:))]
        #[unsafe(method_family = none)]
        unsafe fn messageReceivedFromContainingAppWithName_userInfo(
            &self,
            message_name: &NSString,
            user_info: Option<&NSDictionary<NSString, AnyObject>>,
        );

        #[cfg(feature = "SFSafariWindow")]
        /// This is called when the extension's toolbar item is clicked.
        #[optional]
        #[unsafe(method(toolbarItemClickedInWindow:))]
        #[unsafe(method_family = none)]
        unsafe fn toolbarItemClickedInWindow(&self, window: &SFSafariWindow);

        #[cfg(all(feature = "SFSafariWindow", feature = "block2"))]
        /// This is called when Safari's state changed in some way that would require the extension's toolbar item to be validated again.
        #[optional]
        #[unsafe(method(validateToolbarItemInWindow:validationHandler:))]
        #[unsafe(method_family = none)]
        unsafe fn validateToolbarItemInWindow_validationHandler(
            &self,
            window: &SFSafariWindow,
            validation_handler: &block2::DynBlock<dyn Fn(Bool, NonNull<NSString>)>,
        );

        #[cfg(feature = "SFSafariPage")]
        /// This is called when one of the extension's context menu items is selected.
        ///
        /// # Safety
        ///
        /// `user_info` generic should be of the correct type.
        #[optional]
        #[unsafe(method(contextMenuItemSelectedWithCommand:inPage:userInfo:))]
        #[unsafe(method_family = none)]
        unsafe fn contextMenuItemSelectedWithCommand_inPage_userInfo(
            &self,
            command: &NSString,
            page: &SFSafariPage,
            user_info: Option<&NSDictionary<NSString, AnyObject>>,
        );

        #[cfg(all(feature = "SFSafariPage", feature = "block2"))]
        /// This is called before context menu is shown, and provides a way to validate individual context menu items.
        ///
        /// # Safety
        ///
        /// `user_info` generic should be of the correct type.
        #[optional]
        #[unsafe(method(validateContextMenuItemWithCommand:inPage:userInfo:validationHandler:))]
        #[unsafe(method_family = none)]
        unsafe fn validateContextMenuItemWithCommand_inPage_userInfo_validationHandler(
            &self,
            command: &NSString,
            page: &SFSafariPage,
            user_info: Option<&NSDictionary<NSString, AnyObject>>,
            validation_handler: &block2::DynBlock<dyn Fn(Bool, *mut NSString)>,
        );

        #[cfg(feature = "SFSafariWindow")]
        /// This is called when the extension's popover is about to be opened.
        #[optional]
        #[unsafe(method(popoverWillShowInWindow:))]
        #[unsafe(method_family = none)]
        unsafe fn popoverWillShowInWindow(&self, window: &SFSafariWindow);

        #[cfg(feature = "SFSafariWindow")]
        /// This is called after the extension's popover is closed.
        #[optional]
        #[unsafe(method(popoverDidCloseInWindow:))]
        #[unsafe(method_family = none)]
        unsafe fn popoverDidCloseInWindow(&self, window: &SFSafariWindow);

        #[cfg(all(feature = "SFSafariExtensionViewController", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        /// Returns the extension popover's view controller.
        #[optional]
        #[unsafe(method(popoverViewController))]
        #[unsafe(method_family = none)]
        unsafe fn popoverViewController(
            &self,
            mtm: MainThreadMarker,
        ) -> Retained<SFSafariExtensionViewController>;

        #[cfg(feature = "block2")]
        /// This is called when Safari is about to load a page that the extension has stated it wants to add additional headers for.
        #[optional]
        #[unsafe(method(additionalRequestHeadersForURL:completionHandler:))]
        #[unsafe(method_family = none)]
        unsafe fn additionalRequestHeadersForURL_completionHandler(
            &self,
            url: &NSURL,
            completion_handler: &block2::DynBlock<dyn Fn(*mut NSDictionary<NSString, NSString>)>,
        );

        #[cfg(feature = "SFSafariPage")]
        /// This is called when a content blocker associated with this Safari App Extension performs a blocking action.
        #[optional]
        #[unsafe(method(contentBlockerWithIdentifier:blockedResourcesWithURLs:onPage:))]
        #[unsafe(method_family = none)]
        unsafe fn contentBlockerWithIdentifier_blockedResourcesWithURLs_onPage(
            &self,
            content_blocker_identifier: &NSString,
            urls: &NSArray<NSURL>,
            page: &SFSafariPage,
        );

        #[cfg(feature = "SFSafariPage")]
        /// This is called when a page in Safari navigates to a URL. The URL will be nil when the extension doesn't have access to it.
        #[optional]
        #[unsafe(method(page:willNavigateToURL:))]
        #[unsafe(method_family = none)]
        unsafe fn page_willNavigateToURL(&self, page: &SFSafariPage, url: Option<&NSURL>);
    }
);
