//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    /// The VZVirtioSocketListener object represents a listener for the Virtio socket device.
    ///
    /// The listener encompasses a VZVirtioSocketListenerDelegate object.
    /// VZVirtioSocketListener is used with VZVirtioSocketDevice to listen to a particular port.
    /// The delegate is used when a guest connects to a port associated with the listener.
    ///
    /// See: VZVirtioSocketDevice
    ///
    /// See: VZVirtioSocketListenerDelegate
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/virtualization/vzvirtiosocketlistener?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct VZVirtioSocketListener;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for VZVirtioSocketListener {}
);

impl VZVirtioSocketListener {
    extern_methods!(
        /// Pointer to a delegate object for the listener.
        #[unsafe(method(delegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn VZVirtioSocketListenerDelegate>>>;

        /// Setter for [`delegate`][Self::delegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        #[unsafe(method(setDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn VZVirtioSocketListenerDelegate>>,
        );
    );
}

/// Methods declared on superclass `NSObject`.
impl VZVirtioSocketListener {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_protocol!(
    /// Delegate object for VZVirtioSocketListener.
    ///
    /// A class conforming to VZVirtioSocketListenerDelegate protocol can provide a method to establish a new connection to the socket.
    ///
    /// See: VZVirtioSocketDevice
    ///
    /// See: VZVirtioSocketListener
    ///
    /// See: VZVirtioSocketConnection
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/virtualization/vzvirtiosocketlistenerdelegate?language=objc)
    pub unsafe trait VZVirtioSocketListenerDelegate: NSObjectProtocol {
        #[cfg(all(
            feature = "VZSocketDevice",
            feature = "VZVirtioSocketConnection",
            feature = "VZVirtioSocketDevice"
        ))]
        /// Invoked when the Virtio socket device is accepting a new connection.
        ///
        /// Parameter `listener`: The listener invoking the delegate method.
        ///
        /// Parameter `connection`: The new connection to be established.
        ///
        /// Parameter `socketDevice`: The Virtio socket device with which the new connection is to be established.
        ///
        /// Returns: YES if the connection should be established, NO otherwise.
        ///
        /// The VZVirtioSocketConnection object owns a file descriptor for this connection. Data can be sent and received through that file descriptor.
        /// If the connection is accepted, the implementation should keep a reference to the connection object to send and receive data.
        #[optional]
        #[unsafe(method(listener:shouldAcceptNewConnection:fromSocketDevice:))]
        #[unsafe(method_family = none)]
        unsafe fn listener_shouldAcceptNewConnection_fromSocketDevice(
            &self,
            listener: &VZVirtioSocketListener,
            connection: &VZVirtioSocketConnection,
            socket_device: &VZVirtioSocketDevice,
        ) -> bool;
    }
);
