//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coremotion/cmheadphoneactivitystatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CMHeadphoneActivityStatus(pub NSInteger);
impl CMHeadphoneActivityStatus {
    #[doc(alias = "CMHeadphoneActivityStatusDisconnected")]
    pub const Disconnected: Self = Self(0);
    #[doc(alias = "CMHeadphoneActivityStatusConnected")]
    pub const Connected: Self = Self(1);
}

unsafe impl Encode for CMHeadphoneActivityStatus {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CMHeadphoneActivityStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremotion/cmheadphoneactivitystatushandler?language=objc)
#[cfg(feature = "block2")]
pub type CMHeadphoneActivityStatusHandler =
    *mut block2::DynBlock<dyn Fn(CMHeadphoneActivityStatus, *mut NSError)>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremotion/cmheadphoneactivityhandler?language=objc)
#[cfg(all(
    feature = "CMLogItem",
    feature = "CMMotionActivity",
    feature = "block2"
))]
pub type CMHeadphoneActivityHandler =
    *mut block2::DynBlock<dyn Fn(*mut CMMotionActivity, *mut NSError)>;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coremotion/cmheadphoneactivitymanager?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CMHeadphoneActivityManager;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for CMHeadphoneActivityManager {}
);

impl CMHeadphoneActivityManager {
    extern_methods!(
        #[cfg(feature = "CMAuthorization")]
        #[unsafe(method(authorizationStatus))]
        #[unsafe(method_family = none)]
        pub unsafe fn authorizationStatus() -> CMAuthorizationStatus;

        #[unsafe(method(isActivityAvailable))]
        #[unsafe(method_family = none)]
        pub unsafe fn isActivityAvailable(&self) -> bool;

        #[unsafe(method(isActivityActive))]
        #[unsafe(method_family = none)]
        pub unsafe fn isActivityActive(&self) -> bool;

        #[unsafe(method(isStatusAvailable))]
        #[unsafe(method_family = none)]
        pub unsafe fn isStatusAvailable(&self) -> bool;

        #[unsafe(method(isStatusActive))]
        #[unsafe(method_family = none)]
        pub unsafe fn isStatusActive(&self) -> bool;

        #[cfg(all(
            feature = "CMLogItem",
            feature = "CMMotionActivity",
            feature = "block2"
        ))]
        /// # Safety
        ///
        /// - `queue` possibly has additional threading requirements.
        /// - `handler` must be a valid pointer.
        #[unsafe(method(startActivityUpdatesToQueue:withHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn startActivityUpdatesToQueue_withHandler(
            &self,
            queue: &NSOperationQueue,
            handler: CMHeadphoneActivityHandler,
        );

        #[unsafe(method(stopActivityUpdates))]
        #[unsafe(method_family = none)]
        pub unsafe fn stopActivityUpdates(&self);

        #[cfg(feature = "block2")]
        /// # Safety
        ///
        /// - `queue` possibly has additional threading requirements.
        /// - `handler` must be a valid pointer.
        #[unsafe(method(startStatusUpdatesToQueue:withHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn startStatusUpdatesToQueue_withHandler(
            &self,
            queue: &NSOperationQueue,
            handler: CMHeadphoneActivityStatusHandler,
        );

        #[unsafe(method(stopStatusUpdates))]
        #[unsafe(method_family = none)]
        pub unsafe fn stopStatusUpdates(&self);
    );
}

/// Methods declared on superclass `NSObject`.
impl CMHeadphoneActivityManager {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
