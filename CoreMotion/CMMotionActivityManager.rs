//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coremotion/cmmotionactivityhandler?language=objc)
#[cfg(all(
    feature = "CMLogItem",
    feature = "CMMotionActivity",
    feature = "block2"
))]
pub type CMMotionActivityHandler = *mut block2::DynBlock<dyn Fn(*mut CMMotionActivity)>;

/// [Apple's documentation](https://developer.apple.com/documentation/coremotion/cmmotionactivityqueryhandler?language=objc)
#[cfg(all(
    feature = "CMLogItem",
    feature = "CMMotionActivity",
    feature = "block2"
))]
pub type CMMotionActivityQueryHandler =
    *mut block2::DynBlock<dyn Fn(*mut NSArray<CMMotionActivity>, *mut NSError)>;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coremotion/cmmotionactivitymanager?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CMMotionActivityManager;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for CMMotionActivityManager {}
);

impl CMMotionActivityManager {
    extern_methods!(
        #[unsafe(method(isActivityAvailable))]
        #[unsafe(method_family = none)]
        pub unsafe fn isActivityAvailable() -> bool;

        #[cfg(feature = "CMAuthorization")]
        #[unsafe(method(authorizationStatus))]
        #[unsafe(method_family = none)]
        pub unsafe fn authorizationStatus() -> CMAuthorizationStatus;

        #[cfg(all(
            feature = "CMLogItem",
            feature = "CMMotionActivity",
            feature = "block2"
        ))]
        /// # Safety
        ///
        /// - `queue` possibly has additional threading requirements.
        /// - `handler` must be a valid pointer.
        #[unsafe(method(queryActivityStartingFromDate:toDate:toQueue:withHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn queryActivityStartingFromDate_toDate_toQueue_withHandler(
            &self,
            start: &NSDate,
            end: &NSDate,
            queue: &NSOperationQueue,
            handler: CMMotionActivityQueryHandler,
        );

        #[cfg(all(
            feature = "CMLogItem",
            feature = "CMMotionActivity",
            feature = "block2"
        ))]
        /// # Safety
        ///
        /// - `queue` possibly has additional threading requirements.
        /// - `handler` must be a valid pointer.
        #[unsafe(method(startActivityUpdatesToQueue:withHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn startActivityUpdatesToQueue_withHandler(
            &self,
            queue: &NSOperationQueue,
            handler: CMMotionActivityHandler,
        );

        #[unsafe(method(stopActivityUpdates))]
        #[unsafe(method_family = none)]
        pub unsafe fn stopActivityUpdates(&self);
    );
}

/// Methods declared on superclass `NSObject`.
impl CMMotionActivityManager {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
