//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;

use crate::*;

/// A frame index in the layer’s timeline.
///
/// The layer assigns sequential indexes to the frames it provides to
/// your app.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/compositorservices/cp_layer_frame_index_t?language=objc)
pub type cp_layer_frame_index_t = u64;

/// The sequential index for a frame in the compositor’s timeline.
///
/// During the creation of your content, the compositor creates
/// frames for you to render your content. This type stores the
/// index the compositor assigns to that frame. The compositor
/// presents frames onscreen sequentially based on their indexes.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/compositorservices/cp_compositor_frame_index_t?language=objc)
pub type cp_compositor_frame_index_t = u64;

/// A Mach absolute time clock value.
///
/// Mach absolute time measures the number of ticks that have elapsed
/// since an arbitrary point after system startup. Each value represents
/// a unique point in time during the course of your app's execution.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/compositorservices/cp_time?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct cp_time {
    pub cp_mach_abs_time: u64,
}

unsafe impl Encode for cp_time {
    const ENCODING: Encoding = Encoding::Struct("cp_time", &[<u64>::ENCODING]);
}

unsafe impl RefEncode for cp_time {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// A Mach absolute time clock value.
///
/// Mach absolute time measures the number of ticks that have elapsed
/// since an arbitrary point after system startup. Each value represents
/// a unique point in time during the course of your app's execution.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/compositorservices/cp_time_t?language=objc)
pub type cp_time_t = cp_time;

impl cp_time {
    /// Converts a Mach absolute time value to a Core Foundation time value.
    ///
    /// - Parameters:
    /// - time: The time value to convert.
    /// - Returns: The elapsed time in seconds that correspond to the specified
    /// time value.
    #[doc(alias = "cp_time_to_cf_time_interval")]
    #[cfg(feature = "objc2-core-foundation")]
    #[inline]
    pub unsafe fn to_cf_time_interval(time: cp_time_t) -> CFTimeInterval {
        extern "C-unwind" {
            fn cp_time_to_cf_time_interval(time: cp_time_t) -> CFTimeInterval;
        }
        unsafe { cp_time_to_cf_time_interval(time) }
    }

    /// Blocks the current thread until the specified time.
    ///
    /// - Parameters:
    /// - time: The Mach absolute time at which to wake up the thread.
    #[doc(alias = "cp_time_wait_until")]
    #[inline]
    pub unsafe fn wait_until(time: cp_time_t) {
        extern "C-unwind" {
            fn cp_time_wait_until(time: cp_time_t);
        }
        unsafe { cp_time_wait_until(time) }
    }
}

/// Axis direction convention for defining the X/Y/Z directions.
///
/// This can be used to define different coordinate systems such
/// as model/view/normalized device coordinate spaces for rendering.
///
///
/// Note: only defined +X = right convention as this is exclusively used
/// by ``cp_drawable_compute_projection``
/// which currently only supports right convention mainly due to foveated
/// rendering rasterization rate maps using a right axis.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/compositorservices/cp_axis_direction_convention?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct cp_axis_direction_convention(pub u8);
impl cp_axis_direction_convention {
    #[doc(alias = "cp_axis_direction_convention_right_up_back")]
    pub const right_up_back: Self = Self(0);
    #[doc(alias = "cp_axis_direction_convention_right_up_forward")]
    pub const right_up_forward: Self = Self(1);
    #[doc(alias = "cp_axis_direction_convention_right_down_back")]
    pub const right_down_back: Self = Self(2);
    #[doc(alias = "cp_axis_direction_convention_right_down_forward")]
    pub const right_down_forward: Self = Self(3);
}

unsafe impl Encode for cp_axis_direction_convention {
    const ENCODING: Encoding = u8::ENCODING;
}

unsafe impl RefEncode for cp_axis_direction_convention {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Render quality controls the quality which drawing happens at.
///
/// This can be used to increase the quality of what users see,
/// however this directly impacts the memory allocated for resources
/// which is billed to the app as well as per-frame GPU time. The app
/// should monitor its frame rate to ensure its not regularly missing
/// frames and will likely need to change the quality based on scene
/// complexity that is being shown.
///
/// To control the memory allocated for resources
///
/// See: ``cp_layer_renderer_configuration_set_max_render_quality``
/// To control the per-frame GPU cost
///
/// See: ``cp_layer_renderer_set_render_quality``
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/compositorservices/cp_render_quality_t?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
pub type cp_render_quality_t = c_float;

extern "C-unwind" {
    #[cfg(feature = "objc2-core-foundation")]
    #[deprecated = "renamed to `cp_time::to_cf_time_interval`"]
    pub fn cp_time_to_cf_time_interval(time: cp_time_t) -> CFTimeInterval;
}

extern "C-unwind" {
    #[deprecated = "renamed to `cp_time::wait_until`"]
    pub fn cp_time_wait_until(time: cp_time_t);
}
