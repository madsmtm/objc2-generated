// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "SystemConfiguration", kind = "framework")]
extern "C" {}

#[cfg(feature = "CaptiveNetwork")]
#[path = "CaptiveNetwork.rs"]
mod __CaptiveNetwork;
#[cfg(feature = "DHCPClientPreferences")]
#[path = "DHCPClientPreferences.rs"]
mod __DHCPClientPreferences;
#[cfg(feature = "SCDynamicStore")]
#[path = "SCDynamicStore.rs"]
mod __SCDynamicStore;
#[cfg(feature = "SCDynamicStoreCopyDHCPInfo")]
#[path = "SCDynamicStoreCopyDHCPInfo.rs"]
mod __SCDynamicStoreCopyDHCPInfo;
#[cfg(feature = "SCDynamicStoreCopySpecific")]
#[path = "SCDynamicStoreCopySpecific.rs"]
mod __SCDynamicStoreCopySpecific;
#[cfg(feature = "SCDynamicStoreKey")]
#[path = "SCDynamicStoreKey.rs"]
mod __SCDynamicStoreKey;
#[cfg(feature = "SCNetwork")]
#[path = "SCNetwork.rs"]
mod __SCNetwork;
#[cfg(feature = "SCNetworkConfiguration")]
#[path = "SCNetworkConfiguration.rs"]
mod __SCNetworkConfiguration;
#[cfg(feature = "SCNetworkConnection")]
#[path = "SCNetworkConnection.rs"]
mod __SCNetworkConnection;
#[cfg(feature = "SCNetworkReachability")]
#[path = "SCNetworkReachability.rs"]
mod __SCNetworkReachability;
#[cfg(feature = "SCPreferences")]
#[path = "SCPreferences.rs"]
mod __SCPreferences;
#[cfg(feature = "SCPreferencesPath")]
#[path = "SCPreferencesPath.rs"]
mod __SCPreferencesPath;
#[cfg(feature = "SCPreferencesSetSpecific")]
#[path = "SCPreferencesSetSpecific.rs"]
mod __SCPreferencesSetSpecific;
#[cfg(feature = "SCSchemaDefinitions")]
#[path = "SCSchemaDefinitions.rs"]
mod __SCSchemaDefinitions;

#[cfg(feature = "CaptiveNetwork")]
pub use self::__CaptiveNetwork::kCNNetworkInfoKeyBSSID;
#[cfg(feature = "CaptiveNetwork")]
pub use self::__CaptiveNetwork::kCNNetworkInfoKeySSID;
#[cfg(feature = "CaptiveNetwork")]
pub use self::__CaptiveNetwork::kCNNetworkInfoKeySSIDData;
#[cfg(feature = "CaptiveNetwork")]
pub use self::__CaptiveNetwork::CNCopyCurrentNetworkInfo;
#[cfg(feature = "CaptiveNetwork")]
pub use self::__CaptiveNetwork::CNCopySupportedInterfaces;
#[cfg(feature = "CaptiveNetwork")]
pub use self::__CaptiveNetwork::CNMarkPortalOffline;
#[cfg(feature = "CaptiveNetwork")]
pub use self::__CaptiveNetwork::CNMarkPortalOnline;
#[cfg(feature = "CaptiveNetwork")]
pub use self::__CaptiveNetwork::CNSetSupportedSSIDs;
#[cfg(feature = "DHCPClientPreferences")]
pub use self::__DHCPClientPreferences::DHCPClientPreferencesCopyApplicationOptions;
#[cfg(feature = "DHCPClientPreferences")]
pub use self::__DHCPClientPreferences::DHCPClientPreferencesSetApplicationOptions;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::kSCDynamicStoreUseSessionKeys;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStore;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreAddTemporaryValue;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreAddValue;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreCallBack;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreContext;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreCopyKeyList;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreCopyMultiple;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreCopyNotifiedKeys;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreCopyValue;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreCreate;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreCreateRunLoopSource;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreCreateWithOptions;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreNotifyValue;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreRemoveValue;
#[cfg(all(feature = "SCDynamicStore", feature = "dispatch2"))]
pub use self::__SCDynamicStore::SCDynamicStoreSetDispatchQueue;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreSetMultiple;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreSetNotificationKeys;
#[cfg(feature = "SCDynamicStore")]
pub use self::__SCDynamicStore::SCDynamicStoreSetValue;
#[cfg(feature = "SCDynamicStoreCopyDHCPInfo")]
pub use self::__SCDynamicStoreCopyDHCPInfo::DHCPInfoGetLeaseExpirationTime;
#[cfg(feature = "SCDynamicStoreCopyDHCPInfo")]
pub use self::__SCDynamicStoreCopyDHCPInfo::DHCPInfoGetLeaseStartTime;
#[cfg(feature = "SCDynamicStoreCopyDHCPInfo")]
pub use self::__SCDynamicStoreCopyDHCPInfo::DHCPInfoGetOptionData;
#[cfg(all(feature = "SCDynamicStore", feature = "SCDynamicStoreCopyDHCPInfo"))]
pub use self::__SCDynamicStoreCopyDHCPInfo::SCDynamicStoreCopyDHCPInfo;
#[cfg(all(feature = "SCDynamicStore", feature = "SCDynamicStoreCopySpecific"))]
pub use self::__SCDynamicStoreCopySpecific::SCDynamicStoreCopyComputerName;
#[cfg(all(
    feature = "SCDynamicStore",
    feature = "SCDynamicStoreCopySpecific",
    feature = "libc"
))]
pub use self::__SCDynamicStoreCopySpecific::SCDynamicStoreCopyConsoleUser;
#[cfg(all(feature = "SCDynamicStore", feature = "SCDynamicStoreCopySpecific"))]
pub use self::__SCDynamicStoreCopySpecific::SCDynamicStoreCopyLocalHostName;
#[cfg(all(feature = "SCDynamicStore", feature = "SCDynamicStoreCopySpecific"))]
pub use self::__SCDynamicStoreCopySpecific::SCDynamicStoreCopyLocation;
#[cfg(all(feature = "SCDynamicStore", feature = "SCDynamicStoreCopySpecific"))]
pub use self::__SCDynamicStoreCopySpecific::SCDynamicStoreCopyProxies;
#[cfg(feature = "SCDynamicStoreKey")]
pub use self::__SCDynamicStoreKey::SCDynamicStoreKeyCreateComputerName;
#[cfg(feature = "SCDynamicStoreKey")]
pub use self::__SCDynamicStoreKey::SCDynamicStoreKeyCreateConsoleUser;
#[cfg(feature = "SCDynamicStoreKey")]
pub use self::__SCDynamicStoreKey::SCDynamicStoreKeyCreateHostNames;
#[cfg(feature = "SCDynamicStoreKey")]
pub use self::__SCDynamicStoreKey::SCDynamicStoreKeyCreateLocation;
#[cfg(feature = "SCDynamicStoreKey")]
pub use self::__SCDynamicStoreKey::SCDynamicStoreKeyCreateNetworkGlobalEntity;
#[cfg(feature = "SCDynamicStoreKey")]
pub use self::__SCDynamicStoreKey::SCDynamicStoreKeyCreateNetworkInterface;
#[cfg(feature = "SCDynamicStoreKey")]
pub use self::__SCDynamicStoreKey::SCDynamicStoreKeyCreateNetworkInterfaceEntity;
#[cfg(feature = "SCDynamicStoreKey")]
pub use self::__SCDynamicStoreKey::SCDynamicStoreKeyCreateNetworkServiceEntity;
#[cfg(feature = "SCDynamicStoreKey")]
pub use self::__SCDynamicStoreKey::SCDynamicStoreKeyCreateProxies;
#[cfg(feature = "SCNetwork")]
pub use self::__SCNetwork::kSCNetworkFlagsConnectionAutomatic;
#[cfg(feature = "SCNetwork")]
pub use self::__SCNetwork::kSCNetworkFlagsConnectionRequired;
#[cfg(feature = "SCNetwork")]
pub use self::__SCNetwork::kSCNetworkFlagsInterventionRequired;
#[cfg(feature = "SCNetwork")]
pub use self::__SCNetwork::kSCNetworkFlagsIsDirect;
#[cfg(feature = "SCNetwork")]
pub use self::__SCNetwork::kSCNetworkFlagsIsLocalAddress;
#[cfg(feature = "SCNetwork")]
pub use self::__SCNetwork::kSCNetworkFlagsReachable;
#[cfg(feature = "SCNetwork")]
pub use self::__SCNetwork::kSCNetworkFlagsTransientConnection;
#[cfg(all(feature = "SCNetwork", feature = "libc"))]
pub use self::__SCNetwork::SCNetworkCheckReachabilityByAddress;
#[cfg(feature = "SCNetwork")]
pub use self::__SCNetwork::SCNetworkCheckReachabilityByName;
#[cfg(feature = "SCNetwork")]
pub use self::__SCNetwork::SCNetworkConnectionFlags;
#[cfg(feature = "SCNetwork")]
pub use self::__SCNetwork::SCNetworkInterfaceRefreshConfiguration;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCBondStatusDeviceAggregationStatus;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCBondStatusDeviceCollecting;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCBondStatusDeviceDistributing;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCBondStatusLinkInvalid;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCBondStatusNoPartner;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCBondStatusNotInActiveGroup;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCBondStatusOK;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCBondStatusUnknown;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceIPv4;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceType6to4;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypeBluetooth;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypeBond;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypeEthernet;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypeFireWire;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypeIEEE80211;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypeIPSec;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypeIPv4;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypeIrDA;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypeL2TP;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypeModem;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypePPP;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypePPTP;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypeSerial;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypeVLAN;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkInterfaceTypeWWAN;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkProtocolTypeDNS;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkProtocolTypeIPv4;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkProtocolTypeIPv6;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkProtocolTypeProxies;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::kSCNetworkProtocolTypeSMB;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCBondInterface;
#[cfg(all(feature = "SCNetworkConfiguration", feature = "SCPreferences"))]
pub use self::__SCNetworkConfiguration::SCBondInterfaceCopyAll;
#[cfg(all(feature = "SCNetworkConfiguration", feature = "SCPreferences"))]
pub use self::__SCNetworkConfiguration::SCBondInterfaceCopyAvailableMemberInterfaces;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCBondInterfaceCopyStatus;
#[cfg(all(feature = "SCNetworkConfiguration", feature = "SCPreferences"))]
pub use self::__SCNetworkConfiguration::SCBondInterfaceCreate;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCBondInterfaceGetMemberInterfaces;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCBondInterfaceGetOptions;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCBondInterfaceRemove;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCBondInterfaceSetLocalizedDisplayName;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCBondInterfaceSetMemberInterfaces;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCBondInterfaceSetOptions;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCBondStatus;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCBondStatusGetInterfaceStatus;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCBondStatusGetMemberInterfaces;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterface;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceCopyAll;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceCopyMTU;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceCopyMediaOptions;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceCopyMediaSubTypeOptions;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceCopyMediaSubTypes;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceCreateWithInterface;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceForceConfigurationRefresh;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceGetBSDName;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceGetConfiguration;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceGetExtendedConfiguration;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceGetHardwareAddressString;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceGetInterface;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceGetInterfaceType;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceGetLocalizedDisplayName;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceGetSupportedInterfaceTypes;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceGetSupportedProtocolTypes;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceSetConfiguration;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceSetExtendedConfiguration;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceSetMTU;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkInterfaceSetMediaOptions;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkProtocol;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkProtocolGetConfiguration;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkProtocolGetEnabled;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkProtocolGetProtocolType;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkProtocolSetConfiguration;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkProtocolSetEnabled;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkService;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkServiceAddProtocolType;
#[cfg(all(feature = "SCNetworkConfiguration", feature = "SCPreferences"))]
pub use self::__SCNetworkConfiguration::SCNetworkServiceCopy;
#[cfg(all(feature = "SCNetworkConfiguration", feature = "SCPreferences"))]
pub use self::__SCNetworkConfiguration::SCNetworkServiceCopyAll;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkServiceCopyProtocol;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkServiceCopyProtocols;
#[cfg(all(feature = "SCNetworkConfiguration", feature = "SCPreferences"))]
pub use self::__SCNetworkConfiguration::SCNetworkServiceCreate;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkServiceEstablishDefaultConfiguration;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkServiceGetEnabled;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkServiceGetInterface;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkServiceGetName;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkServiceGetServiceID;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkServiceRemove;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkServiceRemoveProtocolType;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkServiceSetEnabled;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkServiceSetName;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkSet;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkSetAddService;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkSetContainsInterface;
#[cfg(all(feature = "SCNetworkConfiguration", feature = "SCPreferences"))]
pub use self::__SCNetworkConfiguration::SCNetworkSetCopy;
#[cfg(all(feature = "SCNetworkConfiguration", feature = "SCPreferences"))]
pub use self::__SCNetworkConfiguration::SCNetworkSetCopyAll;
#[cfg(all(feature = "SCNetworkConfiguration", feature = "SCPreferences"))]
pub use self::__SCNetworkConfiguration::SCNetworkSetCopyCurrent;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkSetCopyServices;
#[cfg(all(feature = "SCNetworkConfiguration", feature = "SCPreferences"))]
pub use self::__SCNetworkConfiguration::SCNetworkSetCreate;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkSetGetName;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkSetGetServiceOrder;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkSetGetSetID;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkSetRemove;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkSetRemoveService;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkSetSetCurrent;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkSetSetName;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCNetworkSetSetServiceOrder;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCVLANInterface;
#[cfg(all(feature = "SCNetworkConfiguration", feature = "SCPreferences"))]
pub use self::__SCNetworkConfiguration::SCVLANInterfaceCopyAll;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCVLANInterfaceCopyAvailablePhysicalInterfaces;
#[cfg(all(feature = "SCNetworkConfiguration", feature = "SCPreferences"))]
pub use self::__SCNetworkConfiguration::SCVLANInterfaceCreate;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCVLANInterfaceGetOptions;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCVLANInterfaceGetPhysicalInterface;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCVLANInterfaceGetTag;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCVLANInterfaceRemove;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCVLANInterfaceSetLocalizedDisplayName;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCVLANInterfaceSetOptions;
#[cfg(feature = "SCNetworkConfiguration")]
pub use self::__SCNetworkConfiguration::SCVLANInterfaceSetPhysicalInterfaceAndTag;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnection;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionCallBack;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionContext;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionCopyExtendedStatus;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionCopyServiceID;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionCopyStatistics;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionCopyUserOptions;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionCopyUserPreferences;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionCreateWithServiceID;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionGetStatus;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionPPPStatus;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionScheduleWithRunLoop;
#[cfg(all(feature = "SCNetworkConnection", feature = "dispatch2"))]
pub use self::__SCNetworkConnection::SCNetworkConnectionSetDispatchQueue;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionStart;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionStatus;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionStop;
#[cfg(feature = "SCNetworkConnection")]
pub use self::__SCNetworkConnection::SCNetworkConnectionUnscheduleFromRunLoop;
#[cfg(feature = "SCNetworkReachability")]
pub use self::__SCNetworkReachability::SCNetworkReachability;
#[cfg(feature = "SCNetworkReachability")]
pub use self::__SCNetworkReachability::SCNetworkReachabilityCallBack;
#[cfg(feature = "SCNetworkReachability")]
pub use self::__SCNetworkReachability::SCNetworkReachabilityContext;
#[cfg(all(feature = "SCNetworkReachability", feature = "libc"))]
pub use self::__SCNetworkReachability::SCNetworkReachabilityCreateWithAddress;
#[cfg(all(feature = "SCNetworkReachability", feature = "libc"))]
pub use self::__SCNetworkReachability::SCNetworkReachabilityCreateWithAddressPair;
#[cfg(feature = "SCNetworkReachability")]
pub use self::__SCNetworkReachability::SCNetworkReachabilityCreateWithName;
#[cfg(feature = "SCNetworkReachability")]
pub use self::__SCNetworkReachability::SCNetworkReachabilityFlags;
#[cfg(feature = "SCNetworkReachability")]
pub use self::__SCNetworkReachability::SCNetworkReachabilityGetFlags;
#[cfg(feature = "SCNetworkReachability")]
pub use self::__SCNetworkReachability::SCNetworkReachabilityScheduleWithRunLoop;
#[cfg(feature = "SCNetworkReachability")]
pub use self::__SCNetworkReachability::SCNetworkReachabilitySetCallback;
#[cfg(all(feature = "SCNetworkReachability", feature = "dispatch2"))]
pub use self::__SCNetworkReachability::SCNetworkReachabilitySetDispatchQueue;
#[cfg(feature = "SCNetworkReachability")]
pub use self::__SCNetworkReachability::SCNetworkReachabilityUnscheduleFromRunLoop;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferences;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesAddValue;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesApplyChanges;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesCallBack;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesCommitChanges;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesContext;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesCopyKeyList;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesCreate;
#[cfg(all(feature = "SCPreferences", feature = "objc2-security"))]
pub use self::__SCPreferences::SCPreferencesCreateWithAuthorization;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesGetSignature;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesGetValue;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesLock;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesNotification;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesRemoveValue;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesScheduleWithRunLoop;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesSetCallback;
#[cfg(all(feature = "SCPreferences", feature = "dispatch2"))]
pub use self::__SCPreferences::SCPreferencesSetDispatchQueue;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesSetValue;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesSynchronize;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesUnlock;
#[cfg(feature = "SCPreferences")]
pub use self::__SCPreferences::SCPreferencesUnscheduleFromRunLoop;
#[cfg(all(feature = "SCPreferences", feature = "SCPreferencesPath"))]
pub use self::__SCPreferencesPath::SCPreferencesPathCreateUniqueChild;
#[cfg(all(feature = "SCPreferences", feature = "SCPreferencesPath"))]
pub use self::__SCPreferencesPath::SCPreferencesPathGetLink;
#[cfg(all(feature = "SCPreferences", feature = "SCPreferencesPath"))]
pub use self::__SCPreferencesPath::SCPreferencesPathGetValue;
#[cfg(all(feature = "SCPreferences", feature = "SCPreferencesPath"))]
pub use self::__SCPreferencesPath::SCPreferencesPathRemoveValue;
#[cfg(all(feature = "SCPreferences", feature = "SCPreferencesPath"))]
pub use self::__SCPreferencesPath::SCPreferencesPathSetLink;
#[cfg(all(feature = "SCPreferences", feature = "SCPreferencesPath"))]
pub use self::__SCPreferencesPath::SCPreferencesPathSetValue;
#[cfg(all(feature = "SCPreferences", feature = "SCPreferencesSetSpecific"))]
pub use self::__SCPreferencesSetSpecific::SCPreferencesSetComputerName;
#[cfg(all(feature = "SCPreferences", feature = "SCPreferencesSetSpecific"))]
pub use self::__SCPreferencesSetSpecific::SCPreferencesSetLocalHostName;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCCompAnyRegex;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCCompGlobal;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCCompHostNames;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCCompInterface;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCCompNetwork;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCCompService;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCCompSystem;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCCompUsers;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCDynamicStoreDomainFile;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCDynamicStoreDomainPlugin;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCDynamicStoreDomainPrefs;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCDynamicStoreDomainSetup;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCDynamicStoreDomainState;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCDynamicStorePropNetInterfaces;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCDynamicStorePropNetPrimaryInterface;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCDynamicStorePropNetPrimaryService;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCDynamicStorePropNetServiceIDs;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCDynamicStorePropSetupCurrentSet;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCDynamicStorePropSetupLastUpdated;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNet6to4;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetAirPort;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetDHCP;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetDNS;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetEthernet;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetFireWire;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetIPSec;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetIPv4;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetIPv6;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetInterface;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetL2TP;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetLink;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetModem;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetPPP;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetPPPSerial;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetPPPoE;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetPPTP;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetProxies;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntNetSMB;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCEntUsersConsoleUser;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPrefCurrentSet;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPrefNetworkServices;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPrefSets;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPrefSystem;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropInterfaceName;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropMACAddress;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNet6to4Relay;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetAirPortAllowNetCreation;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetAirPortAuthPassword;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetAirPortAuthPasswordEncryption;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetAirPortJoinMode;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetAirPortPowerEnabled;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetAirPortPreferredNetwork;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetAirPortSavePasswords;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetDNSDomainName;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetDNSOptions;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetDNSSearchDomains;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetDNSSearchOrder;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetDNSServerAddresses;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetDNSServerPort;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetDNSServerTimeout;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetDNSSortList;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetDNSSupplementalMatchDomains;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetDNSSupplementalMatchOrders;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetEthernetMTU;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetEthernetMediaOptions;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetEthernetMediaSubType;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPSecAuthenticationMethod;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPSecConnectTime;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPSecLocalCertificate;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPSecLocalIdentifier;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPSecLocalIdentifierType;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPSecRemoteAddress;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPSecSharedSecret;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPSecSharedSecretEncryption;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPSecStatus;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPSecXAuthEnabled;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPSecXAuthName;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPSecXAuthPassword;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPSecXAuthPasswordEncryption;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPv4Addresses;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPv4BroadcastAddresses;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPv4ConfigMethod;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPv4DHCPClientID;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPv4DestAddresses;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPv4Router;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPv4SubnetMasks;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPv6Addresses;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPv6ConfigMethod;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPv6DestAddresses;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPv6Flags;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPv6PrefixLength;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetIPv6Router;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetInterfaceDeviceName;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetInterfaceHardware;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetInterfaceSubType;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetInterfaceSupportsModemOnHold;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetInterfaceType;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetInterfaces;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetL2TPIPSecSharedSecret;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetL2TPIPSecSharedSecretEncryption;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetL2TPTransport;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetLinkActive;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetLinkDetaching;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetLocalHostName;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemAccessPointName;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemConnectSpeed;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemConnectionPersonality;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemConnectionScript;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemDataCompression;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemDeviceContextID;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemDeviceModel;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemDeviceVendor;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemDialMode;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemErrorCorrection;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemHoldCallWaitingAudibleAlert;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemHoldDisconnectOnAnswer;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemHoldEnabled;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemHoldReminder;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemHoldReminderTime;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemNote;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemPulseDial;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemSpeaker;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetModemSpeed;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetOverridePrimary;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPACSPEnabled;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPAuthEAPPlugins;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPAuthName;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPAuthPassword;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPAuthPasswordEncryption;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPAuthPrompt;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPAuthProtocol;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPCCPEnabled;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPCCPMPPE128Enabled;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPCCPMPPE40Enabled;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPCommAlternateRemoteAddress;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPCommConnectDelay;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPCommDisplayTerminalWindow;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPCommRedialCount;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPCommRedialEnabled;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPCommRedialInterval;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPCommRemoteAddress;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPCommTerminalScript;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPCommUseTerminalScript;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPConnectTime;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPDeviceLastCause;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPDialOnDemand;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPDisconnectOnFastUserSwitch;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPDisconnectOnIdle;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPDisconnectOnIdleTimer;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPDisconnectOnLogout;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPDisconnectOnSleep;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPDisconnectTime;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPIPCPCompressionVJ;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPIPCPUsePeerDNS;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPIdleReminder;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPIdleReminderTimer;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPLCPCompressionACField;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPLCPCompressionPField;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPLCPEchoEnabled;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPLCPEchoFailure;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPLCPEchoInterval;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPLCPMRU;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPLCPMTU;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPLCPReceiveACCM;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPLCPTransmitACCM;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPLastCause;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPLogfile;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPOverridePrimary;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPPlugins;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPRetryConnectTime;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPSessionTimer;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPStatus;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPUseSessionTimer;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetPPPVerboseLogging;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesExceptionsList;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesExcludeSimpleHostnames;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesFTPEnable;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesFTPPassive;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesFTPPort;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesFTPProxy;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesFTPUser;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesGopherEnable;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesGopherPort;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesGopherProxy;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesGopherUser;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesHTTPEnable;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesHTTPPort;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesHTTPProxy;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesHTTPSEnable;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesHTTPSPort;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesHTTPSProxy;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesHTTPSUser;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesHTTPUser;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesProxyAutoConfigEnable;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesProxyAutoConfigJavaScript;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesProxyAutoConfigURLString;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesProxyAutoDiscoveryEnable;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesRTSPEnable;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesRTSPPort;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesRTSPProxy;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesRTSPUser;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesSOCKSEnable;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesSOCKSPort;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesSOCKSProxy;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetProxiesSOCKSUser;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetSMBNetBIOSName;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetSMBNetBIOSNodeType;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetSMBNetBIOSScope;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetSMBWINSAddresses;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetSMBWorkgroup;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropNetServiceOrder;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropSystemComputerName;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropSystemComputerNameEncoding;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropUserDefinedName;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropUsersConsoleUserGID;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropUsersConsoleUserName;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropUsersConsoleUserUID;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCPropVersion;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCResvInactive;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCResvLink;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetAirPortAuthPasswordEncryptionKeychain;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetAirPortJoinModeAutomatic;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetAirPortJoinModePreferred;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetAirPortJoinModeRanked;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetAirPortJoinModeRecent;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetAirPortJoinModeStrongest;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPSecAuthenticationMethodCertificate;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPSecAuthenticationMethodHybrid;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPSecAuthenticationMethodSharedSecret;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPSecLocalIdentifierTypeKeyID;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPSecSharedSecretEncryptionKeychain;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPSecXAuthPasswordEncryptionKeychain;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPSecXAuthPasswordEncryptionPrompt;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPv4ConfigMethodAutomatic;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPv4ConfigMethodBOOTP;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPv4ConfigMethodDHCP;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPv4ConfigMethodINFORM;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPv4ConfigMethodLinkLocal;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPv4ConfigMethodManual;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPv4ConfigMethodPPP;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPv6ConfigMethod6to4;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPv6ConfigMethodAutomatic;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPv6ConfigMethodLinkLocal;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPv6ConfigMethodManual;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetIPv6ConfigMethodRouterAdvertisement;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetInterfaceSubTypeL2TP;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetInterfaceSubTypePPPSerial;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetInterfaceSubTypePPPoE;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetInterfaceSubTypePPTP;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetInterfaceType6to4;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetInterfaceTypeEthernet;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetInterfaceTypeFireWire;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetInterfaceTypeIPSec;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetInterfaceTypePPP;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetL2TPIPSecSharedSecretEncryptionKeychain;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetL2TPTransportIP;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetL2TPTransportIPSec;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetModemDialModeIgnoreDialTone;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetModemDialModeManual;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetModemDialModeWaitForDialTone;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetPPPAuthPasswordEncryptionKeychain;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetPPPAuthPasswordEncryptionToken;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetPPPAuthPromptAfter;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetPPPAuthPromptBefore;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetPPPAuthProtocolCHAP;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetPPPAuthProtocolEAP;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetPPPAuthProtocolMSCHAP1;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetPPPAuthProtocolMSCHAP2;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetPPPAuthProtocolPAP;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetSMBNetBIOSNodeTypeBroadcast;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetSMBNetBIOSNodeTypeHybrid;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetSMBNetBIOSNodeTypeMixed;
#[cfg(feature = "SCSchemaDefinitions")]
pub use self::__SCSchemaDefinitions::kSCValNetSMBNetBIOSNodeTypePeer;
use core::ffi::*;
use core::ptr::NonNull;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusok?language=objc)
pub const kSCStatusOK: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusfailed?language=objc)
pub const kSCStatusFailed: c_uint = 1001;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusinvalidargument?language=objc)
pub const kSCStatusInvalidArgument: c_uint = 1002;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusaccesserror?language=objc)
pub const kSCStatusAccessError: c_uint = 1003;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusnokey?language=objc)
pub const kSCStatusNoKey: c_uint = 1004;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatuskeyexists?language=objc)
pub const kSCStatusKeyExists: c_uint = 1005;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatuslocked?language=objc)
pub const kSCStatusLocked: c_uint = 1006;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusneedlock?language=objc)
pub const kSCStatusNeedLock: c_uint = 1007;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusnostoresession?language=objc)
pub const kSCStatusNoStoreSession: c_uint = 2001;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusnostoreserver?language=objc)
pub const kSCStatusNoStoreServer: c_uint = 2002;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusnotifieractive?language=objc)
pub const kSCStatusNotifierActive: c_uint = 2003;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusnoprefssession?language=objc)
pub const kSCStatusNoPrefsSession: c_uint = 3001;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusprefsbusy?language=objc)
pub const kSCStatusPrefsBusy: c_uint = 3002;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusnoconfigfile?language=objc)
pub const kSCStatusNoConfigFile: c_uint = 3003;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusnolink?language=objc)
pub const kSCStatusNoLink: c_uint = 3004;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusstale?language=objc)
pub const kSCStatusStale: c_uint = 3005;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusmaxlink?language=objc)
pub const kSCStatusMaxLink: c_uint = 3006;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusreachabilityunknown?language=objc)
pub const kSCStatusReachabilityUnknown: c_uint = 4001;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusconnectionnoservice?language=objc)
pub const kSCStatusConnectionNoService: c_uint = 5001;
/// [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kscstatusconnectionignore?language=objc)
pub const kSCStatusConnectionIgnore: c_uint = 5002;

extern "C" {
    /// CFError domain associated with errors reported by
    /// the SystemConfiguration.framework.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/systemconfiguration/kcferrordomainsystemconfiguration?language=objc)
    pub static kCFErrorDomainSystemConfiguration: &'static CFString;
}

/// Returns the most recent status or error code generated
/// as the result of calling a System Configuration framework API.
///
/// Returns: Returns the last error encountered.
#[inline]
pub extern "C-unwind" fn SCCopyLastError() -> CFRetained<CFError> {
    extern "C-unwind" {
        fn SCCopyLastError() -> Option<NonNull<CFError>>;
    }
    let ret = unsafe { SCCopyLastError() };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

/// Returns the most recent status or error code generated
/// as the result of calling a System Configuration framework API.
///
/// Returns: Returns the last error encountered.
#[inline]
pub extern "C-unwind" fn SCError() -> c_int {
    extern "C-unwind" {
        fn SCError() -> c_int;
    }
    unsafe { SCError() }
}

/// Returns a pointer to the message string
/// associated with the specified status or error
/// number.
///
/// Parameter `status`: The status or error number.
///
/// Returns: Returns a pointer to the error message string.
#[inline]
pub extern "C-unwind" fn SCErrorString(status: c_int) -> NonNull<c_char> {
    extern "C-unwind" {
        fn SCErrorString(status: c_int) -> Option<NonNull<c_char>>;
    }
    let ret = unsafe { SCErrorString(status) };
    ret.expect("function was marked as returning non-null, but actually returned NULL")
}
