//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_app_kit::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-security")]
use objc2_security::*;

use crate::*;

/// Defines the button types that are used by AuthorizationPlugins.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/securityinterface/sfbuttontype?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SFButtonType(pub c_uint);
impl SFButtonType {
    #[doc(alias = "SFButtonTypeCancel")]
    pub const Cancel: Self = Self(0);
    #[doc(alias = "SFButtonTypeOK")]
    pub const OK: Self = Self(1);
    #[doc(alias = "SFButtonTypeBack")]
    pub const Back: Self = Self(SFButtonType::Cancel.0);
    #[doc(alias = "SFButtonTypeLogin")]
    pub const Login: Self = Self(SFButtonType::OK.0);
}

unsafe impl Encode for SFButtonType {
    const ENCODING: Encoding = c_uint::ENCODING;
}

unsafe impl RefEncode for SFButtonType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Defines the view types requested by AuthorizationPlugins.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/securityinterface/sfviewtype?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SFViewType(pub c_uint);
impl SFViewType {
    #[doc(alias = "SFViewTypeIdentityAndCredentials")]
    pub const IdentityAndCredentials: Self = Self(0);
    #[doc(alias = "SFViewTypeCredentials")]
    pub const Credentials: Self = Self(1);
}

unsafe impl Encode for SFViewType {
    const ENCODING: Encoding = c_uint::ENCODING;
}

unsafe impl RefEncode for SFViewType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// SFAuthorizationPluginView is a class that you can use to insert an NSView into AuthorizationPlugin interfaces.
    ///
    /// SFAuthorizationPluginView provides AuthorizationPlugin writers with an easy way to provide a user interface for their AuthorizationPlugin without having to duplicate the standard authentication dialog or the login window dialog.  This class was designed to be subclassed by the AuthorizationPlugin writer.  The following methods were designed to be overridden: buttonPressed:, didActivate, willActivateWithUser:, didDeactivate, firstKeyView, firstResponder, lastKeyView, setEnabled:, and viewForType:.  In order to display the user interface, the AuthorizationPlugin should create an instance of your subclass and then call displayView.  That will cause the appropriate dialog to be displayed and when credentials are needed, the overridden methods will be called in order to display the NSView provided by the subclass.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/securityinterface/sfauthorizationpluginview?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SFAuthorizationPluginView;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for SFAuthorizationPluginView {}
);

impl SFAuthorizationPluginView {
    extern_methods!(
        #[cfg(feature = "objc2-security")]
        /// The initialization method of this class.  You must provide the callbacks and engineRef that were provided to the AuthorizationPlugin and AuthorizationMechanismRef.
        ///
        /// Parameter `callbacks`: The AuthorizationCallbacks provided to the AuthorizationPlugin.
        ///
        /// Parameter `engineRef`: The AuthorizationEngineRef provided to the AuthorizationMechanismRef.
        #[unsafe(method(initWithCallbacks:andEngineRef:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCallbacks_andEngineRef(
            this: Allocated<Self>,
            callbacks: *const AuthorizationCallbacks,
            engine_ref: AuthorizationEngineRef,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "objc2-security")]
        /// An accessor method to the AuthorizationEngineRef provided to the init method.  Use this value when calling the functions of the AuthorizationCallbacks when you need to set the result or set a context value.
        #[unsafe(method(engineRef))]
        #[unsafe(method_family = none)]
        pub unsafe fn engineRef(&self) -> AuthorizationEngineRef;

        #[cfg(feature = "objc2-security")]
        /// An accessor method to the AuthorizationEngineRef provided to the init method.  Use this to get the function pointers to SetResult, SetContextValue, etc.  See the AuthorizationCallbacks documentation for more details.
        #[unsafe(method(callbacks))]
        #[unsafe(method_family = none)]
        pub unsafe fn callbacks(&self) -> *const AuthorizationCallbacks;

        /// When a user presses a button, this method will be called to inform the SFAuthorizationPluginView of the user's action. By default buttonPressed: will set a result of Deny when the OK or Login buttons are pressed.
        ///
        /// If a user has pressed Login or OK button was pressed, the subclass needs to set the context values for the short name of the user so that user attributes can be looked up.  Use kAuthorizationEnvironmentUsername as the key.  The subclass should also set any additional context values that are needed by the authentication plugin to verify the user's credentials.
        ///
        ///
        /// Parameter `inButtonType`: the type of button that was pressed.
        #[unsafe(method(buttonPressed:))]
        #[unsafe(method_family = none)]
        pub unsafe fn buttonPressed(&self, in_button_type: SFButtonType);

        /// Called by the Apple provided SecurityAgent plugin to get a description of the error that occurred during evaluation.  If no error occurred, the method should return nil.
        ///
        /// A downstream mechanism that works in cooperation with the SFAuthorizationPluginView can set a context value using the kAuthorizationContextFlagSticky flag to make it available to the SFAuthorizationPluginView in case of an error.
        #[unsafe(method(lastError))]
        #[unsafe(method_family = none)]
        pub unsafe fn lastError(&self) -> Option<Retained<NSError>>;

        /// Called when the user interface was made active by the AuthorizationPlugin.
        #[unsafe(method(didActivate))]
        #[unsafe(method_family = none)]
        pub unsafe fn didActivate(&self);

        /// Called by the Apple provided SecurityAgent plugin before the UI is made active.
        ///
        /// Parameter `inUserInformation`: is a dictionary contains the following information:
        /// kSFAuthorizationPluginViewUserNameKey - an NSString with the selected user's name
        /// kSFAuthorizationPluginViewUserShortNameKey - an NSString with the selected user's short name
        ///
        /// The user name can be used to pre-populate a Text Field.
        /// NOTE: inUserInformation may be nil.
        #[unsafe(method(willActivateWithUser:))]
        #[unsafe(method_family = none)]
        pub unsafe fn willActivateWithUser(&self, in_user_information: Option<&NSDictionary>);

        /// Called when the user interface is deactivated by the AuthorizationPlugin.
        #[unsafe(method(didDeactivate))]
        #[unsafe(method_family = none)]
        pub unsafe fn didDeactivate(&self);

        /// When called by the AuthorizationPlugin, the subclass should return the first view in the keyboard loop of the NSView.  The default value returned is nil.
        #[unsafe(method(firstKeyView))]
        #[unsafe(method_family = none)]
        pub unsafe fn firstKeyView(&self, mtm: MainThreadMarker) -> Option<Retained<NSView>>;

        /// When called by the AuthorizationPlugin, the subclass should return the view that should get the focus for keyboard events.  The default value returned is nil.
        #[unsafe(method(firstResponder))]
        #[unsafe(method_family = none)]
        pub unsafe fn firstResponder(&self, mtm: MainThreadMarker)
            -> Option<Retained<NSResponder>>;

        /// When called by the AuthorizationPlugin, the subclass should return the last view in the keyboard loop for the view.  The default value returned is nil.
        #[unsafe(method(lastKeyView))]
        #[unsafe(method_family = none)]
        pub unsafe fn lastKeyView(&self, mtm: MainThreadMarker) -> Option<Retained<NSView>>;

        /// When called by the AuthorizationPlugin, the subclass should call setEnabled: on the controls that are in its view.
        ///
        /// Parameter `inEnabled`: the state the controls should be in.
        #[unsafe(method(setEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEnabled(&self, in_enabled: bool);

        /// When called by the AuthorizationPlugin, the subclass should return the appropriate NSView for the requested SFViewType.  The NSView and its contents should have the autoresize flags set as appropriate to allow for the view to be resized.
        ///
        /// Parameter `inType`: is the type of view being requested by the AuthorizationPlugin.
        ///
        /// NOTE: Currently a maximum width of 394 points is supported, but Apple reserves the right to change that in the future.  Do not assume that the width of the NSView won't change.
        #[unsafe(method(viewForType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn viewForType(
            &self,
            in_type: SFViewType,
            mtm: MainThreadMarker,
        ) -> Option<Retained<NSView>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl SFAuthorizationPluginView {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

/// SFHostControl.
///
/// Methods called by the AuthorizationPlugin that instantiated the subclass or by the subclass.
impl SFAuthorizationPluginView {
    extern_methods!(
        /// displayView is called in order to display the user interface provided by the subclass.  If you subclass this method, be sure to call [super displayView].  displayView will raise an SFDisplayViewException exception if an error occurs displaying the authorization dialog.
        #[unsafe(method(displayView))]
        #[unsafe(method_family = none)]
        pub unsafe fn displayView(&self);

        /// The SFAuthorizationPluginView calls this when it would like to disable a button in the UI.
        ///
        /// Parameter `inButtonType`: the type of the button
        ///
        /// Parameter `inEnabled`: YES to enabled the button, NO to disable the button
        #[unsafe(method(setButton:enabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setButton_enabled(&self, in_button_type: SFButtonType, in_enabled: bool);

        /// updateView is called in order to have a new or modified NSView loaded by the AuthorizationPlugin.
        #[unsafe(method(updateView))]
        #[unsafe(method_family = none)]
        pub unsafe fn updateView(&self);
    );
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/securityinterface/sfauthorizationpluginviewusernamekey?language=objc)
    pub static SFAuthorizationPluginViewUserNameKey: Option<&'static NSString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/securityinterface/sfauthorizationpluginviewusershortnamekey?language=objc)
    pub static SFAuthorizationPluginViewUserShortNameKey: Option<&'static NSString>;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/securityinterface/sfdisplayviewexception?language=objc)
    pub static SFDisplayViewException: Option<&'static NSString>;
}
