//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/rbto_compare_nodes_fn?language=objc)
pub type rbto_compare_nodes_fn =
    Option<unsafe extern "C-unwind" fn(*mut c_void, *const c_void, *const c_void) -> c_int>;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/rbto_compare_key_fn?language=objc)
pub type rbto_compare_key_fn =
    Option<unsafe extern "C-unwind" fn(*mut c_void, *const c_void, *const c_void) -> c_int>;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/rb_tree_ops_t?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct rb_tree_ops_t {
    pub rbto_compare_nodes: libc::rbto_compare_nodes_fn,
    pub rbto_compare_key: libc::rbto_compare_key_fn,
    pub rbto_node_offset: usize,
    pub rbto_context: *mut c_void,
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/rb_node?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct rb_node {
    pub opaque: [*mut c_void; 3],
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/rb_node_t?language=objc)
pub type rb_node_t = libc::rb_node;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/rb_tree?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct rb_tree {
    pub opaque: [*mut c_void; 8],
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/rb_tree_t?language=objc)
pub type rb_tree_t = libc::rb_tree;

extern "C-unwind" {
    pub fn rb_tree_init(param1: *mut libc::rb_tree_t, param1: *const libc::rb_tree_ops_t);
}

extern "C-unwind" {
    pub fn rb_tree_insert_node(param1: *mut libc::rb_tree_t, param1: *mut c_void) -> *mut c_void;
}

extern "C-unwind" {
    pub fn rb_tree_find_node(param1: *mut libc::rb_tree_t, param1: *const c_void) -> *mut c_void;
}

extern "C-unwind" {
    pub fn rb_tree_find_node_geq(
        param1: *mut libc::rb_tree_t,
        param1: *const c_void,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn rb_tree_find_node_leq(
        param1: *mut libc::rb_tree_t,
        param1: *const c_void,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn rb_tree_remove_node(param1: *mut libc::rb_tree_t, param1: *mut c_void);
}

extern "C-unwind" {
    pub fn rb_tree_iterate(
        param1: *mut libc::rb_tree_t,
        param1: *mut c_void,
        param1: c_uint,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn rb_tree_count(param1: *mut libc::rb_tree_t) -> usize;
}
