//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/sae_associd_t?language=objc)
pub type sae_associd_t = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/sae_connid_t?language=objc)
pub type sae_connid_t = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/sa_endpoints?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct sa_endpoints {
    pub sae_srcif: c_uint,
    pub sae_srcaddr: *const libc::sockaddr,
    pub sae_srcaddrlen: libc::socklen_t,
    pub sae_dstaddr: *const libc::sockaddr,
    pub sae_dstaddrlen: libc::socklen_t,
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/sa_endpoints_t?language=objc)
pub type sa_endpoints_t = libc::sa_endpoints;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/linger?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct linger {
    pub l_onoff: c_int,
    pub l_linger: c_int,
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/so_np_extensions?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct so_np_extensions {
    pub npx_flags: u32,
    pub npx_mask: u32,
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/sockaddr?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct sockaddr {
    pub sa_len: u8,
    pub sa_family: libc::sa_family_t,
    pub sa_data: [c_char; 14],
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/__sockaddr_header?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct __sockaddr_header {
    pub sa_len: u8,
    pub sa_family: libc::sa_family_t,
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/sockproto?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct sockproto {
    pub sp_family: u16,
    pub sp_protocol: u16,
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/sockaddr_storage?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct sockaddr_storage {
    pub ss_len: u8,
    pub ss_family: libc::sa_family_t,
    pub(crate) __ss_pad1: [c_char; 6],
    pub(crate) __ss_align: i64,
    pub(crate) __ss_pad2: [c_char; 112],
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/msghdr?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct msghdr {
    pub msg_name: *mut c_void,
    pub msg_namelen: libc::socklen_t,
    pub msg_iov: *mut libc::iovec,
    pub msg_iovlen: c_int,
    pub msg_control: *mut c_void,
    pub msg_controllen: libc::socklen_t,
    pub msg_flags: c_int,
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/cmsghdr?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct cmsghdr {
    pub cmsg_len: libc::socklen_t,
    pub cmsg_level: c_int,
    pub cmsg_type: c_int,
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/sf_hdtr?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct sf_hdtr {
    pub headers: *mut libc::iovec,
    pub hdr_cnt: c_int,
    pub trailers: *mut libc::iovec,
    pub trl_cnt: c_int,
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "accept")]
    pub fn accept(
        param1: c_int,
        param1: *mut libc::sockaddr,
        param1: *mut libc::socklen_t,
    ) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "bind")]
    pub fn bind(param1: c_int, param1: *const libc::sockaddr, param1: libc::socklen_t) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "connect")]
    pub fn connect(param1: c_int, param1: *const libc::sockaddr, param1: libc::socklen_t) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "getpeername")]
    pub fn getpeername(
        param1: c_int,
        param1: *mut libc::sockaddr,
        param1: *mut libc::socklen_t,
    ) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "getsockname")]
    pub fn getsockname(
        param1: c_int,
        param1: *mut libc::sockaddr,
        param1: *mut libc::socklen_t,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn getsockopt(
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: *mut c_void,
        param1: *mut libc::socklen_t,
    ) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "listen")]
    pub fn listen(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "recv")]
    pub fn recv(param1: c_int, param1: *mut c_void, param1: usize, param1: c_int) -> isize;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "recvfrom")]
    pub fn recvfrom(
        param1: c_int,
        param1: *mut c_void,
        param1: usize,
        param1: c_int,
        param1: *mut libc::sockaddr,
        param1: *mut libc::socklen_t,
    ) -> isize;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "recvmsg")]
    pub fn recvmsg(param1: c_int, param1: *mut libc::msghdr, param1: c_int) -> isize;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "send")]
    pub fn send(param1: c_int, param1: *const c_void, param1: usize, param1: c_int) -> isize;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "sendmsg")]
    pub fn sendmsg(param1: c_int, param1: *const libc::msghdr, param1: c_int) -> isize;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "sendto")]
    pub fn sendto(
        param1: c_int,
        param1: *const c_void,
        param1: usize,
        param1: c_int,
        param1: *const libc::sockaddr,
        param1: libc::socklen_t,
    ) -> isize;
}

extern "C-unwind" {
    pub fn setsockopt(
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: *const c_void,
        param1: libc::socklen_t,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn shutdown(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn sockatmark(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn socket(param1: c_int, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "socketpair")]
    pub fn socketpair(param1: c_int, param1: c_int, param1: c_int, param1: *mut c_int) -> c_int;
}

extern "C-unwind" {
    pub fn sendfile(
        param1: c_int,
        param1: c_int,
        param1: libc::off_t,
        param1: *mut libc::off_t,
        param1: *mut libc::sf_hdtr,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn pfctlinput(param1: c_int, param1: *mut libc::sockaddr);
}

extern "C-unwind" {
    pub fn connectx(
        param1: c_int,
        param1: *const libc::sa_endpoints_t,
        param1: libc::sae_associd_t,
        param1: c_uint,
        param1: *const libc::iovec,
        param1: c_uint,
        param1: *mut usize,
        param1: *mut libc::sae_connid_t,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn disconnectx(
        param1: c_int,
        param1: libc::sae_associd_t,
        param1: libc::sae_connid_t,
    ) -> c_int;
}
