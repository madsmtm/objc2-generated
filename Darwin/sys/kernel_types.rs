//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};

use crate::ffi::*;

pub type daddr64_t = i64;

/// Definitions of device driver entry switches
#[repr(C)]
#[derive(Debug)]
pub struct buf {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for buf {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("buf", &[]));
}

pub type buf_t = *mut buf;

#[repr(C)]
#[derive(Debug)]
pub struct file {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for file {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("file", &[]));
}

pub type file_t = *mut file;

#[repr(C)]
#[derive(Debug)]
pub struct proc {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for proc {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("proc", &[]));
}

pub type proc_t = *mut proc;

#[repr(C)]
#[derive(Debug)]
pub struct proc_ident {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for proc_ident {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("proc_ident", &[]));
}

pub type proc_ident_t = *mut proc_ident;

#[repr(C)]
#[derive(Debug)]
pub struct uio {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for uio {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("uio", &[]));
}

pub type uio_t = *mut uio;

#[repr(C)]
#[derive(Debug)]
pub struct vfs_context {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for vfs_context {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("vfs_context", &[]));
}

pub type vfs_context_t = *mut vfs_context;

#[repr(C)]
#[derive(Debug)]
pub struct vfstable {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for vfstable {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("vfstable", &[]));
}

pub type vfstable_t = *mut vfstable;

#[repr(C)]
#[derive(Debug)]
pub struct __ifnet {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for __ifnet {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("__ifnet", &[]));
}

pub type ifnet_t = *mut __ifnet;

#[repr(C)]
#[derive(Debug)]
pub struct __mbuf {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for __mbuf {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("__mbuf", &[]));
}

pub type mbuf_t = *mut __mbuf;

#[repr(C)]
#[derive(Debug)]
pub struct __pkthdr {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for __pkthdr {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("__pkthdr", &[]));
}

pub type pkthdr_t = *mut __pkthdr;

#[repr(C)]
#[derive(Debug)]
pub struct __socket {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for __socket {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("__socket", &[]));
}

pub type socket_t = *mut __socket;

#[repr(C)]
#[derive(Debug)]
pub struct __sockopt {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for __sockopt {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("__sockopt", &[]));
}

pub type sockopt_t = *mut __sockopt;

#[repr(C)]
#[derive(Debug)]
pub struct __ifaddr {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for __ifaddr {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("__ifaddr", &[]));
}

pub type ifaddr_t = *mut __ifaddr;

#[repr(C)]
#[derive(Debug)]
pub struct __ifmultiaddr {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for __ifmultiaddr {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("__ifmultiaddr", &[]));
}

pub type ifmultiaddr_t = *mut __ifmultiaddr;

#[repr(C)]
#[derive(Debug)]
pub struct __ifnet_filter {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for __ifnet_filter {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("__ifnet_filter", &[]));
}

pub type interface_filter_t = *mut __ifnet_filter;

#[repr(C)]
#[derive(Debug)]
pub struct __rtentry {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for __rtentry {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("__rtentry", &[]));
}

pub type route_t = *mut __rtentry;

#[repr(C)]
#[derive(Debug)]
pub struct __if_clone {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for __if_clone {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("__if_clone", &[]));
}

pub type if_clone_t = *mut __if_clone;

#[repr(C)]
#[derive(Debug)]
pub struct __bufattr {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for __bufattr {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("__bufattr", &[]));
}

pub type bufattr_t = *mut __bufattr;

pub type kauth_action_t = c_int;
