//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/kevent?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct kevent {
    pub ident: usize,
    pub filter: i16,
    pub flags: u16,
    pub fflags: u32,
    pub data: isize,
    pub udata: *mut c_void,
}

unsafe impl Encode for kevent {
    const ENCODING: Encoding = Encoding::Struct(
        "kevent",
        &[
            <usize>::ENCODING,
            <i16>::ENCODING,
            <u16>::ENCODING,
            <u32>::ENCODING,
            <isize>::ENCODING,
            <*mut c_void>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for kevent {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/kevent64_s?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct kevent64_s {
    pub ident: u64,
    pub filter: i16,
    pub flags: u16,
    pub fflags: u32,
    pub data: i64,
    pub udata: u64,
    pub ext: [u64; 2],
}

unsafe impl Encode for kevent64_s {
    const ENCODING: Encoding = Encoding::Struct(
        "kevent64_s",
        &[
            <u64>::ENCODING,
            <i16>::ENCODING,
            <u16>::ENCODING,
            <u32>::ENCODING,
            <i64>::ENCODING,
            <u64>::ENCODING,
            <[u64; 2]>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for kevent64_s {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/enotereapdeprecated?language=objc)
pub const eNoteReapDeprecated: c_uint = 0x10000000;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/enoteexitreparenteddeprecated?language=objc)
pub const eNoteExitReparentedDeprecated: c_uint = 0x00080000;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/klist?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct klist {
    pub slh_first: *mut libc::knote,
}

unsafe impl Encode for klist {
    const ENCODING: Encoding = Encoding::Struct("klist", &[<*mut libc::knote>::ENCODING]);
}

unsafe impl RefEncode for klist {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn kqueue() -> c_int;
}

extern "C-unwind" {
    pub fn kevent(
        kq: c_int,
        changelist: *const libc::kevent,
        nchanges: c_int,
        eventlist: *mut libc::kevent,
        nevents: c_int,
        timeout: *const libc::timespec,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn kevent64(
        kq: c_int,
        changelist: *const libc::kevent64_s,
        nchanges: c_int,
        eventlist: *mut libc::kevent64_s,
        nevents: c_int,
        flags: c_uint,
        timeout: *const libc::timespec,
    ) -> c_int;
}
