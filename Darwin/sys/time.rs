//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#[cfg(feature = "__builtin__")]
use __builtin__::*;
use core::ffi::*;

use crate::ffi::*;

/// Structure used as a parameter by getitimer(2) and setitimer(2) system
/// calls.
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct itimerval {
    /// timer interval
    pub it_interval: timeval,
    /// current value
    pub it_value: timeval,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct timezone {
    /// minutes west of Greenwich
    pub tz_minuteswest: c_int,
    /// type of dst correction
    pub tz_dsttime: c_int,
}

/// Getkerninfo clock information structure
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct clockinfo {
    /// clock frequency
    pub hz: c_int,
    /// micro-seconds per hz tick
    pub tick: c_int,
    /// clock skew rate for adjtime()
    pub tickadj: c_int,
    /// statistics clock frequency
    pub stathz: c_int,
    /// profiling clock frequency
    pub profhz: c_int,
}

extern "C-unwind" {
    pub fn adjtime(param1: *const timeval, param1: *mut timeval) -> c_int;
}

extern "C-unwind" {
    pub fn futimes(param1: c_int, param1: *const timeval) -> c_int;
}

extern "C-unwind" {
    pub fn lutimes(param1: *const c_char, param1: *const timeval) -> c_int;
}

extern "C-unwind" {
    pub fn settimeofday(param1: *const timeval, param1: *const timezone) -> c_int;
}

extern "C-unwind" {
    pub fn getitimer(param1: c_int, param1: *mut itimerval) -> c_int;
}

extern "C-unwind" {
    pub fn gettimeofday(param1: *mut timeval, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn setitimer(param1: c_int, param1: *const itimerval, param1: *mut itimerval) -> c_int;
}

extern "C-unwind" {
    pub fn utimes(param1: *const c_char, param1: *const timeval) -> c_int;
}
