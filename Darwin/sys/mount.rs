//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::ffi::*;

pub const CRYPTEX_AUTH_STRUCT_VERSION: c_uint = 2;
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct statfs {
    pub f_bsize: u32,
    pub f_iosize: i32,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_type: u32,
    pub f_flags: u32,
    pub f_fssubtype: u32,
    pub f_fstypename: [c_char; 16],
    pub f_mntonname: [c_char; 1024],
    pub f_mntfromname: [c_char; 1024],
    pub f_flags_ext: u32,
    pub f_reserved: [u32; 7],
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct vfsstatfs {
    pub f_bsize: u32,
    pub f_iosize: usize,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_bused: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_flags: u64,
    pub f_fstypename: [c_char; 16],
    pub f_mntonname: [c_char; 1024],
    pub f_mntfromname: [c_char; 1024],
    pub f_fssubtype: u32,
    pub f_reserved: [*mut c_void; 2],
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct vfsconf {
    pub vfc_reserved1: u32,
    pub vfc_name: [c_char; 15],
    pub vfc_typenum: c_int,
    pub vfc_refcount: c_int,
    pub vfc_flags: c_int,
    pub vfc_reserved2: u32,
    pub vfc_reserved3: u32,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct vfsidctl {
    pub vc_vers: c_int,
    pub vc_fsid: fsid_t,
    pub vc_ptr: *mut c_void,
    pub vc_len: usize,
    pub vc_spare: [u32; 12],
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct vfsquery {
    pub vq_flags: u32,
    pub vq_spare: [u32; 31],
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct vfs_server {
    pub vs_minutes: i32,
    pub vs_server_name: [u8; 768],
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct netfs_status {
    pub ns_status: u32,
    pub ns_mountopts: [c_char; 512],
    pub ns_waittime: u32,
    pub ns_threadcount: u32,
    pub ns_threadids: [u64; 0],
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct fhandle {
    pub fh_len: c_uint,
    pub fh_data: [c_uchar; 128],
}

pub type fhandle_t = fhandle;

#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct graftdmg_type_t(pub u32);
impl graftdmg_type_t {
    pub const GRAFTDMG_CRYPTEX_BOOT: Self = Self(1);
    pub const GRAFTDMG_CRYPTEX_PREBOOT: Self = Self(2);
    pub const GRAFTDMG_CRYPTEX_DOWNLEVEL: Self = Self(3);
    pub const GRAFTDMG_CRYPTEX_PDI_NONCE: Self = Self(6);
    pub const GRAFTDMG_CRYPTEX_EFFECTIVE_AP: Self = Self(7);
    pub const GRAFTDMG_CRYPTEX_MOBILE_ASSET: Self = Self(8);
    pub const GRAFTDMG_CRYPTEX_MAX: Self = Self(8);
}

#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct cryptex_auth_type_t(pub u32);
impl cryptex_auth_type_t {
    pub const CRYPTEX1_AUTH_ENV_GENERIC: Self = Self(4);
    pub const CRYPTEX1_AUTH_ENV_GENERIC_SUPPLEMENTAL: Self = Self(5);
    pub const CRYPTEX_AUTH_PDI_NONCE: Self = Self(6);
    pub const CRYPTEX_AUTH_MOBILE_ASSET: Self = Self(8);
    pub const CRYPTEX_AUTH_MAX: Self = Self(8);
}

extern "C-unwind" {
    pub fn fhopen(param1: *const fhandle, param1: c_int) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "fstatfs")]
    pub fn fstatfs(param1: c_int, param1: *mut statfs) -> c_int;
}

extern "C-unwind" {
    pub fn getfh(param1: *const c_char, param1: *mut fhandle_t) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "getfsstat")]
    pub fn getfsstat(param1: *mut statfs, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "getmntinfo")]
    pub fn getmntinfo(param1: *mut *mut statfs, param1: c_int) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "getmntinfo_r_np")]
    pub fn getmntinfo_r_np(param1: *mut *mut statfs, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mount(
        param1: *const c_char,
        param1: *const c_char,
        param1: c_int,
        param1: *mut c_void,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn fmount(
        param1: *const c_char,
        param1: c_int,
        param1: c_int,
        param1: *mut c_void,
    ) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "statfs")]
    pub fn statfs(param1: *const c_char, param1: *mut statfs) -> c_int;
}

extern "C-unwind" {
    pub fn unmount(param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn getvfsbyname(param1: *const c_char, param1: *mut vfsconf) -> c_int;
}
