//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#[cfg(feature = "__builtin__")]
use __builtin__::*;
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/eventreq?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct eventreq {
    pub er_type: c_int,
    pub er_handle: c_int,
    pub er_data: *mut c_void,
    pub er_rcnt: c_int,
    pub er_wcnt: c_int,
    pub er_ecnt: c_int,
    pub er_eventbits: c_int,
}

unsafe impl Encode for eventreq {
    const ENCODING: Encoding = Encoding::Struct(
        "eventreq",
        &[
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <*mut c_void>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for eventreq {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/er_t?language=objc)
pub type er_t = *mut libc::eventreq;

extern "C-unwind" {
    pub fn modwatch(param1: libc::er_t, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn watchevent(param1: libc::er_t, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn waitevent(param1: libc::er_t, param1: *mut timeval) -> c_int;
}
