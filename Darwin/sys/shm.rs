//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::ffi::*;

/// [XSI] The unsigned integer type used for the number of current attaches
/// that MUST be able to store values at least as large as a type unsigned
/// short.
pub type shmatt_t = c_ushort;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct __shmid_ds_new {
    /// [XSI] Operation permission value
    pub shm_perm: ipc_perm,
    /// [XSI] Size of segment in bytes
    pub shm_segsz: usize,
    /// [XSI] PID of last shared memory op
    pub shm_lpid: pid_t,
    /// [XSI] PID of creator
    pub shm_cpid: pid_t,
    /// [XSI] Number of current attaches
    pub shm_nattch: shmatt_t,
    /// [XSI] Time of last shmat()
    pub shm_atime: time_t,
    /// [XSI] Time of last shmdt()
    pub shm_dtime: time_t,
    /// [XSI] Time of last shmctl() change
    pub shm_ctime: time_t,
    /// reserved for kernel use
    pub shm_internal: *mut c_void,
}

extern "C-unwind" {
    pub fn shmat(param1: c_int, param1: *const c_void, param1: c_int) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "shmctl")]
    pub fn shmctl(param1: c_int, param1: c_int, param1: *mut __shmid_ds_new) -> c_int;
}

extern "C-unwind" {
    pub fn shmdt(param1: *const c_void) -> c_int;
}

extern "C-unwind" {
    pub fn shmget(param1: key_t, param1: usize, param1: c_int) -> c_int;
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct pshminfo {
    pub pshm_flags: c_uint,
    pub pshm_usecount: c_uint,
    pub pshm_length: off_t,
    pub pshm_mode: mode_t,
    pub pshm_uid: uid_t,
    pub pshm_gid: gid_t,
    pub pshm_name: [c_char; 32],
    pub pshm_memobject: *mut c_void,
    pub pshm_label: *mut label,
}
