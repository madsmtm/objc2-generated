//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::ffi::*;

extern "C-unwind" {
    pub fn mlockall(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn munlockall() -> c_int;
}

extern "C-unwind" {
    pub fn mlock(param1: *const c_void, param1: usize) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "mmap")]
    pub fn mmap(
        param1: *mut c_void,
        param1: usize,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: libc::off_t,
    ) -> *mut c_void;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "mprotect")]
    pub fn mprotect(param1: *mut c_void, param1: usize, param1: c_int) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "msync")]
    pub fn msync(param1: *mut c_void, param1: usize, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn munlock(param1: *const c_void, param1: usize) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "munmap")]
    pub fn munmap(param1: *mut c_void, param1: usize) -> c_int;
}

extern "C-unwind" {
    pub fn shm_unlink(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn posix_madvise(param1: *mut c_void, param1: usize, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn madvise(param1: *mut c_void, param1: usize, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mincore(param1: *const c_void, param1: usize, param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn minherit(param1: *mut c_void, param1: usize, param1: c_int) -> c_int;
}
