//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::ffi::*;

// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct panic_with_data_flags(pub c_uint);
bitflags::bitflags! {
    impl panic_with_data_flags: c_uint {
        const PANIC_WITH_DATA_FLAGS_NONE = 0;
        const PANIC_WITH_DATA_FLAGS_EXCLAVE_STACKSHOT = 1;
        const PANIC_WITH_DATA_FLAGS_MAX = 2;
    }
}

extern "C-unwind" {
    /// userspace reboot control
    pub fn usrctl(flags: u32) -> c_int;
}

extern "C-unwind" {
    /// The normal reboot syscall.
    pub fn reboot(howto: c_int) -> c_int;
}

extern "C-unwind" {
    /// Used with RB_PANIC to panic the kernel from userspace with a message.
    /// Requires an entitlement on Release.
    pub fn reboot_np(howto: c_int, message: *const c_char) -> c_int;
}

extern "C-unwind" {
    /// Used to panic the kernel from user space and add additional data to
    /// the paniclog.
    pub fn panic_with_data(
        uuid: uuid_t,
        addr: *mut c_void,
        len: u32,
        flags: u32,
        msg: *const c_char,
    ) -> c_int;
}
