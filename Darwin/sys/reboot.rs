//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/panic_with_data_flags?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct panic_with_data_flags(pub c_uint);
bitflags::bitflags! {
    impl panic_with_data_flags: c_uint {
        const PANIC_WITH_DATA_FLAGS_NONE = 0;
        const PANIC_WITH_DATA_FLAGS_EXCLAVE_STACKSHOT = 1;
        const PANIC_WITH_DATA_FLAGS_MAX = 2;
    }
}

unsafe impl Encode for panic_with_data_flags {
    const ENCODING: Encoding = c_uint::ENCODING;
}

unsafe impl RefEncode for panic_with_data_flags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn usrctl(flags: u32) -> c_int;
}

extern "C-unwind" {
    pub fn reboot(howto: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn reboot_np(howto: c_int, message: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn panic_with_data(
        uuid: uuid_t,
        addr: *mut c_void,
        len: u32,
        flags: u32,
        msg: *const c_char,
    ) -> c_int;
}
