//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#[cfg(feature = "__builtin__")]
use __builtin__::*;
use core::ffi::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ostat?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ostat {
    pub st_dev: u16,
    pub st_ino: libc::ino_t,
    pub st_mode: libc::mode_t,
    pub st_nlink: libc::nlink_t,
    pub st_uid: u16,
    pub st_gid: u16,
    pub st_rdev: u16,
    pub st_size: i32,
    pub st_atimespec: libc::timespec,
    pub st_mtimespec: libc::timespec,
    pub st_ctimespec: libc::timespec,
    pub st_blksize: i32,
    pub st_blocks: i32,
    pub st_flags: u32,
    pub st_gen: u32,
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/stat?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct stat {
    pub st_dev: libc::dev_t,
    pub st_mode: libc::mode_t,
    pub st_nlink: libc::nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: libc::uid_t,
    pub st_gid: libc::gid_t,
    pub st_rdev: libc::dev_t,
    pub st_atimespec: libc::timespec,
    pub st_mtimespec: libc::timespec,
    pub st_ctimespec: libc::timespec,
    pub st_birthtimespec: libc::timespec,
    pub st_size: libc::off_t,
    pub st_blocks: libc::blkcnt_t,
    pub st_blksize: libc::blksize_t,
    pub st_flags: u32,
    pub st_gen: u32,
    pub st_lspare: i32,
    pub st_qspare: [i64; 2],
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "chmod")]
    pub fn chmod(param1: *const c_char, param1: libc::mode_t) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "fchmod")]
    pub fn fchmod(param1: c_int, param1: libc::mode_t) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "fstat")]
    pub fn fstat(param1: c_int, param1: *mut libc::stat) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "lstat")]
    pub fn lstat(param1: *const c_char, param1: *mut libc::stat) -> c_int;
}

extern "C-unwind" {
    pub fn mkdir(param1: *const c_char, param1: libc::mode_t) -> c_int;
}

extern "C-unwind" {
    pub fn mkfifo(param1: *const c_char, param1: libc::mode_t) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "stat")]
    pub fn stat(param1: *const c_char, param1: *mut libc::stat) -> c_int;
}

extern "C-unwind" {
    pub fn mknod(param1: *const c_char, param1: libc::mode_t, param1: libc::dev_t) -> c_int;
}

extern "C-unwind" {
    pub fn umask(param1: libc::mode_t) -> libc::mode_t;
}

extern "C-unwind" {
    pub fn fchmodat(
        param1: c_int,
        param1: *const c_char,
        param1: libc::mode_t,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "fstatat")]
    pub fn fstatat(
        param1: c_int,
        param1: *const c_char,
        param1: *mut libc::stat,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mkdirat(param1: c_int, param1: *const c_char, param1: libc::mode_t) -> c_int;
}

extern "C-unwind" {
    pub fn mkfifoat(param1: c_int, param1: *const c_char, param1: libc::mode_t) -> c_int;
}

extern "C-unwind" {
    pub fn mknodat(
        param1: c_int,
        param1: *const c_char,
        param1: libc::mode_t,
        param1: libc::dev_t,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn futimens(fd: c_int, times: ArrayUnknownABI<[libc::timespec; 2]>) -> c_int;
}

extern "C-unwind" {
    pub fn utimensat(
        fd: c_int,
        path: *const c_char,
        times: ArrayUnknownABI<[libc::timespec; 2]>,
        flag: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn chflags(param1: *const c_char, param1: u32) -> c_int;
}

extern "C-unwind" {
    pub fn chmodx_np(param1: *const c_char, param1: libc::filesec_t) -> c_int;
}

extern "C-unwind" {
    pub fn fchflags(param1: c_int, param1: u32) -> c_int;
}

extern "C-unwind" {
    pub fn fchmodx_np(param1: c_int, param1: libc::filesec_t) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "fstatx_np")]
    pub fn fstatx_np(param1: c_int, param1: *mut libc::stat, param1: libc::filesec_t) -> c_int;
}

extern "C-unwind" {
    pub fn lchflags(param1: *const c_char, param1: u32) -> c_int;
}

extern "C-unwind" {
    pub fn lchmod(param1: *const c_char, param1: libc::mode_t) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "lstatx_np")]
    pub fn lstatx_np(
        param1: *const c_char,
        param1: *mut libc::stat,
        param1: libc::filesec_t,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mkdirx_np(param1: *const c_char, param1: libc::filesec_t) -> c_int;
}

extern "C-unwind" {
    pub fn mkfifox_np(param1: *const c_char, param1: libc::filesec_t) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "statx_np")]
    pub fn statx_np(
        param1: *const c_char,
        param1: *mut libc::stat,
        param1: libc::filesec_t,
    ) -> c_int;
}

extern "C-unwind" {
    #[deprecated]
    pub fn umaskx_np(param1: libc::filesec_t) -> c_int;
}
