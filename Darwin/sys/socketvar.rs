//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::ffi::*;

pub const SO_TRACKER_TRANSPARENCY_VERSION: c_uint = 3;
pub type so_gen_t = u_quad_t;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct xsockbuf {
    pub sb_cc: u32,
    pub sb_hiwat: u32,
    pub sb_mbcnt: u32,
    pub sb_mbmax: u32,
    pub sb_lowat: i32,
    pub sb_flags: c_short,
    pub sb_timeo: c_short,
}

/// Externalized form of struct socket used by the sysctl(3) interface.
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct xsocket {
    /// length of this structure
    pub xso_len: u32,
    /// makes a convenient handle
    pub xso_so: u32,
    pub so_type: c_short,
    pub so_options: c_short,
    pub so_linger: c_short,
    pub so_state: c_short,
    /// another convenient handle
    pub so_pcb: u32,
    pub xso_protocol: c_int,
    pub xso_family: c_int,
    pub so_qlen: c_short,
    pub so_incqlen: c_short,
    pub so_qlimit: c_short,
    pub so_timeo: c_short,
    pub so_error: c_ushort,
    pub so_pgid: pid_t,
    pub so_oobmark: u32,
    pub so_rcv: xsockbuf,
    pub so_snd: xsockbuf,
    /// XXX
    pub so_uid: uid_t,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct xsocket64 {
    /// length of this structure
    pub xso_len: u32,
    /// makes a convenient handle
    pub xso_so: u64,
    pub so_type: c_short,
    pub so_options: c_short,
    pub so_linger: c_short,
    pub so_state: c_short,
    /// another convenient handle
    pub so_pcb: u64,
    pub xso_protocol: c_int,
    pub xso_family: c_int,
    pub so_qlen: c_short,
    pub so_incqlen: c_short,
    pub so_qlimit: c_short,
    pub so_timeo: c_short,
    pub so_error: c_ushort,
    pub so_pgid: pid_t,
    pub so_oobmark: u32,
    pub so_rcv: xsockbuf,
    pub so_snd: xsockbuf,
    /// XXX
    pub so_uid: uid_t,
}

/// Tracker actions
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct so_tracker_action(pub c_uint);
impl so_tracker_action {
    pub const SO_TRACKER_ACTION_INVALID: Self = Self(0);
    pub const SO_TRACKER_ACTION_ADD: Self = Self(1);
    pub const SO_TRACKER_ACTION_DUMP_BY_APP: Self = Self(2);
    pub const SO_TRACKER_ACTION_DUMP_ALL: Self = Self(3);
    pub const SO_TRACKER_ACTION_DUMP_MAX: Self = Self(4);
}

/// Tracker TLV attributes
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct so_tracker_attribute(pub c_uint);
impl so_tracker_attribute {
    pub const SO_TRACKER_ATTRIBUTE_INVALID: Self = Self(0);
    pub const SO_TRACKER_ATTRIBUTE_ADDRESS_FAMILY: Self = Self(1);
    pub const SO_TRACKER_ATTRIBUTE_ADDRESS: Self = Self(2);
    pub const SO_TRACKER_ATTRIBUTE_APP_UUID: Self = Self(3);
    pub const SO_TRACKER_ATTRIBUTE_DOMAIN: Self = Self(4);
    pub const SO_TRACKER_ATTRIBUTE_DOMAIN_OWNER: Self = Self(5);
    pub const SO_TRACKER_ATTRIBUTE_FLAGS: Self = Self(6);
    pub const SO_TRACKER_ATTRIBUTE_DUMP_ENTRY: Self = Self(7);
    pub const SO_TRACKER_ATTRIBUTE_MEMORY_USED: Self = Self(8);
    pub const SO_TRACKER_ATTRIBUTE_MAX: Self = Self(9);
}

extern "C-unwind" {
    pub fn tracker_action(action: c_int, buffer: *mut c_char, buffer_size: usize) -> c_int;
}
