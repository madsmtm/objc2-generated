//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/entry?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct entry {
    pub key: *mut c_char,
    pub data: *mut c_void,
}

unsafe impl Encode for entry {
    const ENCODING: Encoding =
        Encoding::Struct("entry", &[<*mut c_char>::ENCODING, <*mut c_void>::ENCODING]);
}

unsafe impl RefEncode for entry {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/entry?language=objc)
pub type ENTRY = libc::entry;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/action?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ACTION(pub c_uint);
impl ACTION {
    pub const FIND: Self = Self(0);
    pub const ENTER: Self = Self(1);
}

unsafe impl Encode for ACTION {
    const ENCODING: Encoding = c_uint::ENCODING;
}

unsafe impl RefEncode for ACTION {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/visit?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct VISIT(pub c_uint);
impl VISIT {
    pub const preorder: Self = Self(0);
    pub const postorder: Self = Self(1);
    pub const endorder: Self = Self(2);
    pub const leaf: Self = Self(3);
}

unsafe impl Encode for VISIT {
    const ENCODING: Encoding = c_uint::ENCODING;
}

unsafe impl RefEncode for VISIT {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn hcreate(param1: usize) -> c_int;
}

extern "C-unwind" {
    pub fn hdestroy();
}

extern "C-unwind" {
    pub fn hsearch(param1: libc::ENTRY, param1: libc::ACTION) -> *mut libc::ENTRY;
}

extern "C-unwind" {
    pub fn insque(param1: *mut c_void, param1: *mut c_void);
}

extern "C-unwind" {
    pub fn lfind(
        param1: *const c_void,
        param1: *const c_void,
        param1: *mut usize,
        param1: usize,
        param1: Option<unsafe extern "C-unwind" fn(*const c_void, *const c_void) -> c_int>,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn lsearch(
        param1: *const c_void,
        param1: *mut c_void,
        param1: *mut usize,
        param1: usize,
        param1: Option<unsafe extern "C-unwind" fn(*const c_void, *const c_void) -> c_int>,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn remque(param1: *mut c_void);
}

extern "C-unwind" {
    pub fn tdelete(
        param1: *const c_void,
        param1: *mut *mut c_void,
        param1: Option<unsafe extern "C-unwind" fn(*const c_void, *const c_void) -> c_int>,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn tfind(
        param1: *const c_void,
        param1: *const *const c_void,
        param1: Option<unsafe extern "C-unwind" fn(*const c_void, *const c_void) -> c_int>,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn tsearch(
        param1: *const c_void,
        param1: *mut *mut c_void,
        param1: Option<unsafe extern "C-unwind" fn(*const c_void, *const c_void) -> c_int>,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn twalk(
        param1: *const c_void,
        param1: Option<unsafe extern "C-unwind" fn(*const c_void, libc::VISIT, c_int)>,
    );
}
