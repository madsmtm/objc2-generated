//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::ffi::*;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct entry {
    pub key: *mut c_char,
    pub data: *mut c_void,
}

pub type ENTRY = entry;

#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ACTION(pub c_uint);
impl ACTION {
    pub const FIND: Self = Self(0);
    pub const ENTER: Self = Self(1);
}

#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct VISIT(pub c_uint);
impl VISIT {
    pub const preorder: Self = Self(0);
    pub const postorder: Self = Self(1);
    pub const endorder: Self = Self(2);
    pub const leaf: Self = Self(3);
}

extern "C-unwind" {
    pub fn hcreate(param1: usize) -> c_int;
}

extern "C-unwind" {
    pub fn hdestroy();
}

extern "C-unwind" {
    pub fn hsearch(param1: ENTRY, param1: ACTION) -> *mut ENTRY;
}

extern "C-unwind" {
    pub fn insque(param1: *mut c_void, param1: *mut c_void);
}

extern "C-unwind" {
    pub fn lfind(
        param1: *const c_void,
        param1: *const c_void,
        param1: *mut usize,
        param1: usize,
        param1: Option<unsafe extern "C-unwind" fn(*const c_void, *const c_void) -> c_int>,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn lsearch(
        param1: *const c_void,
        param1: *mut c_void,
        param1: *mut usize,
        param1: usize,
        param1: Option<unsafe extern "C-unwind" fn(*const c_void, *const c_void) -> c_int>,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn remque(param1: *mut c_void);
}

extern "C-unwind" {
    pub fn tdelete(
        param1: *const c_void,
        param1: *mut *mut c_void,
        param1: Option<unsafe extern "C-unwind" fn(*const c_void, *const c_void) -> c_int>,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn tfind(
        param1: *const c_void,
        param1: *const *const c_void,
        param1: Option<unsafe extern "C-unwind" fn(*const c_void, *const c_void) -> c_int>,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn tsearch(
        param1: *const c_void,
        param1: *mut *mut c_void,
        param1: Option<unsafe extern "C-unwind" fn(*const c_void, *const c_void) -> c_int>,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn twalk(
        param1: *const c_void,
        param1: Option<unsafe extern "C-unwind" fn(*const c_void, VISIT, c_int)>,
    );
}
