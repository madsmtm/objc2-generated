//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#[cfg(feature = "__builtin__")]
use __builtin__::*;
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/dirent?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct dirent {
    pub d_ino: u64,
    pub d_seekoff: u64,
    pub d_reclen: u16,
    pub d_namlen: u16,
    pub d_type: u8,
    pub d_name: [c_char; 1024],
}

unsafe impl Encode for dirent {
    const ENCODING: Encoding = Encoding::Struct(
        "dirent",
        &[
            <u64>::ENCODING,
            <u64>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u8>::ENCODING,
            <[c_char; 1024]>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for dirent {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/dir?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct DIR {
    pub(crate) __dd_fd: c_int,
    pub(crate) __dd_loc: c_long,
    pub(crate) __dd_size: c_long,
    pub(crate) __dd_buf: *mut c_char,
    pub(crate) __dd_len: c_int,
    pub(crate) __dd_seek: c_long,
    pub(crate) __padding: c_long,
    pub(crate) __dd_flags: c_int,
    pub(crate) __dd_lock: __darwin_pthread_mutex_t,
    pub(crate) __dd_td: *mut libc::_telldir,
}

unsafe impl Encode for DIR {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <c_int>::ENCODING,
            Encoding::C_LONG,
            Encoding::C_LONG,
            <*mut c_char>::ENCODING,
            <c_int>::ENCODING,
            Encoding::C_LONG,
            Encoding::C_LONG,
            <c_int>::ENCODING,
            <__darwin_pthread_mutex_t>::ENCODING,
            <*mut libc::_telldir>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for DIR {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "closedir")]
    pub fn closedir(param1: *mut libc::DIR) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "opendir")]
    pub fn opendir(param1: *const c_char) -> *mut libc::DIR;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "readdir")]
    pub fn readdir(param1: *mut libc::DIR) -> *mut libc::dirent;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "readdir_r")]
    pub fn readdir_r(
        param1: *mut libc::DIR,
        param1: *mut libc::dirent,
        param1: *mut *mut libc::dirent,
    ) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "rewinddir")]
    pub fn rewinddir(param1: *mut libc::DIR);
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "seekdir")]
    pub fn seekdir(param1: *mut libc::DIR, param1: c_long);
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "telldir")]
    pub fn telldir(param1: *mut libc::DIR) -> c_long;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "fdopendir")]
    pub fn fdopendir(param1: c_int) -> *mut libc::DIR;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "alphasort")]
    pub fn alphasort(param1: *mut *const libc::dirent, param1: *mut *const libc::dirent) -> c_int;
}

extern "C-unwind" {
    pub fn dirfd(dirp: *mut libc::DIR) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "scandir")]
    pub fn scandir(
        param1: *const c_char,
        param1: *mut *mut *mut libc::dirent,
        param1: Option<unsafe extern "C-unwind" fn(*const libc::dirent) -> c_int>,
        param1: Option<
            unsafe extern "C-unwind" fn(
                *mut *const libc::dirent,
                *mut *const libc::dirent,
            ) -> c_int,
        >,
    ) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "scandir_b")]
    pub fn scandir_b(
        param1: *const c_char,
        param1: *mut *mut *mut libc::dirent,
        param1: Option<&block2::Block<dyn Fn(*const libc::dirent) -> c_int>>,
        param1: Option<
            &block2::Block<dyn Fn(*mut *const libc::dirent, *mut *const libc::dirent) -> c_int>,
        >,
    ) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(
        target_vendor = "apple",
        link_name = "getdirentries_is_not_available_when_64_bit_inodes_are_in_effect"
    )]
    pub fn getdirentries(
        param1: c_int,
        param1: *mut c_char,
        param1: c_int,
        param1: *mut c_long,
    ) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "__opendir2")]
    pub fn __opendir2(param1: *const c_char, param1: c_int) -> *mut libc::DIR;
}
