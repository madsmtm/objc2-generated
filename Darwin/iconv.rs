//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/_libiconv_version?language=objc)
pub const _LIBICONV_VERSION: c_uint = 0x010B;
/// [Apple's documentation](https://developer.apple.com/documentation/darwin/__iconv_bool?language=objc)
pub type __iconv_bool = bool;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/__tag_iconv_t?language=objc)
#[repr(C)]
#[derive(Debug)]
pub struct __tag_iconv_t {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for __tag_iconv_t {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("__tag_iconv_t", &[]));
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/iconv_t?language=objc)
pub type iconv_t = *mut __tag_iconv_t;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/darwin/_libiconv_version?language=objc)
    pub static _libiconv_version: c_int;
}

extern "C-unwind" {
    pub fn iconv_open(param1: *const c_char, param1: *const c_char) -> iconv_t;
}

extern "C-unwind" {
    pub fn iconv(
        param1: iconv_t,
        param1: *mut *mut c_char,
        param1: *mut usize,
        param1: *mut *mut c_char,
        param1: *mut usize,
    ) -> usize;
}

extern "C-unwind" {
    pub fn iconv_close(param1: iconv_t) -> c_int;
}

extern "C-unwind" {
    pub fn __iconv_get_list(
        param1: *mut *mut *mut c_char,
        param1: *mut usize,
        param1: __iconv_bool,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn __iconv_free_list(param1: *mut *mut c_char, param1: usize);
}

extern "C-unwind" {
    pub fn __iconv(
        param1: iconv_t,
        param1: *mut *mut c_char,
        param1: *mut usize,
        param1: *mut *mut c_char,
        param1: *mut usize,
        param1: u32,
        param1: *mut usize,
    ) -> usize;
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/iconv_allocation_t?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct iconv_allocation_t {
    pub spaceholder: [*mut c_void; 64],
}

extern "C-unwind" {
    pub fn iconv_open_into(
        param1: *const c_char,
        param1: *const c_char,
        param1: *mut iconv_allocation_t,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn libiconv_set_relocation_prefix(param1: *const c_char, param1: *const c_char);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/iconv_unicode_char_hook?language=objc)
pub type iconv_unicode_char_hook = Option<unsafe extern "C-unwind" fn(c_uint, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/iconv_wide_char_hook?language=objc)
pub type iconv_wide_char_hook = Option<unsafe extern "C-unwind" fn(wchar_t, *mut c_void)>;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/iconv_hooks?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct iconv_hooks {
    pub uc_hook: iconv_unicode_char_hook,
    pub wc_hook: iconv_wide_char_hook,
    pub data: *mut c_void,
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/iconv_unicode_mb_to_uc_fallback?language=objc)
pub type iconv_unicode_mb_to_uc_fallback = Option<
    unsafe extern "C-unwind" fn(
        *const c_char,
        usize,
        Option<unsafe extern "C-unwind" fn(*const c_uint, usize, *mut c_void)>,
        *mut c_void,
        *mut c_void,
    ),
>;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/iconv_unicode_uc_to_mb_fallback?language=objc)
pub type iconv_unicode_uc_to_mb_fallback = Option<
    unsafe extern "C-unwind" fn(
        c_uint,
        Option<unsafe extern "C-unwind" fn(*const c_char, usize, *mut c_void)>,
        *mut c_void,
        *mut c_void,
    ),
>;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/iconv_wchar_mb_to_wc_fallback?language=objc)
pub type iconv_wchar_mb_to_wc_fallback = Option<
    unsafe extern "C-unwind" fn(
        *const c_char,
        usize,
        Option<unsafe extern "C-unwind" fn(*const wchar_t, usize, *mut c_void)>,
        *mut c_void,
        *mut c_void,
    ),
>;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/iconv_wchar_wc_to_mb_fallback?language=objc)
pub type iconv_wchar_wc_to_mb_fallback = Option<
    unsafe extern "C-unwind" fn(
        wchar_t,
        Option<unsafe extern "C-unwind" fn(*const c_char, usize, *mut c_void)>,
        *mut c_void,
        *mut c_void,
    ),
>;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/iconv_fallbacks?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct iconv_fallbacks {
    pub mb_to_uc_fallback: iconv_unicode_mb_to_uc_fallback,
    pub uc_to_mb_fallback: iconv_unicode_uc_to_mb_fallback,
    pub mb_to_wc_fallback: iconv_wchar_mb_to_wc_fallback,
    pub wc_to_mb_fallback: iconv_wchar_wc_to_mb_fallback,
    pub data: *mut c_void,
}

extern "C-unwind" {
    pub fn iconvlist(
        do_one: Option<
            unsafe extern "C-unwind" fn(c_uint, *const *const c_char, *mut c_void) -> c_int,
        >,
        param1: *mut c_void,
    );
}

extern "C-unwind" {
    pub fn iconv_canonicalize(param1: *const c_char) -> *const c_char;
}

extern "C-unwind" {
    pub fn iconvctl(param1: iconv_t, param1: c_int, param1: *mut c_void) -> c_int;
}
