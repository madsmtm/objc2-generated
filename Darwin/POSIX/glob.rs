//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/glob_t_gl_closedir?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub union glob_t_gl_closedir {
    pub gl_errfunc: Option<unsafe extern "C-unwind" fn(*const c_char, c_int) -> c_int>,
    pub gl_errblk: *mut block2::Block<dyn Fn(*const c_char, c_int) -> c_int>,
}

unsafe impl Encode for glob_t_gl_closedir {
    const ENCODING: Encoding = Encoding::Union(
        "?",
        &[
            <Option<unsafe extern "C-unwind" fn(*const c_char, c_int) -> c_int>>::ENCODING,
            <*mut block2::Block<dyn Fn(*const c_char, c_int) -> c_int>>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for glob_t_gl_closedir {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/glob_t?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct glob_t {
    pub gl_pathc: usize,
    pub gl_matchc: c_int,
    pub gl_offs: usize,
    pub gl_flags: c_int,
    pub gl_pathv: *mut *mut c_char,
    pub gl_closedir: Option<unsafe extern "C-unwind" fn(*mut c_void)>,
    pub gl_readdir: Option<unsafe extern "C-unwind" fn(*mut c_void) -> *mut libc::dirent>,
    pub gl_opendir: Option<unsafe extern "C-unwind" fn(*const c_char) -> *mut c_void>,
    pub gl_lstat: Option<unsafe extern "C-unwind" fn(*const c_char, *mut libc::stat) -> c_int>,
    pub gl_stat: Option<unsafe extern "C-unwind" fn(*const c_char, *mut libc::stat) -> c_int>,
}

unsafe impl Encode for glob_t {
    const ENCODING: Encoding = Encoding::Struct("?", &[
        <usize>::ENCODING,
        <c_int>::ENCODING,
        <usize>::ENCODING,
        <c_int>::ENCODING,
        <*mut *mut c_char>::ENCODING,
        <Option<unsafe extern "C-unwind" fn(*mut c_void,)>>::ENCODING,
        <Option<unsafe extern "C-unwind" fn(*mut c_void,) -> *mut libc::dirent>>::ENCODING,
        <Option<unsafe extern "C-unwind" fn(*const c_char,) -> *mut c_void>>::ENCODING,
        <Option<unsafe extern "C-unwind" fn(*const c_char,*mut libc::stat,) -> c_int>>::ENCODING,
        <Option<unsafe extern "C-unwind" fn(*const c_char,*mut libc::stat,) -> c_int>>::ENCODING,
    ]);
}

unsafe impl RefEncode for glob_t {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "glob")]
    pub fn glob(
        param1: *const c_char,
        param1: c_int,
        param1: Option<unsafe extern "C-unwind" fn(*const c_char, c_int) -> c_int>,
        param1: *mut libc::glob_t,
    ) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "glob_b")]
    pub fn glob_b(
        param1: *const c_char,
        param1: c_int,
        param1: Option<&block2::Block<dyn Fn(*const c_char, c_int) -> c_int>>,
        param1: *mut libc::glob_t,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn globfree(param1: *mut libc::glob_t);
}
