//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/aiocb?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub struct aiocb {
    pub aio_fildes: c_int,
    pub aio_offset: libc::off_t,
    pub aio_buf: *mut c_void,
    pub aio_nbytes: usize,
    pub aio_reqprio: c_int,
    pub aio_sigevent: libc::sigevent,
    pub aio_lio_opcode: c_int,
}

unsafe impl Encode for aiocb {
    const ENCODING: Encoding = Encoding::Struct(
        "aiocb",
        &[
            <c_int>::ENCODING,
            <libc::off_t>::ENCODING,
            <*mut c_void>::ENCODING,
            <usize>::ENCODING,
            <c_int>::ENCODING,
            <libc::sigevent>::ENCODING,
            <c_int>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for aiocb {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn aio_cancel(fd: c_int, aiocbp: *mut libc::aiocb) -> c_int;
}

extern "C-unwind" {
    pub fn aio_error(aiocbp: *const libc::aiocb) -> c_int;
}

extern "C-unwind" {
    pub fn aio_fsync(op: c_int, aiocbp: *mut libc::aiocb) -> c_int;
}

extern "C-unwind" {
    pub fn aio_read(aiocbp: *mut libc::aiocb) -> c_int;
}

extern "C-unwind" {
    pub fn aio_return(aiocbp: *mut libc::aiocb) -> isize;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "aio_suspend")]
    pub fn aio_suspend(
        aiocblist: *mut *const libc::aiocb,
        nent: c_int,
        timeoutp: *const libc::timespec,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn aio_write(aiocbp: *mut libc::aiocb) -> c_int;
}

extern "C-unwind" {
    pub fn lio_listio(
        mode: c_int,
        aiocblist: *mut *const libc::aiocb,
        nent: c_int,
        sigp: *mut libc::sigevent,
    ) -> c_int;
}
