//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/uio_rw?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct uio_rw(pub c_uint);
impl uio_rw {
    pub const UIO_READ: Self = Self(0);
    pub const UIO_WRITE: Self = Self(1);
}

unsafe impl Encode for uio_rw {
    const ENCODING: Encoding = c_uint::ENCODING;
}

unsafe impl RefEncode for uio_rw {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "readv")]
    pub fn readv(param1: c_int, param1: *const libc::iovec, param1: c_int) -> isize;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "writev")]
    pub fn writev(param1: c_int, param1: *const libc::iovec, param1: c_int) -> isize;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "preadv")]
    pub fn preadv(
        param1: c_int,
        param1: *const libc::iovec,
        param1: c_int,
        param1: libc::off_t,
    ) -> isize;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "pwritev")]
    pub fn pwritev(
        param1: c_int,
        param1: *const libc::iovec,
        param1: c_int,
        param1: libc::off_t,
    ) -> isize;
}
