//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/fts_fts_options?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub union FTS_fts_options {
    pub fts_compar: Option<unsafe extern "C-unwind" fn() -> c_int>,
    pub fts_compar_b: *mut block2::Block<dyn Fn() -> c_int>,
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/fts?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct FTS {
    pub fts_cur: *mut _ftsent,
    pub fts_child: *mut Self,
    pub fts_array: *mut *mut Self,
    pub fts_dev: dev_t,
    pub fts_path: *mut c_char,
    pub fts_rfd: c_int,
    pub fts_pathlen: c_int,
    pub fts_nitems: c_int,
    pub fts_options: c_int,
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/_ftsent?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct _ftsent {
    pub fts_cycle: *mut Self,
    pub fts_parent: *mut Self,
    pub fts_link: *mut Self,
    pub fts_number: c_long,
    pub fts_pointer: *mut c_void,
    pub fts_accpath: *mut c_char,
    pub fts_path: *mut c_char,
    pub fts_errno: c_int,
    pub fts_symfd: c_int,
    pub fts_pathlen: c_ushort,
    pub fts_namelen: c_ushort,
    pub fts_ino: ino_t,
    pub fts_dev: dev_t,
    pub fts_nlink: nlink_t,
    pub fts_level: c_short,
    pub fts_info: c_ushort,
    pub fts_flags: c_ushort,
    pub fts_instr: c_ushort,
    pub fts_statp: *mut stat,
    pub fts_name: [c_char; 1],
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ftsent?language=objc)
pub type FTSENT = Self;

#[inline]
pub unsafe extern "C-unwind" fn fts_children(
    param1: *mut FTS,
    param1: c_int,
) -> Option<Retained<FTSENT>> {
    extern "C-unwind" {
        #[cfg_attr(target_vendor = "apple", link_name = "fts_children")]
        fn fts_children(param1: *mut FTS, param1: c_int) -> *mut FTSENT;
    }
    let ret = unsafe { fts_children(param1, param1) };
    unsafe { Retained::retain_autoreleased(ret) }
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "fts_close")]
    pub fn fts_close(param1: *mut FTS) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "fts_open")]
    pub fn fts_open(
        param1: *const *const c_char,
        param1: c_int,
        param1: Option<
            unsafe extern "C-unwind" fn(*mut *const FTSENT, *mut *const FTSENT) -> c_int,
        >,
    ) -> *mut FTS;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "fts_open_b")]
    pub fn fts_open_b(
        param1: *const *const c_char,
        param1: c_int,
        param1: Option<&block2::Block<dyn Fn(*mut *const FTSENT, *mut *const FTSENT) -> c_int>>,
    ) -> *mut FTS;
}

#[inline]
pub unsafe extern "C-unwind" fn fts_read(param1: *mut FTS) -> Option<Retained<FTSENT>> {
    extern "C-unwind" {
        #[cfg_attr(target_vendor = "apple", link_name = "fts_read")]
        fn fts_read(param1: *mut FTS) -> *mut FTSENT;
    }
    let ret = unsafe { fts_read(param1) };
    unsafe { Retained::retain_autoreleased(ret) }
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "fts_set")]
    pub fn fts_set(param1: *mut FTS, param1: Option<&FTSENT>, param1: c_int) -> c_int;
}
