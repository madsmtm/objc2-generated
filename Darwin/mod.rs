// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::unportable_markdown)]
#![allow(rustdoc::invalid_html_tags)]

#[cfg(feature = "C")]
#[path = "C/mod.rs"]
mod __C;
#[cfg(feature = "aio")]
#[path = "aio.rs"]
mod __aio;
#[cfg(feature = "aliasdb")]
#[path = "aliasdb.rs"]
mod __aliasdb;
#[cfg(feature = "ar")]
#[path = "ar.rs"]
mod __ar;
#[cfg(feature = "architecture")]
#[path = "architecture.rs"]
mod __architecture;
#[cfg(feature = "arpa")]
#[path = "arpa/mod.rs"]
mod __arpa;
#[cfg(feature = "bank")]
#[path = "bank/mod.rs"]
mod __bank;
#[cfg(feature = "bitstring")]
#[path = "bitstring.rs"]
mod __bitstring;
#[cfg(feature = "bootparams")]
#[path = "bootparams.rs"]
mod __bootparams;
#[cfg(feature = "bsm")]
#[path = "bsm/mod.rs"]
mod __bsm;
#[cfg(feature = "cpio")]
#[path = "cpio.rs"]
mod __cpio;
#[cfg(feature = "crt_externs")]
#[path = "crt_externs.rs"]
mod __crt_externs;
#[cfg(feature = "dirent")]
#[path = "dirent.rs"]
mod __dirent;
#[cfg(feature = "dlfcn")]
#[path = "dlfcn.rs"]
mod __dlfcn;
#[cfg(feature = "execinfo")]
#[path = "execinfo.rs"]
mod __execinfo;
#[cfg(feature = "fcntl")]
#[path = "fcntl.rs"]
mod __fcntl;
#[cfg(feature = "fmtmsg")]
#[path = "fmtmsg.rs"]
mod __fmtmsg;
#[cfg(feature = "fnmatch")]
#[path = "fnmatch.rs"]
mod __fnmatch;
#[cfg(feature = "fstab")]
#[path = "fstab.rs"]
mod __fstab;
#[cfg(feature = "fts")]
#[path = "fts.rs"]
mod __fts;
#[cfg(feature = "ftw")]
#[path = "ftw.rs"]
mod __ftw;
#[cfg(feature = "getopt")]
#[path = "getopt.rs"]
mod __getopt;
#[cfg(feature = "glob")]
#[path = "glob.rs"]
mod __glob;
#[cfg(feature = "grp")]
#[path = "grp.rs"]
mod __grp;
#[cfg(feature = "iconv")]
#[path = "iconv.rs"]
mod __iconv;
#[cfg(feature = "ifaddrs")]
#[path = "ifaddrs.rs"]
mod __ifaddrs;
#[cfg(feature = "ioctl")]
#[path = "ioctl.rs"]
mod __ioctl;
#[cfg(feature = "langinfo")]
#[path = "langinfo/mod.rs"]
mod __langinfo;
#[cfg(feature = "libc")]
#[path = "libc.rs"]
mod __libc;
#[cfg(feature = "libgen")]
#[path = "libgen.rs"]
mod __libgen;
#[cfg(feature = "libkern")]
#[path = "libkern/mod.rs"]
mod __libkern;
#[cfg(feature = "libproc")]
#[path = "libproc.rs"]
mod __libproc;
#[cfg(feature = "machine")]
#[path = "machine/mod.rs"]
mod __machine;
#[cfg(feature = "malloc")]
#[path = "malloc/mod.rs"]
mod __malloc;
#[cfg(feature = "membership")]
#[path = "membership.rs"]
mod __membership;
#[cfg(feature = "monetary")]
#[path = "monetary/mod.rs"]
mod __monetary;
#[cfg(feature = "ncurses")]
#[path = "ncurses/mod.rs"]
mod __ncurses;
#[cfg(feature = "ndbm")]
#[path = "ndbm.rs"]
mod __ndbm;
#[cfg(feature = "net")]
#[path = "net/mod.rs"]
mod __net;
#[cfg(feature = "netdb")]
#[path = "netdb.rs"]
mod __netdb;
#[cfg(feature = "netinet")]
#[path = "netinet/mod.rs"]
mod __netinet;
#[cfg(feature = "netinet6")]
#[path = "netinet6/mod.rs"]
mod __netinet6;
#[cfg(feature = "nl_types")]
#[path = "nl_types.rs"]
mod __nl_types;
#[cfg(feature = "ntsid")]
#[path = "ntsid.rs"]
mod __ntsid;
#[cfg(feature = "os")]
#[path = "os/mod.rs"]
mod __os;
#[cfg(feature = "paths")]
#[path = "paths.rs"]
mod __paths;
#[cfg(feature = "poll")]
#[path = "poll.rs"]
mod __poll;
#[cfg(feature = "printerdb")]
#[path = "printerdb.rs"]
mod __printerdb;
#[cfg(feature = "pthread")]
#[path = "pthread/mod.rs"]
mod __pthread;
#[cfg(feature = "pwd")]
#[path = "pwd.rs"]
mod __pwd;
#[cfg(feature = "regex")]
#[path = "regex/mod.rs"]
mod __regex;
#[cfg(feature = "sched")]
#[path = "sched.rs"]
mod __sched;
#[cfg(feature = "search")]
#[path = "search.rs"]
mod __search;
#[cfg(feature = "semaphore")]
#[path = "semaphore.rs"]
mod __semaphore;
#[cfg(feature = "spawn")]
#[path = "spawn.rs"]
mod __spawn;
#[cfg(feature = "strings")]
#[path = "strings.rs"]
mod __strings;
#[cfg(feature = "sys")]
#[path = "sys/mod.rs"]
mod __sys;
#[cfg(feature = "sysdir")]
#[path = "sysdir.rs"]
mod __sysdir;
#[cfg(feature = "sysexits")]
#[path = "sysexits.rs"]
mod __sysexits;
#[cfg(feature = "syslog")]
#[path = "syslog.rs"]
mod __syslog;
#[cfg(feature = "tar")]
#[path = "tar.rs"]
mod __tar;
#[cfg(feature = "termios")]
#[path = "termios.rs"]
mod __termios;
#[cfg(feature = "ulimit")]
#[path = "ulimit.rs"]
mod __ulimit;
#[cfg(feature = "unistd")]
#[path = "unistd.rs"]
mod __unistd;
#[cfg(feature = "utime")]
#[path = "utime.rs"]
mod __utime;
#[cfg(feature = "utmp")]
#[path = "utmp.rs"]
mod __utmp;
#[cfg(feature = "utmpx")]
#[path = "utmpx.rs"]
mod __utmpx;
#[cfg(feature = "uuid")]
#[path = "uuid.rs"]
mod __uuid;
#[cfg(feature = "wordexp")]
#[path = "wordexp.rs"]
mod __wordexp;

pub use self::__aio::aio_cancel;
pub use self::__aio::aio_error;
pub use self::__aio::aio_fsync;
pub use self::__aio::aio_read;
pub use self::__aio::aio_return;
pub use self::__aio::aio_suspend;
pub use self::__aio::aio_write;
pub use self::__aio::aiocb;
pub use self::__aio::lio_listio;
pub use self::__aliasdb::alias_endent;
pub use self::__aliasdb::alias_getbyname;
pub use self::__aliasdb::alias_getent;
pub use self::__aliasdb::alias_setent;
pub use self::__aliasdb::aliasent;
pub use self::__ar::ar_hdr;
pub use self::__architecture::NXByteOrder;
pub use self::__architecture::NXSwappedDouble;
pub use self::__architecture::NXSwappedFloat;
#[cfg(feature = "arpa")]
pub use self::__arpa::*;
#[cfg(feature = "bank")]
pub use self::__bank::*;
pub use self::__bitstring::bitstr_t;
pub use self::__bootparams::bootparams_endent;
pub use self::__bootparams::bootparams_getbyname;
pub use self::__bootparams::bootparams_getent;
pub use self::__bootparams::bootparams_setent;
pub use self::__bootparams::bootparamsent;
#[cfg(feature = "bsm")]
pub use self::__bsm::*;
pub(crate) use self::__crt_externs::_NSGetArgc;
pub(crate) use self::__crt_externs::_NSGetArgv;
pub(crate) use self::__crt_externs::_NSGetEnviron;
pub(crate) use self::__crt_externs::_NSGetMachExecuteHeader;
pub(crate) use self::__crt_externs::_NSGetProgname;
pub(crate) use self::__dirent::__opendir2;
pub use self::__dirent::alphasort;
pub use self::__dirent::closedir;
pub use self::__dirent::dirent;
pub use self::__dirent::dirfd;
pub use self::__dirent::fdopendir;
pub use self::__dirent::getdirentries;
pub use self::__dirent::opendir;
pub use self::__dirent::readdir;
pub use self::__dirent::readdir_r;
pub use self::__dirent::rewinddir;
pub use self::__dirent::scandir;
pub use self::__dirent::scandir_b;
pub use self::__dirent::seekdir;
pub use self::__dirent::telldir;
pub use self::__dirent::DIR;
pub use self::__dlfcn::dl_info;
pub use self::__dlfcn::dladdr;
pub use self::__dlfcn::dlclose;
pub use self::__dlfcn::dlerror;
pub use self::__dlfcn::dlopen;
pub use self::__dlfcn::dlopen_preflight;
pub use self::__dlfcn::dlsym;
pub use self::__dlfcn::Dl_info;
pub use self::__execinfo::backtrace;
pub use self::__execinfo::backtrace_async;
pub use self::__execinfo::backtrace_from_fp;
pub use self::__execinfo::backtrace_image_offsets;
pub use self::__execinfo::backtrace_symbols;
pub use self::__execinfo::backtrace_symbols_fd;
pub use self::__execinfo::image_offset;
pub use self::__fcntl::creat;
pub use self::__fcntl::fattributiontag;
pub use self::__fcntl::fattributiontag_t;
pub use self::__fcntl::fchecklv;
pub use self::__fcntl::fchecklv_t;
pub use self::__fcntl::fgetsigsinfo;
pub use self::__fcntl::fgetsigsinfo_t;
pub use self::__fcntl::filesec_dup;
pub use self::__fcntl::filesec_free;
pub use self::__fcntl::filesec_get_property;
pub use self::__fcntl::filesec_init;
pub use self::__fcntl::filesec_property_t;
pub use self::__fcntl::filesec_query_property;
pub use self::__fcntl::filesec_set_property;
pub use self::__fcntl::filesec_unset_property;
pub use self::__fcntl::flock;
pub use self::__fcntl::flock;
pub use self::__fcntl::flocktimeout;
pub use self::__fcntl::fpunchhole;
pub use self::__fcntl::fpunchhole_t;
pub use self::__fcntl::fsignatures;
pub use self::__fcntl::fsignatures_t;
pub use self::__fcntl::fspecread;
pub use self::__fcntl::fspecread_t;
pub use self::__fcntl::fstore;
pub use self::__fcntl::fstore_t;
pub use self::__fcntl::fsupplement;
pub use self::__fcntl::fsupplement_t;
pub use self::__fcntl::ftrimactivefile;
pub use self::__fcntl::ftrimactivefile_t;
pub use self::__fcntl::log2phys;
pub use self::__fcntl::openat_authenticated_np;
pub use self::__fcntl::openx_np;
pub use self::__fcntl::radvisory;
pub use self::__fmtmsg::fmtmsg;
pub use self::__fnmatch::fnmatch;
pub use self::__fstab::endfsent;
pub use self::__fstab::fstab;
pub use self::__fstab::getfsent;
pub use self::__fstab::getfsfile;
pub use self::__fstab::getfsspec;
pub use self::__fstab::setfsent;
pub use self::__fts::fts_set;
pub use self::__fts::FTS_fts_options;
pub(crate) use self::__fts::_ftsent;
pub use self::__fts::fts_children;
pub use self::__fts::fts_close;
pub use self::__fts::fts_open;
pub use self::__fts::fts_open_b;
pub use self::__fts::fts_read;
pub use self::__fts::FTS;
pub use self::__fts::FTSENT;
pub use self::__ftw::ftw;
pub use self::__ftw::nftw;
pub use self::__ftw::FTW;
pub use self::__getopt::getopt;
pub use self::__getopt::getopt_long;
pub use self::__getopt::getopt_long_only;
pub use self::__getopt::optarg;
pub use self::__getopt::opterr;
pub use self::__getopt::optind;
pub use self::__getopt::option;
pub use self::__getopt::optopt;
pub use self::__getopt::optreset;
pub use self::__glob::glob;
pub use self::__glob::glob_b;
pub use self::__glob::glob_t;
pub use self::__glob::glob_t_gl_closedir;
pub use self::__glob::globfree;
pub use self::__grp::endgrent;
pub use self::__grp::getgrent;
pub use self::__grp::getgrgid;
pub use self::__grp::getgrgid_r;
pub use self::__grp::getgrnam;
pub use self::__grp::getgrnam_r;
pub use self::__grp::getgruuid;
pub use self::__grp::getgruuid_r;
pub use self::__grp::group;
pub use self::__grp::group_from_gid;
pub use self::__grp::setgrent;
pub use self::__grp::setgrfile;
pub use self::__grp::setgroupent;
pub(crate) use self::__iconv::__iconv_bool;
pub(crate) use self::__iconv::__iconv_free_list;
pub(crate) use self::__iconv::__iconv_get_list;
pub(crate) use self::__iconv::__tag_iconv_t;
pub(crate) use self::__iconv::_libiconv_version;
pub use self::__iconv::iconv;
pub use self::__iconv::iconv_allocation_t;
pub use self::__iconv::iconv_canonicalize;
pub use self::__iconv::iconv_close;
pub use self::__iconv::iconv_fallbacks;
pub use self::__iconv::iconv_hooks;
pub use self::__iconv::iconv_open;
pub use self::__iconv::iconv_open_into;
pub use self::__iconv::iconv_t;
pub use self::__iconv::iconv_unicode_char_hook;
pub use self::__iconv::iconv_unicode_mb_to_uc_fallback;
pub use self::__iconv::iconv_unicode_uc_to_mb_fallback;
pub use self::__iconv::iconv_wchar_mb_to_wc_fallback;
pub use self::__iconv::iconv_wchar_wc_to_mb_fallback;
pub use self::__iconv::iconv_wide_char_hook;
pub use self::__iconv::iconvctl;
pub use self::__iconv::iconvlist;
pub use self::__iconv::libiconv_set_relocation_prefix;
pub(crate) use self::__iconv::_LIBICONV_VERSION;
pub use self::__ifaddrs::freeifaddrs;
pub use self::__ifaddrs::freeifmaddrs;
pub use self::__ifaddrs::getifaddrs;
pub use self::__ifaddrs::getifmaddrs;
pub use self::__ifaddrs::ifaddrs;
pub use self::__ifaddrs::ifmaddrs;
pub use self::__ioctl::ttysize;
#[cfg(feature = "langinfo")]
pub use self::__langinfo::*;
pub use self::__libc::map_fd;
pub use self::__libc::qelem;
pub use self::__libgen::basename;
pub use self::__libgen::basename_r;
pub use self::__libgen::dirname;
pub use self::__libgen::dirname_r;
#[cfg(feature = "libkern")]
pub use self::__libkern::*;
pub use self::__libproc::proc_clear_dirty;
pub use self::__libproc::proc_get_dirty;
pub use self::__libproc::proc_kmsgbuf;
pub use self::__libproc::proc_libversion;
pub use self::__libproc::proc_listallpids;
pub use self::__libproc::proc_listchildpids;
pub use self::__libproc::proc_listpgrppids;
pub use self::__libproc::proc_listpids;
pub use self::__libproc::proc_listpidspath;
pub use self::__libproc::proc_name;
pub use self::__libproc::proc_pid_rusage;
pub use self::__libproc::proc_pidfdinfo;
pub use self::__libproc::proc_pidfileportinfo;
pub use self::__libproc::proc_pidinfo;
pub use self::__libproc::proc_pidpath;
pub use self::__libproc::proc_pidpath_audittoken;
pub use self::__libproc::proc_regionfilename;
pub use self::__libproc::proc_set_csm;
pub use self::__libproc::proc_set_dirty;
pub use self::__libproc::proc_set_no_smt;
pub use self::__libproc::proc_setpcontrol;
pub use self::__libproc::proc_setpcontrol;
pub use self::__libproc::proc_setthread_csm;
pub use self::__libproc::proc_setthread_no_smt;
pub use self::__libproc::proc_signal_delegate;
pub use self::__libproc::proc_signal_with_audittoken;
pub use self::__libproc::proc_terminate;
pub use self::__libproc::proc_terminate_all_rsr;
pub use self::__libproc::proc_terminate_delegate;
pub use self::__libproc::proc_terminate_with_audittoken;
pub use self::__libproc::proc_track_dirty;
pub use self::__libproc::proc_udata_info;
#[cfg(feature = "machine")]
pub use self::__machine::*;
#[cfg(feature = "malloc")]
pub use self::__malloc::*;
pub use self::__membership::mbr_check_membership;
pub use self::__membership::mbr_check_service_membership;
pub use self::__membership::mbr_gid_to_uuid;
pub use self::__membership::mbr_identifier_to_uuid;
pub use self::__membership::mbr_sid_to_string;
pub use self::__membership::mbr_sid_to_uuid;
pub use self::__membership::mbr_string_to_sid;
pub use self::__membership::mbr_uid_to_uuid;
pub use self::__membership::mbr_uuid_to_id;
pub use self::__membership::mbr_uuid_to_sid;
#[cfg(feature = "monetary")]
pub use self::__monetary::*;
#[cfg(feature = "ncurses")]
pub use self::__ncurses::*;
pub use self::__ndbm::datum;
pub use self::__ndbm::dbm_clearerr;
pub use self::__ndbm::dbm_close;
pub use self::__ndbm::dbm_delete;
pub use self::__ndbm::dbm_dirfno;
pub use self::__ndbm::dbm_error;
pub use self::__ndbm::dbm_fetch;
pub use self::__ndbm::dbm_firstkey;
pub use self::__ndbm::dbm_forder;
pub use self::__ndbm::dbm_nextkey;
pub use self::__ndbm::dbm_open;
pub use self::__ndbm::dbm_store;
pub use self::__ndbm::DBM;
#[cfg(feature = "net")]
pub use self::__net::*;
pub use self::__netdb::addrinfo;
pub use self::__netdb::endhostent;
pub use self::__netdb::endnetent;
pub use self::__netdb::endnetgrent;
pub use self::__netdb::endprotoent;
pub use self::__netdb::endrpcent;
pub use self::__netdb::endservent;
pub use self::__netdb::freeaddrinfo;
pub use self::__netdb::freehostent;
pub use self::__netdb::gai_strerror;
pub use self::__netdb::getaddrinfo;
pub use self::__netdb::gethostbyaddr;
pub use self::__netdb::gethostbyname;
pub use self::__netdb::gethostbyname2;
pub use self::__netdb::gethostent;
pub use self::__netdb::getipnodebyaddr;
pub use self::__netdb::getipnodebyname;
pub use self::__netdb::getnameinfo;
pub use self::__netdb::getnetbyaddr;
pub use self::__netdb::getnetbyname;
pub use self::__netdb::getnetent;
pub use self::__netdb::getnetgrent;
pub use self::__netdb::getprotobyname;
pub use self::__netdb::getprotobynumber;
pub use self::__netdb::getprotoent;
pub use self::__netdb::getrpcbyname;
pub use self::__netdb::getrpcbynumber;
pub use self::__netdb::getrpcent;
pub use self::__netdb::getservbyname;
pub use self::__netdb::getservbyport;
pub use self::__netdb::getservent;
pub use self::__netdb::h_errno;
pub use self::__netdb::herror;
pub use self::__netdb::hostent;
pub use self::__netdb::hstrerror;
pub use self::__netdb::innetgr;
pub use self::__netdb::netent;
pub use self::__netdb::protoent;
pub use self::__netdb::rpcent;
pub use self::__netdb::servent;
pub use self::__netdb::sethostent;
pub use self::__netdb::setnetent;
pub use self::__netdb::setnetgrent;
pub use self::__netdb::setprotoent;
pub use self::__netdb::setrpcent;
pub use self::__netdb::setservent;
#[cfg(feature = "netinet")]
pub use self::__netinet::*;
#[cfg(feature = "netinet6")]
pub use self::__netinet6::*;
pub use self::__ntsid::nt_sid_t;
#[cfg(feature = "os")]
pub use self::__os::*;
pub use self::__poll::nfds_t;
pub use self::__poll::poll;
pub use self::__poll::pollfd;
pub use self::__printerdb::prdb_end;
pub use self::__printerdb::prdb_ent;
pub use self::__printerdb::prdb_get;
pub use self::__printerdb::prdb_getbyname;
pub use self::__printerdb::prdb_property;
pub use self::__printerdb::prdb_set;
#[cfg(feature = "pthread")]
pub use self::__pthread::*;
pub use self::__pwd::endpwent;
pub use self::__pwd::getpwent;
pub use self::__pwd::getpwnam;
pub use self::__pwd::getpwnam_r;
pub use self::__pwd::getpwuid;
pub use self::__pwd::getpwuid_r;
pub use self::__pwd::getpwuuid;
pub use self::__pwd::getpwuuid_r;
pub use self::__pwd::passwd;
pub use self::__pwd::setpassent;
pub use self::__pwd::setpwent;
pub use self::__pwd::user_from_uid;
#[cfg(feature = "regex")]
pub use self::__regex::*;
pub use self::__search::entry;
pub use self::__search::hcreate;
pub use self::__search::hdestroy;
pub use self::__search::hsearch;
pub use self::__search::insque;
pub use self::__search::lfind;
pub use self::__search::lsearch;
pub use self::__search::remque;
pub use self::__search::tdelete;
pub use self::__search::tfind;
pub use self::__search::tsearch;
pub use self::__search::twalk;
pub use self::__search::ACTION;
pub use self::__search::ENTRY;
pub use self::__search::VISIT;
pub use self::__semaphore::pseminfo;
pub use self::__spawn::posix_spawn;
pub use self::__spawn::posix_spawn_file_actions_addchdir_np;
pub use self::__spawn::posix_spawn_file_actions_addclose;
pub use self::__spawn::posix_spawn_file_actions_adddup2;
pub use self::__spawn::posix_spawn_file_actions_addfchdir_np;
pub use self::__spawn::posix_spawn_file_actions_addinherit_np;
pub use self::__spawn::posix_spawn_file_actions_addopen;
pub use self::__spawn::posix_spawn_file_actions_destroy;
pub use self::__spawn::posix_spawn_file_actions_init;
pub use self::__spawn::posix_spawn_file_actions_t;
pub use self::__spawn::posix_spawnattr_destroy;
pub use self::__spawn::posix_spawnattr_getarchpref_np;
pub use self::__spawn::posix_spawnattr_getbinpref_np;
pub use self::__spawn::posix_spawnattr_getflags;
pub use self::__spawn::posix_spawnattr_getpgroup;
pub use self::__spawn::posix_spawnattr_getsigdefault;
pub use self::__spawn::posix_spawnattr_getsigmask;
pub use self::__spawn::posix_spawnattr_init;
pub use self::__spawn::posix_spawnattr_set_csm_np;
pub use self::__spawn::posix_spawnattr_setarchpref_np;
pub use self::__spawn::posix_spawnattr_setauditsessionport_np;
pub use self::__spawn::posix_spawnattr_setbinpref_np;
pub use self::__spawn::posix_spawnattr_setexceptionports_np;
pub use self::__spawn::posix_spawnattr_setflags;
pub use self::__spawn::posix_spawnattr_setnosmt_np;
pub use self::__spawn::posix_spawnattr_setpgroup;
pub use self::__spawn::posix_spawnattr_setsigdefault;
pub use self::__spawn::posix_spawnattr_setsigmask;
pub use self::__spawn::posix_spawnattr_setspecialport_np;
pub use self::__spawn::posix_spawnattr_t;
pub use self::__spawn::posix_spawnp;
#[cfg(feature = "sys")]
pub use self::__sys::*;
pub use self::__sysdir::sysdir_get_next_search_path_enumeration;
pub use self::__sysdir::sysdir_search_path_directory_t;
pub use self::__sysdir::sysdir_search_path_domain_mask_t;
pub use self::__sysdir::sysdir_search_path_enumeration_state;
pub use self::__sysdir::sysdir_start_search_path_enumeration;
pub use self::__syslog::closelog;
pub use self::__syslog::openlog;
pub use self::__syslog::setlogmask;
pub use self::__syslog::vsyslog;
pub use self::__tar::TVERSION;
pub use self::__termios::cc_t;
pub use self::__termios::cfgetispeed;
pub use self::__termios::cfgetospeed;
pub use self::__termios::cfmakeraw;
pub use self::__termios::cfsetispeed;
pub use self::__termios::cfsetospeed;
pub use self::__termios::cfsetspeed;
pub use self::__termios::speed_t;
pub use self::__termios::tcdrain;
pub use self::__termios::tcflag_t;
pub use self::__termios::tcflow;
pub use self::__termios::tcflush;
pub use self::__termios::tcgetattr;
pub use self::__termios::tcgetsid;
pub use self::__termios::tcsendbreak;
pub use self::__termios::tcsetattr;
pub use self::__termios::termios;
pub use self::__utime::utimbuf;
pub use self::__utime::utime;
pub use self::__utmp::lastlog;
pub use self::__utmp::utmp;
pub use self::__utmpx::endutxent;
pub use self::__utmpx::endutxent_wtmp;
pub use self::__utmpx::getlastlogx;
pub use self::__utmpx::getlastlogxbyname;
pub use self::__utmpx::getutmp;
pub use self::__utmpx::getutmpx;
pub use self::__utmpx::getutxent;
pub use self::__utmpx::getutxent_wtmp;
pub use self::__utmpx::getutxid;
pub use self::__utmpx::getutxline;
pub use self::__utmpx::lastlogx;
pub use self::__utmpx::pututxline;
pub use self::__utmpx::setutxent;
pub use self::__utmpx::setutxent_wtmp;
pub use self::__utmpx::utmpx;
pub use self::__utmpx::utmpxname;
pub use self::__utmpx::wtmpxname;
pub use self::__uuid::uuid_clear;
pub use self::__uuid::uuid_compare;
pub use self::__uuid::uuid_copy;
pub use self::__uuid::uuid_generate;
pub use self::__uuid::uuid_generate_random;
pub use self::__uuid::uuid_generate_time;
pub use self::__uuid::uuid_is_null;
pub use self::__uuid::uuid_parse;
pub use self::__uuid::uuid_string_t;
pub use self::__uuid::uuid_unparse;
pub use self::__uuid::uuid_unparse_lower;
pub use self::__uuid::uuid_unparse_upper;
pub use self::__uuid::UUID_NULL;
pub use self::__wordexp::wordexp;
pub use self::__wordexp::wordexp_t;
pub use self::__wordexp::wordfree;
#[cfg(feature = "C")]
pub use self::__C::*;
#[cfg(feature = "__builtin__")]
use __builtin__::*;
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/in6_addr___u6_addr?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub union in6_addr___u6_addr {
    pub(crate) __u6_addr8: [u8; 16],
    pub(crate) __u6_addr16: [u16; 8],
    pub(crate) __u6_addr32: [u32; 4],
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/in6_addr?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub struct in6_addr {
    pub(crate) __u6_addr: in6_addr___u6_addr,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/in6_addr_t?language=objc)
pub type in6_addr_t = in6_addr;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/sockaddr_in6?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub struct sockaddr_in6 {
    pub sin6_len: u8,
    pub sin6_family: libc::sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/in6addr_any?language=objc)
    pub static in6addr_any: in6_addr;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/in6addr_loopback?language=objc)
    pub static in6addr_loopback: in6_addr;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/in6addr_nodelocal_allnodes?language=objc)
    pub static in6addr_nodelocal_allnodes: in6_addr;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/in6addr_linklocal_allnodes?language=objc)
    pub static in6addr_linklocal_allnodes: in6_addr;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/in6addr_linklocal_allrouters?language=objc)
    pub static in6addr_linklocal_allrouters: in6_addr;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/in6addr_linklocal_allv2routers?language=objc)
    pub static in6addr_linklocal_allv2routers: in6_addr;
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/ipv6_mreq?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: c_uint,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/in6_pktinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub struct in6_pktinfo {
    pub ipi6_addr: in6_addr,
    pub ipi6_ifindex: c_uint,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/ip6_mtuinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub struct ip6_mtuinfo {
    pub ip6m_addr: sockaddr_in6,
    pub ip6m_mtu: u32,
}

extern "C-unwind" {
    pub fn inet6_option_space(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_option_init(
        param1: *mut c_void,
        param1: *mut *mut libc::cmsghdr,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_option_append(
        param1: *mut libc::cmsghdr,
        param1: *const u8,
        param1: c_int,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_option_alloc(
        param1: *mut libc::cmsghdr,
        param1: c_int,
        param1: c_int,
        param1: c_int,
    ) -> *mut u8;
}

extern "C-unwind" {
    pub fn inet6_option_next(param1: *const libc::cmsghdr, param1: *mut *mut u8) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_option_find(
        param1: *const libc::cmsghdr,
        param1: *mut *mut u8,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_rthdr_space(param1: c_int, param1: c_int) -> usize;
}

extern "C-unwind" {
    pub fn inet6_rthdr_init(param1: *mut c_void, param1: c_int) -> *mut libc::cmsghdr;
}

extern "C-unwind" {
    pub fn inet6_rthdr_add(
        param1: *mut libc::cmsghdr,
        param1: *const in6_addr,
        param1: c_uint,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_rthdr_lasthop(param1: *mut libc::cmsghdr, param1: c_uint) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_rthdr_segments(param1: *const libc::cmsghdr) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_rthdr_getaddr(param1: *mut libc::cmsghdr, param1: c_int) -> *mut in6_addr;
}

extern "C-unwind" {
    pub fn inet6_rthdr_getflags(param1: *const libc::cmsghdr, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_opt_init(param1: *mut c_void, param1: libc::socklen_t) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_opt_append(
        param1: *mut c_void,
        param1: libc::socklen_t,
        param1: c_int,
        param1: u8,
        param1: libc::socklen_t,
        param1: u8,
        param1: *mut *mut c_void,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_opt_finish(param1: *mut c_void, param1: libc::socklen_t, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_opt_set_val(
        param1: *mut c_void,
        param1: c_int,
        param1: *mut c_void,
        param1: libc::socklen_t,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_opt_next(
        param1: *mut c_void,
        param1: libc::socklen_t,
        param1: c_int,
        param1: *mut u8,
        param1: *mut libc::socklen_t,
        param1: *mut *mut c_void,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_opt_find(
        param1: *mut c_void,
        param1: libc::socklen_t,
        param1: c_int,
        param1: u8,
        param1: *mut libc::socklen_t,
        param1: *mut *mut c_void,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_opt_get_val(
        param1: *mut c_void,
        param1: c_int,
        param1: *mut c_void,
        param1: libc::socklen_t,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_rth_space(param1: c_int, param1: c_int) -> libc::socklen_t;
}

extern "C-unwind" {
    pub fn inet6_rth_init(
        param1: *mut c_void,
        param1: libc::socklen_t,
        param1: c_int,
        param1: c_int,
    ) -> *mut c_void;
}

extern "C-unwind" {
    pub fn inet6_rth_add(param1: *mut c_void, param1: *const in6_addr) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_rth_reverse(param1: *const c_void, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_rth_segments(param1: *const c_void) -> c_int;
}

extern "C-unwind" {
    pub fn inet6_rth_getaddr(param1: *const c_void, param1: c_int) -> *mut in6_addr;
}

/// ******************************************************************************
///
/// Base integer types for all target OS's and CPU's
///
/// UInt8            8-bit unsigned integer
/// SInt8            8-bit signed integer
/// UInt16          16-bit unsigned integer
/// SInt16          16-bit signed integer
/// UInt32          32-bit unsigned integer
/// SInt32          32-bit signed integer
/// UInt64          64-bit unsigned integer
/// SInt64          64-bit signed integer
///
/// *******************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/__builtin__/uint8?language=objc)
pub type UInt8 = c_uchar;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/sint8?language=objc)
pub type SInt8 = c_schar;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/uint16?language=objc)
pub type UInt16 = c_ushort;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/sint16?language=objc)
pub type SInt16 = c_short;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/uint32?language=objc)
pub type UInt32 = c_uint;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/sint32?language=objc)
pub type SInt32 = c_int;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/wide?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct wide {
    pub lo: u32,
    pub hi: i32,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/unsignedwide?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct UnsignedWide {
    pub lo: u32,
    pub hi: u32,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/sint64?language=objc)
pub type SInt64 = c_longlong;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/uint64?language=objc)
pub type UInt64 = c_ulonglong;

/// ******************************************************************************
///
/// Base fixed point types
///
/// Fixed           16-bit signed integer plus 16-bit fraction
/// UnsignedFixed   16-bit unsigned integer plus 16-bit fraction
/// Fract           2-bit signed integer plus 30-bit fraction
/// ShortFixed      8-bit signed integer plus 8-bit fraction
///
/// *******************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/__builtin__/fixed?language=objc)
pub type Fixed = i32;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/fixedptr?language=objc)
pub type FixedPtr = *mut Fixed;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/fract?language=objc)
pub type Fract = i32;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/fractptr?language=objc)
pub type FractPtr = *mut Fract;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/unsignedfixed?language=objc)
pub type UnsignedFixed = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/unsignedfixedptr?language=objc)
pub type UnsignedFixedPtr = *mut UnsignedFixed;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/shortfixed?language=objc)
pub type ShortFixed = c_short;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/shortfixedptr?language=objc)
pub type ShortFixedPtr = *mut ShortFixed;

/// ******************************************************************************
///
/// Base floating point types
///
/// Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
/// Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits
/// Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
/// Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
///
/// Note: These are fixed size floating point types, useful when writing a floating
/// point value to disk.  If your compiler does not support a particular size
/// float, a struct is used instead.
/// Use one of the NCEG types (e.g. double_t) or an ANSI C type (e.g. double) if
/// you want a floating point representation that is natural for any given
/// compiler, but might be a different size on different compilers.
///
/// *******************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/__builtin__/float32?language=objc)
pub type Float32 = c_float;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/float64?language=objc)
pub type Float64 = c_double;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/float80?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Float80 {
    pub exp: i16,
    pub man: [u16; 4],
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/float96?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Float96 {
    pub exp: [i16; 2],
    pub man: [u16; 4],
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/float32point?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Float32Point {
    pub x: f32,
    pub y: f32,
}

/// ******************************************************************************
///
/// MacOS Memory Manager types
///
/// Ptr             Pointer to a non-relocatable block
/// Handle          Pointer to a master pointer to a relocatable block
/// Size            The number of bytes in a block (signed for historical reasons)
///
/// *******************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/__builtin__/ptr?language=objc)
pub type Ptr = *mut c_char;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/handle?language=objc)
pub type Handle = *mut Ptr;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/size?language=objc)
pub type Size = c_long;

/// ******************************************************************************
///
/// Higher level basic types
///
/// OSErr                   16-bit result error code
/// OSStatus                32-bit result error code
/// LogicalAddress          Address in the clients virtual address space
/// ConstLogicalAddress     Address in the clients virtual address space that will only be read
/// PhysicalAddress         Real address as used on the hardware bus
/// BytePtr                 Pointer to an array of bytes
/// ByteCount               The size of an array of bytes
/// ByteOffset              An offset into an array of bytes
/// ItemCount               32-bit iteration count
/// OptionBits              Standard 32-bit set of bit flags
/// PBVersion               ?
/// Duration                32-bit millisecond timer for drivers
/// AbsoluteTime            64-bit clock
/// ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
/// LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
/// RegionCode              Designates a language as used in a particular region (e.g. British vs American
/// English) together with other region-dependent characteristics (e.g. date format)
/// FourCharCode            A 32-bit value made by packing four 1 byte characters together
/// OSType                  A FourCharCode used in the OS and file system (e.g. creator)
/// ResType                 A FourCharCode used to tag resources (e.g. 'DLOG')
///
/// *******************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/__builtin__/oserr?language=objc)
pub type OSErr = i16;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/osstatus?language=objc)
pub type OSStatus = i32;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/logicaladdress?language=objc)
pub type LogicalAddress = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/constlogicaladdress?language=objc)
pub type ConstLogicalAddress = *const c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/physicaladdress?language=objc)
pub type PhysicalAddress = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/byteptr?language=objc)
pub type BytePtr = *mut u8;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/bytecount?language=objc)
pub type ByteCount = c_ulong;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/byteoffset?language=objc)
pub type ByteOffset = c_ulong;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/duration?language=objc)
pub type Duration = i32;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/absolutetime?language=objc)
pub type AbsoluteTime = UnsignedWide;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/optionbits?language=objc)
pub type OptionBits = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/itemcount?language=objc)
pub type ItemCount = c_ulong;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/pbversion?language=objc)
pub type PBVersion = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/scriptcode?language=objc)
pub type ScriptCode = i16;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/langcode?language=objc)
pub type LangCode = i16;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/regioncode?language=objc)
pub type RegionCode = i16;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/fourcharcode?language=objc)
pub type FourCharCode = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/ostype?language=objc)
pub type OSType = FourCharCode;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/restype?language=objc)
pub type ResType = FourCharCode;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/ostypeptr?language=objc)
pub type OSTypePtr = *mut OSType;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/restypeptr?language=objc)
pub type ResTypePtr = *mut ResType;

/// ******************************************************************************
///
/// Boolean types and values
///
/// Boolean         Mac OS historic type, sizeof(Boolean)==1
/// bool            Defined in stdbool.h, ISO C/C++ standard type
/// false           Now defined in stdbool.h
/// true            Now defined in stdbool.h
///
/// *******************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/__builtin__/boolean?language=objc)
pub type Boolean = c_uchar;

/// ******************************************************************************
///
/// Function Pointer Types
///
/// ProcPtr                 Generic pointer to a function
/// Register68kProcPtr      Pointer to a 68K function that expects parameters in registers
/// UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
///
/// ProcHandle              Pointer to a ProcPtr
/// UniversalProcHandle     Pointer to a UniversalProcPtr
///
/// *******************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/__builtin__/procptr?language=objc)
pub type ProcPtr = Option<unsafe extern "C-unwind" fn() -> c_long>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/register68kprocptr?language=objc)
pub type Register68kProcPtr = Option<unsafe extern "C-unwind" fn()>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/universalprocptr?language=objc)
pub type UniversalProcPtr = ProcPtr;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/prochandle?language=objc)
pub type ProcHandle = *mut ProcPtr;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/universalprochandle?language=objc)
pub type UniversalProcHandle = *mut UniversalProcPtr;

/// ******************************************************************************
///
/// RefCon Types
///
/// For access to private data in callbacks, etc.; refcons are generally
/// used as a pointer to something, but in the 32-bit world refcons in
/// different APIs have had various types: pointer, unsigned scalar, and
/// signed scalar. The RefCon types defined here support the current 32-bit
/// usage but provide normalization to pointer types for 64-bit.
///
/// PRefCon is preferred for new APIs; URefCon and SRefCon are primarily
/// for compatibility with existing APIs.
///
/// *******************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/__builtin__/prefcon?language=objc)
pub type PRefCon = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/urefcon?language=objc)
pub type URefCon = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/srefcon?language=objc)
pub type SRefCon = *mut c_void;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/noerr?language=objc)
pub const noErr: c_uint = 0;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/kniloptions?language=objc)
pub const kNilOptions: c_uint = 0;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/kvariablelengtharray?language=objc)
pub const kVariableLengthArray: c_uint = 1;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/kunknowntype?language=objc)
pub const kUnknownType: c_uint = 0x3F3F3F3F;

/// ******************************************************************************
///
/// String Types and Unicode Types
///
/// UnicodeScalarValue,     A complete Unicode character in UTF-32 format, with
/// UTF32Char               values from 0 through 0x10FFFF (excluding the surrogate
/// range 0xD800-0xDFFF and certain disallowed values).
///
/// UniChar,                A 16-bit Unicode code value in the default UTF-16 format.
/// UTF16Char               UnicodeScalarValues 0-0xFFFF are expressed in UTF-16
/// format using a single UTF16Char with the same value.
/// UnicodeScalarValues 0x10000-0x10FFFF are expressed in
/// UTF-16 format using a pair of UTF16Chars - one in the
/// high surrogate range (0xD800-0xDBFF) followed by one in
/// the low surrogate range (0xDC00-0xDFFF). All of the
/// characters defined in Unicode versions through 3.0 are
/// in the range 0-0xFFFF and can be expressed using a single
/// UTF16Char, thus the term "Unicode character" generally
/// refers to a UniChar = UTF16Char.
///
/// UTF8Char                An 8-bit code value in UTF-8 format. UnicodeScalarValues
/// 0-0x7F are expressed in UTF-8 format using one UTF8Char
/// with the same value. UnicodeScalarValues above 0x7F are
/// expressed in UTF-8 format using 2-4 UTF8Chars, all with
/// values in the range 0x80-0xF4 (UnicodeScalarValues
/// 0x100-0xFFFF use two or three UTF8Chars,
/// UnicodeScalarValues 0x10000-0x10FFFF use four UTF8Chars).
///
/// UniCharCount            A count of UTF-16 code values in an array or buffer.
///
/// StrNNN                  Pascal string holding up to NNN bytes
/// StringPtr               Pointer to a pascal string
/// StringHandle            Pointer to a StringPtr
/// ConstStringPtr          Pointer to a read-only pascal string
/// ConstStrNNNParam        For function parameters only - means string is const
///
/// CStringPtr              Pointer to a C string           (in C:  char*)
/// ConstCStringPtr         Pointer to a read-only C string (in C:  const char*)
///
/// Note: The length of a pascal string is stored as the first byte.
/// A pascal string does not have a termination byte.
/// A pascal string can hold at most 255 bytes of data.
/// The first character in a pascal string is offset one byte from the start of the string.
///
/// A C string is terminated with a byte of value zero.
/// A C string has no length limitation.
/// The first character in a C string is the zeroth byte of the string.
///
/// *******************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/__builtin__/unicodescalarvalue?language=objc)
pub type UnicodeScalarValue = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/utf32char?language=objc)
pub type UTF32Char = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/unichar?language=objc)
pub type UniChar = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/utf16char?language=objc)
pub type UTF16Char = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/utf8char?language=objc)
pub type UTF8Char = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/unicharptr?language=objc)
pub type UniCharPtr = *mut UniChar;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/unicharcount?language=objc)
pub type UniCharCount = c_ulong;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/unicharcountptr?language=objc)
pub type UniCharCountPtr = *mut UniCharCount;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/str255?language=objc)
pub type Str255 = ArrayUnknownABI<[c_uchar; 256]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/str63?language=objc)
pub type Str63 = ArrayUnknownABI<[c_uchar; 64]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/str32?language=objc)
pub type Str32 = ArrayUnknownABI<[c_uchar; 33]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/str31?language=objc)
pub type Str31 = ArrayUnknownABI<[c_uchar; 32]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/str27?language=objc)
pub type Str27 = ArrayUnknownABI<[c_uchar; 28]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/str15?language=objc)
pub type Str15 = ArrayUnknownABI<[c_uchar; 16]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/str32field?language=objc)
pub type Str32Field = ArrayUnknownABI<[c_uchar; 34]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/strfilename?language=objc)
pub type StrFileName = Str63;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/stringptr?language=objc)
pub type StringPtr = *mut c_uchar;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/stringhandle?language=objc)
pub type StringHandle = *mut StringPtr;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/conststringptr?language=objc)
pub type ConstStringPtr = *const c_uchar;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/conststr255param?language=objc)
pub type ConstStr255Param = *const c_uchar;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/conststr63param?language=objc)
pub type ConstStr63Param = *const c_uchar;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/conststr32param?language=objc)
pub type ConstStr32Param = *const c_uchar;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/conststr31param?language=objc)
pub type ConstStr31Param = *const c_uchar;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/conststr27param?language=objc)
pub type ConstStr27Param = *const c_uchar;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/conststr15param?language=objc)
pub type ConstStr15Param = *const c_uchar;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/conststrfilenameparam?language=objc)
pub type ConstStrFileNameParam = ConstStr63Param;

/// ******************************************************************************
///
/// Process Manager type ProcessSerialNumber (previously in Processes.h)
///
/// *******************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/__builtin__/processserialnumber?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ProcessSerialNumber {
    pub highLongOfPSN: u32,
    pub lowLongOfPSN: u32,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/processserialnumberptr?language=objc)
pub type ProcessSerialNumberPtr = *mut ProcessSerialNumber;

/// ******************************************************************************
///
/// Quickdraw Types
///
/// Point               2D Quickdraw coordinate, range: -32K to +32K
/// Rect                Rectangular Quickdraw area
/// Style               Quickdraw font rendering styles
/// StyleParameter      Style when used as a parameter (historical 68K convention)
/// StyleField          Style when used as a field (historical 68K convention)
/// CharParameter       Char when used as a parameter (historical 68K convention)
///
/// Note:   The original Macintosh toolbox in 68K Pascal defined Style as a SET.
/// Both Style and CHAR occupy 8-bits in packed records or 16-bits when
/// used as fields in non-packed records or as parameters.
///
/// *******************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/__builtin__/point?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Point {
    pub v: c_short,
    pub h: c_short,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/pointptr?language=objc)
pub type PointPtr = *mut Point;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/rect?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Rect {
    pub top: c_short,
    pub left: c_short,
    pub bottom: c_short,
    pub right: c_short,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/rectptr?language=objc)
pub type RectPtr = *mut Rect;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/fixedpoint?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct FixedPoint {
    pub x: Fixed,
    pub y: Fixed,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/fixedrect?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct FixedRect {
    pub left: Fixed,
    pub top: Fixed,
    pub right: Fixed,
    pub bottom: Fixed,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/charparameter?language=objc)
pub type CharParameter = c_short;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/normal?language=objc)
pub const normal: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/bold?language=objc)
pub const bold: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/italic?language=objc)
pub const italic: c_uint = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/underline?language=objc)
pub const underline: c_uint = 4;
/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/outline?language=objc)
pub const outline: c_uint = 8;
/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/shadow?language=objc)
pub const shadow: c_uint = 0x10;
/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/condense?language=objc)
pub const condense: c_uint = 0x20;
/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/extend?language=objc)
pub const extend: c_uint = 0x40;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/style?language=objc)
pub type Style = c_uchar;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/styleparameter?language=objc)
pub type StyleParameter = c_short;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/stylefield?language=objc)
pub type StyleField = Style;

/// ******************************************************************************
///
/// QuickTime TimeBase types (previously in Movies.h)
///
/// TimeValue           Count of units
/// TimeScale           Units per second
/// CompTimeValue       64-bit count of units (always a struct)
/// TimeValue64         64-bit count of units (long long or struct)
/// TimeBase            An opaque reference to a time base
/// TimeRecord          Package of TimeBase, duration, and scale
///
/// *******************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/__builtin__/timevalue?language=objc)
pub type TimeValue = i32;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/timescale?language=objc)
pub type TimeScale = i32;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/comptimevalue?language=objc)
pub type CompTimeValue = wide;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/timevalue64?language=objc)
pub type TimeValue64 = i64;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/timebaserecord?language=objc)
#[repr(C)]
#[derive(Debug)]
pub struct TimeBaseRecord {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for TimeBaseRecord {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("TimeBaseRecord", &[]));
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/timebase?language=objc)
pub type TimeBase = *mut TimeBaseRecord;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/timerecord?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct TimeRecord {
    pub value: CompTimeValue,
    pub scale: TimeScale,
    pub base: TimeBase,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/numversion?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct NumVersion {
    pub nonRelRev: u8,
    pub stage: u8,
    pub minorAndBugRev: u8,
    pub majorRev: u8,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/developstage?language=objc)
pub const developStage: c_uint = 0x20;
/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/alphastage?language=objc)
pub const alphaStage: c_uint = 0x40;
/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/betastage?language=objc)
pub const betaStage: c_uint = 0x60;
/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/finalstage?language=objc)
pub const finalStage: c_uint = 0x80;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/numversionvariant?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub union NumVersionVariant {
    pub parts: NumVersion,
    pub whole: u32,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/numversionvariantptr?language=objc)
pub type NumVersionVariantPtr = *mut NumVersionVariant;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/numversionvarianthandle?language=objc)
pub type NumVersionVariantHandle = *mut NumVersionVariantPtr;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/versrec?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct VersRec {
    pub numericVersion: NumVersion,
    pub countryCode: c_short,
    pub shortVersion: Str255,
    pub reserved: Str255,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/versrecptr?language=objc)
pub type VersRecPtr = *mut VersRec;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/versrechndl?language=objc)
pub type VersRecHndl = *mut VersRecPtr;

/// *******************************************************************************
///
/// Old names for types
///
/// *******************************************************************************
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/__builtin__/byte?language=objc)
pub type Byte = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/signedbyte?language=objc)
pub type SignedByte = i8;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/wideptr?language=objc)
pub type WidePtr = *mut wide;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/unsignedwideptr?language=objc)
pub type UnsignedWidePtr = *mut UnsignedWide;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/extended80?language=objc)
pub type extended80 = Float80;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/extended96?language=objc)
pub type extended96 = Float96;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/vhselect?language=objc)
pub type VHSelect = i8;

extern "C-unwind" {
    /// *******************************************************************************
    ///
    /// Debugger functions
    ///
    /// *******************************************************************************
    #[deprecated]
    pub fn Debugger();
}

extern "C-unwind" {
    #[deprecated]
    pub fn DebugStr(debugger_msg: ConstStr255Param);
}

extern "C-unwind" {
    #[deprecated]
    pub fn SysBreak();
}

extern "C-unwind" {
    #[deprecated]
    pub fn SysBreakStr(debugger_msg: ConstStr255Param);
}

extern "C-unwind" {
    #[deprecated]
    pub fn SysBreakFunc(debugger_msg: ConstStr255Param);
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/_osunalignedu16?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct _OSUnalignedU16 {
    pub(crate) __val: u16,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/_osunalignedu32?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct _OSUnalignedU32 {
    pub(crate) __val: u32,
}

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/_osunalignedu64?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct _OSUnalignedU64 {
    pub(crate) __val: u64,
}

// TODO: pub fn OSReadSwapInt16(base: *const c_void,offset: usize,) -> u16;

// TODO: pub fn OSReadSwapInt32(base: *const c_void,offset: usize,) -> u32;

// TODO: pub fn OSReadSwapInt64(base: *const c_void,offset: usize,) -> u64;

// TODO: pub fn OSWriteSwapInt16(base: *mut c_void,offset: usize,data: u16,);

// TODO: pub fn OSWriteSwapInt32(base: *mut c_void,offset: usize,data: u32,);

// TODO: pub fn OSWriteSwapInt64(base: *mut c_void,offset: usize,data: u64,);

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/osunknownbyteorder?language=objc)
pub const OSUnknownByteOrder: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/oslittleendian?language=objc)
pub const OSLittleEndian: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/osbigendian?language=objc)
pub const OSBigEndian: c_uint = 2;

// TODO: pub fn OSHostByteOrder() -> i32;

// TODO: pub fn _OSReadInt16(base: *const c_void,byte_offset: usize,) -> u16;

// TODO: pub fn _OSReadInt32(base: *const c_void,byte_offset: usize,) -> u32;

// TODO: pub fn _OSReadInt64(base: *const c_void,byte_offset: usize,) -> u64;

// TODO: pub fn _OSWriteInt16(base: *mut c_void,byte_offset: usize,data: u16,);

// TODO: pub fn _OSWriteInt32(base: *mut c_void,byte_offset: usize,data: u32,);

// TODO: pub fn _OSWriteInt64(base: *mut c_void,byte_offset: usize,data: u64,);

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/io_buf_ptr_t?language=objc)
pub type io_buf_ptr_t = *mut c_char;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/io_name_t?language=objc)
pub type io_name_t = ArrayUnknownABI<[c_char; 128]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/io_string_t?language=objc)
pub type io_string_t = ArrayUnknownABI<[c_char; 512]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/io_string_inband_t?language=objc)
pub type io_string_inband_t = ArrayUnknownABI<[c_char; 4096]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/io_struct_inband_t?language=objc)
pub type io_struct_inband_t = ArrayUnknownABI<[c_char; 4096]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/io_user_scalar_t?language=objc)
pub type io_user_scalar_t = u64;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/io_user_reference_t?language=objc)
pub type io_user_reference_t = u64;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/io_scalar_inband_t?language=objc)
pub type io_scalar_inband_t = ArrayUnknownABI<[io_user_scalar_t; 16]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/io_async_ref_t?language=objc)
pub type io_async_ref_t = ArrayUnknownABI<[io_user_reference_t; 8]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/io_scalar_inband64_t?language=objc)
pub type io_scalar_inband64_t = ArrayUnknownABI<[io_user_scalar_t; 16]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/io_async_ref64_t?language=objc)
pub type io_async_ref64_t = ArrayUnknownABI<[io_user_reference_t; 8]>;

/// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/io_object_t?language=objc)
pub type io_object_t = libc::mach_port_t;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/__builtin__/main_device_port?language=objc)
    pub static main_device_port: libc::mach_port_t;
}

extern "C-unwind" {
    pub fn _Block_copy(a_block: *const c_void) -> *mut c_void;
}

extern "C-unwind" {
    pub fn _Block_release(a_block: *const c_void);
}

extern "C-unwind" {
    pub fn _Block_object_assign(param1: *mut c_void, param1: *const c_void, param1: c_int);
}

extern "C-unwind" {
    pub fn _Block_object_dispose(param1: *const c_void, param1: c_int);
}

/// [Apple's documentation](https://developer.apple.com/documentation/block/_nsconcreteglobalblock?language=objc)
pub static _NSConcreteGlobalBlock: ArrayUnknownABI<[*mut c_void; 32]> = 32;

/// [Apple's documentation](https://developer.apple.com/documentation/block/_nsconcretestackblock?language=objc)
pub static _NSConcreteStackBlock: ArrayUnknownABI<[*mut c_void; 32]> = 32;

extern "C-unwind" {
    pub fn unctrl(param1: libc::chtype) -> *mut c_char;
}
