//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT

use crate::ffi::*;

extern "C-unwind" {
    /// Return the number of bytes remaining, at the time of the call, before the
    /// current process will hit its current dirty memory limit.
    ///
    ///
    /// Developers can query this value efficiently whenever it is needed. The return
    /// value is only a snapshot at the time of the call. Caching the result is not
    /// advised. The result may be instantaneously invalidated by actions taken in
    /// another thread or another framework.
    ///
    /// Memory limits can change during the app life cycle. Make sure to check accordingly.
    ///
    /// The size returned is not representative of the total memory of the device, it
    /// is the current dirty memory limit minus the dirty memory footprint used at the
    /// time of the query.
    ///
    /// This interface allows an app to efficiently consume all available memory resources.
    /// Significant memory use, even under the current memory limit, may still cause
    /// system-wide performance including the termination of other apps and system
    /// processes. Take care to use the minimum amount of memory needed to satisfy the
    /// userâ€™s need.
    ///
    /// If you need more information than just the available memory, you can use task_info().
    /// The information returned is equivalent to the task_vm_info.limit_bytes_remaining
    /// field. task_info() is a more expensive call, and will return information such
    /// as your phys_footprint, which is used to calculate the return of this function.
    ///
    /// Dirty memory contains data that must be kept in RAM (or the equivalent) even
    /// when unused. It is memory that has been modified.
    ///
    ///
    /// Parameter `none`:
    ///
    /// Returns: The remaining bytes. 0 is returned if the calling process is not an app, or
    /// the calling process exceeds its memory limit.
    pub fn os_proc_available_memory() -> usize;
}
