//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::ffi::*;

extern "C-unwind" {
    /// convert a UID to a corresponding UUID
    ///
    /// will convert a UID of a user to a corresponding UUID value.
    /// This call will always succeed and may return a synthesized
    /// UUID with the prefix FFFFEEEE-DDDD-CCCC-BBBB-AAAAxxxxxxxx,
    /// where 'xxxxxxxx' is a hex conversion of the UID. The returned
    /// UUID can be used for any operation including ACL and SACL
    /// memberships, even if a UUID is later assigned to the user
    /// record.
    ///
    /// Parameter `uid`: the uid_t to be converted
    ///
    /// Parameter `uu`: is the UUID found for the provided UID
    ///
    /// Returns: returns 0 on success or appropriate errno code.
    pub fn mbr_uid_to_uuid(uid: libc::uid_t, uu: uuid_t) -> c_int;
}

extern "C-unwind" {
    /// convert a GID to a corresponding UUID
    ///
    /// will convert a GID of a group to a corresponding UUID value.
    /// This call will always succeed and may return a synthesized
    /// UUID with the prefix AAAABBBB-CCCC-DDDD-EEEE-FFFFxxxxxxxx,
    /// where 'xxxxxxxx' is a hex conversion of the UID. The returned
    /// UUID can be used for any operation including ACL and SACL
    /// memberships, even if a UUID is later assigned to the group
    /// record.
    ///
    /// Parameter `gid`: the gid_t to be converted
    ///
    /// Parameter `uu`: is the UUID found for the provided GID
    ///
    /// Returns: returns 0 on success or appropriate errno code.
    pub fn mbr_gid_to_uuid(gid: libc::gid_t, uu: uuid_t) -> c_int;
}

extern "C-unwind" {
    /// convert a SID to a corresponding UUID
    ///
    /// will convert a SID to a corresponding UUID value. This call
    /// can fail for records that do not have a valid SID or RID.
    ///
    /// Parameter `sid`: the nt_sid_t to be converted
    ///
    /// Parameter `uu`: is the UUID found for the provided GID
    ///
    /// Returns: returns 0 on success or appropriate errno code.
    pub fn mbr_sid_to_uuid(sid: *const libc::nt_sid_t, uu: uuid_t) -> c_int;
}

extern "C-unwind" {
    /// resolves various identifiers to corresponding UUID
    ///
    /// will resolve various identifiers such as X.509 Distinguished
    /// Names, Kerberos ID or other forms of security identifiers to a
    /// corresponding UUID.
    ///
    /// Parameter `id_type`: is one of the defined types
    ///
    /// Parameter `identifier`: is a generic pointer as defined by the type
    ///
    /// Parameter `identifier_size`: is the size of the data pointed to in identifier
    ///
    /// Parameter `uu`: is the UUID found for the identifier
    ///
    /// Returns: returns 0 on success or appropriate errno code.
    pub fn mbr_identifier_to_uuid(
        id_type: c_int,
        identifier: *const c_void,
        identifier_size: usize,
        uu: uuid_t,
    ) -> c_int;
}

extern "C-unwind" {
    /// resolves a UUID to a corresponding ID and type
    ///
    /// will resolve a UUID to a corresponding GID or UID and return
    /// the type of ID (ID_TYPE_UID or ID_TYPE_GID).  Synthesized
    /// UUID values will be directly translated to corresponding ID.
    /// A UID will always be returned even if the UUID is not found.
    /// The returned ID is not persistent, but can be used to map back
    /// to the UUID during runtime.
    ///
    /// Parameter `uu`: is the UUID to be resolved
    ///
    /// Parameter `uid_or_gid`: is the UID or GID found for the UUID
    ///
    /// Parameter `id_type`: is the type of ID
    ///
    /// Returns: returns 0 on success or appropriate errno code.
    pub fn mbr_uuid_to_id(uu: uuid_t, uid_or_gid: *mut libc::id_t, id_type: *mut c_int) -> c_int;
}

extern "C-unwind" {
    /// resolves a UUID to a corresponding SID
    ///
    /// will resolve a UUID to a corresponding SID.
    ///
    /// Parameter `uu`: is the UUID to be resolved
    ///
    /// Parameter `sid`: is the SID found for the UUID
    ///
    /// Returns: returns 0 on success or appropriate errno code.
    pub fn mbr_uuid_to_sid(uu: uuid_t, sid: *mut libc::nt_sid_t) -> c_int;
}

extern "C-unwind" {
    /// convert a SID to a corresponding character string representation
    ///
    /// for use in situations where an external representation of a SID is required.
    ///
    /// Parameter `sid`: is the SID to be converted
    ///
    /// Parameter `string`: is a buffer that will be filled in with a nul-terminated string
    /// representation of the SID.  The buffer must be at least 194 characters in length.
    ///
    /// Returns: returns 0 on success or appropriate errno code.
    pub fn mbr_sid_to_string(sid: *const libc::nt_sid_t, string: *mut c_char) -> c_int;
}

extern "C-unwind" {
    /// convert a character string representation of a sid to an nt_sid_t value
    ///
    /// for converting an external representation of a sid.
    ///
    /// Parameter `string`: is a buffer containing a nul-terminated string representation of a SID
    ///
    /// Parameter `sid`: is the target of the conversion
    ///
    /// Returns: returns 0 on success or appropriate errno code.
    pub fn mbr_string_to_sid(string: *const c_char, sid: *mut libc::nt_sid_t) -> c_int;
}

extern "C-unwind" {
    /// checks if a user is a member of a group
    ///
    /// will check if a user is a member of a group either through
    /// direct membership or via nested group membership.
    ///
    /// Parameter `user`: is the UUID of the user in question
    ///
    /// Parameter `group`: is the UUID of the group to be checked
    ///
    /// Parameter `ismember`: is set to 1 if user is a member of the group,
    /// otherwise 0 is returned
    ///
    /// Returns: returns 0 on success or appropriate errno code.
    pub fn mbr_check_membership(user: uuid_t, group: uuid_t, ismember: *mut c_int) -> c_int;
}

extern "C-unwind" {
    /// checks if a user is part of a service group
    ///
    /// will check if a user is a member of a service access group.
    /// The servicename provided will be automatically prefixed with
    /// "com.apple.access_" (e.g., "afp" becomes "com.apple.access_afp").
    /// In addition a special service group "com.apple.access_all_services"
    /// will be checked in addition to the specific service.
    ///
    /// Parameter `user`: is the UUID of the user in question
    ///
    /// Parameter `servicename`: is the service type (e.g., "afp", "ftp", etc.)
    ///
    /// Parameter `ismember`: is set to 1 if user is a member of the group,
    /// otherwise 0 is returned
    ///
    /// Returns: returns 0 on success or appropriate errno code.
    pub fn mbr_check_service_membership(
        user: uuid_t,
        servicename: *const c_char,
        ismember: *mut c_int,
    ) -> c_int;
}
