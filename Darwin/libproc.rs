//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#[cfg(feature = "__builtin__")]
use __builtin__::*;
use core::ffi::*;

use crate::ffi::*;

extern "C-unwind" {
    /// A function which will search through the current
    /// processes looking for open file references which match
    /// a specified path or volume.
    ///
    /// Parameter `type`: types of processes to be searched (see proc_listpids)
    ///
    /// Parameter `typeinfo`: adjunct information for type
    ///
    /// Parameter `path`: file or volume path
    ///
    /// Parameter `pathflags`: flags to control which files should be considered
    /// during the process search.
    ///
    /// Parameter `buffer`: a C array of int-sized values to be filled with
    /// process identifiers that hold an open file reference
    /// matching the specified path or volume.  Pass NULL to
    /// obtain the minimum buffer size needed to hold the
    /// currently active processes.
    ///
    /// Parameter `buffersize`: the size (in bytes) of the provided buffer.
    ///
    /// Returns: the number of bytes of data returned in the provided buffer;
    /// -1 if an error was encountered;
    pub fn proc_listpidspath(
        r#type: u32,
        typeinfo: u32,
        path: *const c_char,
        pathflags: u32,
        buffer: *mut c_void,
        buffersize: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn proc_listpids(
        r#type: u32,
        typeinfo: u32,
        buffer: *mut c_void,
        buffersize: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn proc_listallpids(buffer: *mut c_void, buffersize: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn proc_listpgrppids(pgrpid: libc::pid_t, buffer: *mut c_void, buffersize: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn proc_listchildpids(ppid: libc::pid_t, buffer: *mut c_void, buffersize: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn proc_pidinfo(
        pid: c_int,
        flavor: c_int,
        arg: u64,
        buffer: *mut c_void,
        buffersize: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn proc_pidfdinfo(
        pid: c_int,
        fd: c_int,
        flavor: c_int,
        buffer: *mut c_void,
        buffersize: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn proc_pidfileportinfo(
        pid: c_int,
        fileport: u32,
        flavor: c_int,
        buffer: *mut c_void,
        buffersize: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn proc_name(pid: c_int, buffer: *mut c_void, buffersize: u32) -> c_int;
}

extern "C-unwind" {
    pub fn proc_regionfilename(
        pid: c_int,
        address: u64,
        buffer: *mut c_void,
        buffersize: u32,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn proc_kmsgbuf(buffer: *mut c_void, buffersize: u32) -> c_int;
}

extern "C-unwind" {
    pub fn proc_pidpath(pid: c_int, buffer: *mut c_void, buffersize: u32) -> c_int;
}

extern "C-unwind" {
    pub fn proc_pidpath_audittoken(
        audittoken: *mut libc::audit_token_t,
        buffer: *mut c_void,
        buffersize: u32,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn proc_libversion(major: *mut c_int, minor: *mut c_int) -> c_int;
}

extern "C-unwind" {
    pub fn proc_pid_rusage(pid: c_int, flavor: c_int, buffer: *mut rusage_info_t) -> c_int;
}

extern "C-unwind" {
    pub fn proc_setpcontrol(control: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn proc_setpcontrol(control: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn proc_track_dirty(pid: libc::pid_t, flags: u32) -> c_int;
}

extern "C-unwind" {
    pub fn proc_set_dirty(pid: libc::pid_t, dirty: bool) -> c_int;
}

extern "C-unwind" {
    pub fn proc_get_dirty(pid: libc::pid_t, flags: *mut u32) -> c_int;
}

extern "C-unwind" {
    pub fn proc_clear_dirty(pid: libc::pid_t, flags: u32) -> c_int;
}

extern "C-unwind" {
    pub fn proc_terminate(pid: libc::pid_t, sig: *mut c_int) -> c_int;
}

extern "C-unwind" {
    pub fn proc_terminate_all_rsr(sig: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn proc_signal_with_audittoken(audittoken: *mut libc::audit_token_t, sig: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn proc_terminate_with_audittoken(
        audittoken: *mut libc::audit_token_t,
        sig: *mut c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn proc_signal_delegate(
        instigator: libc::audit_token_t,
        target: libc::audit_token_t,
        sig: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn proc_terminate_delegate(
        instigator: libc::audit_token_t,
        target: libc::audit_token_t,
        sig: *mut c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn proc_set_no_smt() -> c_int;
}

extern "C-unwind" {
    pub fn proc_setthread_no_smt() -> c_int;
}

extern "C-unwind" {
    pub fn proc_set_csm(flags: u32) -> c_int;
}

extern "C-unwind" {
    pub fn proc_setthread_csm(flags: u32) -> c_int;
}

extern "C-unwind" {
    pub fn proc_udata_info(
        pid: c_int,
        flavor: c_int,
        buffer: *mut c_void,
        buffersize: c_int,
    ) -> c_int;
}
