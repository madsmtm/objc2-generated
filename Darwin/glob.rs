//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::ffi::*;

#[repr(C)]
#[derive(Clone, Copy)]
pub union glob_t_gl_closedir {
    pub gl_errfunc: Option<unsafe extern "C-unwind" fn(*const c_char, c_int) -> c_int>,
    pub gl_errblk: *mut block2::Block<dyn Fn(*const c_char, c_int) -> c_int>,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct glob_t {
    /// Count of total paths so far.
    pub gl_pathc: usize,
    /// Count of paths matching pattern.
    pub gl_matchc: c_int,
    /// Reserved at beginning of gl_pathv.
    pub gl_offs: usize,
    /// Copy of flags parameter to glob.
    pub gl_flags: c_int,
    /// List of paths matching pattern.
    pub gl_pathv: *mut *mut c_char,
    /// Alternate filesystem access methods for glob; replacement
    /// versions of closedir(3), readdir(3), opendir(3), stat(2)
    /// and lstat(2).
    pub gl_closedir: Option<unsafe extern "C-unwind" fn(*mut c_void)>,
    pub gl_readdir: Option<unsafe extern "C-unwind" fn(*mut c_void) -> *mut dirent>,
    pub gl_opendir: Option<unsafe extern "C-unwind" fn(*const c_char) -> *mut c_void>,
    pub gl_lstat: Option<unsafe extern "C-unwind" fn(*const c_char, *mut stat) -> c_int>,
    pub gl_stat: Option<unsafe extern "C-unwind" fn(*const c_char, *mut stat) -> c_int>,
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "glob")]
    pub fn glob(
        param1: *const c_char,
        param1: c_int,
        param1: Option<unsafe extern "C-unwind" fn(*const c_char, c_int) -> c_int>,
        param1: *mut glob_t,
    ) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "glob_b")]
    pub fn glob_b(
        param1: *const c_char,
        param1: c_int,
        param1: Option<&block2::Block<dyn Fn(*const c_char, c_int) -> c_int>>,
        param1: *mut glob_t,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn globfree(param1: *mut glob_t);
}
