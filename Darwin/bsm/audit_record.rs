//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#[cfg(feature = "__builtin__")]
use __builtin__::*;
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/audit_header_version_olddarwin?language=objc)
pub const AUDIT_HEADER_VERSION_OLDDARWIN: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/darwin/audit_header_version_solaris?language=objc)
pub const AUDIT_HEADER_VERSION_SOLARIS: c_uint = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/darwin/audit_header_version_tsol25?language=objc)
pub const AUDIT_HEADER_VERSION_TSOL25: c_uint = 3;
/// [Apple's documentation](https://developer.apple.com/documentation/darwin/audit_header_version_tsol?language=objc)
pub const AUDIT_HEADER_VERSION_TSOL: c_uint = 4;
/// [Apple's documentation](https://developer.apple.com/documentation/darwin/audit_header_version_openbsm10?language=objc)
pub const AUDIT_HEADER_VERSION_OPENBSM10: c_uint = 10;
/// [Apple's documentation](https://developer.apple.com/documentation/darwin/audit_header_version_openbsm11?language=objc)
pub const AUDIT_HEADER_VERSION_OPENBSM11: c_uint = 11;
/// [Apple's documentation](https://developer.apple.com/documentation/darwin/audit_header_version_openbsm?language=objc)
pub const AUDIT_HEADER_VERSION_OPENBSM: c_uint = AUDIT_HEADER_VERSION_OPENBSM11;
extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn au_open() -> c_int;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn au_write(d: c_int, m: Option<&libc::token_t>) -> c_int;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn au_close(d: c_int, keep: c_int, event: c_short) -> c_int;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn au_close_buffer(
        d: c_int,
        event: c_short,
        buffer: *mut c_uchar,
        buflen: *mut usize,
    ) -> c_int;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn au_close_token(
        tok: Option<&libc::token_t>,
        buffer: *mut c_uchar,
        buflen: *mut usize,
    ) -> c_int;
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_file(
    file: *const c_char,
    tm: timeval,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_file(file: *const c_char, tm: timeval) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_file(file, tm) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_header32_tm(
    rec_size: c_int,
    e_type: libc::au_event_t,
    e_mod: libc::au_emod_t,
    tm: timeval,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_header32_tm(
            rec_size: c_int,
            e_type: libc::au_event_t,
            e_mod: libc::au_emod_t,
            tm: timeval,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_header32_tm(rec_size, e_type, e_mod, tm) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_header32_ex_tm(
    rec_size: c_int,
    e_type: libc::au_event_t,
    e_mod: libc::au_emod_t,
    tm: timeval,
    aia: *mut libc::auditinfo_addr,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_header32_ex_tm(
            rec_size: c_int,
            e_type: libc::au_event_t,
            e_mod: libc::au_emod_t,
            tm: timeval,
            aia: *mut libc::auditinfo_addr,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_header32_ex_tm(rec_size, e_type, e_mod, tm, aia) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_header64_tm(
    rec_size: c_int,
    e_type: libc::au_event_t,
    e_mod: libc::au_emod_t,
    tm: timeval,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_header64_tm(
            rec_size: c_int,
            e_type: libc::au_event_t,
            e_mod: libc::au_emod_t,
            tm: timeval,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_header64_tm(rec_size, e_type, e_mod, tm) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_header(
    rec_size: c_int,
    e_type: libc::au_event_t,
    e_mod: libc::au_emod_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_header(
            rec_size: c_int,
            e_type: libc::au_event_t,
            e_mod: libc::au_emod_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_header(rec_size, e_type, e_mod) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_header_ex(
    rec_size: c_int,
    e_type: libc::au_event_t,
    e_mod: libc::au_emod_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_header_ex(
            rec_size: c_int,
            e_type: libc::au_event_t,
            e_mod: libc::au_emod_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_header_ex(rec_size, e_type, e_mod) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_header32(
    rec_size: c_int,
    e_type: libc::au_event_t,
    e_mod: libc::au_emod_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_header32(
            rec_size: c_int,
            e_type: libc::au_event_t,
            e_mod: libc::au_emod_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_header32(rec_size, e_type, e_mod) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_header64(
    rec_size: c_int,
    e_type: libc::au_event_t,
    e_mod: libc::au_emod_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_header64(
            rec_size: c_int,
            e_type: libc::au_event_t,
            e_mod: libc::au_emod_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_header64(rec_size, e_type, e_mod) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_header32_ex(
    rec_size: c_int,
    e_type: libc::au_event_t,
    e_mod: libc::au_emod_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_header32_ex(
            rec_size: c_int,
            e_type: libc::au_event_t,
            e_mod: libc::au_emod_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_header32_ex(rec_size, e_type, e_mod) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_me() -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_me() -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_me() };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_arg(
    n: c_char,
    text: *const c_char,
    v: u32,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_arg(n: c_char, text: *const c_char, v: u32) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_arg(n, text, v) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_arg32(
    n: c_char,
    text: *const c_char,
    v: u32,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_arg32(n: c_char, text: *const c_char, v: u32) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_arg32(n, text, v) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_arg64(
    n: c_char,
    text: *const c_char,
    v: u64,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_arg64(n: c_char, text: *const c_char, v: u64) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_arg64(n, text, v) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_data(
    unit_print: c_char,
    unit_type: c_char,
    unit_count: c_char,
    p: *const c_char,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_data(
            unit_print: c_char,
            unit_type: c_char,
            unit_count: c_char,
            p: *const c_char,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_data(unit_print, unit_type, unit_count, p) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_exit(
    retval: c_int,
    err: c_int,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_exit(retval: c_int, err: c_int) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_exit(retval, err) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_groups(
    groups: *mut c_int,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_groups(groups: *mut c_int) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_groups(groups) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_newgroups(
    n: u16,
    groups: *mut libc::gid_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_newgroups(n: u16, groups: *mut libc::gid_t) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_newgroups(n, groups) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_in_addr(
    internet_addr: *mut libc::in_addr,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_in_addr(internet_addr: *mut libc::in_addr) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_in_addr(internet_addr) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_in_addr_ex(
    internet_addr: *mut in6_addr,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_in_addr_ex(internet_addr: *mut in6_addr) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_in_addr_ex(internet_addr) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_ip(ip: *mut libc::ip) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_ip(ip: *mut libc::ip) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_ip(ip) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_ipc(
    r#type: c_char,
    id: c_int,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_ipc(r#type: c_char, id: c_int) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_ipc(r#type, id) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_ipc_perm(
    perm: *mut libc::ipc_perm,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_ipc_perm(perm: *mut libc::ipc_perm) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_ipc_perm(perm) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_iport(iport: u16) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_iport(iport: u16) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_iport(iport) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_opaque(
    data: *const c_char,
    bytes: u16,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_opaque(data: *const c_char, bytes: u16) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_opaque(data, bytes) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_path(path: *const c_char) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_path(path: *const c_char) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_path(path) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_process(
    auid: libc::au_id_t,
    euid: libc::uid_t,
    egid: libc::gid_t,
    ruid: libc::uid_t,
    rgid: libc::gid_t,
    pid: libc::pid_t,
    sid: libc::au_asid_t,
    tid: *mut libc::au_tid_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_process(
            auid: libc::au_id_t,
            euid: libc::uid_t,
            egid: libc::gid_t,
            ruid: libc::uid_t,
            rgid: libc::gid_t,
            pid: libc::pid_t,
            sid: libc::au_asid_t,
            tid: *mut libc::au_tid_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_process(auid, euid, egid, ruid, rgid, pid, sid, tid) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_process32(
    auid: libc::au_id_t,
    euid: libc::uid_t,
    egid: libc::gid_t,
    ruid: libc::uid_t,
    rgid: libc::gid_t,
    pid: libc::pid_t,
    sid: libc::au_asid_t,
    tid: *mut libc::au_tid_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_process32(
            auid: libc::au_id_t,
            euid: libc::uid_t,
            egid: libc::gid_t,
            ruid: libc::uid_t,
            rgid: libc::gid_t,
            pid: libc::pid_t,
            sid: libc::au_asid_t,
            tid: *mut libc::au_tid_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_process32(auid, euid, egid, ruid, rgid, pid, sid, tid) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_process64(
    auid: libc::au_id_t,
    euid: libc::uid_t,
    egid: libc::gid_t,
    ruid: libc::uid_t,
    rgid: libc::gid_t,
    pid: libc::pid_t,
    sid: libc::au_asid_t,
    tid: *mut libc::au_tid_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_process64(
            auid: libc::au_id_t,
            euid: libc::uid_t,
            egid: libc::gid_t,
            ruid: libc::uid_t,
            rgid: libc::gid_t,
            pid: libc::pid_t,
            sid: libc::au_asid_t,
            tid: *mut libc::au_tid_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_process64(auid, euid, egid, ruid, rgid, pid, sid, tid) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_process_ex(
    auid: libc::au_id_t,
    euid: libc::uid_t,
    egid: libc::gid_t,
    ruid: libc::uid_t,
    rgid: libc::gid_t,
    pid: libc::pid_t,
    sid: libc::au_asid_t,
    tid: *mut libc::au_tid_addr_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_process_ex(
            auid: libc::au_id_t,
            euid: libc::uid_t,
            egid: libc::gid_t,
            ruid: libc::uid_t,
            rgid: libc::gid_t,
            pid: libc::pid_t,
            sid: libc::au_asid_t,
            tid: *mut libc::au_tid_addr_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_process_ex(auid, euid, egid, ruid, rgid, pid, sid, tid) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_process32_ex(
    auid: libc::au_id_t,
    euid: libc::uid_t,
    egid: libc::gid_t,
    ruid: libc::uid_t,
    rgid: libc::gid_t,
    pid: libc::pid_t,
    sid: libc::au_asid_t,
    tid: *mut libc::au_tid_addr_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_process32_ex(
            auid: libc::au_id_t,
            euid: libc::uid_t,
            egid: libc::gid_t,
            ruid: libc::uid_t,
            rgid: libc::gid_t,
            pid: libc::pid_t,
            sid: libc::au_asid_t,
            tid: *mut libc::au_tid_addr_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_process32_ex(auid, euid, egid, ruid, rgid, pid, sid, tid) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_process64_ex(
    auid: libc::au_id_t,
    euid: libc::uid_t,
    egid: libc::gid_t,
    ruid: libc::uid_t,
    rgid: libc::gid_t,
    pid: libc::pid_t,
    sid: libc::au_asid_t,
    tid: *mut libc::au_tid_addr_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_process64_ex(
            auid: libc::au_id_t,
            euid: libc::uid_t,
            egid: libc::gid_t,
            ruid: libc::uid_t,
            rgid: libc::gid_t,
            pid: libc::pid_t,
            sid: libc::au_asid_t,
            tid: *mut libc::au_tid_addr_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_process64_ex(auid, euid, egid, ruid, rgid, pid, sid, tid) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_return(
    status: c_char,
    ret: u32,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_return(status: c_char, ret: u32) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_return(status, ret) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_return32(
    status: c_char,
    ret: u32,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_return32(status: c_char, ret: u32) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_return32(status, ret) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_return64(
    status: c_char,
    ret: u64,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_return64(status: c_char, ret: u64) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_return64(status, ret) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_seq(audit_count: c_long) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_seq(audit_count: c_long) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_seq(audit_count) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_socket_ex(
    so_domain: c_ushort,
    so_type: c_ushort,
    sa_local: *mut libc::sockaddr,
    sa_remote: *mut libc::sockaddr,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_socket_ex(
            so_domain: c_ushort,
            so_type: c_ushort,
            sa_local: *mut libc::sockaddr,
            sa_remote: *mut libc::sockaddr,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_socket_ex(so_domain, so_type, sa_local, sa_remote) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_sock_inet(
    so: *mut libc::sockaddr_in,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_sock_inet(so: *mut libc::sockaddr_in) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_sock_inet(so) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_sock_inet32(
    so: *mut libc::sockaddr_in,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_sock_inet32(so: *mut libc::sockaddr_in) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_sock_inet32(so) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_sock_inet128(
    so: *mut sockaddr_in6,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_sock_inet128(so: *mut sockaddr_in6) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_sock_inet128(so) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_sock_unix(
    so: *mut libc::sockaddr_un,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_sock_unix(so: *mut libc::sockaddr_un) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_sock_unix(so) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_subject(
    auid: libc::au_id_t,
    euid: libc::uid_t,
    egid: libc::gid_t,
    ruid: libc::uid_t,
    rgid: libc::gid_t,
    pid: libc::pid_t,
    sid: libc::au_asid_t,
    tid: *mut libc::au_tid_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_subject(
            auid: libc::au_id_t,
            euid: libc::uid_t,
            egid: libc::gid_t,
            ruid: libc::uid_t,
            rgid: libc::gid_t,
            pid: libc::pid_t,
            sid: libc::au_asid_t,
            tid: *mut libc::au_tid_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_subject(auid, euid, egid, ruid, rgid, pid, sid, tid) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_subject32(
    auid: libc::au_id_t,
    euid: libc::uid_t,
    egid: libc::gid_t,
    ruid: libc::uid_t,
    rgid: libc::gid_t,
    pid: libc::pid_t,
    sid: libc::au_asid_t,
    tid: *mut libc::au_tid_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_subject32(
            auid: libc::au_id_t,
            euid: libc::uid_t,
            egid: libc::gid_t,
            ruid: libc::uid_t,
            rgid: libc::gid_t,
            pid: libc::pid_t,
            sid: libc::au_asid_t,
            tid: *mut libc::au_tid_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_subject32(auid, euid, egid, ruid, rgid, pid, sid, tid) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_subject64(
    auid: libc::au_id_t,
    euid: libc::uid_t,
    egid: libc::gid_t,
    ruid: libc::uid_t,
    rgid: libc::gid_t,
    pid: libc::pid_t,
    sid: libc::au_asid_t,
    tid: *mut libc::au_tid_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_subject64(
            auid: libc::au_id_t,
            euid: libc::uid_t,
            egid: libc::gid_t,
            ruid: libc::uid_t,
            rgid: libc::gid_t,
            pid: libc::pid_t,
            sid: libc::au_asid_t,
            tid: *mut libc::au_tid_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_subject64(auid, euid, egid, ruid, rgid, pid, sid, tid) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_subject_ex(
    auid: libc::au_id_t,
    euid: libc::uid_t,
    egid: libc::gid_t,
    ruid: libc::uid_t,
    rgid: libc::gid_t,
    pid: libc::pid_t,
    sid: libc::au_asid_t,
    tid: *mut libc::au_tid_addr_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_subject_ex(
            auid: libc::au_id_t,
            euid: libc::uid_t,
            egid: libc::gid_t,
            ruid: libc::uid_t,
            rgid: libc::gid_t,
            pid: libc::pid_t,
            sid: libc::au_asid_t,
            tid: *mut libc::au_tid_addr_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_subject_ex(auid, euid, egid, ruid, rgid, pid, sid, tid) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_subject32_ex(
    auid: libc::au_id_t,
    euid: libc::uid_t,
    egid: libc::gid_t,
    ruid: libc::uid_t,
    rgid: libc::gid_t,
    pid: libc::pid_t,
    sid: libc::au_asid_t,
    tid: *mut libc::au_tid_addr_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_subject32_ex(
            auid: libc::au_id_t,
            euid: libc::uid_t,
            egid: libc::gid_t,
            ruid: libc::uid_t,
            rgid: libc::gid_t,
            pid: libc::pid_t,
            sid: libc::au_asid_t,
            tid: *mut libc::au_tid_addr_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_subject32_ex(auid, euid, egid, ruid, rgid, pid, sid, tid) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_subject64_ex(
    auid: libc::au_id_t,
    euid: libc::uid_t,
    egid: libc::gid_t,
    ruid: libc::uid_t,
    rgid: libc::gid_t,
    pid: libc::pid_t,
    sid: libc::au_asid_t,
    tid: *mut libc::au_tid_addr_t,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_subject64_ex(
            auid: libc::au_id_t,
            euid: libc::uid_t,
            egid: libc::gid_t,
            ruid: libc::uid_t,
            rgid: libc::gid_t,
            pid: libc::pid_t,
            sid: libc::au_asid_t,
            tid: *mut libc::au_tid_addr_t,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_subject64_ex(auid, euid, egid, ruid, rgid, pid, sid, tid) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_exec_args(
    argv: *mut *mut c_char,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_exec_args(argv: *mut *mut c_char) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_exec_args(argv) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_exec_env(
    envp: *mut *mut c_char,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_exec_env(envp: *mut *mut c_char) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_exec_env(envp) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_certificate_hash(
    hash: *mut *mut c_char,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_certificate_hash(hash: *mut *mut c_char) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_certificate_hash(hash) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_krb5_principal(
    principal: *mut *mut c_char,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_krb5_principal(principal: *mut *mut c_char) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_krb5_principal(principal) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_text(text: *const c_char) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_text(text: *const c_char) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_text(text) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_kevent(
    kev: *mut libc::kevent,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_kevent(kev: *mut libc::kevent) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_kevent(kev) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_trailer(rec_size: c_int) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_trailer(rec_size: c_int) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_trailer(rec_size) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_zonename(
    zonename: *const c_char,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_zonename(zonename: *const c_char) -> *mut libc::token_t;
    }
    let ret = unsafe { au_to_zonename(zonename) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[deprecated = "audit is deprecated"]
#[inline]
pub unsafe extern "C-unwind" fn au_to_identity(
    signer_type: u32,
    signing_id: *const c_char,
    signing_id_trunc: c_uchar,
    team_id: *const c_char,
    team_id_trunc: c_uchar,
    cdhash: *mut u8,
    cdhash_len: u16,
) -> Option<Retained<libc::token_t>> {
    extern "C-unwind" {
        fn au_to_identity(
            signer_type: u32,
            signing_id: *const c_char,
            signing_id_trunc: c_uchar,
            team_id: *const c_char,
            team_id_trunc: c_uchar,
            cdhash: *mut u8,
            cdhash_len: u16,
        ) -> *mut libc::token_t;
    }
    let ret = unsafe {
        au_to_identity(
            signer_type,
            signing_id,
            signing_id_trunc,
            team_id,
            team_id_trunc,
            cdhash,
            cdhash_len,
        )
    };
    unsafe { Retained::retain_autoreleased(ret) }
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn au_bsm_to_domain(bsm_domain: c_ushort, local_domainp: *mut c_int) -> c_int;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn au_bsm_to_errno(bsm_error: c_uchar, errorp: *mut c_int) -> c_int;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn au_bsm_to_fcntl_cmd(bsm_fcntl_cmd: c_ushort, local_fcntl_cmdp: *mut c_int) -> c_int;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn au_bsm_to_socket_type(
        bsm_socket_type: c_ushort,
        local_socket_typep: *mut c_int,
    ) -> c_int;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn au_domain_to_bsm(local_domain: c_int) -> c_ushort;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn au_errno_to_bsm(local_errno: c_int) -> c_uchar;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn au_fcntl_cmd_to_bsm(local_fcntl_command: c_int) -> c_ushort;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn au_socket_type_to_bsm(local_socket_type: c_int) -> c_ushort;
}
