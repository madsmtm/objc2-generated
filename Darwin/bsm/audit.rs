//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_id_t?language=objc)
pub type au_id_t = libc::uid_t;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_asid_t?language=objc)
pub type au_asid_t = libc::pid_t;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_event_t?language=objc)
pub type au_event_t = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_emod_t?language=objc)
pub type au_emod_t = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_class_t?language=objc)
pub type au_class_t = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_asflgs_t?language=objc)
pub type au_asflgs_t = u64;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_ctlmode_t?language=objc)
pub type au_ctlmode_t = c_uchar;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_tid?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct au_tid {
    pub port: libc::dev_t,
    pub machine: u32,
}

unsafe impl Encode for au_tid {
    const ENCODING: Encoding =
        Encoding::Struct("au_tid", &[<libc::dev_t>::ENCODING, <u32>::ENCODING]);
}

unsafe impl RefEncode for au_tid {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_tid_t?language=objc)
pub type au_tid_t = libc::au_tid;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_tid_addr?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct au_tid_addr {
    pub at_port: libc::dev_t,
    pub at_type: u32,
    pub at_addr: [u32; 4],
}

unsafe impl Encode for au_tid_addr {
    const ENCODING: Encoding = Encoding::Struct(
        "au_tid_addr",
        &[
            <libc::dev_t>::ENCODING,
            <u32>::ENCODING,
            <[u32; 4]>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for au_tid_addr {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_tid_addr_t?language=objc)
pub type au_tid_addr_t = libc::au_tid_addr;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_mask?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct au_mask {
    pub am_success: c_uint,
    pub am_failure: c_uint,
}

unsafe impl Encode for au_mask {
    const ENCODING: Encoding =
        Encoding::Struct("au_mask", &[<c_uint>::ENCODING, <c_uint>::ENCODING]);
}

unsafe impl RefEncode for au_mask {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_mask_t?language=objc)
pub type au_mask_t = libc::au_mask;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/auditinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct auditinfo {
    pub ai_auid: libc::au_id_t,
    pub ai_mask: libc::au_mask_t,
    pub ai_termid: libc::au_tid_t,
    pub ai_asid: libc::au_asid_t,
}

unsafe impl Encode for auditinfo {
    const ENCODING: Encoding = Encoding::Struct(
        "auditinfo",
        &[
            <libc::au_id_t>::ENCODING,
            <libc::au_mask_t>::ENCODING,
            <libc::au_tid_t>::ENCODING,
            <libc::au_asid_t>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for auditinfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/auditinfo_t?language=objc)
pub type auditinfo_t = libc::auditinfo;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/auditinfo_addr?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct auditinfo_addr {
    pub ai_auid: libc::au_id_t,
    pub ai_mask: libc::au_mask_t,
    pub ai_termid: libc::au_tid_addr_t,
    pub ai_asid: libc::au_asid_t,
    pub ai_flags: libc::au_asflgs_t,
}

unsafe impl Encode for auditinfo_addr {
    const ENCODING: Encoding = Encoding::Struct(
        "auditinfo_addr",
        &[
            <libc::au_id_t>::ENCODING,
            <libc::au_mask_t>::ENCODING,
            <libc::au_tid_addr_t>::ENCODING,
            <libc::au_asid_t>::ENCODING,
            <libc::au_asflgs_t>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for auditinfo_addr {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/auditinfo_addr_t?language=objc)
pub type auditinfo_addr_t = libc::auditinfo_addr;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/auditpinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct auditpinfo {
    pub ap_pid: libc::pid_t,
    pub ap_auid: libc::au_id_t,
    pub ap_mask: libc::au_mask_t,
    pub ap_termid: libc::au_tid_t,
    pub ap_asid: libc::au_asid_t,
}

unsafe impl Encode for auditpinfo {
    const ENCODING: Encoding = Encoding::Struct(
        "auditpinfo",
        &[
            <libc::pid_t>::ENCODING,
            <libc::au_id_t>::ENCODING,
            <libc::au_mask_t>::ENCODING,
            <libc::au_tid_t>::ENCODING,
            <libc::au_asid_t>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for auditpinfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/auditpinfo_t?language=objc)
pub type auditpinfo_t = libc::auditpinfo;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/auditpinfo_addr?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct auditpinfo_addr {
    pub ap_pid: libc::pid_t,
    pub ap_auid: libc::au_id_t,
    pub ap_mask: libc::au_mask_t,
    pub ap_termid: libc::au_tid_addr_t,
    pub ap_asid: libc::au_asid_t,
    pub ap_flags: libc::au_asflgs_t,
}

unsafe impl Encode for auditpinfo_addr {
    const ENCODING: Encoding = Encoding::Struct(
        "auditpinfo_addr",
        &[
            <libc::pid_t>::ENCODING,
            <libc::au_id_t>::ENCODING,
            <libc::au_mask_t>::ENCODING,
            <libc::au_tid_addr_t>::ENCODING,
            <libc::au_asid_t>::ENCODING,
            <libc::au_asflgs_t>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for auditpinfo_addr {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/auditpinfo_addr_t?language=objc)
pub type auditpinfo_addr_t = libc::auditpinfo_addr;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_session?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct au_session {
    pub as_aia_p: *mut libc::auditinfo_addr_t,
    pub as_mask: libc::au_mask_t,
}

unsafe impl Encode for au_session {
    const ENCODING: Encoding = Encoding::Struct(
        "au_session",
        &[
            <*mut libc::auditinfo_addr_t>::ENCODING,
            <libc::au_mask_t>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for au_session {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_session_t?language=objc)
pub type au_session_t = libc::au_session;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_expire_after?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct au_expire_after {
    pub age: libc::time_t,
    pub size: usize,
    pub op_type: c_uchar,
}

unsafe impl Encode for au_expire_after {
    const ENCODING: Encoding = Encoding::Struct(
        "au_expire_after",
        &[
            <libc::time_t>::ENCODING,
            <usize>::ENCODING,
            <c_uchar>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for au_expire_after {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_expire_after_t?language=objc)
pub type au_expire_after_t = libc::au_expire_after;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/token_t?language=objc)
pub type token_t = libc::au_token;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_qctrl?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct au_qctrl {
    pub aq_hiwater: c_int,
    pub aq_lowater: c_int,
    pub aq_bufsz: c_int,
    pub aq_delay: c_int,
    pub aq_minfree: c_int,
}

unsafe impl Encode for au_qctrl {
    const ENCODING: Encoding = Encoding::Struct(
        "au_qctrl",
        &[
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for au_qctrl {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_qctrl_t?language=objc)
pub type au_qctrl_t = libc::au_qctrl;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/audit_stat?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct audit_stat {
    pub as_version: c_uint,
    pub as_numevent: c_uint,
    pub as_generated: c_int,
    pub as_nonattrib: c_int,
    pub as_kernel: c_int,
    pub as_audit: c_int,
    pub as_auditctl: c_int,
    pub as_enqueue: c_int,
    pub as_written: c_int,
    pub as_wblocked: c_int,
    pub as_rblocked: c_int,
    pub as_dropped: c_int,
    pub as_totalsize: c_int,
    pub as_memused: c_uint,
}

unsafe impl Encode for audit_stat {
    const ENCODING: Encoding = Encoding::Struct(
        "audit_stat",
        &[
            <c_uint>::ENCODING,
            <c_uint>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_int>::ENCODING,
            <c_uint>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for audit_stat {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_stat_t?language=objc)
pub type au_stat_t = libc::audit_stat;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/audit_fstat?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct audit_fstat {
    pub af_filesz: u64,
    pub af_currsz: u64,
}

unsafe impl Encode for audit_fstat {
    const ENCODING: Encoding = Encoding::Struct("audit_fstat", &[<u64>::ENCODING, <u64>::ENCODING]);
}

unsafe impl RefEncode for audit_fstat {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_fstat_t?language=objc)
pub type au_fstat_t = libc::audit_fstat;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_evclass_map?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct au_evclass_map {
    pub ec_number: libc::au_event_t,
    pub ec_class: libc::au_class_t,
}

unsafe impl Encode for au_evclass_map {
    const ENCODING: Encoding = Encoding::Struct(
        "au_evclass_map",
        &[<libc::au_event_t>::ENCODING, <libc::au_class_t>::ENCODING],
    );
}

unsafe impl RefEncode for au_evclass_map {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/au_evclass_map_t?language=objc)
pub type au_evclass_map_t = libc::au_evclass_map;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/audit_session_flags?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct audit_session_flags(pub c_uint);
impl audit_session_flags {
    pub const AU_SESSION_FLAG_IS_INITIAL: Self = Self(0x0001);
    pub const AU_SESSION_FLAG_HAS_GRAPHIC_ACCESS: Self = Self(0x0010);
    pub const AU_SESSION_FLAG_HAS_TTY: Self = Self(0x0020);
    pub const AU_SESSION_FLAG_IS_REMOTE: Self = Self(0x1000);
    pub const AU_SESSION_FLAG_HAS_CONSOLE_ACCESS: Self = Self(0x2000);
    pub const AU_SESSION_FLAG_HAS_AUTHENTICATED: Self = Self(0x4000);
}

unsafe impl Encode for audit_session_flags {
    const ENCODING: Encoding = c_uint::ENCODING;
}

unsafe impl RefEncode for audit_session_flags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn audit(param1: *const c_void, param1: c_int) -> c_int;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn auditon(param1: c_int, param1: *mut c_void, param1: c_int) -> c_int;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn auditctl(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn getauid(param1: *mut libc::au_id_t) -> c_int;
}

extern "C-unwind" {
    pub fn setauid(param1: *const libc::au_id_t) -> c_int;
}

extern "C-unwind" {
    pub fn getaudit_addr(param1: *mut libc::auditinfo_addr, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn setaudit_addr(param1: *const libc::auditinfo_addr, param1: c_int) -> c_int;
}

extern "C-unwind" {
    #[deprecated]
    pub fn getaudit(param1: *mut libc::auditinfo) -> c_int;
}

extern "C-unwind" {
    #[deprecated]
    pub fn setaudit(param1: *const libc::auditinfo) -> c_int;
}

extern "C-unwind" {
    pub fn audit_session_self() -> libc::mach_port_name_t;
}

extern "C-unwind" {
    pub fn audit_session_join(port: libc::mach_port_name_t) -> libc::au_asid_t;
}

extern "C-unwind" {
    pub fn audit_session_port(
        asid: libc::au_asid_t,
        portname: *mut libc::mach_port_name_t,
    ) -> c_int;
}
