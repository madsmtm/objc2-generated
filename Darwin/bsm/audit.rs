//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::ffi::*;

pub type au_id_t = uid_t;

pub type au_asid_t = pid_t;

pub type au_event_t = u16;

pub type au_emod_t = u16;

pub type au_class_t = u32;

pub type au_asflgs_t = u64;

pub type au_ctlmode_t = c_uchar;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct au_tid {
    pub port: dev_t,
    pub machine: u32,
}

pub type au_tid_t = au_tid;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct au_tid_addr {
    pub at_port: dev_t,
    pub at_type: u32,
    pub at_addr: [u32; 4],
}

pub type au_tid_addr_t = au_tid_addr;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct au_mask {
    pub am_success: c_uint,
    pub am_failure: c_uint,
}

pub type au_mask_t = au_mask;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct auditinfo {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_t,
    pub ai_asid: au_asid_t,
}

pub type auditinfo_t = auditinfo;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct auditinfo_addr {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_addr_t,
    pub ai_asid: au_asid_t,
    pub ai_flags: au_asflgs_t,
}

pub type auditinfo_addr_t = auditinfo_addr;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct auditpinfo {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_t,
    pub ap_asid: au_asid_t,
}

pub type auditpinfo_t = auditpinfo;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct auditpinfo_addr {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_addr_t,
    pub ap_asid: au_asid_t,
    pub ap_flags: au_asflgs_t,
}

pub type auditpinfo_addr_t = auditpinfo_addr;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct au_session {
    pub as_aia_p: *mut auditinfo_addr_t,
    pub as_mask: au_mask_t,
}

pub type au_session_t = au_session;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct au_expire_after {
    pub age: time_t,
    pub size: usize,
    pub op_type: c_uchar,
}

pub type au_expire_after_t = au_expire_after;

pub type token_t = au_token;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct au_qctrl {
    pub aq_hiwater: c_int,
    pub aq_lowater: c_int,
    pub aq_bufsz: c_int,
    pub aq_delay: c_int,
    pub aq_minfree: c_int,
}

pub type au_qctrl_t = au_qctrl;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct audit_stat {
    pub as_version: c_uint,
    pub as_numevent: c_uint,
    pub as_generated: c_int,
    pub as_nonattrib: c_int,
    pub as_kernel: c_int,
    pub as_audit: c_int,
    pub as_auditctl: c_int,
    pub as_enqueue: c_int,
    pub as_written: c_int,
    pub as_wblocked: c_int,
    pub as_rblocked: c_int,
    pub as_dropped: c_int,
    pub as_totalsize: c_int,
    pub as_memused: c_uint,
}

pub type au_stat_t = audit_stat;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct audit_fstat {
    pub af_filesz: u64,
    pub af_currsz: u64,
}

pub type au_fstat_t = audit_fstat;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct au_evclass_map {
    pub ec_number: au_event_t,
    pub ec_class: au_class_t,
}

pub type au_evclass_map_t = au_evclass_map;

#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct audit_session_flags(pub c_uint);
impl audit_session_flags {
    pub const AU_SESSION_FLAG_IS_INITIAL: Self = Self(0x0001);
    pub const AU_SESSION_FLAG_HAS_GRAPHIC_ACCESS: Self = Self(0x0010);
    pub const AU_SESSION_FLAG_HAS_TTY: Self = Self(0x0020);
    pub const AU_SESSION_FLAG_IS_REMOTE: Self = Self(0x1000);
    pub const AU_SESSION_FLAG_HAS_CONSOLE_ACCESS: Self = Self(0x2000);
    pub const AU_SESSION_FLAG_HAS_AUTHENTICATED: Self = Self(0x4000);
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn audit(param1: *const c_void, param1: c_int) -> c_int;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn auditon(param1: c_int, param1: *mut c_void, param1: c_int) -> c_int;
}

extern "C-unwind" {
    #[deprecated = "audit is deprecated"]
    pub fn auditctl(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn getauid(param1: *mut au_id_t) -> c_int;
}

extern "C-unwind" {
    pub fn setauid(param1: *const au_id_t) -> c_int;
}

extern "C-unwind" {
    pub fn getaudit_addr(param1: *mut auditinfo_addr, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn setaudit_addr(param1: *const auditinfo_addr, param1: c_int) -> c_int;
}

extern "C-unwind" {
    #[deprecated]
    pub fn getaudit(param1: *mut auditinfo) -> c_int;
}

extern "C-unwind" {
    #[deprecated]
    pub fn setaudit(param1: *const auditinfo) -> c_int;
}

extern "C-unwind" {
    pub fn audit_session_self() -> mach_port_name_t;
}

extern "C-unwind" {
    pub fn audit_session_join(port: mach_port_name_t) -> au_asid_t;
}

extern "C-unwind" {
    pub fn audit_session_port(asid: au_asid_t, portname: *mut mach_port_name_t) -> c_int;
}
