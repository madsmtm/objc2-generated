//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/_copyfile_state?language=objc)
#[repr(C)]
#[derive(Debug)]
pub struct _copyfile_state {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

unsafe impl RefEncode for _copyfile_state {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Encoding::Struct("_copyfile_state", &[]));
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/copyfile_state_t?language=objc)
pub type copyfile_state_t = *mut libc::_copyfile_state;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/copyfile_flags_t?language=objc)
pub type copyfile_flags_t = u32;

extern "C-unwind" {
    pub fn copyfile(
        from: *const c_char,
        to: *const c_char,
        state: libc::copyfile_state_t,
        flags: libc::copyfile_flags_t,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn fcopyfile(
        from_fd: c_int,
        to_fd: c_int,
        param1: libc::copyfile_state_t,
        flags: libc::copyfile_flags_t,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn copyfile_state_free(param1: libc::copyfile_state_t) -> c_int;
}

extern "C-unwind" {
    pub fn copyfile_state_alloc() -> libc::copyfile_state_t;
}

extern "C-unwind" {
    pub fn copyfile_state_get(s: libc::copyfile_state_t, flag: u32, dst: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn copyfile_state_set(s: libc::copyfile_state_t, flag: u32, src: *const c_void) -> c_int;
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/copyfile_callback_t?language=objc)
pub type copyfile_callback_t = Option<
    unsafe extern "C-unwind" fn(
        c_int,
        c_int,
        libc::copyfile_state_t,
        *const c_char,
        *const c_char,
        *mut c_void,
    ) -> c_int,
>;
