//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ether_header?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ether_header {
    pub ether_dhost: [c_uchar; 6],
    pub ether_shost: [c_uchar; 6],
    pub ether_type: c_ushort,
}

unsafe impl Encode for ether_header {
    const ENCODING: Encoding = Encoding::Struct(
        "ether_header",
        &[
            <[c_uchar; 6]>::ENCODING,
            <[c_uchar; 6]>::ENCODING,
            <c_ushort>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ether_header {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ether_header_t?language=objc)
pub type ether_header_t = libc::ether_header;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ether_addr?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ether_addr {
    pub octet: [c_uchar; 6],
}

unsafe impl Encode for ether_addr {
    const ENCODING: Encoding = Encoding::Struct("ether_addr", &[<[c_uchar; 6]>::ENCODING]);
}

unsafe impl RefEncode for ether_addr {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ether_addr_t?language=objc)
pub type ether_addr_t = libc::ether_addr;

extern "C-unwind" {
    pub fn ether_hostton(param1: *const c_char, param1: *mut libc::ether_addr) -> c_int;
}

extern "C-unwind" {
    pub fn ether_line(
        param1: *const c_char,
        param1: *mut libc::ether_addr,
        param1: *mut c_char,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn ether_ntoa(param1: *const libc::ether_addr) -> *mut c_char;
}

extern "C-unwind" {
    pub fn ether_aton(param1: *const c_char) -> *mut libc::ether_addr;
}

extern "C-unwind" {
    pub fn ether_ntohost(param1: *mut c_char, param1: *const libc::ether_addr) -> c_int;
}
