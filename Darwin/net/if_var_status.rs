//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/if_cellular_status_report_version_1?language=objc)
pub const IF_CELLULAR_STATUS_REPORT_VERSION_1: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/darwin/if_wifi_status_report_version_1?language=objc)
pub const IF_WIFI_STATUS_REPORT_VERSION_1: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/darwin/if_cellular_status_report_current_version?language=objc)
pub const IF_CELLULAR_STATUS_REPORT_CURRENT_VERSION: c_uint = IF_CELLULAR_STATUS_REPORT_VERSION_1;
/// [Apple's documentation](https://developer.apple.com/documentation/darwin/if_wifi_status_report_current_version?language=objc)
pub const IF_WIFI_STATUS_REPORT_CURRENT_VERSION: c_uint = IF_WIFI_STATUS_REPORT_VERSION_1;
/// [Apple's documentation](https://developer.apple.com/documentation/darwin/if_cellular_status_v1?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct if_cellular_status_v1 {
    pub valid_bitmask: u32,
    pub link_quality_metric: u32,
    pub ul_effective_bandwidth: u32,
    pub ul_max_bandwidth: u32,
    pub ul_min_latency: u32,
    pub ul_effective_latency: u32,
    pub ul_max_latency: u32,
    pub ul_retxt_level: u32,
    pub ul_bytes_lost: u32,
    pub ul_min_queue_size: u32,
    pub ul_avg_queue_size: u32,
    pub ul_max_queue_size: u32,
    pub dl_effective_bandwidth: u32,
    pub dl_max_bandwidth: u32,
    pub config_inactivity_time: u32,
    pub config_backoff_time: u32,
    pub mss_recommended: u16,
    pub reserved_1: u16,
    pub reserved_2: u32,
    pub reserved_3: u64,
    pub reserved_4: u64,
    pub reserved_5: u64,
    pub reserved_6: u64,
}

unsafe impl Encode for if_cellular_status_v1 {
    const ENCODING: Encoding = Encoding::Struct(
        "if_cellular_status_v1",
        &[
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u32>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for if_cellular_status_v1 {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/if_cellular_status_if_cell_u?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub union if_cellular_status_if_cell_u {
    pub if_status_v1: libc::if_cellular_status_v1,
}

unsafe impl Encode for if_cellular_status_if_cell_u {
    const ENCODING: Encoding = Encoding::Union("?", &[<libc::if_cellular_status_v1>::ENCODING]);
}

unsafe impl RefEncode for if_cellular_status_if_cell_u {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/if_cellular_status?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub struct if_cellular_status {
    pub if_cell_u: libc::if_cellular_status_if_cell_u,
}

unsafe impl Encode for if_cellular_status {
    const ENCODING: Encoding = Encoding::Struct(
        "if_cellular_status",
        &[<libc::if_cellular_status_if_cell_u>::ENCODING],
    );
}

unsafe impl RefEncode for if_cellular_status {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/if_wifi_status_v1?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct if_wifi_status_v1 {
    pub valid_bitmask: u32,
    pub link_quality_metric: u32,
    pub ul_effective_bandwidth: u32,
    pub ul_max_bandwidth: u32,
    pub ul_min_latency: u32,
    pub ul_effective_latency: u32,
    pub ul_max_latency: u32,
    pub ul_retxt_level: u32,
    pub ul_bytes_lost: u32,
    pub ul_error_rate: u32,
    pub dl_effective_bandwidth: u32,
    pub dl_max_bandwidth: u32,
    pub dl_min_latency: u32,
    pub dl_effective_latency: u32,
    pub dl_max_latency: u32,
    pub dl_error_rate: u32,
    pub config_frequency: u32,
    pub config_multicast_rate: u32,
    pub scan_count: u32,
    pub scan_duration: u32,
    pub reserved_1: u64,
    pub reserved_2: u64,
    pub reserved_3: u64,
    pub reserved_4: u64,
}

unsafe impl Encode for if_wifi_status_v1 {
    const ENCODING: Encoding = Encoding::Struct(
        "if_wifi_status_v1",
        &[
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for if_wifi_status_v1 {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/if_wifi_status_if_wifi_u?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub union if_wifi_status_if_wifi_u {
    pub if_status_v1: libc::if_wifi_status_v1,
}

unsafe impl Encode for if_wifi_status_if_wifi_u {
    const ENCODING: Encoding = Encoding::Union("?", &[<libc::if_wifi_status_v1>::ENCODING]);
}

unsafe impl RefEncode for if_wifi_status_if_wifi_u {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/if_wifi_status?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub struct if_wifi_status {
    pub if_wifi_u: libc::if_wifi_status_if_wifi_u,
}

unsafe impl Encode for if_wifi_status {
    const ENCODING: Encoding = Encoding::Struct(
        "if_wifi_status",
        &[<libc::if_wifi_status_if_wifi_u>::ENCODING],
    );
}

unsafe impl RefEncode for if_wifi_status {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/if_link_status_ifsr_u?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub union if_link_status_ifsr_u {
    pub ifsr_cell: libc::if_cellular_status,
    pub ifsr_wifi: libc::if_wifi_status,
}

unsafe impl Encode for if_link_status_ifsr_u {
    const ENCODING: Encoding = Encoding::Union(
        "?",
        &[
            <libc::if_cellular_status>::ENCODING,
            <libc::if_wifi_status>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for if_link_status_ifsr_u {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/if_link_status?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub struct if_link_status {
    pub ifsr_version: u32,
    pub ifsr_len: u32,
    pub ifsr_u: libc::if_link_status_ifsr_u,
}

unsafe impl Encode for if_link_status {
    const ENCODING: Encoding = Encoding::Struct(
        "if_link_status",
        &[
            <u32>::ENCODING,
            <u32>::ENCODING,
            <libc::if_link_status_ifsr_u>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for if_link_status {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_interface_advisory_version?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ifnet_interface_advisory_version(pub u8);
impl ifnet_interface_advisory_version {
    pub const IF_INTERFACE_ADVISORY_VERSION_1: Self = Self(1);
    pub const IF_INTERFACE_ADVISORY_VERSION_2: Self = Self(2);
    pub const IF_INTERFACE_ADVISORY_VERSION_CURRENT: Self =
        Self(ifnet_interface_advisory_version::IF_INTERFACE_ADVISORY_VERSION_2.0);
}

unsafe impl Encode for ifnet_interface_advisory_version {
    const ENCODING: Encoding = u8::ENCODING;
}

unsafe impl RefEncode for ifnet_interface_advisory_version {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_interface_advisory_direction?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ifnet_interface_advisory_direction(pub u8);
impl ifnet_interface_advisory_direction {
    pub const IF_INTERFACE_ADVISORY_DIRECTION_TX: Self = Self(1);
    pub const IF_INTERFACE_ADVISORY_DIRECTION_RX: Self = Self(2);
}

unsafe impl Encode for ifnet_interface_advisory_direction {
    const ENCODING: Encoding = u8::ENCODING;
}

unsafe impl RefEncode for ifnet_interface_advisory_direction {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_interface_advisory_interface_type?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ifnet_interface_advisory_interface_type(pub u8);
impl ifnet_interface_advisory_interface_type {
    pub const IF_INTERFACE_ADVISORY_INTERFACE_TYPE_WIFI: Self = Self(1);
    pub const IF_INTERFACE_ADVISORY_INTERFACE_TYPE_CELL: Self = Self(2);
}

unsafe impl Encode for ifnet_interface_advisory_interface_type {
    const ENCODING: Encoding = u8::ENCODING;
}

unsafe impl RefEncode for ifnet_interface_advisory_interface_type {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_interface_advisory_notification_type_cell?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ifnet_interface_advisory_notification_type_cell(pub u8);
impl ifnet_interface_advisory_notification_type_cell {
    pub const IF_INTERFACE_ADVISORY_NOTIFICATION_TYPE_CELLULAR_DEFAULT: Self = Self(0);
    pub const IF_INTERFACE_ADVISORY_NOTIFICATION_TYPE_CELLULAR_UPLINK_CRA: Self = Self(1);
    pub const IF_INTERFACE_ADVISORY_NOTIFICATION_TYPE_CELLULAR_MEASUREMENT_UPDATE: Self = Self(2);
    pub const IF_INTERFACE_ADVISORY_NOTIFICATION_TYPE_CELLULAR_BANDWIDTH_LIMITATION_EVENT: Self =
        Self(3);
    pub const IF_INTERFACE_ADVISORY_NOTIFICATION_TYPE_CELLULAR_DISCONTINUOUS_RECEPTION_EVENT: Self =
        Self(4);
    pub const IF_INTERFACE_ADVISORY_NOTIFICATION_TYPE_CELLULAR_OUTAGE_EVENT: Self = Self(5);
    pub const IF_INTERFACE_ADVISORY_NOTIFICATION_TYPE_CELLULAR_THERMAL_CRA_EVENT: Self = Self(6);
}

unsafe impl Encode for ifnet_interface_advisory_notification_type_cell {
    const ENCODING: Encoding = u8::ENCODING;
}

unsafe impl RefEncode for ifnet_interface_advisory_notification_type_cell {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_interface_advisory_notification_type_wifi?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ifnet_interface_advisory_notification_type_wifi(pub u8);
impl ifnet_interface_advisory_notification_type_wifi {
    pub const IF_INTERFACE_ADVISORY_NOTIFICATION_TYPE_WIFI_UNDEFINED: Self = Self(0);
}

unsafe impl Encode for ifnet_interface_advisory_notification_type_wifi {
    const ENCODING: Encoding = u8::ENCODING;
}

unsafe impl RefEncode for ifnet_interface_advisory_notification_type_wifi {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_interface_advisory_notification_type_t?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub union ifnet_interface_advisory_notification_type_t {
    pub cell: libc::ifnet_interface_advisory_notification_type_cell,
    pub wifi: libc::ifnet_interface_advisory_notification_type_wifi,
}

unsafe impl Encode for ifnet_interface_advisory_notification_type_t {
    const ENCODING: Encoding = Encoding::Union(
        "?",
        &[
            <libc::ifnet_interface_advisory_notification_type_cell>::ENCODING,
            <libc::ifnet_interface_advisory_notification_type_wifi>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ifnet_interface_advisory_notification_type_t {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_interface_advisory_header?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub struct ifnet_interface_advisory_header {
    pub version: libc::ifnet_interface_advisory_version,
    pub direction: libc::ifnet_interface_advisory_direction,
    pub interface_type: libc::ifnet_interface_advisory_interface_type,
    pub notification_type: libc::ifnet_interface_advisory_notification_type_t,
}

unsafe impl Encode for ifnet_interface_advisory_header {
    const ENCODING: Encoding = Encoding::Struct(
        "ifnet_interface_advisory_header",
        &[
            <libc::ifnet_interface_advisory_version>::ENCODING,
            <libc::ifnet_interface_advisory_direction>::ENCODING,
            <libc::ifnet_interface_advisory_interface_type>::ENCODING,
            <libc::ifnet_interface_advisory_notification_type_t>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ifnet_interface_advisory_header {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_interface_advisory_rate_trend?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ifnet_interface_advisory_rate_trend(pub i32);
impl ifnet_interface_advisory_rate_trend {
    pub const IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_UP: Self = Self(i32::MAX);
    pub const IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_DOWN: Self = Self(i32::MIN);
    pub const IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_NEUTRAL: Self = Self(0);
}

unsafe impl Encode for ifnet_interface_advisory_rate_trend {
    const ENCODING: Encoding = i32::ENCODING;
}

unsafe impl RefEncode for ifnet_interface_advisory_rate_trend {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_interface_advisory_capacity?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ifnet_interface_advisory_capacity {
    pub rate_trend_suggestion: libc::ifnet_interface_advisory_rate_trend,
    pub timestamp: u64,
    pub max_bandwidth: u64,
    pub total_byte_count: u64,
    pub average_throughput: u64,
    pub flushable_queue_size: u32,
    pub non_flushable_queue_size: u32,
    pub average_delay: u32,
}

unsafe impl Encode for ifnet_interface_advisory_capacity {
    const ENCODING: Encoding = Encoding::Struct(
        "ifnet_interface_advisory_capacity",
        &[
            <libc::ifnet_interface_advisory_rate_trend>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ifnet_interface_advisory_capacity {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_interface_advisory_wifi_freq_band?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ifnet_interface_advisory_wifi_freq_band(pub u8);
impl ifnet_interface_advisory_wifi_freq_band {
    pub const IF_INTERFACE_ADVISORY_FREQ_BAND_NOT_AVAIL: Self = Self(0);
    pub const IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_24GHZ: Self = Self(1);
    pub const IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_5GHZ: Self = Self(2);
    pub const IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_6GHZ: Self = Self(3);
}

unsafe impl Encode for ifnet_interface_advisory_wifi_freq_band {
    const ENCODING: Encoding = u8::ENCODING;
}

unsafe impl RefEncode for ifnet_interface_advisory_wifi_freq_band {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_interface_advisory_wifi_context?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ifnet_interface_advisory_wifi_context {
    pub frequency_band: libc::ifnet_interface_advisory_wifi_freq_band,
    pub intermittent_state: u8,
    pub estimated_intermittent_period: u16,
    pub single_outage_period: u16,
    pub bt_coex: u8,
    pub quality_score_delay: u8,
    pub quality_score_loss: u8,
    pub quality_score_channel: u8,
    pub radio_coex: u8,
    pub wlan_duty_cycle: u16,
    pub wifi_observed_tx_bitrate: [u32; 6],
}

unsafe impl Encode for ifnet_interface_advisory_wifi_context {
    const ENCODING: Encoding = Encoding::Struct(
        "ifnet_interface_advisory_wifi_context",
        &[
            <libc::ifnet_interface_advisory_wifi_freq_band>::ENCODING,
            <u8>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u16>::ENCODING,
            <[u32; 6]>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ifnet_interface_advisory_wifi_context {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_interface_advisory_cell_context?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ifnet_interface_advisory_cell_context {
    pub radio_access_technology: u8,
    pub reference_signal_level: i16,
    pub signal_level: i16,
    pub signal_quality: i8,
    pub uplink_bler: u8,
    pub downlink_bler: u8,
    pub bandwidth_limitation_indication: u8,
    pub cdrx_state: u8,
    pub cdrx_cycle: u16,
    pub estimated_outage_period: u16,
    pub outage_state: u8,
    pub(crate) __pad: u8,
}

unsafe impl Encode for ifnet_interface_advisory_cell_context {
    const ENCODING: Encoding = Encoding::Struct(
        "ifnet_interface_advisory_cell_context",
        &[
            <u8>::ENCODING,
            <i16>::ENCODING,
            <i16>::ENCODING,
            <i8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ifnet_interface_advisory_cell_context {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_interface_advisory?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ifnet_interface_advisory {}

unsafe impl Encode for ifnet_interface_advisory {
    const ENCODING: Encoding = Encoding::Struct("ifnet_interface_advisory", &[]);
}

unsafe impl RefEncode for ifnet_interface_advisory {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_traffic_descriptor_common?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ifnet_traffic_descriptor_common {
    pub itd_type: u8,
    pub(crate) _reserved: u8,
    pub itd_len: u16,
    pub itd_flags: u32,
}

unsafe impl Encode for ifnet_traffic_descriptor_common {
    const ENCODING: Encoding = Encoding::Struct(
        "ifnet_traffic_descriptor_common",
        &[
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u16>::ENCODING,
            <u32>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ifnet_traffic_descriptor_common {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_ip_addr?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ifnet_ip_addr {}

unsafe impl Encode for ifnet_ip_addr {
    const ENCODING: Encoding = Encoding::Struct("ifnet_ip_addr", &[]);
}

unsafe impl RefEncode for ifnet_ip_addr {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_traffic_descriptor_inet?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub struct ifnet_traffic_descriptor_inet {
    pub inet_common: libc::ifnet_traffic_descriptor_common,
    pub inet_mask: u8,
    pub inet_ipver: u8,
    pub inet_proto: u8,
    pub(crate) _reserved: u8,
    pub inet_laddr: libc::ifnet_ip_addr,
    pub inet_raddr: libc::ifnet_ip_addr,
    pub inet_lport: u16,
    pub inet_rport: u16,
}

unsafe impl Encode for ifnet_traffic_descriptor_inet {
    const ENCODING: Encoding = Encoding::Struct(
        "ifnet_traffic_descriptor_inet",
        &[
            <libc::ifnet_traffic_descriptor_common>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <libc::ifnet_ip_addr>::ENCODING,
            <libc::ifnet_ip_addr>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ifnet_traffic_descriptor_inet {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_traffic_rule_action?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ifnet_traffic_rule_action {
    pub ra_type: u8,
    pub(crate) _reserved: u8,
    pub ra_len: u16,
}

unsafe impl Encode for ifnet_traffic_rule_action {
    const ENCODING: Encoding = Encoding::Struct(
        "ifnet_traffic_rule_action",
        &[<u8>::ENCODING, <u8>::ENCODING, <u16>::ENCODING],
    );
}

unsafe impl RefEncode for ifnet_traffic_rule_action {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifnet_traffic_rule_action_steer?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ifnet_traffic_rule_action_steer {
    pub ras_common: libc::ifnet_traffic_rule_action,
    pub ras_qset_id: u64,
}

unsafe impl Encode for ifnet_traffic_rule_action_steer {
    const ENCODING: Encoding = Encoding::Struct(
        "ifnet_traffic_rule_action_steer",
        &[<libc::ifnet_traffic_rule_action>::ENCODING, <u64>::ENCODING],
    );
}

unsafe impl RefEncode for ifnet_traffic_rule_action_steer {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}
