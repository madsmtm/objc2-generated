//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/panel?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct panel {
    pub win: *mut libc::WINDOW,
    pub below: *mut libc::panel,
    pub above: *mut Self,
    pub user: *mut c_void,
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/panel?language=objc)
pub type PANEL = Self;

extern "C-unwind" {
    pub fn panel_window(param1: Option<&libc::PANEL>) -> *mut libc::WINDOW;
}

extern "C-unwind" {
    pub fn update_panels();
}

extern "C-unwind" {
    pub fn hide_panel(param1: Option<&libc::PANEL>) -> c_int;
}

extern "C-unwind" {
    pub fn show_panel(param1: Option<&libc::PANEL>) -> c_int;
}

extern "C-unwind" {
    pub fn del_panel(param1: Option<&libc::PANEL>) -> c_int;
}

extern "C-unwind" {
    pub fn top_panel(param1: Option<&libc::PANEL>) -> c_int;
}

extern "C-unwind" {
    pub fn bottom_panel(param1: Option<&libc::PANEL>) -> c_int;
}

#[inline]
pub unsafe extern "C-unwind" fn new_panel(
    param1: *mut libc::WINDOW,
) -> Option<Retained<libc::PANEL>> {
    extern "C-unwind" {
        fn new_panel(param1: *mut libc::WINDOW) -> *mut libc::PANEL;
    }
    let ret = unsafe { new_panel(param1) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[inline]
pub unsafe extern "C-unwind" fn panel_above(
    param1: Option<&libc::PANEL>,
) -> Option<Retained<libc::PANEL>> {
    extern "C-unwind" {
        fn panel_above(param1: Option<&libc::PANEL>) -> *mut libc::PANEL;
    }
    let ret = unsafe { panel_above(param1) };
    unsafe { Retained::retain_autoreleased(ret) }
}

#[inline]
pub unsafe extern "C-unwind" fn panel_below(
    param1: Option<&libc::PANEL>,
) -> Option<Retained<libc::PANEL>> {
    extern "C-unwind" {
        fn panel_below(param1: Option<&libc::PANEL>) -> *mut libc::PANEL;
    }
    let ret = unsafe { panel_below(param1) };
    unsafe { Retained::retain_autoreleased(ret) }
}

extern "C-unwind" {
    pub fn set_panel_userptr(param1: Option<&libc::PANEL>, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn panel_userptr(param1: Option<&libc::PANEL>) -> *mut c_void;
}

extern "C-unwind" {
    pub fn move_panel(param1: Option<&libc::PANEL>, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn replace_panel(param1: Option<&libc::PANEL>, param1: *mut libc::WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn panel_hidden(param1: Option<&libc::PANEL>) -> c_int;
}
