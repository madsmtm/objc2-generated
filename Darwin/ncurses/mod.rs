//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#[cfg(feature = "dll")]
#[path = "dll.rs"]
mod __dll;
#[cfg(feature = "eti")]
#[path = "eti.rs"]
mod __eti;
#[cfg(feature = "form")]
#[path = "form.rs"]
mod __form;
#[cfg(feature = "menu")]
#[path = "menu.rs"]
mod __menu;
#[cfg(feature = "nc_tparm")]
#[path = "nc_tparm.rs"]
mod __nc_tparm;
#[cfg(feature = "panel")]
#[path = "panel.rs"]
mod __panel;

pub use self::__form::current_field;
pub use self::__form::data_ahead;
pub use self::__form::data_behind;
pub use self::__form::dup_field;
pub use self::__form::dynamic_field_info;
pub use self::__form::field_arg;
pub use self::__form::field_back;
pub use self::__form::field_buffer;
pub use self::__form::field_count;
pub use self::__form::field_fore;
pub use self::__form::field_index;
pub use self::__form::field_info;
pub use self::__form::field_init;
pub use self::__form::field_just;
pub use self::__form::field_opts;
pub use self::__form::field_opts_off;
pub use self::__form::field_opts_on;
pub use self::__form::field_pad;
pub use self::__form::field_status;
pub use self::__form::field_term;
pub use self::__form::field_type;
pub use self::__form::field_userptr;
pub use self::__form::fieldnode;
pub use self::__form::form_driver;
pub use self::__form::form_fields;
pub use self::__form::form_init;
pub use self::__form::form_opts;
pub use self::__form::form_opts_off;
pub use self::__form::form_opts_on;
pub use self::__form::form_page;
pub use self::__form::form_request_by_name;
pub use self::__form::form_request_name;
pub use self::__form::form_sub;
pub use self::__form::form_term;
pub use self::__form::form_userptr;
pub use self::__form::form_win;
pub use self::__form::formnode;
pub use self::__form::free_field;
pub use self::__form::free_fieldtype;
pub use self::__form::free_form;
pub use self::__form::link_field;
pub use self::__form::link_fieldtype;
pub use self::__form::move_field;
pub use self::__form::new_field;
pub use self::__form::new_fieldtype;
pub use self::__form::new_form;
pub use self::__form::new_page;
pub use self::__form::pos_form_cursor;
pub use self::__form::post_form;
pub use self::__form::scale_form;
pub use self::__form::set_current_field;
pub use self::__form::set_field_back;
pub use self::__form::set_field_buffer;
pub use self::__form::set_field_fore;
pub use self::__form::set_field_init;
pub use self::__form::set_field_just;
pub use self::__form::set_field_opts;
pub use self::__form::set_field_pad;
pub use self::__form::set_field_status;
pub use self::__form::set_field_term;
pub use self::__form::set_field_userptr;
pub use self::__form::set_fieldtype_arg;
pub use self::__form::set_fieldtype_choice;
pub use self::__form::set_form_fields;
pub use self::__form::set_form_init;
pub use self::__form::set_form_opts;
pub use self::__form::set_form_page;
pub use self::__form::set_form_sub;
pub use self::__form::set_form_term;
pub use self::__form::set_form_userptr;
pub use self::__form::set_form_win;
pub use self::__form::set_max_field;
pub use self::__form::set_new_page;
pub use self::__form::typenode;
pub use self::__form::unpost_form;
pub use self::__form::Field_Options;
pub use self::__form::Form_Hook;
pub use self::__form::Form_Options;
pub use self::__form::FIELD;
pub use self::__form::FIELDTYPE;
pub use self::__form::FIELD_CELL;
pub use self::__form::FORM;
pub use self::__form::TYPE_ALNUM;
pub use self::__form::TYPE_ALPHA;
pub use self::__form::TYPE_ENUM;
pub use self::__form::TYPE_INTEGER;
pub use self::__form::TYPE_IPV4;
pub use self::__form::TYPE_NUMERIC;
pub use self::__form::TYPE_REGEXP;
pub(crate) use self::__form::_PAGE;
pub use self::__menu::current_item;
pub use self::__menu::free_item;
pub use self::__menu::free_menu;
pub use self::__menu::item_count;
pub use self::__menu::item_description;
pub use self::__menu::item_index;
pub use self::__menu::item_init;
pub use self::__menu::item_name;
pub use self::__menu::item_opts;
pub use self::__menu::item_opts_off;
pub use self::__menu::item_opts_on;
pub use self::__menu::item_term;
pub use self::__menu::item_userptr;
pub use self::__menu::item_value;
pub use self::__menu::item_visible;
pub use self::__menu::menu_back;
pub use self::__menu::menu_driver;
pub use self::__menu::menu_fore;
pub use self::__menu::menu_format;
pub use self::__menu::menu_grey;
pub use self::__menu::menu_init;
pub use self::__menu::menu_items;
pub use self::__menu::menu_mark;
pub use self::__menu::menu_opts;
pub use self::__menu::menu_opts_off;
pub use self::__menu::menu_opts_on;
pub use self::__menu::menu_pad;
pub use self::__menu::menu_pattern;
pub use self::__menu::menu_request_by_name;
pub use self::__menu::menu_request_name;
pub use self::__menu::menu_spacing;
pub use self::__menu::menu_sub;
pub use self::__menu::menu_term;
pub use self::__menu::menu_userptr;
pub use self::__menu::menu_win;
pub use self::__menu::new_item;
pub use self::__menu::new_menu;
pub use self::__menu::pos_menu_cursor;
pub use self::__menu::post_menu;
pub use self::__menu::scale_menu;
pub use self::__menu::set_current_item;
pub use self::__menu::set_item_init;
pub use self::__menu::set_item_opts;
pub use self::__menu::set_item_term;
pub use self::__menu::set_item_userptr;
pub use self::__menu::set_item_value;
pub use self::__menu::set_menu_back;
pub use self::__menu::set_menu_fore;
pub use self::__menu::set_menu_format;
pub use self::__menu::set_menu_grey;
pub use self::__menu::set_menu_init;
pub use self::__menu::set_menu_items;
pub use self::__menu::set_menu_mark;
pub use self::__menu::set_menu_opts;
pub use self::__menu::set_menu_pad;
pub use self::__menu::set_menu_pattern;
pub use self::__menu::set_menu_spacing;
pub use self::__menu::set_menu_sub;
pub use self::__menu::set_menu_term;
pub use self::__menu::set_menu_userptr;
pub use self::__menu::set_menu_win;
pub use self::__menu::set_top_row;
pub use self::__menu::tagITEM;
pub use self::__menu::tagMENU;
pub use self::__menu::top_row;
pub use self::__menu::unpost_menu;
pub use self::__menu::Item_Options;
pub use self::__menu::Menu_Hook;
pub use self::__menu::Menu_Options;
pub use self::__menu::ITEM;
pub use self::__menu::MENU;
pub use self::__menu::TEXT;
pub use self::__panel::bottom_panel;
pub use self::__panel::del_panel;
pub use self::__panel::hide_panel;
pub use self::__panel::move_panel;
pub use self::__panel::new_panel;
pub use self::__panel::panel;
pub use self::__panel::panel_above;
pub use self::__panel::panel_below;
pub use self::__panel::panel_hidden;
pub use self::__panel::panel_userptr;
pub use self::__panel::panel_window;
pub use self::__panel::replace_panel;
pub use self::__panel::set_panel_userptr;
pub use self::__panel::show_panel;
pub use self::__panel::top_panel;
pub use self::__panel::update_panels;
pub use self::__panel::PANEL;
use core::ffi::*;
use core::ptr::NonNull;

use crate::ffi::*;

pub const NCURSES_VERSION_MAJOR: c_uint = 6;
pub const NCURSES_VERSION_MINOR: c_uint = 0;
pub const NCURSES_VERSION_PATCH: c_uint = 20150808;
pub const NCURSES_VERSION: &CStr = unsafe { CStr::from_bytes_with_nul_unchecked(b"6.0\0") };
pub const NCURSES_MOUSE_VERSION: c_uint = 1;
pub type chtype = c_uint;

pub type mmask_t = c_ulong;

pub type NCURSES_BOOL = c_uchar;

extern "C" {
    pub static acs_map: *mut chtype;
}

pub type SCREEN = screen;

pub type WINDOW = _win_st;

pub type attr_t = chtype;

pub type NCURSES_OUTC = Option<unsafe extern "C-unwind" fn(c_int) -> c_int>;

extern "C-unwind" {
    pub fn addch(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn addchnstr(param1: *const chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn addchstr(param1: *const chtype) -> c_int;
}

extern "C-unwind" {
    pub fn addnstr(param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn addstr(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn attroff(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn attron(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn attrset(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn attr_get(param1: *mut attr_t, param1: *mut c_short, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn attr_off(param1: attr_t, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn attr_on(param1: attr_t, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn attr_set(param1: attr_t, param1: c_short, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn baudrate() -> c_int;
}

extern "C-unwind" {
    pub fn beep() -> c_int;
}

extern "C-unwind" {
    pub fn bkgd(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn bkgdset(param1: chtype);
}

extern "C-unwind" {
    pub fn border(
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn can_change_color() -> bool;
}

extern "C-unwind" {
    pub fn cbreak() -> c_int;
}

extern "C-unwind" {
    pub fn chgat(param1: c_int, param1: attr_t, param1: c_short, param1: *const c_void) -> c_int;
}

extern "C-unwind" {
    pub fn clear() -> c_int;
}

extern "C-unwind" {
    pub fn clearok(param1: *mut WINDOW, param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn clrtobot() -> c_int;
}

extern "C-unwind" {
    pub fn clrtoeol() -> c_int;
}

extern "C-unwind" {
    pub fn color_content(
        param1: c_short,
        param1: *mut c_short,
        param1: *mut c_short,
        param1: *mut c_short,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn color_set(param1: c_short, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn COLOR_PAIR(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn copywin(
        param1: *const WINDOW,
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn curs_set(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn def_prog_mode() -> c_int;
}

extern "C-unwind" {
    pub fn def_shell_mode() -> c_int;
}

extern "C-unwind" {
    pub fn delay_output(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn delch() -> c_int;
}

extern "C-unwind" {
    pub fn delscreen(param1: *mut SCREEN);
}

extern "C-unwind" {
    pub fn delwin(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn deleteln() -> c_int;
}

extern "C-unwind" {
    pub fn derwin(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
    ) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn doupdate() -> c_int;
}

extern "C-unwind" {
    pub fn dupwin(param1: *mut WINDOW) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn echo() -> c_int;
}

extern "C-unwind" {
    pub fn echochar(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn erase() -> c_int;
}

extern "C-unwind" {
    pub fn endwin() -> c_int;
}

extern "C-unwind" {
    pub fn erasechar() -> c_char;
}

extern "C-unwind" {
    pub fn filter();
}

extern "C-unwind" {
    pub fn flash() -> c_int;
}

extern "C-unwind" {
    pub fn flushinp() -> c_int;
}

extern "C-unwind" {
    pub fn getbkgd(param1: *mut WINDOW) -> chtype;
}

extern "C-unwind" {
    pub fn getch() -> c_int;
}

extern "C-unwind" {
    pub fn getnstr(param1: *mut c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn getstr(param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn getwin(param1: *mut FILE) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn halfdelay(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn has_colors() -> bool;
}

extern "C-unwind" {
    pub fn has_ic() -> bool;
}

extern "C-unwind" {
    pub fn has_il() -> bool;
}

extern "C-unwind" {
    pub fn hline(param1: chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn idcok(param1: *mut WINDOW, param1: bool);
}

extern "C-unwind" {
    pub fn idlok(param1: *mut WINDOW, param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn immedok(param1: *mut WINDOW, param1: bool);
}

extern "C-unwind" {
    pub fn inch() -> chtype;
}

extern "C-unwind" {
    pub fn inchnstr(param1: *mut chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn inchstr(param1: *mut chtype) -> c_int;
}

extern "C-unwind" {
    pub fn initscr() -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn init_color(param1: c_short, param1: c_short, param1: c_short, param1: c_short) -> c_int;
}

extern "C-unwind" {
    pub fn init_pair(param1: c_short, param1: c_short, param1: c_short) -> c_int;
}

extern "C-unwind" {
    pub fn innstr(param1: *mut c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn insch(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn insdelln(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn insertln() -> c_int;
}

extern "C-unwind" {
    pub fn insnstr(param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn insstr(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn instr(param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn intrflush(param1: *mut WINDOW, param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn isendwin() -> bool;
}

extern "C-unwind" {
    pub fn is_linetouched(param1: *mut WINDOW, param1: c_int) -> bool;
}

extern "C-unwind" {
    pub fn is_wintouched(param1: *mut WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn keyname(param1: c_int) -> *mut c_char;
}

extern "C-unwind" {
    pub fn keypad(param1: *mut WINDOW, param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn killchar() -> c_char;
}

extern "C-unwind" {
    pub fn leaveok(param1: *mut WINDOW, param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn longname() -> *mut c_char;
}

extern "C-unwind" {
    pub fn meta(param1: *mut WINDOW, param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn mvaddch(param1: c_int, param1: c_int, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn mvaddchnstr(param1: c_int, param1: c_int, param1: *const chtype, param1: c_int)
        -> c_int;
}

extern "C-unwind" {
    pub fn mvaddchstr(param1: c_int, param1: c_int, param1: *const chtype) -> c_int;
}

extern "C-unwind" {
    pub fn mvaddnstr(param1: c_int, param1: c_int, param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvaddstr(param1: c_int, param1: c_int, param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn mvchgat(
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: attr_t,
        param1: c_short,
        param1: *const c_void,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvcur(param1: c_int, param1: c_int, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvdelch(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvderwin(param1: *mut WINDOW, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvgetch(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvgetnstr(param1: c_int, param1: c_int, param1: *mut c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvgetstr(param1: c_int, param1: c_int, param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn mvhline(param1: c_int, param1: c_int, param1: chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvinch(param1: c_int, param1: c_int) -> chtype;
}

extern "C-unwind" {
    pub fn mvinchnstr(param1: c_int, param1: c_int, param1: *mut chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvinchstr(param1: c_int, param1: c_int, param1: *mut chtype) -> c_int;
}

extern "C-unwind" {
    pub fn mvinnstr(param1: c_int, param1: c_int, param1: *mut c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvinsch(param1: c_int, param1: c_int, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn mvinsnstr(param1: c_int, param1: c_int, param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvinsstr(param1: c_int, param1: c_int, param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn mvinstr(param1: c_int, param1: c_int, param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn mvvline(param1: c_int, param1: c_int, param1: chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvwaddch(param1: *mut WINDOW, param1: c_int, param1: c_int, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn mvwaddchnstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *const chtype,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwaddchstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *const chtype,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwaddnstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *const c_char,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwaddstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *const c_char,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwchgat(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: attr_t,
        param1: c_short,
        param1: *const c_void,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwdelch(param1: *mut WINDOW, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvwgetch(param1: *mut WINDOW, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvwgetnstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *mut c_char,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwgetstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *mut c_char,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwhline(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: chtype,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwin(param1: *mut WINDOW, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvwinch(param1: *mut WINDOW, param1: c_int, param1: c_int) -> chtype;
}

extern "C-unwind" {
    pub fn mvwinchnstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *mut chtype,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwinchstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *mut chtype,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwinnstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *mut c_char,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwinsch(param1: *mut WINDOW, param1: c_int, param1: c_int, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn mvwinsnstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *const c_char,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwinsstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *const c_char,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwinstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *mut c_char,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwvline(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: chtype,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn napms(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn newpad(param1: c_int, param1: c_int) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn newterm(param1: *mut c_char, param1: *mut FILE, param1: *mut FILE) -> *mut SCREEN;
}

extern "C-unwind" {
    pub fn newwin(param1: c_int, param1: c_int, param1: c_int, param1: c_int) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn nl() -> c_int;
}

extern "C-unwind" {
    pub fn nocbreak() -> c_int;
}

extern "C-unwind" {
    pub fn nodelay(param1: *mut WINDOW, param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn noecho() -> c_int;
}

extern "C-unwind" {
    pub fn nonl() -> c_int;
}

extern "C-unwind" {
    pub fn noqiflush();
}

extern "C-unwind" {
    pub fn noraw() -> c_int;
}

extern "C-unwind" {
    pub fn notimeout(param1: *mut WINDOW, param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn overlay(param1: *const WINDOW, param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn overwrite(param1: *const WINDOW, param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn pair_content(param1: c_short, param1: *mut c_short, param1: *mut c_short) -> c_int;
}

extern "C-unwind" {
    pub fn PAIR_NUMBER(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn pechochar(param1: *mut WINDOW, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn pnoutrefresh(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn prefresh(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn putwin(param1: *mut WINDOW, param1: *mut FILE) -> c_int;
}

extern "C-unwind" {
    pub fn qiflush();
}

extern "C-unwind" {
    pub fn raw() -> c_int;
}

extern "C-unwind" {
    pub fn redrawwin(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn refresh() -> c_int;
}

extern "C-unwind" {
    pub fn resetty() -> c_int;
}

extern "C-unwind" {
    pub fn reset_prog_mode() -> c_int;
}

extern "C-unwind" {
    pub fn reset_shell_mode() -> c_int;
}

extern "C-unwind" {
    pub fn ripoffline(
        param1: c_int,
        param1: Option<unsafe extern "C-unwind" fn(*mut WINDOW, c_int) -> c_int>,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn savetty() -> c_int;
}

extern "C-unwind" {
    pub fn scr_dump(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn scr_init(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn scrl(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn scroll(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn scrollok(param1: *mut WINDOW, param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn scr_restore(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn scr_set(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn setscrreg(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn set_term(param1: *mut SCREEN) -> *mut SCREEN;
}

extern "C-unwind" {
    pub fn slk_attroff(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn slk_attr_off(param1: attr_t, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn slk_attron(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn slk_attr_on(param1: attr_t, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn slk_attrset(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn slk_attr() -> attr_t;
}

extern "C-unwind" {
    pub fn slk_attr_set(param1: attr_t, param1: c_short, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn slk_clear() -> c_int;
}

extern "C-unwind" {
    pub fn slk_color(param1: c_short) -> c_int;
}

extern "C-unwind" {
    pub fn slk_init(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn slk_label(param1: c_int) -> *mut c_char;
}

extern "C-unwind" {
    pub fn slk_noutrefresh() -> c_int;
}

extern "C-unwind" {
    pub fn slk_refresh() -> c_int;
}

extern "C-unwind" {
    pub fn slk_restore() -> c_int;
}

extern "C-unwind" {
    pub fn slk_set(param1: c_int, param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn slk_touch() -> c_int;
}

extern "C-unwind" {
    pub fn standout() -> c_int;
}

extern "C-unwind" {
    pub fn standend() -> c_int;
}

extern "C-unwind" {
    pub fn start_color() -> c_int;
}

extern "C-unwind" {
    pub fn subpad(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
    ) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn subwin(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
    ) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn syncok(param1: *mut WINDOW, param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn termattrs() -> chtype;
}

extern "C-unwind" {
    pub fn termname() -> *mut c_char;
}

extern "C-unwind" {
    pub fn timeout(param1: c_int);
}

extern "C-unwind" {
    pub fn touchline(param1: *mut WINDOW, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn touchwin(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn typeahead(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn ungetch(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn untouchwin(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn use_env(param1: bool);
}

extern "C-unwind" {
    pub fn use_tioctl(param1: bool);
}

extern "C-unwind" {
    pub fn vidattr(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn vidputs(param1: chtype, param1: NCURSES_OUTC) -> c_int;
}

extern "C-unwind" {
    pub fn vline(param1: chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn vwprintw(param1: *mut WINDOW, param1: *const c_char, param1: va_list) -> c_int;
}

extern "C-unwind" {
    pub fn vw_printw(param1: *mut WINDOW, param1: *const c_char, param1: va_list) -> c_int;
}

extern "C-unwind" {
    pub fn vwscanw(param1: *mut WINDOW, param1: *mut c_char, param1: va_list) -> c_int;
}

extern "C-unwind" {
    pub fn vw_scanw(param1: *mut WINDOW, param1: *mut c_char, param1: va_list) -> c_int;
}

extern "C-unwind" {
    pub fn waddch(param1: *mut WINDOW, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn waddchnstr(param1: *mut WINDOW, param1: *const chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn waddchstr(param1: *mut WINDOW, param1: *const chtype) -> c_int;
}

extern "C-unwind" {
    pub fn waddnstr(param1: *mut WINDOW, param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn waddstr(param1: *mut WINDOW, param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn wattron(param1: *mut WINDOW, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wattroff(param1: *mut WINDOW, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wattrset(param1: *mut WINDOW, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wattr_get(
        param1: *mut WINDOW,
        param1: *mut attr_t,
        param1: *mut c_short,
        param1: *mut c_void,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn wattr_on(param1: *mut WINDOW, param1: attr_t, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn wattr_off(param1: *mut WINDOW, param1: attr_t, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn wattr_set(
        param1: *mut WINDOW,
        param1: attr_t,
        param1: c_short,
        param1: *mut c_void,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn wbkgd(param1: *mut WINDOW, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn wbkgdset(param1: *mut WINDOW, param1: chtype);
}

extern "C-unwind" {
    pub fn wborder(
        param1: *mut WINDOW,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn wchgat(
        param1: *mut WINDOW,
        param1: c_int,
        param1: attr_t,
        param1: c_short,
        param1: *const c_void,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn wclear(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wclrtobot(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wclrtoeol(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wcolor_set(param1: *mut WINDOW, param1: c_short, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn wcursyncup(param1: *mut WINDOW);
}

extern "C-unwind" {
    pub fn wdelch(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wdeleteln(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wechochar(param1: *mut WINDOW, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn werase(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wgetch(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wgetnstr(param1: *mut WINDOW, param1: *mut c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wgetstr(param1: *mut WINDOW, param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn whline(param1: *mut WINDOW, param1: chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn winch(param1: *mut WINDOW) -> chtype;
}

extern "C-unwind" {
    pub fn winchnstr(param1: *mut WINDOW, param1: *mut chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn winchstr(param1: *mut WINDOW, param1: *mut chtype) -> c_int;
}

extern "C-unwind" {
    pub fn winnstr(param1: *mut WINDOW, param1: *mut c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn winsch(param1: *mut WINDOW, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn winsdelln(param1: *mut WINDOW, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn winsertln(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn winsnstr(param1: *mut WINDOW, param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn winsstr(param1: *mut WINDOW, param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn winstr(param1: *mut WINDOW, param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn wmove(param1: *mut WINDOW, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wnoutrefresh(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wredrawln(param1: *mut WINDOW, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wrefresh(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wscrl(param1: *mut WINDOW, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wsetscrreg(param1: *mut WINDOW, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wstandout(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wstandend(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wsyncdown(param1: *mut WINDOW);
}

extern "C-unwind" {
    pub fn wsyncup(param1: *mut WINDOW);
}

extern "C-unwind" {
    pub fn wtimeout(param1: *mut WINDOW, param1: c_int);
}

extern "C-unwind" {
    pub fn wtouchln(param1: *mut WINDOW, param1: c_int, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wvline(param1: *mut WINDOW, param1: chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn tigetflag(param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn tigetnum(param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn tigetstr(param1: *mut c_char) -> *mut c_char;
}

extern "C-unwind" {
    pub fn putp(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn getattrs(param1: *const WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn getcurx(param1: *const WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn getcury(param1: *const WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn getbegx(param1: *const WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn getbegy(param1: *const WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn getmaxx(param1: *const WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn getmaxy(param1: *const WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn getparx(param1: *const WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn getpary(param1: *const WINDOW) -> c_int;
}

pub type NCURSES_WINDOW_CB = Option<unsafe extern "C-unwind" fn(*mut WINDOW, *mut c_void) -> c_int>;

pub type NCURSES_SCREEN_CB = Option<unsafe extern "C-unwind" fn(*mut SCREEN, *mut c_void) -> c_int>;

extern "C-unwind" {
    pub fn is_term_resized(param1: c_int, param1: c_int) -> bool;
}

extern "C-unwind" {
    pub fn keybound(param1: c_int, param1: c_int) -> *mut c_char;
}

extern "C-unwind" {
    pub fn curses_version() -> *const c_char;
}

extern "C-unwind" {
    pub fn assume_default_colors(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn define_key(param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn get_escdelay() -> c_int;
}

extern "C-unwind" {
    pub fn key_defined(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn keyok(param1: c_int, param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn resize_term(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn resizeterm(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn set_escdelay(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn set_tabsize(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn use_default_colors() -> c_int;
}

extern "C-unwind" {
    pub fn use_extended_names(param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn use_legacy_coding(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn use_screen(param1: *mut SCREEN, param1: NCURSES_SCREEN_CB, param1: *mut c_void)
        -> c_int;
}

extern "C-unwind" {
    pub fn use_window(param1: *mut WINDOW, param1: NCURSES_WINDOW_CB, param1: *mut c_void)
        -> c_int;
}

extern "C-unwind" {
    pub fn wresize(param1: *mut WINDOW, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn nofilter();
}

extern "C-unwind" {
    pub fn wgetparent(param1: *const WINDOW) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn is_cleared(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_idcok(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_idlok(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_immedok(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_keypad(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_leaveok(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_nodelay(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_notimeout(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_pad(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_scrollok(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_subwin(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_syncok(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn wgetdelay(param1: *const WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wgetscrreg(param1: *const WINDOW, param1: *mut c_int, param1: *mut c_int) -> c_int;
}

extern "C-unwind" {
    pub fn addch(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn addchnstr(param1: *const chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn addchstr(param1: *const chtype) -> c_int;
}

extern "C-unwind" {
    pub fn addnstr(param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn addstr(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn attroff(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn attron(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn attrset(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn attr_get(param1: *mut attr_t, param1: *mut c_short, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn attr_off(param1: attr_t, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn attr_on(param1: attr_t, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn attr_set(param1: attr_t, param1: c_short, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn bkgd(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn bkgdset(param1: chtype);
}

extern "C-unwind" {
    pub fn border(
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn chgat(param1: c_int, param1: attr_t, param1: c_short, param1: *const c_void) -> c_int;
}

extern "C-unwind" {
    pub fn color_content(
        param1: c_short,
        param1: *mut c_short,
        param1: *mut c_short,
        param1: *mut c_short,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn color_set(param1: c_short, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn copywin(
        param1: *const WINDOW,
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn delay_output(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn deleteln() -> c_int;
}

extern "C-unwind" {
    pub fn derwin(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
    ) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn doupdate() -> c_int;
}

extern "C-unwind" {
    pub fn dupwin(param1: *mut WINDOW) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn echochar(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn endwin() -> c_int;
}

extern "C-unwind" {
    pub fn flushinp() -> c_int;
}

extern "C-unwind" {
    pub fn getbkgd(param1: *mut WINDOW) -> chtype;
}

extern "C-unwind" {
    pub fn getch() -> c_int;
}

extern "C-unwind" {
    pub fn getnstr(param1: *mut c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn getstr(param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn getwin(param1: *mut FILE) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn hline(param1: chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn inch() -> chtype;
}

extern "C-unwind" {
    pub fn inchnstr(param1: *mut chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn inchstr(param1: *mut chtype) -> c_int;
}

extern "C-unwind" {
    pub fn initscr() -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn init_color(param1: c_short, param1: c_short, param1: c_short, param1: c_short) -> c_int;
}

extern "C-unwind" {
    pub fn init_pair(param1: c_short, param1: c_short, param1: c_short) -> c_int;
}

extern "C-unwind" {
    pub fn innstr(param1: *mut c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn insch(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn insdelln(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn insertln() -> c_int;
}

extern "C-unwind" {
    pub fn insnstr(param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn insstr(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn instr(param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn intrflush(param1: *mut WINDOW, param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn keypad(param1: *mut WINDOW, param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn mvaddch(param1: c_int, param1: c_int, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn mvaddchnstr(param1: c_int, param1: c_int, param1: *const chtype, param1: c_int)
        -> c_int;
}

extern "C-unwind" {
    pub fn mvaddchstr(param1: c_int, param1: c_int, param1: *const chtype) -> c_int;
}

extern "C-unwind" {
    pub fn mvaddnstr(param1: c_int, param1: c_int, param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvaddstr(param1: c_int, param1: c_int, param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn mvchgat(
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: attr_t,
        param1: c_short,
        param1: *const c_void,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvcur(param1: c_int, param1: c_int, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvderwin(param1: *mut WINDOW, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvgetch(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvgetnstr(param1: c_int, param1: c_int, param1: *mut c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvgetstr(param1: c_int, param1: c_int, param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn mvhline(param1: c_int, param1: c_int, param1: chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvinch(param1: c_int, param1: c_int) -> chtype;
}

extern "C-unwind" {
    pub fn mvinchnstr(param1: c_int, param1: c_int, param1: *mut chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvinchstr(param1: c_int, param1: c_int, param1: *mut chtype) -> c_int;
}

extern "C-unwind" {
    pub fn mvinnstr(param1: c_int, param1: c_int, param1: *mut c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvinsch(param1: c_int, param1: c_int, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn mvinsnstr(param1: c_int, param1: c_int, param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvinsstr(param1: c_int, param1: c_int, param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn mvinstr(param1: c_int, param1: c_int, param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn mvvline(param1: c_int, param1: c_int, param1: chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvwaddch(param1: *mut WINDOW, param1: c_int, param1: c_int, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn mvwaddchnstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *const chtype,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwaddchstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *const chtype,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwaddnstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *const c_char,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwaddstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *const c_char,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwchgat(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: attr_t,
        param1: c_short,
        param1: *const c_void,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwgetch(param1: *mut WINDOW, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvwgetnstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *mut c_char,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwgetstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *mut c_char,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwhline(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: chtype,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwin(param1: *mut WINDOW, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn mvwinch(param1: *mut WINDOW, param1: c_int, param1: c_int) -> chtype;
}

extern "C-unwind" {
    pub fn mvwinchnstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *mut chtype,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwinchstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *mut chtype,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwinnstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *mut c_char,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwinsch(param1: *mut WINDOW, param1: c_int, param1: c_int, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn mvwinsnstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *const c_char,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwinsstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *const c_char,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwinstr(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: *mut c_char,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn mvwvline(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: chtype,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn newpad(param1: c_int, param1: c_int) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn newterm(param1: *mut c_char, param1: *mut FILE, param1: *mut FILE) -> *mut SCREEN;
}

extern "C-unwind" {
    pub fn newwin(param1: c_int, param1: c_int, param1: c_int, param1: c_int) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn overlay(param1: *const WINDOW, param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn overwrite(param1: *const WINDOW, param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn pair_content(param1: c_short, param1: *mut c_short, param1: *mut c_short) -> c_int;
}

extern "C-unwind" {
    pub fn pechochar(param1: *mut WINDOW, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn pnoutrefresh(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn prefresh(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn putwin(param1: *mut WINDOW, param1: *mut FILE) -> c_int;
}

extern "C-unwind" {
    pub fn redrawwin(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn refresh() -> c_int;
}

extern "C-unwind" {
    pub fn scr_dump(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn scr_init(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn scrl(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn scroll(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn scrollok(param1: *mut WINDOW, param1: bool) -> c_int;
}

extern "C-unwind" {
    pub fn scr_restore(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn scr_set(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn set_term(param1: *mut SCREEN) -> *mut SCREEN;
}

extern "C-unwind" {
    pub fn slk_attroff(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn slk_attr_off(param1: attr_t, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn slk_attron(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn slk_attr_on(param1: attr_t, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn slk_attrset(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn slk_attr() -> attr_t;
}

extern "C-unwind" {
    pub fn slk_attr_set(param1: attr_t, param1: c_short, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn slk_clear() -> c_int;
}

extern "C-unwind" {
    pub fn slk_color(param1: c_short) -> c_int;
}

extern "C-unwind" {
    pub fn slk_init(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn slk_label(param1: c_int) -> *mut c_char;
}

extern "C-unwind" {
    pub fn slk_noutrefresh() -> c_int;
}

extern "C-unwind" {
    pub fn slk_refresh() -> c_int;
}

extern "C-unwind" {
    pub fn slk_restore() -> c_int;
}

extern "C-unwind" {
    pub fn slk_set(param1: c_int, param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn slk_touch() -> c_int;
}

extern "C-unwind" {
    pub fn standout() -> c_int;
}

extern "C-unwind" {
    pub fn standend() -> c_int;
}

extern "C-unwind" {
    pub fn start_color() -> c_int;
}

extern "C-unwind" {
    pub fn subpad(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
    ) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn subwin(
        param1: *mut WINDOW,
        param1: c_int,
        param1: c_int,
        param1: c_int,
        param1: c_int,
    ) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn ungetch(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn vidattr(param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn vidputs(param1: chtype, param1: NCURSES_OUTC) -> c_int;
}

extern "C-unwind" {
    pub fn vline(param1: chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn vwprintw(param1: *mut WINDOW, param1: *const c_char, param1: va_list) -> c_int;
}

extern "C-unwind" {
    pub fn vw_printw(param1: *mut WINDOW, param1: *const c_char, param1: va_list) -> c_int;
}

extern "C-unwind" {
    pub fn vwscanw(param1: *mut WINDOW, param1: *mut c_char, param1: va_list) -> c_int;
}

extern "C-unwind" {
    pub fn vw_scanw(param1: *mut WINDOW, param1: *mut c_char, param1: va_list) -> c_int;
}

extern "C-unwind" {
    pub fn waddch(param1: *mut WINDOW, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn waddchnstr(param1: *mut WINDOW, param1: *const chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn waddchstr(param1: *mut WINDOW, param1: *const chtype) -> c_int;
}

extern "C-unwind" {
    pub fn waddnstr(param1: *mut WINDOW, param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn waddstr(param1: *mut WINDOW, param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn wattron(param1: *mut WINDOW, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wattroff(param1: *mut WINDOW, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wattrset(param1: *mut WINDOW, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wattr_get(
        param1: *mut WINDOW,
        param1: *mut attr_t,
        param1: *mut c_short,
        param1: *mut c_void,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn wattr_on(param1: *mut WINDOW, param1: attr_t, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn wattr_off(param1: *mut WINDOW, param1: attr_t, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn wattr_set(
        param1: *mut WINDOW,
        param1: attr_t,
        param1: c_short,
        param1: *mut c_void,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn wbkgd(param1: *mut WINDOW, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn wbkgdset(param1: *mut WINDOW, param1: chtype);
}

extern "C-unwind" {
    pub fn wborder(
        param1: *mut WINDOW,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
        param1: chtype,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn wchgat(
        param1: *mut WINDOW,
        param1: c_int,
        param1: attr_t,
        param1: c_short,
        param1: *const c_void,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn wclear(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wcolor_set(param1: *mut WINDOW, param1: c_short, param1: *mut c_void) -> c_int;
}

extern "C-unwind" {
    pub fn wdeleteln(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wechochar(param1: *mut WINDOW, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn wgetch(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wgetnstr(param1: *mut WINDOW, param1: *mut c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wgetstr(param1: *mut WINDOW, param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn whline(param1: *mut WINDOW, param1: chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn winch(param1: *mut WINDOW) -> chtype;
}

extern "C-unwind" {
    pub fn winchnstr(param1: *mut WINDOW, param1: *mut chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn winchstr(param1: *mut WINDOW, param1: *mut chtype) -> c_int;
}

extern "C-unwind" {
    pub fn winnstr(param1: *mut WINDOW, param1: *mut c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn winsch(param1: *mut WINDOW, param1: chtype) -> c_int;
}

extern "C-unwind" {
    pub fn winsdelln(param1: *mut WINDOW, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn winsertln(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn winsnstr(param1: *mut WINDOW, param1: *const c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn winsstr(param1: *mut WINDOW, param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn winstr(param1: *mut WINDOW, param1: *mut c_char) -> c_int;
}

extern "C-unwind" {
    pub fn wnoutrefresh(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wredrawln(param1: *mut WINDOW, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wrefresh(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wscrl(param1: *mut WINDOW, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wstandout(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wstandend(param1: *mut WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wvline(param1: *mut WINDOW, param1: chtype, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn putp(param1: *const c_char) -> c_int;
}

extern "C-unwind" {
    pub fn is_term_resized(param1: c_int, param1: c_int) -> bool;
}

extern "C-unwind" {
    pub fn assume_default_colors(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn resize_term(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn resizeterm(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn use_default_colors() -> c_int;
}

extern "C-unwind" {
    pub fn use_screen(param1: *mut SCREEN, param1: NCURSES_SCREEN_CB, param1: *mut c_void)
        -> c_int;
}

extern "C-unwind" {
    pub fn use_window(param1: *mut WINDOW, param1: NCURSES_WINDOW_CB, param1: *mut c_void)
        -> c_int;
}

extern "C-unwind" {
    pub fn wresize(param1: *mut WINDOW, param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wgetparent(param1: *const WINDOW) -> *mut WINDOW;
}

extern "C-unwind" {
    pub fn is_cleared(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_idcok(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_idlok(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_immedok(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_keypad(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_leaveok(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_nodelay(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_notimeout(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_pad(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_scrollok(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_subwin(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn is_syncok(param1: *const WINDOW) -> bool;
}

extern "C-unwind" {
    pub fn wgetdelay(param1: *const WINDOW) -> c_int;
}

extern "C-unwind" {
    pub fn wgetscrreg(param1: *const WINDOW, param1: *mut c_int, param1: *mut c_int) -> c_int;
}

extern "C" {
    pub static curscr: *mut WINDOW;
}

extern "C" {
    pub static newscr: *mut WINDOW;
}

extern "C" {
    pub static stdscr: *mut WINDOW;
}

extern "C" {
    pub static ttytype: *mut c_char;
}

extern "C" {
    pub static COLORS: c_int;
}

extern "C" {
    pub static COLOR_PAIRS: c_int;
}

extern "C" {
    pub static COLS: c_int;
}

extern "C" {
    pub static ESCDELAY: c_int;
}

extern "C" {
    pub static LINES: c_int;
}

extern "C" {
    pub static TABSIZE: c_int;
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct MEVENT {
    pub id: c_short,
    pub x: c_int,
    pub y: c_int,
    pub z: c_int,
    pub bstate: mmask_t,
}

extern "C-unwind" {
    pub fn has_mouse() -> bool;
}

extern "C-unwind" {
    pub fn getmouse(param1: *mut MEVENT) -> c_int;
}

extern "C-unwind" {
    pub fn ungetmouse(param1: *mut MEVENT) -> c_int;
}

extern "C-unwind" {
    pub fn mousemask(param1: mmask_t, param1: *mut mmask_t) -> mmask_t;
}

extern "C-unwind" {
    pub fn wenclose(param1: *const WINDOW, param1: c_int, param1: c_int) -> bool;
}

extern "C-unwind" {
    pub fn mouseinterval(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn wmouse_trafo(
        param1: *const WINDOW,
        param1: *mut c_int,
        param1: *mut c_int,
        param1: bool,
    ) -> bool;
}

extern "C-unwind" {
    pub fn mouse_trafo(param1: *mut c_int, param1: *mut c_int, param1: bool) -> bool;
}

extern "C-unwind" {
    pub fn mcprint(param1: *mut c_char, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn has_key(param1: c_int) -> c_int;
}
