//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/tcflag_t?language=objc)
pub type tcflag_t = c_ulong;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/cc_t?language=objc)
pub type cc_t = c_uchar;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/speed_t?language=objc)
pub type speed_t = c_ulong;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/termios?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct termios {
    pub c_iflag: libc::tcflag_t,
    pub c_oflag: libc::tcflag_t,
    pub c_cflag: libc::tcflag_t,
    pub c_lflag: libc::tcflag_t,
    pub c_cc: [libc::cc_t; 20],
    pub c_ispeed: libc::speed_t,
    pub c_ospeed: libc::speed_t,
}

unsafe impl Encode for termios {
    const ENCODING: Encoding = Encoding::Struct(
        "termios",
        &[
            <libc::tcflag_t>::ENCODING,
            <libc::tcflag_t>::ENCODING,
            <libc::tcflag_t>::ENCODING,
            <libc::tcflag_t>::ENCODING,
            <[libc::cc_t; 20]>::ENCODING,
            <libc::speed_t>::ENCODING,
            <libc::speed_t>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for termios {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn cfgetispeed(param1: *const libc::termios) -> libc::speed_t;
}

extern "C-unwind" {
    pub fn cfgetospeed(param1: *const libc::termios) -> libc::speed_t;
}

extern "C-unwind" {
    pub fn cfsetispeed(param1: *mut libc::termios, param1: libc::speed_t) -> c_int;
}

extern "C-unwind" {
    pub fn cfsetospeed(param1: *mut libc::termios, param1: libc::speed_t) -> c_int;
}

extern "C-unwind" {
    pub fn tcgetattr(param1: c_int, param1: *mut libc::termios) -> c_int;
}

extern "C-unwind" {
    pub fn tcsetattr(param1: c_int, param1: c_int, param1: *const libc::termios) -> c_int;
}

extern "C-unwind" {
    #[cfg_attr(target_vendor = "apple", link_name = "tcdrain")]
    pub fn tcdrain(param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn tcflow(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn tcflush(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn tcsendbreak(param1: c_int, param1: c_int) -> c_int;
}

extern "C-unwind" {
    pub fn cfmakeraw(param1: *mut libc::termios);
}

extern "C-unwind" {
    pub fn cfsetspeed(param1: *mut libc::termios, param1: libc::speed_t) -> c_int;
}

extern "C-unwind" {
    pub fn tcgetsid(param1: c_int) -> libc::pid_t;
}
