//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/qelem?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct qelem {
    pub q_forw: *mut libc::qelem,
    pub q_back: *mut Self,
    pub q_data: *mut c_char,
}

unsafe impl Encode for qelem {
    const ENCODING: Encoding = Encoding::Struct(
        "qelem",
        &[
            <*mut libc::qelem>::ENCODING,
            <*mut Self>::ENCODING,
            <*mut c_char>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for qelem {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

#[inline]
pub unsafe extern "C-unwind" fn map_fd(
    fd: c_int,
    offset: libc::vm_offset_t,
    addr: *mut libc::vm_offset_t,
    find_space: bool,
    numbytes: libc::vm_size_t,
) -> libc::kern_return_t {
    extern "C-unwind" {
        fn map_fd(
            fd: c_int,
            offset: libc::vm_offset_t,
            addr: *mut libc::vm_offset_t,
            find_space: libc::boolean_t,
            numbytes: libc::vm_size_t,
        ) -> libc::kern_return_t;
    }
    unsafe { map_fd(fd, offset, addr, find_space as _, numbytes) }
}
