//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifaddrs?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ifaddrs {
    pub ifa_next: *mut libc::ifaddrs,
    pub ifa_name: *mut c_char,
    pub ifa_flags: c_uint,
    pub ifa_addr: *mut libc::sockaddr,
    pub ifa_netmask: *mut libc::sockaddr,
    pub ifa_dstaddr: *mut libc::sockaddr,
    pub ifa_data: *mut c_void,
}

unsafe impl Encode for ifaddrs {
    const ENCODING: Encoding = Encoding::Struct(
        "ifaddrs",
        &[
            <*mut libc::ifaddrs>::ENCODING,
            <*mut c_char>::ENCODING,
            <c_uint>::ENCODING,
            <*mut libc::sockaddr>::ENCODING,
            <*mut libc::sockaddr>::ENCODING,
            <*mut libc::sockaddr>::ENCODING,
            <*mut c_void>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ifaddrs {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ifmaddrs?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ifmaddrs {
    pub ifma_next: *mut libc::ifmaddrs,
    pub ifma_name: *mut libc::sockaddr,
    pub ifma_addr: *mut libc::sockaddr,
    pub ifma_lladdr: *mut libc::sockaddr,
}

unsafe impl Encode for ifmaddrs {
    const ENCODING: Encoding = Encoding::Struct(
        "ifmaddrs",
        &[
            <*mut libc::ifmaddrs>::ENCODING,
            <*mut libc::sockaddr>::ENCODING,
            <*mut libc::sockaddr>::ENCODING,
            <*mut libc::sockaddr>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ifmaddrs {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C-unwind" {
    pub fn getifaddrs(param1: *mut *mut libc::ifaddrs) -> c_int;
}

extern "C-unwind" {
    pub fn freeifaddrs(param1: *mut libc::ifaddrs);
}

extern "C-unwind" {
    pub fn getifmaddrs(param1: *mut *mut libc::ifmaddrs) -> c_int;
}

extern "C-unwind" {
    pub fn freeifmaddrs(param1: *mut libc::ifmaddrs);
}
