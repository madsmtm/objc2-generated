//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::ffi::*;

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ipv6_version?language=objc)
pub const IPV6_VERSION: c_uint = 0x60;
/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ipv6_version_mask?language=objc)
pub const IPV6_VERSION_MASK: c_uint = 0xf0;
/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ip6_hdrctl?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ip6_hdrctl {
    pub ip6_un1_flow: u32,
    pub ip6_un1_plen: u16,
    pub ip6_un1_nxt: u8,
    pub ip6_un1_hlim: u8,
}

unsafe impl Encode for ip6_hdrctl {
    const ENCODING: Encoding = Encoding::Struct(
        "ip6_hdrctl",
        &[
            <u32>::ENCODING,
            <u16>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ip6_hdrctl {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ip6_hdr_ip6_ctlun?language=objc)
#[repr(C)]
#[derive(Clone, Copy)]
pub union ip6_hdr_ip6_ctlun {
    pub ip6_un1: libc::ip6_hdrctl,
    pub ip6_un2_vfc: u8,
}

unsafe impl Encode for ip6_hdr_ip6_ctlun {
    const ENCODING: Encoding =
        Encoding::Union("?", &[<libc::ip6_hdrctl>::ENCODING, <u8>::ENCODING]);
}

unsafe impl RefEncode for ip6_hdr_ip6_ctlun {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ip6_hdr?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy)]
pub struct ip6_hdr {
    pub ip6_ctlun: libc::ip6_hdr_ip6_ctlun,
    pub ip6_src: in6_addr,
    pub ip6_dst: in6_addr,
}

unsafe impl Encode for ip6_hdr {
    const ENCODING: Encoding = Encoding::Struct(
        "ip6_hdr",
        &[
            <libc::ip6_hdr_ip6_ctlun>::ENCODING,
            <in6_addr>::ENCODING,
            <in6_addr>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ip6_hdr {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ip6_ext?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ip6_ext {
    pub ip6e_nxt: u8,
    pub ip6e_len: u8,
}

unsafe impl Encode for ip6_ext {
    const ENCODING: Encoding = Encoding::Struct("ip6_ext", &[<u8>::ENCODING, <u8>::ENCODING]);
}

unsafe impl RefEncode for ip6_ext {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ip6_hbh?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ip6_hbh {
    pub ip6h_nxt: u8,
    pub ip6h_len: u8,
}

unsafe impl Encode for ip6_hbh {
    const ENCODING: Encoding = Encoding::Struct("ip6_hbh", &[<u8>::ENCODING, <u8>::ENCODING]);
}

unsafe impl RefEncode for ip6_hbh {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ip6_dest?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ip6_dest {
    pub ip6d_nxt: u8,
    pub ip6d_len: u8,
}

unsafe impl Encode for ip6_dest {
    const ENCODING: Encoding = Encoding::Struct("ip6_dest", &[<u8>::ENCODING, <u8>::ENCODING]);
}

unsafe impl RefEncode for ip6_dest {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ip6_opt?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ip6_opt {
    pub ip6o_type: u8,
    pub ip6o_len: u8,
}

unsafe impl Encode for ip6_opt {
    const ENCODING: Encoding = Encoding::Struct("ip6_opt", &[<u8>::ENCODING, <u8>::ENCODING]);
}

unsafe impl RefEncode for ip6_opt {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ip6_opt_jumbo?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ip6_opt_jumbo {
    pub ip6oj_type: u8,
    pub ip6oj_len: u8,
    pub ip6oj_jumbo_len: [u8; 4],
}

unsafe impl Encode for ip6_opt_jumbo {
    const ENCODING: Encoding = Encoding::Struct(
        "ip6_opt_jumbo",
        &[<u8>::ENCODING, <u8>::ENCODING, <[u8; 4]>::ENCODING],
    );
}

unsafe impl RefEncode for ip6_opt_jumbo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ip6_opt_nsap?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ip6_opt_nsap {
    pub ip6on_type: u8,
    pub ip6on_len: u8,
    pub ip6on_src_nsap_len: u8,
    pub ip6on_dst_nsap_len: u8,
}

unsafe impl Encode for ip6_opt_nsap {
    const ENCODING: Encoding = Encoding::Struct(
        "ip6_opt_nsap",
        &[
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ip6_opt_nsap {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ip6_opt_tunnel?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ip6_opt_tunnel {
    pub ip6ot_type: u8,
    pub ip6ot_len: u8,
    pub ip6ot_encap_limit: u8,
}

unsafe impl Encode for ip6_opt_tunnel {
    const ENCODING: Encoding = Encoding::Struct(
        "ip6_opt_tunnel",
        &[<u8>::ENCODING, <u8>::ENCODING, <u8>::ENCODING],
    );
}

unsafe impl RefEncode for ip6_opt_tunnel {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ip6_opt_router?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ip6_opt_router {
    pub ip6or_type: u8,
    pub ip6or_len: u8,
    pub ip6or_value: [u8; 2],
}

unsafe impl Encode for ip6_opt_router {
    const ENCODING: Encoding = Encoding::Struct(
        "ip6_opt_router",
        &[<u8>::ENCODING, <u8>::ENCODING, <[u8; 2]>::ENCODING],
    );
}

unsafe impl RefEncode for ip6_opt_router {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ip6_rthdr?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ip6_rthdr {
    pub ip6r_nxt: u8,
    pub ip6r_len: u8,
    pub ip6r_type: u8,
    pub ip6r_segleft: u8,
}

unsafe impl Encode for ip6_rthdr {
    const ENCODING: Encoding = Encoding::Struct(
        "ip6_rthdr",
        &[
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ip6_rthdr {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ip6_rthdr0?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ip6_rthdr0 {
    pub ip6r0_nxt: u8,
    pub ip6r0_len: u8,
    pub ip6r0_type: u8,
    pub ip6r0_segleft: u8,
    pub ip6r0_reserved: u32,
}

unsafe impl Encode for ip6_rthdr0 {
    const ENCODING: Encoding = Encoding::Struct(
        "ip6_rthdr0",
        &[
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u32>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ip6_rthdr0 {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/darwin/ip6_frag?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct ip6_frag {
    pub ip6f_nxt: u8,
    pub ip6f_reserved: u8,
    pub ip6f_offlg: u16,
    pub ip6f_ident: u32,
}

unsafe impl Encode for ip6_frag {
    const ENCODING: Encoding = Encoding::Struct(
        "ip6_frag",
        &[
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u16>::ENCODING,
            <u32>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for ip6_frag {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}
