//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::ffi::*;

extern "C" {
    pub static h_errno: c_int;
}

/// Structures returned by network data base library.  All addresses are
/// supplied in host order, and returned in network order (suitable for
/// use in system calls).
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct hostent {
    /// official name of host
    pub h_name: *mut c_char,
    /// alias list
    pub h_aliases: *mut *mut c_char,
    /// host address type
    pub h_addrtype: c_int,
    /// length of address
    pub h_length: c_int,
    /// list of addresses from name server
    pub h_addr_list: *mut *mut c_char,
}

/// Assumption here is that a network number
/// fits in an unsigned long -- probably a poor one.
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct netent {
    /// official name of net
    pub n_name: *mut c_char,
    /// alias list
    pub n_aliases: *mut *mut c_char,
    /// net address type
    pub n_addrtype: c_int,
    /// network #
    pub n_net: u32,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct servent {
    /// official service name
    pub s_name: *mut c_char,
    /// alias list
    pub s_aliases: *mut *mut c_char,
    /// port #
    pub s_port: c_int,
    /// protocol to use
    pub s_proto: *mut c_char,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct protoent {
    /// official protocol name
    pub p_name: *mut c_char,
    /// alias list
    pub p_aliases: *mut *mut c_char,
    /// protocol #
    pub p_proto: c_int,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct addrinfo {
    /// AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
    pub ai_flags: c_int,
    /// PF_xxx
    pub ai_family: c_int,
    /// SOCK_xxx
    pub ai_socktype: c_int,
    /// 0 or IPPROTO_xxx for IPv4 and IPv6
    pub ai_protocol: c_int,
    /// length of ai_addr
    pub ai_addrlen: socklen_t,
    /// canonical name for hostname
    pub ai_canonname: *mut c_char,
    /// binary address
    pub ai_addr: *mut sockaddr,
    /// next structure in linked list
    pub ai_next: *mut addrinfo,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct rpcent {
    /// name of server for this rpc program
    pub r_name: *mut c_char,
    /// alias list
    pub r_aliases: *mut *mut c_char,
    /// rpc program number
    pub r_number: c_int,
}

extern "C-unwind" {
    pub fn endhostent();
}

extern "C-unwind" {
    pub fn endnetent();
}

extern "C-unwind" {
    pub fn endprotoent();
}

extern "C-unwind" {
    pub fn endservent();
}

extern "C-unwind" {
    pub fn freeaddrinfo(param1: *mut addrinfo);
}

extern "C-unwind" {
    pub fn gai_strerror(param1: c_int) -> *const c_char;
}

extern "C-unwind" {
    pub fn getaddrinfo(
        param1: *const c_char,
        param1: *const c_char,
        param1: *const addrinfo,
        param1: *mut *mut addrinfo,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn gethostbyaddr(param1: *const c_void, param1: socklen_t, param1: c_int) -> *mut hostent;
}

extern "C-unwind" {
    pub fn gethostbyname(param1: *const c_char) -> *mut hostent;
}

extern "C-unwind" {
    pub fn gethostent() -> *mut hostent;
}

extern "C-unwind" {
    pub fn getnameinfo(
        param1: *const sockaddr,
        param1: socklen_t,
        param1: *mut c_char,
        param1: socklen_t,
        param1: *mut c_char,
        param1: socklen_t,
        param1: c_int,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn getnetbyaddr(param1: u32, param1: c_int) -> *mut netent;
}

extern "C-unwind" {
    pub fn getnetbyname(param1: *const c_char) -> *mut netent;
}

extern "C-unwind" {
    pub fn getnetent() -> *mut netent;
}

extern "C-unwind" {
    pub fn getprotobyname(param1: *const c_char) -> *mut protoent;
}

extern "C-unwind" {
    pub fn getprotobynumber(param1: c_int) -> *mut protoent;
}

extern "C-unwind" {
    pub fn getprotoent() -> *mut protoent;
}

extern "C-unwind" {
    pub fn getservbyname(param1: *const c_char, param1: *const c_char) -> *mut servent;
}

extern "C-unwind" {
    pub fn getservbyport(param1: c_int, param1: *const c_char) -> *mut servent;
}

extern "C-unwind" {
    pub fn getservent() -> *mut servent;
}

extern "C-unwind" {
    pub fn sethostent(param1: c_int);
}

extern "C-unwind" {
    /// void        sethostfile(const char *);
    pub fn setnetent(param1: c_int);
}

extern "C-unwind" {
    pub fn setprotoent(param1: c_int);
}

extern "C-unwind" {
    pub fn setservent(param1: c_int);
}

extern "C-unwind" {
    pub fn freehostent(param1: *mut hostent);
}

extern "C-unwind" {
    pub fn gethostbyname2(param1: *const c_char, param1: c_int) -> *mut hostent;
}

extern "C-unwind" {
    pub fn getipnodebyaddr(
        param1: *const c_void,
        param1: usize,
        param1: c_int,
        param1: *mut c_int,
    ) -> *mut hostent;
}

extern "C-unwind" {
    pub fn getipnodebyname(
        param1: *const c_char,
        param1: c_int,
        param1: c_int,
        param1: *mut c_int,
    ) -> *mut hostent;
}

extern "C-unwind" {
    pub fn getrpcbyname(name: *const c_char) -> *mut rpcent;
}

extern "C-unwind" {
    pub fn getrpcbynumber(number: c_int) -> *mut rpcent;
}

extern "C-unwind" {
    pub fn getrpcent() -> *mut rpcent;
}

extern "C-unwind" {
    pub fn setrpcent(stayopen: c_int);
}

extern "C-unwind" {
    pub fn endrpcent();
}

extern "C-unwind" {
    pub fn herror(param1: *const c_char);
}

extern "C-unwind" {
    pub fn hstrerror(param1: c_int) -> *const c_char;
}

extern "C-unwind" {
    pub fn innetgr(
        param1: *const c_char,
        param1: *const c_char,
        param1: *const c_char,
        param1: *const c_char,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn getnetgrent(
        param1: *mut *mut c_char,
        param1: *mut *mut c_char,
        param1: *mut *mut c_char,
    ) -> c_int;
}

extern "C-unwind" {
    pub fn endnetgrent();
}

extern "C-unwind" {
    pub fn setnetgrent(param1: *const c_char);
}
