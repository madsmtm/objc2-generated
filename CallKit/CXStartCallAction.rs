//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/callkit/cxstartcallaction?language=objc)
    #[unsafe(super(CXCallAction, CXAction, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "CXAction", feature = "CXCallAction"))]
    pub struct CXStartCallAction;
);

#[cfg(all(feature = "CXAction", feature = "CXCallAction"))]
extern_conformance!(
    unsafe impl NSCoding for CXStartCallAction {}
);

#[cfg(all(feature = "CXAction", feature = "CXCallAction"))]
extern_conformance!(
    unsafe impl NSCopying for CXStartCallAction {}
);

#[cfg(all(feature = "CXAction", feature = "CXCallAction"))]
unsafe impl CopyingHelper for CXStartCallAction {
    type Result = Self;
}

#[cfg(all(feature = "CXAction", feature = "CXCallAction"))]
extern_conformance!(
    unsafe impl NSObjectProtocol for CXStartCallAction {}
);

#[cfg(all(feature = "CXAction", feature = "CXCallAction"))]
extern_conformance!(
    unsafe impl NSSecureCoding for CXStartCallAction {}
);

#[cfg(all(feature = "CXAction", feature = "CXCallAction"))]
impl CXStartCallAction {
    extern_methods!(
        #[cfg(feature = "CXHandle")]
        #[unsafe(method(initWithCallUUID:handle:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCallUUID_handle(
            this: Allocated<Self>,
            call_uuid: &NSUUID,
            handle: &CXHandle,
        ) -> Retained<Self>;

        /// # Safety
        ///
        /// `a_decoder` possibly has further requirements.
        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            a_decoder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(initWithCallUUID:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCallUUID(this: Allocated<Self>, call_uuid: &NSUUID)
            -> Retained<Self>;

        #[cfg(feature = "CXHandle")]
        /// Handle for the party to call
        #[unsafe(method(handle))]
        #[unsafe(method_family = none)]
        pub unsafe fn handle(&self) -> Retained<CXHandle>;

        #[cfg(feature = "CXHandle")]
        /// Setter for [`handle`][Self::handle].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setHandle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setHandle(&self, handle: &CXHandle);

        #[unsafe(method(contactIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn contactIdentifier(&self) -> Option<Retained<NSString>>;

        /// Setter for [`contactIdentifier`][Self::contactIdentifier].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setContactIdentifier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setContactIdentifier(&self, contact_identifier: Option<&NSString>);

        #[unsafe(method(isVideo))]
        #[unsafe(method_family = none)]
        pub unsafe fn isVideo(&self) -> bool;

        /// Setter for [`isVideo`][Self::isVideo].
        #[unsafe(method(setVideo:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setVideo(&self, video: bool);

        /// Normally, providers can just call -[CXAction fulfill] to indicate action fulfillment. Use this method to note a specific date that the call started if it is different from [NSDate date]. A call is considered started when its invitation has been sent to the remote callee.
        #[unsafe(method(fulfillWithDateStarted:))]
        #[unsafe(method_family = none)]
        pub unsafe fn fulfillWithDateStarted(&self, date_started: &NSDate);
    );
}

/// Methods declared on superclass `CXCallAction`.
#[cfg(all(feature = "CXAction", feature = "CXCallAction"))]
impl CXStartCallAction {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(all(feature = "CXAction", feature = "CXCallAction"))]
impl CXStartCallAction {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
