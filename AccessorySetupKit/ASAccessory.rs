//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// A type that defines values for the state of an accessory.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/asaccessorystate?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ASAccessoryState(pub NSInteger);
impl ASAccessoryState {
    /// The accessory is invalid or unauthorized.
    #[doc(alias = "ASAccessoryStateUnauthorized")]
    pub const Unauthorized: Self = Self(0);
    /// The accessory is selected, but full authorization is still pending.
    #[doc(alias = "ASAccessoryStateAwaitingAuthorization")]
    pub const AwaitingAuthorization: Self = Self(10);
    /// The accessory is authorized and available.
    #[doc(alias = "ASAccessoryStateAuthorized")]
    pub const Authorized: Self = Self(20);
}

unsafe impl Encode for ASAccessoryState {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for ASAccessoryState {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Accessory Rename Options
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/asaccessoryrenameoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ASAccessoryRenameOptions(pub NSUInteger);
bitflags::bitflags! {
    impl ASAccessoryRenameOptions: NSUInteger {
/// An option to change an accessory's SSID along with its display name.
        #[doc(alias = "ASAccessoryRenameSSID")]
        const SSID = 1<<0;
    }
}

unsafe impl Encode for ASAccessoryRenameOptions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for ASAccessoryRenameOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Accessory Support Options
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/asaccessorysupportoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ASAccessorySupportOptions(pub NSUInteger);
bitflags::bitflags! {
    impl ASAccessorySupportOptions: NSUInteger {
/// The accessory supports Bluetooth Low Energy pairing.
        #[doc(alias = "ASAccessorySupportBluetoothPairingLE")]
        const BluetoothPairingLE = 1<<1;
/// The accessory supports bridging to Bluetooth classic transport.
///
/// This option indicates that when connecting with low energy transport, the accessory supports activating Bluetooth classic transport profiles.
        #[doc(alias = "ASAccessorySupportBluetoothTransportBridging")]
        const BluetoothTransportBridging = 1<<2;
/// The accessory supports Bluetooth Low Energy HID service.
        #[doc(alias = "ASAccessorySupportBluetoothHID")]
        const BluetoothHID = 1<<3;
    }
}

unsafe impl Encode for ASAccessorySupportOptions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for ASAccessorySupportOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/asaccessorywifiawarepaireddeviceid?language=objc)
pub type ASAccessoryWiFiAwarePairedDeviceID = u64;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/asaccessory?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ASAccessory;
);

unsafe impl Send for ASAccessory {}

unsafe impl Sync for ASAccessory {}

extern_conformance!(
    unsafe impl NSObjectProtocol for ASAccessory {}
);

impl ASAccessory {
    extern_methods!(
        /// The current authorization state of the accessory.
        #[unsafe(method(state))]
        #[unsafe(method_family = none)]
        pub unsafe fn state(&self) -> ASAccessoryState;

        /// The accessory's unique Bluetooth identifier, if any.
        ///
        /// Use this identifier to establish a connection to the accessory.
        #[unsafe(method(bluetoothIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn bluetoothIdentifier(&self) -> Option<Retained<NSUUID>>;

        /// The accessory's Bluetooth identifier, if any, for use when bridging classic transport profiles.
        #[unsafe(method(bluetoothTransportBridgingIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn bluetoothTransportBridgingIdentifier(&self) -> Option<Retained<NSData>>;

        /// The accessory's name, suitable for displaying to someone using your app.
        #[unsafe(method(displayName))]
        #[unsafe(method_family = none)]
        pub unsafe fn displayName(&self) -> Retained<NSString>;

        /// The accessory's Wi-Fi SSID, if any.
        ///
        /// Use this identifier to establish a connection to the accessory.
        #[unsafe(method(SSID))]
        #[unsafe(method_family = none)]
        pub unsafe fn SSID(&self) -> Option<Retained<NSString>>;

        /// The accessory's Wi-Fi Aware Pairing Identifier.
        ///
        /// Use this identifier to establish a connection to the accessory using Wi-Fi Aware Framework.
        #[unsafe(method(wifiAwarePairedDeviceID))]
        #[unsafe(method_family = none)]
        pub unsafe fn wifiAwarePairedDeviceID(&self) -> ASAccessoryWiFiAwarePairedDeviceID;

        #[cfg(feature = "ASDiscoveryDescriptor")]
        /// The descriptor used to discover the accessory.
        #[unsafe(method(descriptor))]
        #[unsafe(method_family = none)]
        pub unsafe fn descriptor(&self) -> Retained<ASDiscoveryDescriptor>;
    );
}

/// Methods declared on superclass `NSObject`.
impl ASAccessory {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
