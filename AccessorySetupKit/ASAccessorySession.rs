//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// Manages accessories.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/asaccessorysession?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ASAccessorySession;
);

unsafe impl Send for ASAccessorySession {}

unsafe impl Sync for ASAccessorySession {}

extern_conformance!(
    unsafe impl NSObjectProtocol for ASAccessorySession {}
);

impl ASAccessorySession {
    extern_methods!(
        #[cfg(feature = "ASAccessory")]
        /// An array of previously-selected accessories for this application.
        ///
        /// To monitor for changes in this list, use your event handler to watch for the events ``ASAccessoryEventType/accessoryAdded``, ``ASAccessoryEventType/accessoryChanged``, and ``ASAccessoryEventType/accessoryRemoved``.
        #[unsafe(method(accessories))]
        #[unsafe(method_family = none)]
        pub unsafe fn accessories(&self) -> Retained<NSArray<ASAccessory>>;

        #[cfg(feature = "ASPickerDisplaySettings")]
        /// Settings that affect the display of the accessory picker.
        ///
        /// Use this property to configure settings like the picker timeout.
        #[unsafe(method(pickerDisplaySettings))]
        #[unsafe(method_family = none)]
        pub unsafe fn pickerDisplaySettings(&self) -> Option<Retained<ASPickerDisplaySettings>>;

        #[cfg(feature = "ASPickerDisplaySettings")]
        /// Setter for [`pickerDisplaySettings`][Self::pickerDisplaySettings].
        #[unsafe(method(setPickerDisplaySettings:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPickerDisplaySettings(
            &self,
            picker_display_settings: Option<&ASPickerDisplaySettings>,
        );

        /// Invalidate the session by stopping any operations.
        ///
        /// This call breaks any retain cycles. The session is unusable after calling `invalidate`.
        #[unsafe(method(invalidate))]
        #[unsafe(method_family = none)]
        pub unsafe fn invalidate(&self);

        #[cfg(feature = "block2")]
        /// Present a picker that shows accessories managed by a Device Discovery Extension in your app.
        ///
        /// Use this method when your app includes a
        /// <doc
        /// ://com.apple.documentation/documentation/devicediscoveryextension> for its supported accessories. If your app doesn't use DDE, call ``showPickerForDisplayItems:completionHandler:`` with an array of ``ASPickerDisplayItem-c.class`` instances instead.
        ///
        /// The session's event handler receives events when this picker displays and dismisses, as well as when the person using the app picks an accessory.
        ///
        /// - Parameters:
        /// - completionHandler: A block or closure that the picker calls when it completes the operation. The completion handler receives an
        /// <doc
        /// ://com.apple.documentation/documentation/Foundation/NSError> instance if the picker encounters an error.
        #[unsafe(method(showPickerWithCompletionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn showPickerWithCompletionHandler(
            &self,
            completion_handler: &block2::DynBlock<dyn Fn(*mut NSError)>,
        );

        #[cfg(all(feature = "ASPickerDisplayItem", feature = "block2"))]
        /// Present a picker that shows discovered accessories matching an array of display items.
        ///
        /// The session's event handler receives events when this picker displays and dismisses, as well as when the person using the app picks an accessory.
        ///
        /// To migrate previously-configured accessories to AccessorySetupKit, add instances of ``ASMigrationDisplayItem`` to the `displayItems` array.
        /// - Parameters:
        /// - displayItems: An array of ``ASPickerDisplayItem`` instances describing accessories your app can set up. The picker displays only discovered accessories that match the properties of items in this array.
        /// - completionHandler: A block or closure that the picker calls when it completes the operation. The completion handler receives an
        /// <doc
        /// ://com.apple.documentation/documentation/Foundation/NSError> instance if the picker encounters an error.
        #[unsafe(method(showPickerForDisplayItems:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn showPickerForDisplayItems_completionHandler(
            &self,
            display_items: &NSArray<ASPickerDisplayItem>,
            completion_handler: &block2::DynBlock<dyn Fn(*mut NSError)>,
        );

        #[cfg(all(
            feature = "ASAccessory",
            feature = "ASAccessorySettings",
            feature = "block2"
        ))]
        /// Finish authorization of a partially-setup accessory.
        ///
        /// Use this method in scenarios where an accessory has multiple wireless interfaces. For example, when an accessory has both Bluetooth and Wi-Fi, and your descriptor may only provides an SSID prefix. In this case, the Bluetooth interface onboards first and your app needs to then finish authorization with the full SSID.
        #[unsafe(method(finishAuthorization:settings:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn finishAuthorization_settings_completionHandler(
            &self,
            accessory: &ASAccessory,
            settings: &ASAccessorySettings,
            completion_handler: &block2::DynBlock<dyn Fn(*mut NSError)>,
        );

        #[cfg(all(feature = "ASAccessory", feature = "block2"))]
        /// End authorization of a partially-configured accessory as a failure.
        #[unsafe(method(failAuthorization:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn failAuthorization_completionHandler(
            &self,
            accessory: &ASAccessory,
            completion_handler: &block2::DynBlock<dyn Fn(*mut NSError)>,
        );

        #[cfg(all(feature = "ASAccessory", feature = "block2"))]
        /// Removes an accessory.
        ///
        /// - Parameters:
        /// - accessory: The accessory to remove.
        /// - completionHandler: A block or closure that executes after the remove operation completes. The completion handler receives an
        /// <doc
        /// ://com.apple.documentation/documentation/Foundation/NSError> instance if the remove operation encounters an error.
        #[unsafe(method(removeAccessory:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn removeAccessory_completionHandler(
            &self,
            accessory: &ASAccessory,
            completion_handler: &block2::DynBlock<dyn Fn(*mut NSError)>,
        );

        #[cfg(all(feature = "ASAccessory", feature = "block2"))]
        /// Displays a view to rename an accessory.
        ///
        /// To rename a Wi-Fi SSID with this method, use the option ``ASAccessory/RenameOptions/ssid``.
        ///
        /// - Parameters:
        /// - accessory: The accessory to rename.
        /// - renameOptions: Options that affect the behavior of the rename operation.
        /// - completionHandler: A block or closure that executes after the rename operation completes. The completion handler receives an
        /// <doc
        /// ://com.apple.documentation/documentation/Foundation/NSError> instance if the rename operation encounters an error.
        #[unsafe(method(renameAccessory:options:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn renameAccessory_options_completionHandler(
            &self,
            accessory: &ASAccessory,
            rename_options: ASAccessoryRenameOptions,
            completion_handler: &block2::DynBlock<dyn Fn(*mut NSError)>,
        );

        #[cfg(all(
            feature = "ASAccessory",
            feature = "ASDiscoveryDescriptor",
            feature = "block2"
        ))]
        /// Displays a view to upgrade an accessory with additional technology permissions.
        ///
        /// Call this method to upgrade previously-added SSID-based accessories to use WiFi Aware.
        ///
        /// - Parameters:
        /// - accessory: The accessory to update.
        /// - descriptor: An updated descriptor that the picker uses to add new technology authorization for the provided accessory.
        /// - completionHandler: A block or closure that executes after the picker is shown. The completion handler receives an
        /// <doc
        /// ://com.apple.documentation/documentation/Foundation/NSError> instance if the upgrade operation encounters an error. In Swift, you can omit the completion handler by calling the method asynchronously and catching any error thrown by the method.
        #[unsafe(method(updateAuthorization:descriptor:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn updateAuthorization_descriptor_completionHandler(
            &self,
            accessory: &ASAccessory,
            descriptor: &ASDiscoveryDescriptor,
            completion_handler: &block2::DynBlock<dyn Fn(*mut NSError)>,
        );
    );
}

/// Methods declared on superclass `NSObject`.
impl ASAccessorySession {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
