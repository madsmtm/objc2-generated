//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// Type of event.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/asaccessoryeventtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ASAccessoryEventType(pub NSInteger);
impl ASAccessoryEventType {
    /// An unknown event occurred.
    ///
    /// This is a placeholder value used when initializing event type instances.
    #[doc(alias = "ASAccessoryEventTypeUnknown")]
    pub const Unknown: Self = Self(0);
    /// The discovery session activated.
    #[doc(alias = "ASAccessoryEventTypeActivated")]
    pub const Activated: Self = Self(10);
    /// The discovery session invalidated.
    #[doc(alias = "ASAccessoryEventTypeInvalidated")]
    pub const Invalidated: Self = Self(11);
    /// The migration of an accessory completed.
    #[doc(alias = "ASAccessoryEventTypeMigrationComplete")]
    pub const MigrationComplete: Self = Self(20);
    /// The session added an accessory.
    #[doc(alias = "ASAccessoryEventTypeAccessoryAdded")]
    pub const AccessoryAdded: Self = Self(30);
    /// The session removed an accessory.
    #[doc(alias = "ASAccessoryEventTypeAccessoryRemoved")]
    pub const AccessoryRemoved: Self = Self(31);
    /// The properties of an accessory changed.
    #[doc(alias = "ASAccessoryEventTypeAccessoryChanged")]
    pub const AccessoryChanged: Self = Self(32);
    /// The discovery session picker appeared.
    #[doc(alias = "ASAccessoryEventTypePickerDidPresent")]
    pub const PickerDidPresent: Self = Self(40);
    /// The discovery session picker dismissed.
    #[doc(alias = "ASAccessoryEventTypePickerDidDismiss")]
    pub const PickerDidDismiss: Self = Self(50);
    /// The discovery session picker started bridging with an accessory.
    #[doc(alias = "ASAccessoryEventTypePickerSetupBridging")]
    pub const PickerSetupBridging: Self = Self(60);
    /// The discovery session picker setup failed.
    #[doc(alias = "ASAccessoryEventTypePickerSetupFailed")]
    pub const PickerSetupFailed: Self = Self(70);
    /// The discovery session picker started pairing with a Bluetooth accessory.
    #[doc(alias = "ASAccessoryEventTypePickerSetupPairing")]
    pub const PickerSetupPairing: Self = Self(80);
    /// The discovery session picker started renaming an accessory.
    #[doc(alias = "ASAccessoryEventTypePickerSetupRename")]
    pub const PickerSetupRename: Self = Self(90);
}

unsafe impl Encode for ASAccessoryEventType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for ASAccessoryEventType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// Event for status and other updates.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/asaccessoryevent?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ASAccessoryEvent;
);

unsafe impl Send for ASAccessoryEvent {}

unsafe impl Sync for ASAccessoryEvent {}

extern_conformance!(
    unsafe impl NSObjectProtocol for ASAccessoryEvent {}
);

impl ASAccessoryEvent {
    extern_methods!(
        /// The type of event, such as accessory addition or removal, or picker presentation or removal.
        ///
        /// Some event types may indicate that the event is a subclass of ``ASAccessoryEvent-c.class`` that provides additional properties.
        ///
        /// This property is not atomic.
        ///
        /// # Safety
        ///
        /// This might not be thread-safe.
        #[unsafe(method(eventType))]
        #[unsafe(method_family = none)]
        pub unsafe fn eventType(&self) -> ASAccessoryEventType;

        #[cfg(feature = "ASAccessory")]
        /// The accessory involved in the event, if any.
        ///
        /// The session populates this member for event types like ``ASAccessoryEventType/accessoryAdded`` and ``ASAccessoryEventType/accessoryChanged``, but not for life cycle or picker events like ``ASAccessoryEventType/activated`` or ``ASAccessoryEventType/pickerDidPresent``.
        ///
        /// This property is not atomic.
        ///
        /// # Safety
        ///
        /// This might not be thread-safe.
        #[unsafe(method(accessory))]
        #[unsafe(method_family = none)]
        pub unsafe fn accessory(&self) -> Option<Retained<ASAccessory>>;

        /// The error associated with the event, if any.
        ///
        /// This property is not atomic.
        ///
        /// # Safety
        ///
        /// This might not be thread-safe.
        #[unsafe(method(error))]
        #[unsafe(method_family = none)]
        pub unsafe fn error(&self) -> Option<Retained<NSError>>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(&self) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
impl ASAccessoryEvent {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new_class() -> Retained<Self>;
    );
}
