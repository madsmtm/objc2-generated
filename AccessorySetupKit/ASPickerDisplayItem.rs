//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-ui-kit")]
use objc2_ui_kit::*;

use crate::*;

/// Accessory Setup Options
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/aspickerdisplayitemsetupoptions?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ASPickerDisplayItemSetupOptions(pub NSUInteger);
bitflags::bitflags! {
    impl ASPickerDisplayItemSetupOptions: NSUInteger {
/// An option to ask the person using the app to rename the accessory.
        #[doc(alias = "ASPickerDisplayItemSetupRename")]
        const Rename = 1<<0;
/// An option to require the app to finish accessory authorization before showing the setup view.
///
/// If the accessory supports ``ASAccessory/SupportOptions/bluetoothPairingLE``, then the app needs to start pairing by accessing a protected GATT characteristic.
        #[doc(alias = "ASPickerDisplayItemSetupConfirmAuthorization")]
        const ConfirmAuthorization = 1<<1;
/// An option to ask the person setting up the accessory to finish additional setup in the app after the accessory is authorized.
        #[doc(alias = "ASPickerDisplayItemSetupFinishInApp")]
        const FinishInApp = 1<<2;
    }
}

unsafe impl Encode for ASPickerDisplayItemSetupOptions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for ASPickerDisplayItemSetupOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/aspickerdisplayitem?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ASPickerDisplayItem;
);

unsafe impl Send for ASPickerDisplayItem {}

unsafe impl Sync for ASPickerDisplayItem {}

extern_conformance!(
    unsafe impl NSObjectProtocol for ASPickerDisplayItem {}
);

impl ASPickerDisplayItem {
    extern_methods!(
        /// The accessory name to display in the picker.
        #[unsafe(method(name))]
        #[unsafe(method_family = none)]
        pub unsafe fn name(&self) -> Retained<NSString>;

        #[cfg(feature = "objc2-ui-kit")]
        /// An image of the accessory to display in the picker.
        #[unsafe(method(productImage))]
        #[unsafe(method_family = none)]
        pub unsafe fn productImage(&self) -> Retained<UIImage>;

        #[cfg(feature = "ASDiscoveryDescriptor")]
        /// A descriptor that the picker uses to determine which discovered accessories to display.
        #[unsafe(method(descriptor))]
        #[unsafe(method_family = none)]
        pub unsafe fn descriptor(&self) -> Retained<ASDiscoveryDescriptor>;

        #[cfg(feature = "ASAccessory")]
        /// Options to allow renaming a matched accessory.
        ///
        /// To permit renaming, include ``SetupOptions-swift.struct/rename`` in the ``setupOptions-c.property``
        #[unsafe(method(renameOptions))]
        #[unsafe(method_family = none)]
        pub unsafe fn renameOptions(&self) -> ASAccessoryRenameOptions;

        #[cfg(feature = "ASAccessory")]
        /// Setter for [`renameOptions`][Self::renameOptions].
        #[unsafe(method(setRenameOptions:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRenameOptions(&self, rename_options: ASAccessoryRenameOptions);

        /// Custom setup options for the accessory.
        #[unsafe(method(setupOptions))]
        #[unsafe(method_family = none)]
        pub unsafe fn setupOptions(&self) -> ASPickerDisplayItemSetupOptions;

        /// Setter for [`setupOptions`][Self::setupOptions].
        #[unsafe(method(setSetupOptions:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSetupOptions(&self, setup_options: ASPickerDisplayItemSetupOptions);

        #[cfg(all(feature = "ASDiscoveryDescriptor", feature = "objc2-ui-kit"))]
        /// Creates a picker display item with a name and image to display and a descriptor to match discovered accessories.
        /// - Parameters:
        /// - name: The accessory name to display in the picker.
        /// - productImage: An image of the accessory to display in the picker.
        /// - descriptor: A descriptor that the picker uses to determine which discovered accessories to display.
        #[unsafe(method(initWithName:productImage:descriptor:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_productImage_descriptor(
            this: Allocated<Self>,
            name: &NSString,
            product_image: &UIImage,
            descriptor: &ASDiscoveryDescriptor,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(&self) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
impl ASPickerDisplayItem {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new_class() -> Retained<Self>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/asmigrationdisplayitem?language=objc)
    #[unsafe(super(ASPickerDisplayItem, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ASMigrationDisplayItem;
);

unsafe impl Send for ASMigrationDisplayItem {}

unsafe impl Sync for ASMigrationDisplayItem {}

extern_conformance!(
    unsafe impl NSObjectProtocol for ASMigrationDisplayItem {}
);

impl ASMigrationDisplayItem {
    extern_methods!(
        /// The Bluetooth identifier of the accessory to migrate.
        #[unsafe(method(peripheralIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn peripheralIdentifier(&self) -> Option<Retained<NSUUID>>;

        /// Setter for [`peripheralIdentifier`][Self::peripheralIdentifier].
        #[unsafe(method(setPeripheralIdentifier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPeripheralIdentifier(&self, peripheral_identifier: Option<&NSUUID>);

        /// The Wi-Fi hotspot SSID of the accessory to migrate.
        #[unsafe(method(hotspotSSID))]
        #[unsafe(method_family = none)]
        pub unsafe fn hotspotSSID(&self) -> Option<Retained<NSString>>;

        /// Setter for [`hotspotSSID`][Self::hotspotSSID].
        #[unsafe(method(setHotspotSSID:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setHotspotSSID(&self, hotspot_ssid: Option<&NSString>);

        #[cfg(feature = "ASAccessory")]
        /// The Wi-Fi Aware paired device identififer of the accessory to migrate.
        #[unsafe(method(wifiAwarePairedDeviceID))]
        #[unsafe(method_family = none)]
        pub unsafe fn wifiAwarePairedDeviceID(&self) -> ASAccessoryWiFiAwarePairedDeviceID;

        #[cfg(feature = "ASAccessory")]
        /// Setter for [`wifiAwarePairedDeviceID`][Self::wifiAwarePairedDeviceID].
        #[unsafe(method(setWifiAwarePairedDeviceID:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWifiAwarePairedDeviceID(
            &self,
            wifi_aware_paired_device_id: ASAccessoryWiFiAwarePairedDeviceID,
        );
    );
}

/// Methods declared on superclass `ASPickerDisplayItem`.
impl ASMigrationDisplayItem {
    extern_methods!(
        #[cfg(all(feature = "ASDiscoveryDescriptor", feature = "objc2-ui-kit"))]
        /// Creates a picker display item with a name and image to display and a descriptor to match discovered accessories.
        /// - Parameters:
        /// - name: The accessory name to display in the picker.
        /// - productImage: An image of the accessory to display in the picker.
        /// - descriptor: A descriptor that the picker uses to determine which discovered accessories to display.
        #[unsafe(method(initWithName:productImage:descriptor:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_productImage_descriptor(
            this: Allocated<Self>,
            name: &NSString,
            product_image: &UIImage,
            descriptor: &ASDiscoveryDescriptor,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
impl ASMigrationDisplayItem {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
