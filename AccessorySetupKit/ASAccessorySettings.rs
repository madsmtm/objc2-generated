//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/asaccessorysettings?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ASAccessorySettings;
);

unsafe impl Send for ASAccessorySettings {}

unsafe impl Sync for ASAccessorySettings {}

extern_conformance!(
    unsafe impl NSObjectProtocol for ASAccessorySettings {}
);

impl ASAccessorySettings {
    extern_methods!(
        /// An empty settings object.
        #[unsafe(method(defaultSettings))]
        #[unsafe(method_family = none)]
        pub unsafe fn defaultSettings() -> Retained<ASAccessorySettings>;

        /// A hotspot identifier that clients can use to connect to an accessory's hotspot.
        #[unsafe(method(SSID))]
        #[unsafe(method_family = none)]
        pub unsafe fn SSID(&self) -> Option<Retained<NSString>>;

        /// Setter for [`SSID`][Self::SSID].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setSSID:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSSID(&self, ssid: Option<&NSString>);

        /// A 6-byte identifier for bridging classic transport profiles.
        ///
        /// AccessorySetupKit ignores this property if another app already authorized and bridged the accessory.
        #[unsafe(method(bluetoothTransportBridgingIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn bluetoothTransportBridgingIdentifier(&self) -> Option<Retained<NSData>>;

        /// Setter for [`bluetoothTransportBridgingIdentifier`][Self::bluetoothTransportBridgingIdentifier].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setBluetoothTransportBridgingIdentifier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBluetoothTransportBridgingIdentifier(
            &self,
            bluetooth_transport_bridging_identifier: Option<&NSData>,
        );
    );
}

/// Methods declared on superclass `NSObject`.
impl ASAccessorySettings {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
