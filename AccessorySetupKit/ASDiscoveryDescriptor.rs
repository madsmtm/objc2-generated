//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-bluetooth")]
use objc2_core_bluetooth::*;
use objc2_foundation::*;

use crate::*;

/// Discovery Range
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/asdiscoverydescriptorrange?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ASDiscoveryDescriptorRange(pub NSInteger);
impl ASDiscoveryDescriptorRange {
    /// The default range in which to discover accessories.
    #[doc(alias = "ASDiscoveryDescriptorRangeDefault")]
    pub const Default: Self = Self(0);
    /// A range in the immediate vicinity of the device performing accessory discovery.
    ///
    /// This range means that an accessory is right next to the device running your app.
    #[doc(alias = "ASDiscoveryDescriptorRangeImmediate")]
    pub const Immediate: Self = Self(10);
}

unsafe impl Encode for ASDiscoveryDescriptorRange {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for ASDiscoveryDescriptorRange {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// A type that defines service roles for Wi-Fi Aware accessories.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/asdiscoverydescriptorwifiawareservicerole?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ASDiscoveryDescriptorWiFiAwareServiceRole(pub NSInteger);
impl ASDiscoveryDescriptorWiFiAwareServiceRole {
    /// The subscriber service role.
    #[doc(alias = "ASDiscoveryDescriptorWiFiAwareServiceRoleSubscriber")]
    pub const Subscriber: Self = Self(10);
    /// The publisher service role.
    #[doc(alias = "ASDiscoveryDescriptorWiFiAwareServiceRolePublisher")]
    pub const Publisher: Self = Self(20);
}

unsafe impl Encode for ASDiscoveryDescriptorWiFiAwareServiceRole {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for ASDiscoveryDescriptorWiFiAwareServiceRole {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/accessorysetupkit/asdiscoverydescriptor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ASDiscoveryDescriptor;
);

unsafe impl Send for ASDiscoveryDescriptor {}

unsafe impl Sync for ASDiscoveryDescriptor {}

extern_conformance!(
    unsafe impl NSObjectProtocol for ASDiscoveryDescriptor {}
);

impl ASDiscoveryDescriptor {
    extern_methods!(
        #[cfg(feature = "ASAccessory")]
        /// Options supported by an accessory.
        #[unsafe(method(supportedOptions))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedOptions(&self) -> ASAccessorySupportOptions;

        #[cfg(feature = "ASAccessory")]
        /// Setter for [`supportedOptions`][Self::supportedOptions].
        #[unsafe(method(setSupportedOptions:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSupportedOptions(&self, supported_options: ASAccessorySupportOptions);

        #[cfg(feature = "ASCommon")]
        /// The accessory's 16-bit Bluetooth Company Identifier.
        #[unsafe(method(bluetoothCompanyIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn bluetoothCompanyIdentifier(&self) -> ASBluetoothCompanyIdentifier;

        #[cfg(feature = "ASCommon")]
        /// Setter for [`bluetoothCompanyIdentifier`][Self::bluetoothCompanyIdentifier].
        #[unsafe(method(setBluetoothCompanyIdentifier:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBluetoothCompanyIdentifier(
            &self,
            bluetooth_company_identifier: ASBluetoothCompanyIdentifier,
        );

        /// A byte buffer that matches the accessory's Bluetooth manufacturer data.
        #[unsafe(method(bluetoothManufacturerDataBlob))]
        #[unsafe(method_family = none)]
        pub unsafe fn bluetoothManufacturerDataBlob(&self) -> Option<Retained<NSData>>;

        /// Setter for [`bluetoothManufacturerDataBlob`][Self::bluetoothManufacturerDataBlob].
        #[unsafe(method(setBluetoothManufacturerDataBlob:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBluetoothManufacturerDataBlob(
            &self,
            bluetooth_manufacturer_data_blob: Option<&NSData>,
        );

        /// The accessory's Bluetooth manufacturer data mask.
        #[unsafe(method(bluetoothManufacturerDataMask))]
        #[unsafe(method_family = none)]
        pub unsafe fn bluetoothManufacturerDataMask(&self) -> Option<Retained<NSData>>;

        /// Setter for [`bluetoothManufacturerDataMask`][Self::bluetoothManufacturerDataMask].
        #[unsafe(method(setBluetoothManufacturerDataMask:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBluetoothManufacturerDataMask(
            &self,
            bluetooth_manufacturer_data_mask: Option<&NSData>,
        );

        /// The accessory's over-the-air Bluetooth name substring compare options.
        #[unsafe(method(bluetoothNameSubstringCompareOptions))]
        #[unsafe(method_family = none)]
        pub unsafe fn bluetoothNameSubstringCompareOptions(&self) -> NSStringCompareOptions;

        /// Setter for [`bluetoothNameSubstringCompareOptions`][Self::bluetoothNameSubstringCompareOptions].
        #[unsafe(method(setBluetoothNameSubstringCompareOptions:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBluetoothNameSubstringCompareOptions(
            &self,
            bluetooth_name_substring_compare_options: NSStringCompareOptions,
        );

        /// The accessory's over-the-air Bluetooth name substring.
        #[unsafe(method(bluetoothNameSubstring))]
        #[unsafe(method_family = none)]
        pub unsafe fn bluetoothNameSubstring(&self) -> Option<Retained<NSString>>;

        /// Setter for [`bluetoothNameSubstring`][Self::bluetoothNameSubstring].
        #[unsafe(method(setBluetoothNameSubstring:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBluetoothNameSubstring(&self, bluetooth_name_substring: Option<&NSString>);

        /// A property that tells the session to discover accessories within a specific Bluetooth range.
        #[unsafe(method(bluetoothRange))]
        #[unsafe(method_family = none)]
        pub unsafe fn bluetoothRange(&self) -> ASDiscoveryDescriptorRange;

        /// Setter for [`bluetoothRange`][Self::bluetoothRange].
        #[unsafe(method(setBluetoothRange:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBluetoothRange(&self, bluetooth_range: ASDiscoveryDescriptorRange);

        /// A byte buffer that matches the accessory's Bluetooth service data.
        #[unsafe(method(bluetoothServiceDataBlob))]
        #[unsafe(method_family = none)]
        pub unsafe fn bluetoothServiceDataBlob(&self) -> Option<Retained<NSData>>;

        /// Setter for [`bluetoothServiceDataBlob`][Self::bluetoothServiceDataBlob].
        #[unsafe(method(setBluetoothServiceDataBlob:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBluetoothServiceDataBlob(
            &self,
            bluetooth_service_data_blob: Option<&NSData>,
        );

        /// The accessory's Bluetooth service data mask.
        #[unsafe(method(bluetoothServiceDataMask))]
        #[unsafe(method_family = none)]
        pub unsafe fn bluetoothServiceDataMask(&self) -> Option<Retained<NSData>>;

        /// Setter for [`bluetoothServiceDataMask`][Self::bluetoothServiceDataMask].
        #[unsafe(method(setBluetoothServiceDataMask:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBluetoothServiceDataMask(
            &self,
            bluetooth_service_data_mask: Option<&NSData>,
        );

        #[cfg(feature = "objc2-core-bluetooth")]
        /// The accessory's Bluetooth service UUID.
        #[unsafe(method(bluetoothServiceUUID))]
        #[unsafe(method_family = none)]
        pub unsafe fn bluetoothServiceUUID(&self) -> Option<Retained<CBUUID>>;

        #[cfg(feature = "objc2-core-bluetooth")]
        /// Setter for [`bluetoothServiceUUID`][Self::bluetoothServiceUUID].
        #[unsafe(method(setBluetoothServiceUUID:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBluetoothServiceUUID(&self, bluetooth_service_uuid: Option<&CBUUID>);

        /// The SSID of the accessory's Wi-Fi network.
        #[unsafe(method(SSID))]
        #[unsafe(method_family = none)]
        pub unsafe fn SSID(&self) -> Option<Retained<NSString>>;

        /// Setter for [`SSID`][Self::SSID].
        #[unsafe(method(setSSID:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSSID(&self, ssid: Option<&NSString>);

        /// The prefix string of SSID of the accessory's Wi-Fi network.
        #[unsafe(method(SSIDPrefix))]
        #[unsafe(method_family = none)]
        pub unsafe fn SSIDPrefix(&self) -> Option<Retained<NSString>>;

        /// Setter for [`SSIDPrefix`][Self::SSIDPrefix].
        #[unsafe(method(setSSIDPrefix:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSSIDPrefix(&self, ssid_prefix: Option<&NSString>);

        /// The accessory's Wi-Fi Aware's service name if available.
        #[unsafe(method(wifiAwareServiceName))]
        #[unsafe(method_family = none)]
        pub unsafe fn wifiAwareServiceName(&self) -> Option<Retained<NSString>>;

        /// Setter for [`wifiAwareServiceName`][Self::wifiAwareServiceName].
        #[unsafe(method(setWifiAwareServiceName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWifiAwareServiceName(&self, wifi_aware_service_name: Option<&NSString>);

        /// The role of the accessory's Wi-Fi Aware's service.
        ///
        /// This property defaults to ``ASDiscoveryDescriptor/WiFiAwareServiceRole/subscriber``
        #[unsafe(method(wifiAwareServiceRole))]
        #[unsafe(method_family = none)]
        pub unsafe fn wifiAwareServiceRole(&self) -> ASDiscoveryDescriptorWiFiAwareServiceRole;

        /// Setter for [`wifiAwareServiceRole`][Self::wifiAwareServiceRole].
        #[unsafe(method(setWifiAwareServiceRole:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWifiAwareServiceRole(
            &self,
            wifi_aware_service_role: ASDiscoveryDescriptorWiFiAwareServiceRole,
        );

        #[cfg(feature = "ASCommon")]
        /// The accessory's Wi-Fi Aware model name and matching options.
        #[unsafe(method(wifiAwareModelNameMatch))]
        #[unsafe(method_family = none)]
        pub unsafe fn wifiAwareModelNameMatch(&self) -> Option<Retained<ASPropertyCompareString>>;

        #[cfg(feature = "ASCommon")]
        /// Setter for [`wifiAwareModelNameMatch`][Self::wifiAwareModelNameMatch].
        #[unsafe(method(setWifiAwareModelNameMatch:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWifiAwareModelNameMatch(
            &self,
            wifi_aware_model_name_match: Option<&ASPropertyCompareString>,
        );

        #[cfg(feature = "ASCommon")]
        /// The accessory's Wi-Fi Aware vendor name and matching options.
        #[unsafe(method(wifiAwareVendorNameMatch))]
        #[unsafe(method_family = none)]
        pub unsafe fn wifiAwareVendorNameMatch(&self) -> Option<Retained<ASPropertyCompareString>>;

        #[cfg(feature = "ASCommon")]
        /// Setter for [`wifiAwareVendorNameMatch`][Self::wifiAwareVendorNameMatch].
        #[unsafe(method(setWifiAwareVendorNameMatch:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWifiAwareVendorNameMatch(
            &self,
            wifi_aware_vendor_name_match: Option<&ASPropertyCompareString>,
        );
    );
}

/// Methods declared on superclass `NSObject`.
impl ASDiscoveryDescriptor {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
