//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-audio-toolbox")]
use objc2_audio_toolbox::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coreaudiokit/auviewcontrollerbase?language=objc)
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
pub type AUViewControllerBase = NSViewController;

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSCoding for AUViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSEditor for AUViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSExtensionRequestHandling for AUViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSObjectProtocol for AUViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSSeguePerforming for AUViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSUserInterfaceItemIdentification for AUViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl AUViewController {
    extern_methods!();
}

/// Methods declared on superclass `NSViewController`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl AUViewController {
    extern_methods!(
        #[unsafe(method(initWithNibName:bundle:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithNibName_bundle(
            this: Allocated<Self>,
            nib_name_or_nil: Option<&NSNibName>,
            nib_bundle_or_nil: Option<&NSBundle>,
        ) -> Retained<Self>;

        /// # Safety
        ///
        /// `coder` possibly has further requirements.
        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    );
}

/// Methods declared on superclass `NSResponder`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl AUViewController {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl AUViewController {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}

extern_class!(
    /// Properties of the configuration that a host uses to embed the view of an audio unit.
    ///
    /// Hosts may support embedding the view of an audio unit in different configurations. These
    /// configurations may vary in the size reserved for the audio unit's view and the additional
    /// control surfaces that are displayed along with it. The host can propose several view
    /// configurations and the audio unit should report the ones which it supports.
    ///
    /// See the documentation for supportedViewConfigurations.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coreaudiokit/auaudiounitviewconfiguration?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct AUAudioUnitViewConfiguration;
);

extern_conformance!(
    unsafe impl NSCoding for AUAudioUnitViewConfiguration {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for AUAudioUnitViewConfiguration {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for AUAudioUnitViewConfiguration {}
);

impl AUAudioUnitViewConfiguration {
    extern_methods!(
        #[cfg(feature = "objc2-core-foundation")]
        /// Designated initializer.
        ///
        /// Parameter `width`: The width associated with this view configuration.
        ///
        /// Parameter `height`: The height associated with this view configuration.
        ///
        /// Parameter `hostHasController`: This property controls whether the host shows its own control surface in this view
        /// configuration.
        ///
        /// Returns: Returns the newly created view configuration object.
        #[unsafe(method(initWithWidth:height:hostHasController:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithWidth_height_hostHasController(
            this: Allocated<Self>,
            width: CGFloat,
            height: CGFloat,
            host_has_controller: bool,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The width of the view, measured in points.
        ///
        /// Setting the width to 0 will match any width.
        #[unsafe(method(width))]
        #[unsafe(method_family = none)]
        pub unsafe fn width(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// The height of the view, measured in points.
        ///
        /// Setting the height to 0 will match any height.
        #[unsafe(method(height))]
        #[unsafe(method_family = none)]
        pub unsafe fn height(&self) -> CGFloat;

        /// Boolean property specifying whether the host displays its own control surface
        /// when showing the view of the audio unit.
        #[unsafe(method(hostHasController))]
        #[unsafe(method_family = none)]
        pub unsafe fn hostHasController(&self) -> bool;
    );
}

/// Methods declared on superclass `NSObject`.
impl AUAudioUnitViewConfiguration {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

mod private_AUAudioUnit_ViewController {
    pub trait Sealed {}
}

/// Category on [`AUAudioUnit`].
pub unsafe trait AUAudioUnit_ViewController:
    ClassType + Sized + private_AUAudioUnit_ViewController::Sealed
{
    extern_methods!(
        #[cfg(all(feature = "block2", feature = "objc2-app-kit"))]
        #[cfg(target_os = "macos")]
        /// Obtains an audio unit's view controller (and thereby a view).
        ///
        /// Asynchronously requests the audio unit's view controller. This method will later call the
        /// completion handler, in a thread/dispatch queue context internal to the implementation, with
        /// a view controller, or nil in the case of an audio unit without a custom view controller.
        #[unsafe(method(requestViewControllerWithCompletionHandler:))]
        #[unsafe(method_family = none)]
        unsafe fn requestViewControllerWithCompletionHandler(
            &self,
            completion_handler: &block2::DynBlock<dyn Fn(*mut AUViewControllerBase)>,
        );

        /// Parameter `availableViewConfigurations`: The list of all available view configurations supported by the host.
        ///
        /// Returns: A set of indices of view configurations from the availableViewConfigurations array that the
        /// audio unit supports.
        ///
        /// Query the list of supported view configurations.
        ///
        /// The host can query the audio unit for all the view configurations it supports.
        /// Hosts can support multiple configurations in which they can display the user interfaces of
        /// audio units (for example: full screen, normal, live mode, etc). These configurations can be
        /// of different sizes and the host might display its own control surfaces along with the view
        /// of the audio unit. The host will call this method and pass an array of supported
        /// configurations.
        ///
        /// The audio unit should override this method and implement its own logic to report all the
        /// view configurations it supports. The size of the view in the selected configuration should
        /// be large enough to fit the view of the audio unit, otherwise it might be truncated and a
        /// scroll bar might be necessary to navigate it.
        ///
        /// In case an empty set is returned from this method, it is considered that the plugin only
        /// supports the largest available view configuration.
        #[unsafe(method(supportedViewConfigurations:))]
        #[unsafe(method_family = none)]
        unsafe fn supportedViewConfigurations(
            &self,
            available_view_configurations: &NSArray<AUAudioUnitViewConfiguration>,
        ) -> Retained<NSIndexSet>;

        /// Parameter `viewConfiguration`: The requested view configuration.
        ///
        /// The view configuration passed to this method should be one which was indicated as supported
        /// via supportedViewConfigurations. If any other, unsupported, view configuration is passed or
        /// if supportedViewConfigurations returns an empty set, the audio unit implementation should
        /// fall back to its default (largest available) view configuration.
        ///
        ///
        /// Request a view configuration from the audio unit.
        ///
        /// The host can use this method to switch the audio unit's view into a new configuration.
        /// Audio Units should override this method with the logic needed to adapt their view controller
        /// to the requested configuration.
        #[unsafe(method(selectViewConfiguration:))]
        #[unsafe(method_family = none)]
        unsafe fn selectViewConfiguration(&self, view_configuration: &AUAudioUnitViewConfiguration);
    );
}

#[cfg(feature = "objc2-audio-toolbox")]
impl private_AUAudioUnit_ViewController::Sealed for AUAudioUnit {}
#[cfg(feature = "objc2-audio-toolbox")]
unsafe impl AUAudioUnit_ViewController for AUAudioUnit {}
