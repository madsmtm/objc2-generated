//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// The object representing the state of a user-mode USB host controller device
    ///
    /// This class assists with tracking internal state transitions of a user-mode USB host controller device, and parses IOUSBHostCIMessage command
    /// structures to update state and generate properly formatted command responses.  Clients should create an IOUSBHostCIDeviceStateMachine in
    /// response to an IOUSBHostCIMessageTypeDeviceCreate command, and then use the provided interfaces to identify and process commands
    /// for the device.  The IOUSBHostCIDeviceStateMachine should be destroyed in response to an IOUSBHostCIMessageTypeDeviceDestroy command.
    ///
    /// IOUSBHostCIDeviceStateMachine does not provide any concurrency protection, the client is responsible for necessary serialization.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/iousbhost/iousbhostcidevicestatemachine?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct IOUSBHostCIDeviceStateMachine;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for IOUSBHostCIDeviceStateMachine {}
);

impl IOUSBHostCIDeviceStateMachine {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(all(
            feature = "IOUSBHostControllerInterface",
            feature = "IOUSBHostControllerInterfaceDefinitions"
        ))]
        /// Initializes an IOUSBHostCIDeviceStateMachine object
        ///
        /// The IOUSBHostCIDeviceStateMachine defaults to the IOUSBHostCIDeviceStateActive state.
        ///
        /// Parameter `interface`: IOUSBHostControllerInterface which will be used to send command responses.
        ///
        /// Parameter `command`: IOUSBHostCIMessage with type IOUSBHostCIMessageTypeDeviceCreate
        ///
        /// Returns: IOUSBHostCIDeviceStateMachine instance, to be released by the caller.
        ///
        /// # Safety
        ///
        /// `command` must be a valid pointer.
        #[unsafe(method(initWithInterface:command:error:_))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithInterface_command_error(
            this: Allocated<Self>,
            interface: &IOUSBHostControllerInterface,
            command: NonNull<IOUSBHostCIMessage>,
        ) -> Result<Retained<Self>, Retained<NSError>>;

        #[cfg(feature = "IOUSBHostControllerInterfaceDefinitions")]
        /// Inspect an IOUSBHostCIMessage command
        ///
        /// The IOUSBHostCIMessage command is inspected to determine if it is handled by the state machine, and
        /// is appropriate for the current state.
        ///
        /// Parameter `command`: IOUSBHostCIMessage command structure received from the kernel driver.
        ///
        /// Returns: BOOL YES if the command is targeting a controller, and can be handled in the current state
        /// BOOL NO if the command does not target a controller, or cannot be handled in the current state
        ///
        /// # Safety
        ///
        /// `command` must be a valid pointer.
        #[unsafe(method(inspectCommand:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn inspectCommand_error(
            &self,
            command: NonNull<IOUSBHostCIMessage>,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "IOUSBHostControllerInterfaceDefinitions")]
        /// Advance the state machine and respond to an IOUSBHostCIMessage command
        ///
        /// If the command passes inspectCommand and the client indicates the command was processed successfully, the state machine is
        /// advanced, and a properly formatted command response message is sent to the kernel driver.  If the client indicates the command was
        /// not processed successfully, the state machine is not advanced but a properly formatted command response message is sent to the kernel
        /// driver.
        ///
        /// Parameter `command`: IOUSBHostCIMessage command structure received from the kernel driver.
        ///
        /// Parameter `status`: IOUSBHostCIMessageStatus reported by the user-mode USB host controller implementation for the command response.
        ///
        /// Returns: BOOL YES if the command response was sent to the kernel driver
        /// BOOL NO if the command response was not sent to the kernel driver
        ///
        /// # Safety
        ///
        /// `command` must be a valid pointer.
        #[unsafe(method(respondToCommand:status:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn respondToCommand_status_error(
            &self,
            command: NonNull<IOUSBHostCIMessage>,
            status: IOUSBHostCIMessageStatus,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "IOUSBHostControllerInterfaceDefinitions")]
        /// Advance the state machine and respond to an IOUSBHostCIMessageTypeDeviceCreate command
        ///
        /// If the command passes inspectCommand and the client indicates the command was processed successfully, the state machine is
        /// advanced, and a properly formatted command response message is sent to the kernel driver.  If the client indicates the command was
        /// not processed successfully, the state machine is not advanced but a properly formatted command response message is sent to the kernel
        /// driver.
        ///
        /// Parameter `command`: IOUSBHostCIMessage command structure received from the kernel driver.  The Type field must be IOUSBHostCIMessageTypeDeviceCreate
        ///
        /// Parameter `status`: IOUSBHostCIMessageStatus reported by the user-mode USB host controller implementation for the command response.
        ///
        /// Parameter `deviceAddress`: NSUInteger used only when responding to the initial IOUSBHostCIMessageTypeDeviceCreate command, containing
        /// a valid USB device address successfully assigned to the device.
        ///
        /// Returns: BOOL YES if the command response was sent to the kernel driver
        /// BOOL NO if the command response was not sent to the kernel driver
        ///
        /// # Safety
        ///
        /// `command` must be a valid pointer.
        #[unsafe(method(respondToCommand:status:deviceAddress:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn respondToCommand_status_deviceAddress_error(
            &self,
            command: NonNull<IOUSBHostCIMessage>,
            status: IOUSBHostCIMessageStatus,
            device_address: NSUInteger,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "IOUSBHostControllerInterfaceDefinitions")]
        #[unsafe(method(deviceState))]
        #[unsafe(method_family = none)]
        pub unsafe fn deviceState(&self) -> IOUSBHostCIDeviceState;

        #[unsafe(method(completeRoute))]
        #[unsafe(method_family = none)]
        pub unsafe fn completeRoute(&self) -> NSUInteger;

        #[unsafe(method(deviceAddress))]
        #[unsafe(method_family = none)]
        pub unsafe fn deviceAddress(&self) -> NSUInteger;

        #[cfg(feature = "IOUSBHostControllerInterface")]
        #[unsafe(method(controllerInterface))]
        #[unsafe(method_family = none)]
        pub unsafe fn controllerInterface(&self) -> Retained<IOUSBHostControllerInterface>;
    );
}

/// Methods declared on superclass `NSObject`.
impl IOUSBHostCIDeviceStateMachine {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
