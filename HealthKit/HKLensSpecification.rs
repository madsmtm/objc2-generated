//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    /// An object subclass representing common lens specification
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/healthkit/hklensspecification?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct HKLensSpecification;
);

unsafe impl Send for HKLensSpecification {}

unsafe impl Sync for HKLensSpecification {}

extern_conformance!(
    unsafe impl NSObjectProtocol for HKLensSpecification {}
);

impl HKLensSpecification {
    extern_methods!(
        #[cfg(feature = "HKQuantity")]
        /// The lens power to correct nearsightedness or farsightedness. (-) means nearsighted while (+) farsighted.
        ///
        /// This property is not atomic.
        #[unsafe(method(sphere))]
        #[unsafe(method_family = none)]
        pub unsafe fn sphere(&self) -> Retained<HKQuantity>;

        #[cfg(feature = "HKQuantity")]
        /// The lens power required to correct astigmatism. Can be positive or negative.
        ///
        /// This property is not atomic.
        #[unsafe(method(cylinder))]
        #[unsafe(method_family = none)]
        pub unsafe fn cylinder(&self) -> Option<Retained<HKQuantity>>;

        #[cfg(feature = "HKQuantity")]
        /// The angle along which cylindrical power should be positioned to correct astigmatism
        ///
        /// This property is not atomic.
        #[unsafe(method(axis))]
        #[unsafe(method_family = none)]
        pub unsafe fn axis(&self) -> Option<Retained<HKQuantity>>;

        #[cfg(feature = "HKQuantity")]
        /// The power adjustment applied to a multifocal lens to correct presbyopia
        ///
        /// This property is not atomic.
        #[unsafe(method(addPower))]
        #[unsafe(method_family = none)]
        pub unsafe fn addPower(&self) -> Option<Retained<HKQuantity>>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
