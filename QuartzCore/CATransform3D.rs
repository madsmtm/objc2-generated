//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/quartzcore/catransform3d?language=objc)
#[cfg(feature = "objc2-core-foundation")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CATransform3D {
    pub m11: CGFloat,
    pub m12: CGFloat,
    pub m13: CGFloat,
    pub m14: CGFloat,
    pub m21: CGFloat,
    pub m22: CGFloat,
    pub m23: CGFloat,
    pub m24: CGFloat,
    pub m31: CGFloat,
    pub m32: CGFloat,
    pub m33: CGFloat,
    pub m34: CGFloat,
    pub m41: CGFloat,
    pub m42: CGFloat,
    pub m43: CGFloat,
    pub m44: CGFloat,
}

#[cfg(feature = "objc2-core-foundation")]
unsafe impl Encode for CATransform3D {
    const ENCODING: Encoding = Encoding::Struct(
        "CATransform3D",
        &[
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
            <CGFloat>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2-core-foundation")]
unsafe impl RefEncode for CATransform3D {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/quartzcore/catransform3didentity?language=objc)
    #[cfg(feature = "objc2-core-foundation")]
    pub static CATransform3DIdentity: CATransform3D;
}

#[cfg(feature = "objc2-core-foundation")]
impl CATransform3D {
    #[doc(alias = "CATransform3DIsIdentity")]
    #[cfg(feature = "objc2-core-foundation")]
    #[inline]
    pub fn is_identity(self) -> bool {
        extern "C-unwind" {
            fn CATransform3DIsIdentity(t: CATransform3D) -> bool;
        }
        unsafe { CATransform3DIsIdentity(self) }
    }

    #[doc(alias = "CATransform3DEqualToTransform")]
    #[cfg(feature = "objc2-core-foundation")]
    #[inline]
    pub fn equal_to_transform(self, b: CATransform3D) -> bool {
        extern "C-unwind" {
            fn CATransform3DEqualToTransform(a: CATransform3D, b: CATransform3D) -> bool;
        }
        unsafe { CATransform3DEqualToTransform(self, b) }
    }

    #[doc(alias = "CATransform3DMakeTranslation")]
    #[cfg(feature = "objc2-core-foundation")]
    #[inline]
    pub fn new_translation(tx: CGFloat, ty: CGFloat, tz: CGFloat) -> CATransform3D {
        extern "C-unwind" {
            fn CATransform3DMakeTranslation(tx: CGFloat, ty: CGFloat, tz: CGFloat)
                -> CATransform3D;
        }
        unsafe { CATransform3DMakeTranslation(tx, ty, tz) }
    }

    #[doc(alias = "CATransform3DMakeScale")]
    #[cfg(feature = "objc2-core-foundation")]
    #[inline]
    pub fn new_scale(sx: CGFloat, sy: CGFloat, sz: CGFloat) -> CATransform3D {
        extern "C-unwind" {
            fn CATransform3DMakeScale(sx: CGFloat, sy: CGFloat, sz: CGFloat) -> CATransform3D;
        }
        unsafe { CATransform3DMakeScale(sx, sy, sz) }
    }

    #[doc(alias = "CATransform3DMakeRotation")]
    #[cfg(feature = "objc2-core-foundation")]
    #[inline]
    pub fn new_rotation(angle: CGFloat, x: CGFloat, y: CGFloat, z: CGFloat) -> CATransform3D {
        extern "C-unwind" {
            fn CATransform3DMakeRotation(
                angle: CGFloat,
                x: CGFloat,
                y: CGFloat,
                z: CGFloat,
            ) -> CATransform3D;
        }
        unsafe { CATransform3DMakeRotation(angle, x, y, z) }
    }

    #[doc(alias = "CATransform3DTranslate")]
    #[cfg(feature = "objc2-core-foundation")]
    #[inline]
    pub fn translate(self, tx: CGFloat, ty: CGFloat, tz: CGFloat) -> CATransform3D {
        extern "C-unwind" {
            fn CATransform3DTranslate(
                t: CATransform3D,
                tx: CGFloat,
                ty: CGFloat,
                tz: CGFloat,
            ) -> CATransform3D;
        }
        unsafe { CATransform3DTranslate(self, tx, ty, tz) }
    }

    #[doc(alias = "CATransform3DScale")]
    #[cfg(feature = "objc2-core-foundation")]
    #[inline]
    pub fn scale(self, sx: CGFloat, sy: CGFloat, sz: CGFloat) -> CATransform3D {
        extern "C-unwind" {
            fn CATransform3DScale(
                t: CATransform3D,
                sx: CGFloat,
                sy: CGFloat,
                sz: CGFloat,
            ) -> CATransform3D;
        }
        unsafe { CATransform3DScale(self, sx, sy, sz) }
    }

    #[doc(alias = "CATransform3DRotate")]
    #[cfg(feature = "objc2-core-foundation")]
    #[inline]
    pub fn rotate(self, angle: CGFloat, x: CGFloat, y: CGFloat, z: CGFloat) -> CATransform3D {
        extern "C-unwind" {
            fn CATransform3DRotate(
                t: CATransform3D,
                angle: CGFloat,
                x: CGFloat,
                y: CGFloat,
                z: CGFloat,
            ) -> CATransform3D;
        }
        unsafe { CATransform3DRotate(self, angle, x, y, z) }
    }

    #[doc(alias = "CATransform3DConcat")]
    #[cfg(feature = "objc2-core-foundation")]
    #[inline]
    pub fn concat(self, b: CATransform3D) -> CATransform3D {
        extern "C-unwind" {
            fn CATransform3DConcat(a: CATransform3D, b: CATransform3D) -> CATransform3D;
        }
        unsafe { CATransform3DConcat(self, b) }
    }

    #[doc(alias = "CATransform3DInvert")]
    #[cfg(feature = "objc2-core-foundation")]
    #[inline]
    pub fn invert(self) -> CATransform3D {
        extern "C-unwind" {
            fn CATransform3DInvert(t: CATransform3D) -> CATransform3D;
        }
        unsafe { CATransform3DInvert(self) }
    }

    #[doc(alias = "CATransform3DMakeAffineTransform")]
    #[cfg(feature = "objc2-core-foundation")]
    #[inline]
    pub fn new_affine_transform(m: CGAffineTransform) -> CATransform3D {
        extern "C-unwind" {
            fn CATransform3DMakeAffineTransform(m: CGAffineTransform) -> CATransform3D;
        }
        unsafe { CATransform3DMakeAffineTransform(m) }
    }

    #[doc(alias = "CATransform3DIsAffine")]
    #[cfg(feature = "objc2-core-foundation")]
    #[inline]
    pub fn is_affine(self) -> bool {
        extern "C-unwind" {
            fn CATransform3DIsAffine(t: CATransform3D) -> bool;
        }
        unsafe { CATransform3DIsAffine(self) }
    }

    #[doc(alias = "CATransform3DGetAffineTransform")]
    #[cfg(feature = "objc2-core-foundation")]
    #[inline]
    pub fn affine_transform(self) -> CGAffineTransform {
        extern "C-unwind" {
            fn CATransform3DGetAffineTransform(t: CATransform3D) -> CGAffineTransform;
        }
        unsafe { CATransform3DGetAffineTransform(self) }
    }
}

mod private_NSValueCATransform3DAdditions {
    pub trait Sealed {}
}

/// Category "CATransform3DAdditions" on [`NSValue`].
#[doc(alias = "CATransform3DAdditions")]
pub unsafe trait NSValueCATransform3DAdditions:
    ClassType + Sized + private_NSValueCATransform3DAdditions::Sealed
{
    extern_methods!(
        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(valueWithCATransform3D:))]
        #[unsafe(method_family = none)]
        unsafe fn value_with_ca_transform3_d(t: CATransform3D) -> Retained<NSValue>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(CATransform3DValue))]
        #[unsafe(method_family = none)]
        unsafe fn ca_transform3_d_value(&self) -> CATransform3D;
    );
}

impl private_NSValueCATransform3DAdditions::Sealed for NSValue {}
unsafe impl NSValueCATransform3DAdditions for NSValue {}

#[cfg(feature = "objc2-core-foundation")]
#[deprecated = "renamed to `CATransform3D::is_identity`"]
#[inline]
pub extern "C-unwind" fn CATransform3DIsIdentity(t: CATransform3D) -> bool {
    extern "C-unwind" {
        fn CATransform3DIsIdentity(t: CATransform3D) -> bool;
    }
    unsafe { CATransform3DIsIdentity(t) }
}

#[cfg(feature = "objc2-core-foundation")]
#[deprecated = "renamed to `CATransform3D::equal_to_transform`"]
#[inline]
pub extern "C-unwind" fn CATransform3DEqualToTransform(a: CATransform3D, b: CATransform3D) -> bool {
    extern "C-unwind" {
        fn CATransform3DEqualToTransform(a: CATransform3D, b: CATransform3D) -> bool;
    }
    unsafe { CATransform3DEqualToTransform(a, b) }
}

#[cfg(feature = "objc2-core-foundation")]
#[deprecated = "renamed to `CATransform3D::new_translation`"]
#[inline]
pub extern "C-unwind" fn CATransform3DMakeTranslation(
    tx: CGFloat,
    ty: CGFloat,
    tz: CGFloat,
) -> CATransform3D {
    extern "C-unwind" {
        fn CATransform3DMakeTranslation(tx: CGFloat, ty: CGFloat, tz: CGFloat) -> CATransform3D;
    }
    unsafe { CATransform3DMakeTranslation(tx, ty, tz) }
}

#[cfg(feature = "objc2-core-foundation")]
#[deprecated = "renamed to `CATransform3D::new_scale`"]
#[inline]
pub extern "C-unwind" fn CATransform3DMakeScale(
    sx: CGFloat,
    sy: CGFloat,
    sz: CGFloat,
) -> CATransform3D {
    extern "C-unwind" {
        fn CATransform3DMakeScale(sx: CGFloat, sy: CGFloat, sz: CGFloat) -> CATransform3D;
    }
    unsafe { CATransform3DMakeScale(sx, sy, sz) }
}

#[cfg(feature = "objc2-core-foundation")]
#[deprecated = "renamed to `CATransform3D::new_rotation`"]
#[inline]
pub extern "C-unwind" fn CATransform3DMakeRotation(
    angle: CGFloat,
    x: CGFloat,
    y: CGFloat,
    z: CGFloat,
) -> CATransform3D {
    extern "C-unwind" {
        fn CATransform3DMakeRotation(
            angle: CGFloat,
            x: CGFloat,
            y: CGFloat,
            z: CGFloat,
        ) -> CATransform3D;
    }
    unsafe { CATransform3DMakeRotation(angle, x, y, z) }
}

#[cfg(feature = "objc2-core-foundation")]
#[deprecated = "renamed to `CATransform3D::translate`"]
#[inline]
pub extern "C-unwind" fn CATransform3DTranslate(
    t: CATransform3D,
    tx: CGFloat,
    ty: CGFloat,
    tz: CGFloat,
) -> CATransform3D {
    extern "C-unwind" {
        fn CATransform3DTranslate(
            t: CATransform3D,
            tx: CGFloat,
            ty: CGFloat,
            tz: CGFloat,
        ) -> CATransform3D;
    }
    unsafe { CATransform3DTranslate(t, tx, ty, tz) }
}

#[cfg(feature = "objc2-core-foundation")]
#[deprecated = "renamed to `CATransform3D::scale`"]
#[inline]
pub extern "C-unwind" fn CATransform3DScale(
    t: CATransform3D,
    sx: CGFloat,
    sy: CGFloat,
    sz: CGFloat,
) -> CATransform3D {
    extern "C-unwind" {
        fn CATransform3DScale(
            t: CATransform3D,
            sx: CGFloat,
            sy: CGFloat,
            sz: CGFloat,
        ) -> CATransform3D;
    }
    unsafe { CATransform3DScale(t, sx, sy, sz) }
}

#[cfg(feature = "objc2-core-foundation")]
#[deprecated = "renamed to `CATransform3D::rotate`"]
#[inline]
pub extern "C-unwind" fn CATransform3DRotate(
    t: CATransform3D,
    angle: CGFloat,
    x: CGFloat,
    y: CGFloat,
    z: CGFloat,
) -> CATransform3D {
    extern "C-unwind" {
        fn CATransform3DRotate(
            t: CATransform3D,
            angle: CGFloat,
            x: CGFloat,
            y: CGFloat,
            z: CGFloat,
        ) -> CATransform3D;
    }
    unsafe { CATransform3DRotate(t, angle, x, y, z) }
}

#[cfg(feature = "objc2-core-foundation")]
#[deprecated = "renamed to `CATransform3D::concat`"]
#[inline]
pub extern "C-unwind" fn CATransform3DConcat(a: CATransform3D, b: CATransform3D) -> CATransform3D {
    extern "C-unwind" {
        fn CATransform3DConcat(a: CATransform3D, b: CATransform3D) -> CATransform3D;
    }
    unsafe { CATransform3DConcat(a, b) }
}

#[cfg(feature = "objc2-core-foundation")]
#[deprecated = "renamed to `CATransform3D::invert`"]
#[inline]
pub extern "C-unwind" fn CATransform3DInvert(t: CATransform3D) -> CATransform3D {
    extern "C-unwind" {
        fn CATransform3DInvert(t: CATransform3D) -> CATransform3D;
    }
    unsafe { CATransform3DInvert(t) }
}

#[cfg(feature = "objc2-core-foundation")]
#[deprecated = "renamed to `CATransform3D::new_affine_transform`"]
#[inline]
pub extern "C-unwind" fn CATransform3DMakeAffineTransform(m: CGAffineTransform) -> CATransform3D {
    extern "C-unwind" {
        fn CATransform3DMakeAffineTransform(m: CGAffineTransform) -> CATransform3D;
    }
    unsafe { CATransform3DMakeAffineTransform(m) }
}

#[cfg(feature = "objc2-core-foundation")]
#[deprecated = "renamed to `CATransform3D::is_affine`"]
#[inline]
pub extern "C-unwind" fn CATransform3DIsAffine(t: CATransform3D) -> bool {
    extern "C-unwind" {
        fn CATransform3DIsAffine(t: CATransform3D) -> bool;
    }
    unsafe { CATransform3DIsAffine(t) }
}

#[cfg(feature = "objc2-core-foundation")]
#[deprecated = "renamed to `CATransform3D::affine_transform`"]
#[inline]
pub extern "C-unwind" fn CATransform3DGetAffineTransform(t: CATransform3D) -> CGAffineTransform {
    extern "C-unwind" {
        fn CATransform3DGetAffineTransform(t: CATransform3D) -> CGAffineTransform;
    }
    unsafe { CATransform3DGetAffineTransform(t) }
}
