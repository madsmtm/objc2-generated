//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/quartzcore/caemittercell?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CAEmitterCell;
);

#[cfg(feature = "CAMediaTiming")]
extern_conformance!(
    unsafe impl CAMediaTiming for CAEmitterCell {}
);

extern_conformance!(
    unsafe impl NSCoding for CAEmitterCell {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for CAEmitterCell {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for CAEmitterCell {}
);

impl CAEmitterCell {
    extern_methods!(
        #[unsafe(method(emitterCell))]
        #[unsafe(method_family = none)]
        pub fn emitter_cell() -> Retained<Self>;

        #[unsafe(method(defaultValueForKey:))]
        #[unsafe(method_family = none)]
        pub fn default_value_for_key(key: &NSString) -> Option<Retained<AnyObject>>;

        #[unsafe(method(shouldArchiveValueForKey:))]
        #[unsafe(method_family = none)]
        pub fn should_archive_value_for_key(&self, key: &NSString) -> bool;

        #[unsafe(method(name))]
        #[unsafe(method_family = none)]
        pub fn name(&self) -> Option<Retained<NSString>>;

        /// Setter for [`name`][Self::name].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setName:))]
        #[unsafe(method_family = none)]
        pub fn set_name(&self, name: Option<&NSString>);

        #[unsafe(method(isEnabled))]
        #[unsafe(method_family = none)]
        pub fn is_enabled(&self) -> bool;

        /// Setter for [`isEnabled`][Self::isEnabled].
        #[unsafe(method(setEnabled:))]
        #[unsafe(method_family = none)]
        pub fn set_enabled(&self, enabled: bool);

        #[unsafe(method(birthRate))]
        #[unsafe(method_family = none)]
        pub fn birth_rate(&self) -> c_float;

        /// Setter for [`birthRate`][Self::birthRate].
        #[unsafe(method(setBirthRate:))]
        #[unsafe(method_family = none)]
        pub fn set_birth_rate(&self, birth_rate: c_float);

        #[unsafe(method(lifetime))]
        #[unsafe(method_family = none)]
        pub fn lifetime(&self) -> c_float;

        /// Setter for [`lifetime`][Self::lifetime].
        #[unsafe(method(setLifetime:))]
        #[unsafe(method_family = none)]
        pub fn set_lifetime(&self, lifetime: c_float);

        #[unsafe(method(lifetimeRange))]
        #[unsafe(method_family = none)]
        pub fn lifetime_range(&self) -> c_float;

        /// Setter for [`lifetimeRange`][Self::lifetimeRange].
        #[unsafe(method(setLifetimeRange:))]
        #[unsafe(method_family = none)]
        pub fn set_lifetime_range(&self, lifetime_range: c_float);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(emissionLatitude))]
        #[unsafe(method_family = none)]
        pub fn emission_latitude(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`emissionLatitude`][Self::emissionLatitude].
        #[unsafe(method(setEmissionLatitude:))]
        #[unsafe(method_family = none)]
        pub fn set_emission_latitude(&self, emission_latitude: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(emissionLongitude))]
        #[unsafe(method_family = none)]
        pub fn emission_longitude(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`emissionLongitude`][Self::emissionLongitude].
        #[unsafe(method(setEmissionLongitude:))]
        #[unsafe(method_family = none)]
        pub fn set_emission_longitude(&self, emission_longitude: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(emissionRange))]
        #[unsafe(method_family = none)]
        pub fn emission_range(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`emissionRange`][Self::emissionRange].
        #[unsafe(method(setEmissionRange:))]
        #[unsafe(method_family = none)]
        pub fn set_emission_range(&self, emission_range: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(velocity))]
        #[unsafe(method_family = none)]
        pub fn velocity(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`velocity`][Self::velocity].
        #[unsafe(method(setVelocity:))]
        #[unsafe(method_family = none)]
        pub fn set_velocity(&self, velocity: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(velocityRange))]
        #[unsafe(method_family = none)]
        pub fn velocity_range(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`velocityRange`][Self::velocityRange].
        #[unsafe(method(setVelocityRange:))]
        #[unsafe(method_family = none)]
        pub fn set_velocity_range(&self, velocity_range: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(xAcceleration))]
        #[unsafe(method_family = none)]
        pub fn x_acceleration(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`xAcceleration`][Self::xAcceleration].
        #[unsafe(method(setXAcceleration:))]
        #[unsafe(method_family = none)]
        pub fn set_x_acceleration(&self, x_acceleration: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(yAcceleration))]
        #[unsafe(method_family = none)]
        pub fn y_acceleration(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`yAcceleration`][Self::yAcceleration].
        #[unsafe(method(setYAcceleration:))]
        #[unsafe(method_family = none)]
        pub fn set_y_acceleration(&self, y_acceleration: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(zAcceleration))]
        #[unsafe(method_family = none)]
        pub fn z_acceleration(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`zAcceleration`][Self::zAcceleration].
        #[unsafe(method(setZAcceleration:))]
        #[unsafe(method_family = none)]
        pub fn set_z_acceleration(&self, z_acceleration: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(scale))]
        #[unsafe(method_family = none)]
        pub fn scale(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`scale`][Self::scale].
        #[unsafe(method(setScale:))]
        #[unsafe(method_family = none)]
        pub fn set_scale(&self, scale: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(scaleRange))]
        #[unsafe(method_family = none)]
        pub fn scale_range(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`scaleRange`][Self::scaleRange].
        #[unsafe(method(setScaleRange:))]
        #[unsafe(method_family = none)]
        pub fn set_scale_range(&self, scale_range: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(scaleSpeed))]
        #[unsafe(method_family = none)]
        pub fn scale_speed(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`scaleSpeed`][Self::scaleSpeed].
        #[unsafe(method(setScaleSpeed:))]
        #[unsafe(method_family = none)]
        pub fn set_scale_speed(&self, scale_speed: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(spin))]
        #[unsafe(method_family = none)]
        pub fn spin(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`spin`][Self::spin].
        #[unsafe(method(setSpin:))]
        #[unsafe(method_family = none)]
        pub fn set_spin(&self, spin: CGFloat);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(spinRange))]
        #[unsafe(method_family = none)]
        pub fn spin_range(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`spinRange`][Self::spinRange].
        #[unsafe(method(setSpinRange:))]
        #[unsafe(method_family = none)]
        pub fn set_spin_range(&self, spin_range: CGFloat);

        #[cfg(feature = "objc2-core-graphics")]
        #[unsafe(method(color))]
        #[unsafe(method_family = none)]
        pub fn color(&self) -> Option<Retained<CGColor>>;

        #[cfg(feature = "objc2-core-graphics")]
        /// Setter for [`color`][Self::color].
        #[unsafe(method(setColor:))]
        #[unsafe(method_family = none)]
        pub fn set_color(&self, color: Option<&CGColor>);

        #[unsafe(method(redRange))]
        #[unsafe(method_family = none)]
        pub fn red_range(&self) -> c_float;

        /// Setter for [`redRange`][Self::redRange].
        #[unsafe(method(setRedRange:))]
        #[unsafe(method_family = none)]
        pub fn set_red_range(&self, red_range: c_float);

        #[unsafe(method(greenRange))]
        #[unsafe(method_family = none)]
        pub fn green_range(&self) -> c_float;

        /// Setter for [`greenRange`][Self::greenRange].
        #[unsafe(method(setGreenRange:))]
        #[unsafe(method_family = none)]
        pub fn set_green_range(&self, green_range: c_float);

        #[unsafe(method(blueRange))]
        #[unsafe(method_family = none)]
        pub fn blue_range(&self) -> c_float;

        /// Setter for [`blueRange`][Self::blueRange].
        #[unsafe(method(setBlueRange:))]
        #[unsafe(method_family = none)]
        pub fn set_blue_range(&self, blue_range: c_float);

        #[unsafe(method(alphaRange))]
        #[unsafe(method_family = none)]
        pub fn alpha_range(&self) -> c_float;

        /// Setter for [`alphaRange`][Self::alphaRange].
        #[unsafe(method(setAlphaRange:))]
        #[unsafe(method_family = none)]
        pub fn set_alpha_range(&self, alpha_range: c_float);

        #[unsafe(method(redSpeed))]
        #[unsafe(method_family = none)]
        pub fn red_speed(&self) -> c_float;

        /// Setter for [`redSpeed`][Self::redSpeed].
        #[unsafe(method(setRedSpeed:))]
        #[unsafe(method_family = none)]
        pub fn set_red_speed(&self, red_speed: c_float);

        #[unsafe(method(greenSpeed))]
        #[unsafe(method_family = none)]
        pub fn green_speed(&self) -> c_float;

        /// Setter for [`greenSpeed`][Self::greenSpeed].
        #[unsafe(method(setGreenSpeed:))]
        #[unsafe(method_family = none)]
        pub fn set_green_speed(&self, green_speed: c_float);

        #[unsafe(method(blueSpeed))]
        #[unsafe(method_family = none)]
        pub fn blue_speed(&self) -> c_float;

        /// Setter for [`blueSpeed`][Self::blueSpeed].
        #[unsafe(method(setBlueSpeed:))]
        #[unsafe(method_family = none)]
        pub fn set_blue_speed(&self, blue_speed: c_float);

        #[unsafe(method(alphaSpeed))]
        #[unsafe(method_family = none)]
        pub fn alpha_speed(&self) -> c_float;

        /// Setter for [`alphaSpeed`][Self::alphaSpeed].
        #[unsafe(method(setAlphaSpeed:))]
        #[unsafe(method_family = none)]
        pub fn set_alpha_speed(&self, alpha_speed: c_float);

        #[unsafe(method(contents))]
        #[unsafe(method_family = none)]
        pub fn contents(&self) -> Option<Retained<AnyObject>>;

        /// Setter for [`contents`][Self::contents].
        ///
        /// # Safety
        ///
        /// `contents` should be of the correct type.
        #[unsafe(method(setContents:))]
        #[unsafe(method_family = none)]
        pub unsafe fn set_contents(&self, contents: Option<&AnyObject>);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(contentsRect))]
        #[unsafe(method_family = none)]
        pub fn contents_rect(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`contentsRect`][Self::contentsRect].
        #[unsafe(method(setContentsRect:))]
        #[unsafe(method_family = none)]
        pub fn set_contents_rect(&self, contents_rect: CGRect);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(contentsScale))]
        #[unsafe(method_family = none)]
        pub fn contents_scale(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`contentsScale`][Self::contentsScale].
        #[unsafe(method(setContentsScale:))]
        #[unsafe(method_family = none)]
        pub fn set_contents_scale(&self, contents_scale: CGFloat);

        #[unsafe(method(minificationFilter))]
        #[unsafe(method_family = none)]
        pub fn minification_filter(&self) -> Retained<NSString>;

        /// Setter for [`minificationFilter`][Self::minificationFilter].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setMinificationFilter:))]
        #[unsafe(method_family = none)]
        pub fn set_minification_filter(&self, minification_filter: &NSString);

        #[unsafe(method(magnificationFilter))]
        #[unsafe(method_family = none)]
        pub fn magnification_filter(&self) -> Retained<NSString>;

        /// Setter for [`magnificationFilter`][Self::magnificationFilter].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setMagnificationFilter:))]
        #[unsafe(method_family = none)]
        pub fn set_magnification_filter(&self, magnification_filter: &NSString);

        #[unsafe(method(minificationFilterBias))]
        #[unsafe(method_family = none)]
        pub fn minification_filter_bias(&self) -> c_float;

        /// Setter for [`minificationFilterBias`][Self::minificationFilterBias].
        #[unsafe(method(setMinificationFilterBias:))]
        #[unsafe(method_family = none)]
        pub fn set_minification_filter_bias(&self, minification_filter_bias: c_float);

        #[unsafe(method(emitterCells))]
        #[unsafe(method_family = none)]
        pub fn emitter_cells(&self) -> Option<Retained<NSArray<CAEmitterCell>>>;

        /// Setter for [`emitterCells`][Self::emitterCells].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setEmitterCells:))]
        #[unsafe(method_family = none)]
        pub fn set_emitter_cells(&self, emitter_cells: Option<&NSArray<CAEmitterCell>>);

        #[unsafe(method(style))]
        #[unsafe(method_family = none)]
        pub fn style(&self) -> Option<Retained<NSDictionary>>;

        /// Setter for [`style`][Self::style].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        ///
        /// # Safety
        ///
        /// `style` generic should be of the correct type.
        #[unsafe(method(setStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn set_style(&self, style: Option<&NSDictionary>);
    );
}

/// Methods declared on superclass `NSObject`.
impl CAEmitterCell {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub fn new() -> Retained<Self>;
    );
}

impl DefaultRetained for CAEmitterCell {
    #[inline]
    fn default_retained() -> Retained<Self> {
        Self::new()
    }
}
