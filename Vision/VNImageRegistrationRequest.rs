//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;
#[cfg(feature = "objc2-core-image")]
use objc2_core_image::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
#[cfg(feature = "objc2-core-video")]
use objc2_core_video::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-image-io")]
use objc2_image_io::*;

use crate::*;

extern_class!(
    /// A request that will calculate a transformation for morphing a "floating" image onto an unchanging "reference" image.
    ///
    ///
    /// The request is created with the targeted image acting as the floating image. Processing the request will calculate the transformations that morph the floating image onto the reference image.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/vision/vnimageregistrationrequest?language=objc)
    #[unsafe(super(VNTargetedImageRequest, VNImageBasedRequest, VNRequest, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
    pub struct VNImageRegistrationRequest;
);

#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
extern_conformance!(
    unsafe impl NSCopying for VNImageRegistrationRequest {}
);

#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
unsafe impl CopyingHelper for VNImageRegistrationRequest {
    type Result = Self;
}

#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
extern_conformance!(
    unsafe impl NSObjectProtocol for VNImageRegistrationRequest {}
);

#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
impl VNImageRegistrationRequest {
    extern_methods!();
}

/// Methods declared on superclass `VNTargetedImageRequest`.
#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
impl VNImageRegistrationRequest {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "block2")]
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithCompletionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCompletionHandler(
            this: Allocated<Self>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-core-video"))]
        /// Create a new request that targets an image in a pixel buffer.
        ///
        ///
        /// Parameter `pixelBuffer`: The pixel buffer containing the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCVPixelBuffer:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCVPixelBuffer_options(
            this: Allocated<Self>,
            pixel_buffer: &CVPixelBuffer,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-video"
        ))]
        /// Create a new request that targets an image in a pixel buffer.
        ///
        ///
        /// Parameter `pixelBuffer`: The pixel buffer containing the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCVPixelBuffer:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCVPixelBuffer_options_completionHandler(
            this: Allocated<Self>,
            pixel_buffer: &CVPixelBuffer,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "objc2-core-video",
            feature = "objc2-image-io"
        ))]
        /// Create a new request that targets an image in a pixel buffer.
        ///
        ///
        /// Parameter `pixelBuffer`: The pixel buffer containing the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCVPixelBuffer:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCVPixelBuffer_orientation_options(
            this: Allocated<Self>,
            pixel_buffer: &CVPixelBuffer,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-video",
            feature = "objc2-image-io"
        ))]
        /// Create a new request that targets an image in a pixel buffer.
        ///
        ///
        /// Parameter `pixelBuffer`: The pixel buffer containing the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCVPixelBuffer:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCVPixelBuffer_orientation_options_completionHandler(
            this: Allocated<Self>,
            pixel_buffer: &CVPixelBuffer,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-core-graphics"))]
        /// Create a new request with a targeted CGImage.
        ///
        ///
        /// Parameter `cgImage`: The CGImageRef of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCGImage:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCGImage_options(
            this: Allocated<Self>,
            cg_image: &CGImage,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-graphics"
        ))]
        /// Create a new request with a targeted CGImage.
        ///
        ///
        /// Parameter `cgImage`: The CGImageRef of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCGImage:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCGImage_options_completionHandler(
            this: Allocated<Self>,
            cg_image: &CGImage,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "objc2-core-graphics",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CGImage.
        ///
        ///
        /// Parameter `cgImage`: The CGImageRef of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCGImage:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCGImage_orientation_options(
            this: Allocated<Self>,
            cg_image: &CGImage,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-graphics",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CGImage.
        ///
        ///
        /// Parameter `cgImage`: The CGImageRef of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCGImage:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCGImage_orientation_options_completionHandler(
            this: Allocated<Self>,
            cg_image: &CGImage,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-core-image"))]
        /// Create a new request with a targeted CIImage.
        ///
        ///
        /// Parameter `ciImage`: The CIImage of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCIImage:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCIImage_options(
            this: Allocated<Self>,
            ci_image: &CIImage,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-image"
        ))]
        /// Create a new request with a targeted CIImage.
        ///
        ///
        /// Parameter `ciImage`: The CIImage of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCIImage:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCIImage_options_completionHandler(
            this: Allocated<Self>,
            ci_image: &CIImage,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "objc2-core-image",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CIImage.
        ///
        ///
        /// Parameter `ciImage`: The CIImage of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCIImage:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCIImage_orientation_options(
            this: Allocated<Self>,
            ci_image: &CIImage,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-image",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CIImage.
        ///
        ///
        /// Parameter `ciImage`: The CIImage of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCIImage:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCIImage_orientation_options_completionHandler(
            this: Allocated<Self>,
            ci_image: &CIImage,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(feature = "VNRequestHandler")]
        /// Create a new request with a targeted image URL.
        ///
        ///
        /// Parameter `imageURL`: The URL of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedImageURL:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageURL_options(
            this: Allocated<Self>,
            image_url: &NSURL,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "block2"))]
        /// Create a new request with a targeted image URL.
        ///
        ///
        /// Parameter `imageURL`: The URL of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedImageURL:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageURL_options_completionHandler(
            this: Allocated<Self>,
            image_url: &NSURL,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-image-io"))]
        /// Create a new request with a targeted image URL.
        ///
        ///
        /// Parameter `imageURL`: The URL of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedImageURL:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageURL_orientation_options(
            this: Allocated<Self>,
            image_url: &NSURL,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted image URL.
        ///
        ///
        /// Parameter `imageURL`: The URL of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedImageURL:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageURL_orientation_options_completionHandler(
            this: Allocated<Self>,
            image_url: &NSURL,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(feature = "VNRequestHandler")]
        /// Create a new request with a targeted image data.
        ///
        ///
        /// Parameter `imageData`: The data of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedImageData:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageData_options(
            this: Allocated<Self>,
            image_data: &NSData,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "block2"))]
        /// Create a new request with a targeted image data.
        ///
        ///
        /// Parameter `imageData`: The data of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedImageData:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageData_options_completionHandler(
            this: Allocated<Self>,
            image_data: &NSData,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-image-io"))]
        /// Create a new request with a targeted image data.
        ///
        ///
        /// Parameter `imageData`: The data of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedImageData:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageData_orientation_options(
            this: Allocated<Self>,
            image_data: &NSData,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted image data.
        ///
        ///
        /// Parameter `imageData`: The data of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedImageData:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageData_orientation_options_completionHandler(
            this: Allocated<Self>,
            image_data: &NSData,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-core-media"))]
        /// Create a new request with a targeted CMSampleBuffer.
        ///
        ///
        /// Parameter `sampleBuffer`: The CMSampleBuffer containing the CVImageBuffer to be used by the request.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCMSampleBuffer:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCMSampleBuffer_options(
            this: Allocated<Self>,
            sample_buffer: &CMSampleBuffer,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-media"
        ))]
        /// Create a new request with a targeted CMSampleBuffer.
        ///
        ///
        /// Parameter `sampleBuffer`: The CMSampleBuffer containing the CVImageBuffer to be used by the request.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked after the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCMSampleBuffer:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCMSampleBuffer_options_completionHandler(
            this: Allocated<Self>,
            sample_buffer: &CMSampleBuffer,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "objc2-core-media",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CMSampleBuffer.
        ///
        ///
        /// Parameter `sampleBuffer`: The CMSampleBuffer containing the CVImageBuffer to be used by the request.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCMSampleBuffer:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCMSampleBuffer_orientation_options(
            this: Allocated<Self>,
            sample_buffer: &CMSampleBuffer,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-media",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CMSampleBuffer.
        ///
        ///
        /// Parameter `sampleBuffer`: The CMSampleBuffer containing the CVImageBuffer to be used by the request.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked after the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCMSampleBuffer:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCMSampleBuffer_orientation_options_completionHandler(
            this: Allocated<Self>,
            sample_buffer: &CMSampleBuffer,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
impl VNImageRegistrationRequest {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// An image registration request that will calculate a translational transformation for morphing a "floating" image onto an unchanging "reference" image.
    ///
    ///
    /// The request is created with the targeted image acting as the floating image. Processing the request will calculate the affine transformations that morph the floating image onto the reference image.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/vision/vntranslationalimageregistrationrequest?language=objc)
    #[unsafe(super(
        VNImageRegistrationRequest,
        VNTargetedImageRequest,
        VNImageBasedRequest,
        VNRequest,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
    pub struct VNTranslationalImageRegistrationRequest;
);

#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
extern_conformance!(
    unsafe impl NSCopying for VNTranslationalImageRegistrationRequest {}
);

#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
unsafe impl CopyingHelper for VNTranslationalImageRegistrationRequest {
    type Result = Self;
}

#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
extern_conformance!(
    unsafe impl NSObjectProtocol for VNTranslationalImageRegistrationRequest {}
);

#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
impl VNTranslationalImageRegistrationRequest {
    extern_methods!(
        #[cfg(feature = "VNObservation")]
        /// VNImageTranslationAlignmentObservation results.
        #[unsafe(method(results))]
        #[unsafe(method_family = none)]
        pub unsafe fn results(
            &self,
        ) -> Option<Retained<NSArray<VNImageTranslationAlignmentObservation>>>;
    );
}

/// Methods declared on superclass `VNTargetedImageRequest`.
#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
impl VNTranslationalImageRegistrationRequest {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "block2")]
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithCompletionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCompletionHandler(
            this: Allocated<Self>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-core-video"))]
        /// Create a new request that targets an image in a pixel buffer.
        ///
        ///
        /// Parameter `pixelBuffer`: The pixel buffer containing the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCVPixelBuffer:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCVPixelBuffer_options(
            this: Allocated<Self>,
            pixel_buffer: &CVPixelBuffer,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-video"
        ))]
        /// Create a new request that targets an image in a pixel buffer.
        ///
        ///
        /// Parameter `pixelBuffer`: The pixel buffer containing the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCVPixelBuffer:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCVPixelBuffer_options_completionHandler(
            this: Allocated<Self>,
            pixel_buffer: &CVPixelBuffer,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "objc2-core-video",
            feature = "objc2-image-io"
        ))]
        /// Create a new request that targets an image in a pixel buffer.
        ///
        ///
        /// Parameter `pixelBuffer`: The pixel buffer containing the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCVPixelBuffer:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCVPixelBuffer_orientation_options(
            this: Allocated<Self>,
            pixel_buffer: &CVPixelBuffer,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-video",
            feature = "objc2-image-io"
        ))]
        /// Create a new request that targets an image in a pixel buffer.
        ///
        ///
        /// Parameter `pixelBuffer`: The pixel buffer containing the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCVPixelBuffer:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCVPixelBuffer_orientation_options_completionHandler(
            this: Allocated<Self>,
            pixel_buffer: &CVPixelBuffer,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-core-graphics"))]
        /// Create a new request with a targeted CGImage.
        ///
        ///
        /// Parameter `cgImage`: The CGImageRef of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCGImage:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCGImage_options(
            this: Allocated<Self>,
            cg_image: &CGImage,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-graphics"
        ))]
        /// Create a new request with a targeted CGImage.
        ///
        ///
        /// Parameter `cgImage`: The CGImageRef of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCGImage:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCGImage_options_completionHandler(
            this: Allocated<Self>,
            cg_image: &CGImage,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "objc2-core-graphics",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CGImage.
        ///
        ///
        /// Parameter `cgImage`: The CGImageRef of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCGImage:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCGImage_orientation_options(
            this: Allocated<Self>,
            cg_image: &CGImage,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-graphics",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CGImage.
        ///
        ///
        /// Parameter `cgImage`: The CGImageRef of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCGImage:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCGImage_orientation_options_completionHandler(
            this: Allocated<Self>,
            cg_image: &CGImage,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-core-image"))]
        /// Create a new request with a targeted CIImage.
        ///
        ///
        /// Parameter `ciImage`: The CIImage of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCIImage:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCIImage_options(
            this: Allocated<Self>,
            ci_image: &CIImage,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-image"
        ))]
        /// Create a new request with a targeted CIImage.
        ///
        ///
        /// Parameter `ciImage`: The CIImage of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCIImage:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCIImage_options_completionHandler(
            this: Allocated<Self>,
            ci_image: &CIImage,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "objc2-core-image",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CIImage.
        ///
        ///
        /// Parameter `ciImage`: The CIImage of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCIImage:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCIImage_orientation_options(
            this: Allocated<Self>,
            ci_image: &CIImage,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-image",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CIImage.
        ///
        ///
        /// Parameter `ciImage`: The CIImage of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCIImage:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCIImage_orientation_options_completionHandler(
            this: Allocated<Self>,
            ci_image: &CIImage,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(feature = "VNRequestHandler")]
        /// Create a new request with a targeted image URL.
        ///
        ///
        /// Parameter `imageURL`: The URL of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedImageURL:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageURL_options(
            this: Allocated<Self>,
            image_url: &NSURL,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "block2"))]
        /// Create a new request with a targeted image URL.
        ///
        ///
        /// Parameter `imageURL`: The URL of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedImageURL:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageURL_options_completionHandler(
            this: Allocated<Self>,
            image_url: &NSURL,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-image-io"))]
        /// Create a new request with a targeted image URL.
        ///
        ///
        /// Parameter `imageURL`: The URL of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedImageURL:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageURL_orientation_options(
            this: Allocated<Self>,
            image_url: &NSURL,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted image URL.
        ///
        ///
        /// Parameter `imageURL`: The URL of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedImageURL:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageURL_orientation_options_completionHandler(
            this: Allocated<Self>,
            image_url: &NSURL,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(feature = "VNRequestHandler")]
        /// Create a new request with a targeted image data.
        ///
        ///
        /// Parameter `imageData`: The data of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedImageData:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageData_options(
            this: Allocated<Self>,
            image_data: &NSData,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "block2"))]
        /// Create a new request with a targeted image data.
        ///
        ///
        /// Parameter `imageData`: The data of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedImageData:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageData_options_completionHandler(
            this: Allocated<Self>,
            image_data: &NSData,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-image-io"))]
        /// Create a new request with a targeted image data.
        ///
        ///
        /// Parameter `imageData`: The data of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedImageData:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageData_orientation_options(
            this: Allocated<Self>,
            image_data: &NSData,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted image data.
        ///
        ///
        /// Parameter `imageData`: The data of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedImageData:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageData_orientation_options_completionHandler(
            this: Allocated<Self>,
            image_data: &NSData,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-core-media"))]
        /// Create a new request with a targeted CMSampleBuffer.
        ///
        ///
        /// Parameter `sampleBuffer`: The CMSampleBuffer containing the CVImageBuffer to be used by the request.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCMSampleBuffer:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCMSampleBuffer_options(
            this: Allocated<Self>,
            sample_buffer: &CMSampleBuffer,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-media"
        ))]
        /// Create a new request with a targeted CMSampleBuffer.
        ///
        ///
        /// Parameter `sampleBuffer`: The CMSampleBuffer containing the CVImageBuffer to be used by the request.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked after the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCMSampleBuffer:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCMSampleBuffer_options_completionHandler(
            this: Allocated<Self>,
            sample_buffer: &CMSampleBuffer,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "objc2-core-media",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CMSampleBuffer.
        ///
        ///
        /// Parameter `sampleBuffer`: The CMSampleBuffer containing the CVImageBuffer to be used by the request.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCMSampleBuffer:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCMSampleBuffer_orientation_options(
            this: Allocated<Self>,
            sample_buffer: &CMSampleBuffer,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-media",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CMSampleBuffer.
        ///
        ///
        /// Parameter `sampleBuffer`: The CMSampleBuffer containing the CVImageBuffer to be used by the request.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked after the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCMSampleBuffer:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCMSampleBuffer_orientation_options_completionHandler(
            this: Allocated<Self>,
            sample_buffer: &CMSampleBuffer,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
impl VNTranslationalImageRegistrationRequest {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

/// [Apple's documentation](https://developer.apple.com/documentation/vision/vntranslationalimageregistrationrequestrevision1?language=objc)
pub static VNTranslationalImageRegistrationRequestRevision1: NSUInteger = 1;

extern_class!(
    /// An image registration request that will calculate a homographic transformation for morphing a "floating" image onto an unchanging "reference" image.
    ///
    ///
    /// The request is created with the targeted image acting as the floating image. Processing the request will calculate the matrix warp transform that morph the floating image onto the reference image.
    /// Note that the request will fail unless the pixel dimensions of the reference image do not exactly match the resolved region of interest of the floating image.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/vision/vnhomographicimageregistrationrequest?language=objc)
    #[unsafe(super(
        VNImageRegistrationRequest,
        VNTargetedImageRequest,
        VNImageBasedRequest,
        VNRequest,
        NSObject
    ))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
    pub struct VNHomographicImageRegistrationRequest;
);

#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
extern_conformance!(
    unsafe impl NSCopying for VNHomographicImageRegistrationRequest {}
);

#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
unsafe impl CopyingHelper for VNHomographicImageRegistrationRequest {
    type Result = Self;
}

#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
extern_conformance!(
    unsafe impl NSObjectProtocol for VNHomographicImageRegistrationRequest {}
);

#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
impl VNHomographicImageRegistrationRequest {
    extern_methods!(
        #[cfg(feature = "VNObservation")]
        /// VNImageHomographicAlignmentObservation results.
        #[unsafe(method(results))]
        #[unsafe(method_family = none)]
        pub unsafe fn results(
            &self,
        ) -> Option<Retained<NSArray<VNImageHomographicAlignmentObservation>>>;
    );
}

/// Methods declared on superclass `VNTargetedImageRequest`.
#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
impl VNHomographicImageRegistrationRequest {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "block2")]
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithCompletionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCompletionHandler(
            this: Allocated<Self>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-core-video"))]
        /// Create a new request that targets an image in a pixel buffer.
        ///
        ///
        /// Parameter `pixelBuffer`: The pixel buffer containing the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCVPixelBuffer:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCVPixelBuffer_options(
            this: Allocated<Self>,
            pixel_buffer: &CVPixelBuffer,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-video"
        ))]
        /// Create a new request that targets an image in a pixel buffer.
        ///
        ///
        /// Parameter `pixelBuffer`: The pixel buffer containing the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCVPixelBuffer:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCVPixelBuffer_options_completionHandler(
            this: Allocated<Self>,
            pixel_buffer: &CVPixelBuffer,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "objc2-core-video",
            feature = "objc2-image-io"
        ))]
        /// Create a new request that targets an image in a pixel buffer.
        ///
        ///
        /// Parameter `pixelBuffer`: The pixel buffer containing the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCVPixelBuffer:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCVPixelBuffer_orientation_options(
            this: Allocated<Self>,
            pixel_buffer: &CVPixelBuffer,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-video",
            feature = "objc2-image-io"
        ))]
        /// Create a new request that targets an image in a pixel buffer.
        ///
        ///
        /// Parameter `pixelBuffer`: The pixel buffer containing the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCVPixelBuffer:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCVPixelBuffer_orientation_options_completionHandler(
            this: Allocated<Self>,
            pixel_buffer: &CVPixelBuffer,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-core-graphics"))]
        /// Create a new request with a targeted CGImage.
        ///
        ///
        /// Parameter `cgImage`: The CGImageRef of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCGImage:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCGImage_options(
            this: Allocated<Self>,
            cg_image: &CGImage,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-graphics"
        ))]
        /// Create a new request with a targeted CGImage.
        ///
        ///
        /// Parameter `cgImage`: The CGImageRef of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCGImage:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCGImage_options_completionHandler(
            this: Allocated<Self>,
            cg_image: &CGImage,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "objc2-core-graphics",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CGImage.
        ///
        ///
        /// Parameter `cgImage`: The CGImageRef of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCGImage:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCGImage_orientation_options(
            this: Allocated<Self>,
            cg_image: &CGImage,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-graphics",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CGImage.
        ///
        ///
        /// Parameter `cgImage`: The CGImageRef of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCGImage:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCGImage_orientation_options_completionHandler(
            this: Allocated<Self>,
            cg_image: &CGImage,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-core-image"))]
        /// Create a new request with a targeted CIImage.
        ///
        ///
        /// Parameter `ciImage`: The CIImage of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCIImage:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCIImage_options(
            this: Allocated<Self>,
            ci_image: &CIImage,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-image"
        ))]
        /// Create a new request with a targeted CIImage.
        ///
        ///
        /// Parameter `ciImage`: The CIImage of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCIImage:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCIImage_options_completionHandler(
            this: Allocated<Self>,
            ci_image: &CIImage,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "objc2-core-image",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CIImage.
        ///
        ///
        /// Parameter `ciImage`: The CIImage of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCIImage:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCIImage_orientation_options(
            this: Allocated<Self>,
            ci_image: &CIImage,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-image",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CIImage.
        ///
        ///
        /// Parameter `ciImage`: The CIImage of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCIImage:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCIImage_orientation_options_completionHandler(
            this: Allocated<Self>,
            ci_image: &CIImage,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(feature = "VNRequestHandler")]
        /// Create a new request with a targeted image URL.
        ///
        ///
        /// Parameter `imageURL`: The URL of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedImageURL:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageURL_options(
            this: Allocated<Self>,
            image_url: &NSURL,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "block2"))]
        /// Create a new request with a targeted image URL.
        ///
        ///
        /// Parameter `imageURL`: The URL of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedImageURL:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageURL_options_completionHandler(
            this: Allocated<Self>,
            image_url: &NSURL,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-image-io"))]
        /// Create a new request with a targeted image URL.
        ///
        ///
        /// Parameter `imageURL`: The URL of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedImageURL:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageURL_orientation_options(
            this: Allocated<Self>,
            image_url: &NSURL,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted image URL.
        ///
        ///
        /// Parameter `imageURL`: The URL of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedImageURL:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageURL_orientation_options_completionHandler(
            this: Allocated<Self>,
            image_url: &NSURL,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(feature = "VNRequestHandler")]
        /// Create a new request with a targeted image data.
        ///
        ///
        /// Parameter `imageData`: The data of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedImageData:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageData_options(
            this: Allocated<Self>,
            image_data: &NSData,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "block2"))]
        /// Create a new request with a targeted image data.
        ///
        ///
        /// Parameter `imageData`: The data of the targeted image.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedImageData:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageData_options_completionHandler(
            this: Allocated<Self>,
            image_data: &NSData,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-image-io"))]
        /// Create a new request with a targeted image data.
        ///
        ///
        /// Parameter `imageData`: The data of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedImageData:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageData_orientation_options(
            this: Allocated<Self>,
            image_data: &NSData,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted image data.
        ///
        ///
        /// Parameter `imageData`: The data of the targeted image.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked when the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedImageData:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedImageData_orientation_options_completionHandler(
            this: Allocated<Self>,
            image_data: &NSData,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(feature = "VNRequestHandler", feature = "objc2-core-media"))]
        /// Create a new request with a targeted CMSampleBuffer.
        ///
        ///
        /// Parameter `sampleBuffer`: The CMSampleBuffer containing the CVImageBuffer to be used by the request.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCMSampleBuffer:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCMSampleBuffer_options(
            this: Allocated<Self>,
            sample_buffer: &CMSampleBuffer,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-media"
        ))]
        /// Create a new request with a targeted CMSampleBuffer.
        ///
        ///
        /// Parameter `sampleBuffer`: The CMSampleBuffer containing the CVImageBuffer to be used by the request.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked after the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCMSampleBuffer:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCMSampleBuffer_options_completionHandler(
            this: Allocated<Self>,
            sample_buffer: &CMSampleBuffer,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "objc2-core-media",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CMSampleBuffer.
        ///
        ///
        /// Parameter `sampleBuffer`: The CMSampleBuffer containing the CVImageBuffer to be used by the request.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithTargetedCMSampleBuffer:orientation:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCMSampleBuffer_orientation_options(
            this: Allocated<Self>,
            sample_buffer: &CMSampleBuffer,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "VNRequestHandler",
            feature = "block2",
            feature = "objc2-core-media",
            feature = "objc2-image-io"
        ))]
        /// Create a new request with a targeted CMSampleBuffer.
        ///
        ///
        /// Parameter `sampleBuffer`: The CMSampleBuffer containing the CVImageBuffer to be used by the request.
        ///
        /// Parameter `orientation`: The orientation of the image/buffer based on the EXIF specification. For details see kCGImagePropertyOrientation. The value has to be an integer from 1 to 8. This supersedes every other orientation information.
        ///
        /// Parameter `options`: A dictionary with options specifying auxiliary information for the image.
        ///
        /// Parameter `completionHandler`: The block that is invoked after the request has been performed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithTargetedCMSampleBuffer:orientation:options:completionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTargetedCMSampleBuffer_orientation_options_completionHandler(
            this: Allocated<Self>,
            sample_buffer: &CMSampleBuffer,
            orientation: CGImagePropertyOrientation,
            options: &NSDictionary<VNImageOption, AnyObject>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(all(feature = "VNRequest", feature = "VNTargetedImageRequest"))]
impl VNHomographicImageRegistrationRequest {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

/// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhomographicimageregistrationrequestrevision1?language=objc)
pub static VNHomographicImageRegistrationRequestRevision1: NSUInteger = 1;
