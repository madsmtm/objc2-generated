//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointname?language=objc)
// NS_TYPED_ENUM
#[cfg(feature = "VNTypes")]
pub type VNHumanHandPoseObservationJointName = VNRecognizedPointKey;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnamewrist?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameWrist:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnamethumbcmc?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameThumbCMC:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnamethumbmp?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameThumbMP:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnamethumbip?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameThumbIP:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnamethumbtip?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameThumbTip:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnameindexmcp?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameIndexMCP:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnameindexpip?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameIndexPIP:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnameindexdip?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameIndexDIP:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnameindextip?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameIndexTip:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnamemiddlemcp?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameMiddleMCP:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnamemiddlepip?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameMiddlePIP:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnamemiddledip?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameMiddleDIP:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnamemiddletip?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameMiddleTip:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnameringmcp?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameRingMCP:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnameringpip?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameRingPIP:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnameringdip?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameRingDIP:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnameringtip?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameRingTip:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnamelittlemcp?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameLittleMCP:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnamelittlepip?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameLittlePIP:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnamelittledip?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameLittleDIP:
        &'static VNHumanHandPoseObservationJointName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointnamelittletip?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointNameLittleTip:
        &'static VNHumanHandPoseObservationJointName;
}

/// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointsgroupname?language=objc)
// NS_TYPED_ENUM
#[cfg(feature = "VNTypes")]
pub type VNHumanHandPoseObservationJointsGroupName = VNRecognizedPointGroupKey;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointsgroupnamethumb?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointsGroupNameThumb:
        &'static VNHumanHandPoseObservationJointsGroupName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointsgroupnameindexfinger?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointsGroupNameIndexFinger:
        &'static VNHumanHandPoseObservationJointsGroupName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointsgroupnamemiddlefinger?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointsGroupNameMiddleFinger:
        &'static VNHumanHandPoseObservationJointsGroupName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointsgroupnameringfinger?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointsGroupNameRingFinger:
        &'static VNHumanHandPoseObservationJointsGroupName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointsgroupnamelittlefinger?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointsGroupNameLittleFinger:
        &'static VNHumanHandPoseObservationJointsGroupName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservationjointsgroupnameall?language=objc)
    #[cfg(feature = "VNTypes")]
    pub static VNHumanHandPoseObservationJointsGroupNameAll:
        &'static VNHumanHandPoseObservationJointsGroupName;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/vision/vnhumanhandposeobservation?language=objc)
    #[unsafe(super(VNRecognizedPointsObservation, VNObservation, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "VNObservation")]
    pub struct VNHumanHandPoseObservation;
);

#[cfg(feature = "VNObservation")]
extern_conformance!(
    unsafe impl NSCoding for VNHumanHandPoseObservation {}
);

#[cfg(feature = "VNObservation")]
extern_conformance!(
    unsafe impl NSCopying for VNHumanHandPoseObservation {}
);

#[cfg(feature = "VNObservation")]
unsafe impl CopyingHelper for VNHumanHandPoseObservation {
    type Result = Self;
}

#[cfg(feature = "VNObservation")]
extern_conformance!(
    unsafe impl NSObjectProtocol for VNHumanHandPoseObservation {}
);

#[cfg(feature = "VNObservation")]
extern_conformance!(
    unsafe impl NSSecureCoding for VNHumanHandPoseObservation {}
);

#[cfg(all(feature = "VNObservation", feature = "VNRequestRevisionProviding"))]
extern_conformance!(
    unsafe impl VNRequestRevisionProviding for VNHumanHandPoseObservation {}
);

#[cfg(feature = "VNObservation")]
impl VNHumanHandPoseObservation {
    extern_methods!(
        #[cfg(feature = "VNTypes")]
        /// All of the joint names available in the observation.
        #[unsafe(method(availableJointNames))]
        #[unsafe(method_family = none)]
        pub unsafe fn availableJointNames(
            &self,
        ) -> Retained<NSArray<VNHumanHandPoseObservationJointName>>;

        #[cfg(feature = "VNTypes")]
        /// All of the joints group names available in the observation.
        #[unsafe(method(availableJointsGroupNames))]
        #[unsafe(method_family = none)]
        pub unsafe fn availableJointsGroupNames(
            &self,
        ) -> Retained<NSArray<VNHumanHandPoseObservationJointsGroupName>>;

        #[cfg(all(
            feature = "VNDetectedPoint",
            feature = "VNGeometry",
            feature = "VNTypes"
        ))]
        /// Obtain a specific normalized point for a named human hand joint.
        ///
        ///
        /// Parameter `jointName`: The name of the human hand joint.
        ///
        /// Parameter `error`: The address of a variable that will be populated with the error that describes the failure.  If the caller does not require this information, NULL can be passed.
        ///
        /// Returns: the recognized point, or nil if the point could not be obtained.
        #[unsafe(method(recognizedPointForJointName:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn recognizedPointForJointName_error(
            &self,
            joint_name: &VNHumanHandPoseObservationJointName,
        ) -> Result<Retained<VNRecognizedPoint>, Retained<NSError>>;

        #[cfg(all(
            feature = "VNDetectedPoint",
            feature = "VNGeometry",
            feature = "VNTypes"
        ))]
        /// Obtains the collection of points associated with a named human hand joints group.
        ///
        ///
        /// The obtained collection is a dictionary that provides the mapping of human hand join names to the recognized point.
        ///
        ///
        /// Parameter `jointsGroupName`: The name of the human hand joints group.
        ///
        /// Parameter `error`: The address of a variable that will be populated with the error that describes the failure.  If the caller does not require this information, NULL can be passed.
        ///
        /// Returns: a dictionary of recognized points in the group, or nil if an error was encountered.
        #[unsafe(method(recognizedPointsForJointsGroupName:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn recognizedPointsForJointsGroupName_error(
            &self,
            joints_group_name: &VNHumanHandPoseObservationJointsGroupName,
        ) -> Result<
            Retained<NSDictionary<VNHumanHandPoseObservationJointName, VNRecognizedPoint>>,
            Retained<NSError>,
        >;

        #[cfg(feature = "VNTypes")]
        /// The chirality of the hand.
        #[unsafe(method(chirality))]
        #[unsafe(method_family = none)]
        pub unsafe fn chirality(&self) -> VNChirality;
    );
}

/// Methods declared on superclass `VNRecognizedPointsObservation`.
#[cfg(feature = "VNObservation")]
impl VNHumanHandPoseObservation {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

extern_class!(
    /// Detects specific landmark points on human hands.
    ///
    /// This request will produce a collection of VNRecognizedPointsObservation objects which describe the pose of each detected human hand.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/vision/vndetecthumanhandposerequest?language=objc)
    #[unsafe(super(VNImageBasedRequest, VNRequest, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "VNRequest")]
    pub struct VNDetectHumanHandPoseRequest;
);

#[cfg(feature = "VNRequest")]
extern_conformance!(
    unsafe impl NSCopying for VNDetectHumanHandPoseRequest {}
);

#[cfg(feature = "VNRequest")]
unsafe impl CopyingHelper for VNDetectHumanHandPoseRequest {
    type Result = Self;
}

#[cfg(feature = "VNRequest")]
extern_conformance!(
    unsafe impl NSObjectProtocol for VNDetectHumanHandPoseRequest {}
);

#[cfg(feature = "VNRequest")]
impl VNDetectHumanHandPoseRequest {
    extern_methods!(
        #[cfg(feature = "VNTypes")]
        /// Obtain the collection of human hand joint names that are supported by a given request revision.
        ///
        /// Parameter `revision`: The revision of VNDetectHumanHandPoseRequest being queried.
        ///
        /// Parameter `error`: The address of a variable that will be populated with an error upon failure.  If the caller does not need this information, NULL can be passed.
        ///
        /// Returns: An array of VNHumanHandPoseObservationJointName symbols that are supported by the request revision, or nil if a failure occurs.
        #[deprecated]
        #[unsafe(method(supportedJointNamesForRevision:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedJointNamesForRevision_error(
            revision: NSUInteger,
        ) -> Result<Retained<NSArray<VNHumanHandPoseObservationJointName>>, Retained<NSError>>;

        #[cfg(feature = "VNTypes")]
        /// Obtain the collection of human hand joint names that are supported by a given request object configured with a specific revision.
        ///
        /// Parameter `error`: The address of a variable that will be populated with an error upon failure.  If the caller does not need this information, NULL can be passed.
        ///
        /// Returns: An array of VNHumanHandPoseObservationJointName symbols that are supported by the request revision, or nil if a failure occurs.
        #[unsafe(method(supportedJointNamesAndReturnError:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedJointNamesAndReturnError(
            &self,
        ) -> Result<Retained<NSArray<VNHumanHandPoseObservationJointName>>, Retained<NSError>>;

        #[cfg(feature = "VNTypes")]
        /// Obtain the collection of human hand joints group names that are supported by a given request revision.
        ///
        /// Parameter `revision`: The revision of VNDetectHumanHandPoseRequest being queried.
        ///
        /// Parameter `error`: The address of a variable that will be populated with an error upon failure.  If the caller does not need this information, NULL can be passed.
        ///
        /// Returns: An array of VNHumanHandPoseObservationJointsGroupName symbols that are supported by the request revision, or nil if a failure occurs.
        #[deprecated]
        #[unsafe(method(supportedJointsGroupNamesForRevision:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedJointsGroupNamesForRevision_error(
            revision: NSUInteger,
        ) -> Result<Retained<NSArray<VNHumanHandPoseObservationJointsGroupName>>, Retained<NSError>>;

        #[cfg(feature = "VNTypes")]
        /// Obtain the collection of human hand joints group names that are supported by a given request object configured with a specific revision.
        ///
        /// Parameter `error`: The address of a variable that will be populated with an error upon failure.  If the caller does not need this information, NULL can be passed.
        ///
        /// Returns: An array of VNHumanHandPoseObservationJointsGroupName symbols that are supported by the request revision, or nil if a failure occurs.
        #[unsafe(method(supportedJointsGroupNamesAndReturnError:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedJointsGroupNamesAndReturnError(
            &self,
        ) -> Result<Retained<NSArray<VNHumanHandPoseObservationJointsGroupName>>, Retained<NSError>>;

        /// Defines an upper bounds to the maximum number of hands that will be processed for key points in an image.
        ///
        /// The complexity in key points determination is scalable by the number of hands to be processed.  All hands detected in an image will be ordered by relative size, with only the N largest ones having key points determined.  The default value for this property is 2. The maximum value for VNDetectHumanHandPoseRequestRevision1 is 6.
        #[unsafe(method(maximumHandCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumHandCount(&self) -> NSUInteger;

        /// Setter for [`maximumHandCount`][Self::maximumHandCount].
        #[unsafe(method(setMaximumHandCount:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMaximumHandCount(&self, maximum_hand_count: NSUInteger);

        #[cfg(feature = "VNObservation")]
        /// VNHumanHandPoseObservation results.
        #[unsafe(method(results))]
        #[unsafe(method_family = none)]
        pub unsafe fn results(&self) -> Option<Retained<NSArray<VNHumanHandPoseObservation>>>;
    );
}

/// Methods declared on superclass `VNRequest`.
#[cfg(feature = "VNRequest")]
impl VNDetectHumanHandPoseRequest {
    extern_methods!(
        /// Creates a new VNRequest with no completion handler.
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "block2")]
        /// Creates a new VNRequest with an optional completion handler.
        ///
        ///
        /// Parameter `completionHandler`: The block to be invoked after the request has completed its processing. The completion handler gets executed on the same dispatch queue as the request being executed.
        ///
        /// # Safety
        ///
        /// `completion_handler` must be a valid pointer or null.
        #[unsafe(method(initWithCompletionHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCompletionHandler(
            this: Allocated<Self>,
            completion_handler: VNRequestCompletionHandler,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "VNRequest")]
impl VNDetectHumanHandPoseRequest {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

/// [Apple's documentation](https://developer.apple.com/documentation/vision/vndetecthumanhandposerequestrevision1?language=objc)
pub static VNDetectHumanHandPoseRequestRevision1: NSUInteger = 1;
