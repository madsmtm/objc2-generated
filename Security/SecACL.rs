//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/security/seckeychainpromptselector?language=objc)
// NS_OPTIONS
#[cfg(feature = "cssmconfig")]
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SecKeychainPromptSelector(pub uint16);
#[cfg(feature = "cssmconfig")]
bitflags::bitflags! {
    impl SecKeychainPromptSelector: uint16 {
        #[doc(alias = "kSecKeychainPromptRequirePassphase")]
        const RequirePassphase = 0x0001;
        #[doc(alias = "kSecKeychainPromptUnsigned")]
        const Unsigned = 0x0010;
        #[doc(alias = "kSecKeychainPromptUnsignedAct")]
        const UnsignedAct = 0x0020;
        #[doc(alias = "kSecKeychainPromptInvalid")]
        const Invalid = 0x0040;
        #[doc(alias = "kSecKeychainPromptInvalidAct")]
        const InvalidAct = 0x0080;
    }
}

#[cfg(all(feature = "cssmconfig", feature = "objc2"))]
unsafe impl Encode for SecKeychainPromptSelector {
    const ENCODING: Encoding = uint16::ENCODING;
}

#[cfg(all(feature = "cssmconfig", feature = "objc2"))]
unsafe impl RefEncode for SecKeychainPromptSelector {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

#[cfg(feature = "SecBase")]
unsafe impl ConcreteType for SecACL {
    /// Returns the type identifier of SecACL instances.
    ///
    /// Returns: The CFTypeID of SecACL instances.
    #[doc(alias = "SecACLGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn SecACLGetTypeID() -> CFTypeID;
        }
        unsafe { SecACLGetTypeID() }
    }
}

#[cfg(feature = "SecBase")]
impl SecACL {
    /// Creates a new access control list entry from the application list, description, and prompt selector provided and adds it to an item's access.
    ///
    /// Parameter `access`: An access reference.
    ///
    /// Parameter `applicationList`: An array of SecTrustedApplication instances that will be allowed access without prompting.
    ///
    /// Parameter `description`: The human readable name that will be used to refer to this item when the user is prompted.
    ///
    /// Parameter `promptSelector`: A pointer to a CSSM prompt selector.
    ///
    /// Parameter `newAcl`: A pointer to an access control list entry.  On return, this points to the reference of the new access control list entry.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// This function is deprecated in 10.7 and later;
    /// use SecACLCreateWithSimpleContents instead.
    ///
    /// # Safety
    ///
    /// - `application_list` generic must be of the correct type.
    /// - `prompt_selector` must be a valid pointer.
    /// - `new_acl` must be a valid pointer.
    #[doc(alias = "SecACLCreateFromSimpleContents")]
    #[cfg(all(feature = "SecBase", feature = "cssmapple", feature = "cssmconfig"))]
    #[deprecated = "CSSM is not supported"]
    #[inline]
    pub unsafe fn create_from_simple_contents(
        access: &SecAccess,
        application_list: Option<&CFArray>,
        description: &CFString,
        prompt_selector: NonNull<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>,
        new_acl: NonNull<*mut SecACL>,
    ) -> OSStatus {
        extern "C-unwind" {
            fn SecACLCreateFromSimpleContents(
                access: &SecAccess,
                application_list: Option<&CFArray>,
                description: &CFString,
                prompt_selector: NonNull<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>,
                new_acl: NonNull<*mut SecACL>,
            ) -> OSStatus;
        }
        unsafe {
            SecACLCreateFromSimpleContents(
                access,
                application_list,
                description,
                prompt_selector,
                new_acl,
            )
        }
    }

    /// Creates a new access control list entry from the application list, description, and prompt selector provided and adds it to an item's access.
    ///
    /// Parameter `access`: An access reference.
    ///
    /// Parameter `applicationList`: An array of SecTrustedApplication instances that will be allowed access without prompting.
    ///
    /// Parameter `description`: The human readable name that will be used to refer to this item when the user is prompted.
    ///
    /// Parameter `promptSelector`: A SecKeychainPromptSelector selector.
    ///
    /// Parameter `newAcl`: A pointer to an access control list entry.  On return, this points to the reference of the new access control list entry.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// # Safety
    ///
    /// - `application_list` generic must be of the correct type.
    /// - `new_acl` must be a valid pointer.
    #[doc(alias = "SecACLCreateWithSimpleContents")]
    #[cfg(all(feature = "SecBase", feature = "cssmconfig"))]
    #[deprecated = "SecKeychain is deprecated"]
    #[inline]
    pub unsafe fn create_with_simple_contents(
        access: &SecAccess,
        application_list: Option<&CFArray>,
        description: &CFString,
        prompt_selector: SecKeychainPromptSelector,
        new_acl: NonNull<*mut SecACL>,
    ) -> OSStatus {
        extern "C-unwind" {
            fn SecACLCreateWithSimpleContents(
                access: &SecAccess,
                application_list: Option<&CFArray>,
                description: &CFString,
                prompt_selector: SecKeychainPromptSelector,
                new_acl: NonNull<*mut SecACL>,
            ) -> OSStatus;
        }
        unsafe {
            SecACLCreateWithSimpleContents(
                access,
                application_list,
                description,
                prompt_selector,
                new_acl,
            )
        }
    }

    /// Removes the access control list entry specified.
    ///
    /// Parameter `aclRef`: The reference to the access control list entry to remove.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    #[doc(alias = "SecACLRemove")]
    #[cfg(feature = "SecBase")]
    #[deprecated = "SecKeychain is deprecated"]
    #[inline]
    pub unsafe fn remove(&self) -> OSStatus {
        extern "C-unwind" {
            fn SecACLRemove(acl_ref: &SecACL) -> OSStatus;
        }
        unsafe { SecACLRemove(self) }
    }

    /// Returns the application list, description, and CSSM prompt selector for a given access control list entry.
    ///
    /// Parameter `acl`: An access control list entry reference.
    ///
    /// Parameter `applicationList`: On return, An array of SecTrustedApplication instances that will be allowed access without prompting, for the given access control list entry.  The caller needs to call CFRelease on this array when it's no longer needed.
    ///
    /// Parameter `description`: On return, the human readable name that will be used to refer to this item when the user is prompted, for the given access control list entry. The caller needs to call CFRelease on this string when it's no longer needed.
    ///
    /// Parameter `promptSelector`: A pointer to a CSSM prompt selector.  On return, this points to the CSSM prompt selector for the given access control list entry.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// This function is deprecated in 10.7 and later;
    /// use SecACLCopyContents instead.
    ///
    /// # Safety
    ///
    /// - `application_list` must be a valid pointer.
    /// - `description` must be a valid pointer.
    /// - `prompt_selector` must be a valid pointer.
    #[doc(alias = "SecACLCopySimpleContents")]
    #[cfg(all(feature = "SecBase", feature = "cssmapple", feature = "cssmconfig"))]
    #[deprecated = "CSSM is not supported"]
    #[inline]
    pub unsafe fn copy_simple_contents(
        &self,
        application_list: NonNull<*const CFArray>,
        description: NonNull<*const CFString>,
        prompt_selector: NonNull<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>,
    ) -> OSStatus {
        extern "C-unwind" {
            fn SecACLCopySimpleContents(
                acl: &SecACL,
                application_list: NonNull<*const CFArray>,
                description: NonNull<*const CFString>,
                prompt_selector: NonNull<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>,
            ) -> OSStatus;
        }
        unsafe { SecACLCopySimpleContents(self, application_list, description, prompt_selector) }
    }

    /// Returns the application list, description, and prompt selector for a given access control list entry.
    ///
    /// Parameter `acl`: An access control list entry reference.
    ///
    /// Parameter `applicationList`: On return, An array of SecTrustedApplication instances that will be allowed access without prompting, for the given access control list entry.  The caller needs to call CFRelease on this array when it's no longer needed.
    ///
    /// Parameter `description`: On return, the human readable name that will be used to refer to this item when the user is prompted, for the given access control list entry. The caller needs to call CFRelease on this string when it's no longer needed.
    ///
    /// Parameter `promptSelector`: A pointer to a SecKeychainPromptSelector.  On return, this points to the SecKeychainPromptSelector for the given access control list entry.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// # Safety
    ///
    /// - `application_list` must be a valid pointer.
    /// - `description` must be a valid pointer.
    /// - `prompt_selector` must be a valid pointer.
    #[doc(alias = "SecACLCopyContents")]
    #[cfg(all(feature = "SecBase", feature = "cssmconfig"))]
    #[deprecated = "SecKeychain is deprecated"]
    #[inline]
    pub unsafe fn copy_contents(
        &self,
        application_list: NonNull<*const CFArray>,
        description: NonNull<*const CFString>,
        prompt_selector: NonNull<SecKeychainPromptSelector>,
    ) -> OSStatus {
        extern "C-unwind" {
            fn SecACLCopyContents(
                acl: &SecACL,
                application_list: NonNull<*const CFArray>,
                description: NonNull<*const CFString>,
                prompt_selector: NonNull<SecKeychainPromptSelector>,
            ) -> OSStatus;
        }
        unsafe { SecACLCopyContents(self, application_list, description, prompt_selector) }
    }

    /// Sets the application list, description, and CSSM prompt selector for a given access control list entry.
    ///
    /// Parameter `acl`: A reference to the access control list entry to edit.
    ///
    /// Parameter `applicationList`: An application list reference.
    ///
    /// Parameter `description`: The human readable name that will be used to refer to this item when the user is prompted.
    ///
    /// Parameter `promptSelector`: A pointer to a CSSM prompt selector.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// This function is deprecated in 10.7 and later;
    /// use SecACLSetContents instead.
    ///
    /// # Safety
    ///
    /// - `application_list` generic must be of the correct type.
    /// - `prompt_selector` must be a valid pointer.
    #[doc(alias = "SecACLSetSimpleContents")]
    #[cfg(all(feature = "SecBase", feature = "cssmapple", feature = "cssmconfig"))]
    #[deprecated = "CSSM is not supported"]
    #[inline]
    pub unsafe fn set_simple_contents(
        &self,
        application_list: Option<&CFArray>,
        description: &CFString,
        prompt_selector: NonNull<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>,
    ) -> OSStatus {
        extern "C-unwind" {
            fn SecACLSetSimpleContents(
                acl: &SecACL,
                application_list: Option<&CFArray>,
                description: &CFString,
                prompt_selector: NonNull<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>,
            ) -> OSStatus;
        }
        unsafe { SecACLSetSimpleContents(self, application_list, description, prompt_selector) }
    }

    /// Sets the application list, description, and prompt selector for a given access control list entry.
    ///
    /// Parameter `acl`: A reference to the access control list entry to edit.
    ///
    /// Parameter `applicationList`: An application list reference.
    ///
    /// Parameter `description`: The human readable name that will be used to refer to this item when the user is prompted.
    ///
    /// Parameter `promptSelector`: A SecKeychainPromptSelector selector.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// # Safety
    ///
    /// `application_list` generic must be of the correct type.
    #[doc(alias = "SecACLSetContents")]
    #[cfg(all(feature = "SecBase", feature = "cssmconfig"))]
    #[deprecated = "SecKeychain is deprecated"]
    #[inline]
    pub unsafe fn set_contents(
        &self,
        application_list: Option<&CFArray>,
        description: &CFString,
        prompt_selector: SecKeychainPromptSelector,
    ) -> OSStatus {
        extern "C-unwind" {
            fn SecACLSetContents(
                acl: &SecACL,
                application_list: Option<&CFArray>,
                description: &CFString,
                prompt_selector: SecKeychainPromptSelector,
            ) -> OSStatus;
        }
        unsafe { SecACLSetContents(self, application_list, description, prompt_selector) }
    }

    /// Retrieve the CSSM authorization tags of a given access control list entry.
    ///
    /// Parameter `acl`: An access control list entry reference.
    ///
    /// Parameter `tags`: On return, this points to the first item in an array of CSSM authorization tags.
    ///
    /// Parameter `tagCount`: On return, this points to the number of tags in the CSSM authorization tag array.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// This function is deprecated in 10.7 and later;
    /// use SecACLCopyAuthorizations instead.
    ///
    /// # Safety
    ///
    /// - `tags` must be a valid pointer.
    /// - `tag_count` must be a valid pointer.
    #[doc(alias = "SecACLGetAuthorizations")]
    #[cfg(all(feature = "SecBase", feature = "cssmconfig", feature = "cssmtype"))]
    #[deprecated = "CSSM is not supported"]
    #[inline]
    pub unsafe fn get_authorizations(
        &self,
        tags: NonNull<CSSM_ACL_AUTHORIZATION_TAG>,
        tag_count: NonNull<uint32>,
    ) -> OSStatus {
        extern "C-unwind" {
            fn SecACLGetAuthorizations(
                acl: &SecACL,
                tags: NonNull<CSSM_ACL_AUTHORIZATION_TAG>,
                tag_count: NonNull<uint32>,
            ) -> OSStatus;
        }
        unsafe { SecACLGetAuthorizations(self, tags, tag_count) }
    }

    /// Retrieve the authorization tags of a given access control list entry.
    ///
    /// Parameter `acl`: An access control list entry reference.
    ///
    /// Returns: On return, a CFArrayRef of the authorizations for this ACL.
    #[doc(alias = "SecACLCopyAuthorizations")]
    #[cfg(feature = "SecBase")]
    #[deprecated = "SecKeychain is deprecated"]
    #[inline]
    pub unsafe fn authorizations(&self) -> CFRetained<CFArray> {
        extern "C-unwind" {
            fn SecACLCopyAuthorizations(acl: &SecACL) -> Option<NonNull<CFArray>>;
        }
        let ret = unsafe { SecACLCopyAuthorizations(self) };
        let ret =
            ret.expect("function was marked as returning non-null, but actually returned NULL");
        unsafe { CFRetained::from_raw(ret) }
    }

    /// Sets the CSSM authorization tags of a given access control list entry.
    ///
    /// Parameter `acl`: An access control list entry reference.
    ///
    /// Parameter `tags`: A pointer to the first item in an array of CSSM authorization tags.
    ///
    /// Parameter `tagCount`: The number of tags in the CSSM authorization tag array.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// This function is deprecated in 10.7 and later;
    /// use SecACLUpdateAuthorizations instead.
    ///
    /// # Safety
    ///
    /// `tags` must be a valid pointer.
    #[doc(alias = "SecACLSetAuthorizations")]
    #[cfg(all(feature = "SecBase", feature = "cssmconfig", feature = "cssmtype"))]
    #[deprecated = "CSSM is not supported"]
    #[inline]
    pub unsafe fn set_authorizations(
        &self,
        tags: NonNull<CSSM_ACL_AUTHORIZATION_TAG>,
        tag_count: uint32,
    ) -> OSStatus {
        extern "C-unwind" {
            fn SecACLSetAuthorizations(
                acl: &SecACL,
                tags: NonNull<CSSM_ACL_AUTHORIZATION_TAG>,
                tag_count: uint32,
            ) -> OSStatus;
        }
        unsafe { SecACLSetAuthorizations(self, tags, tag_count) }
    }

    /// Sets the authorization tags of a given access control list entry.
    ///
    /// Parameter `acl`: An access control list entry reference.
    ///
    /// Parameter `authorizations`: A pointer to an array of authorization tags.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// # Safety
    ///
    /// `authorizations` generic must be of the correct type.
    #[doc(alias = "SecACLUpdateAuthorizations")]
    #[cfg(feature = "SecBase")]
    #[deprecated = "SecKeychain is deprecated"]
    #[inline]
    pub unsafe fn update_authorizations(&self, authorizations: &CFArray) -> OSStatus {
        extern "C-unwind" {
            fn SecACLUpdateAuthorizations(acl: &SecACL, authorizations: &CFArray) -> OSStatus;
        }
        unsafe { SecACLUpdateAuthorizations(self, authorizations) }
    }
}

extern "C-unwind" {
    #[cfg(all(feature = "SecBase", feature = "cssmapple", feature = "cssmconfig"))]
    #[deprecated = "renamed to `SecACL::create_from_simple_contents`"]
    pub fn SecACLCreateFromSimpleContents(
        access: &SecAccess,
        application_list: Option<&CFArray>,
        description: &CFString,
        prompt_selector: NonNull<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>,
        new_acl: NonNull<*mut SecACL>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "SecBase", feature = "cssmconfig"))]
    #[deprecated = "renamed to `SecACL::create_with_simple_contents`"]
    pub fn SecACLCreateWithSimpleContents(
        access: &SecAccess,
        application_list: Option<&CFArray>,
        description: &CFString,
        prompt_selector: SecKeychainPromptSelector,
        new_acl: NonNull<*mut SecACL>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "SecBase")]
    #[deprecated = "renamed to `SecACL::remove`"]
    pub fn SecACLRemove(acl_ref: &SecACL) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "SecBase", feature = "cssmapple", feature = "cssmconfig"))]
    #[deprecated = "renamed to `SecACL::copy_simple_contents`"]
    pub fn SecACLCopySimpleContents(
        acl: &SecACL,
        application_list: NonNull<*const CFArray>,
        description: NonNull<*const CFString>,
        prompt_selector: NonNull<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "SecBase", feature = "cssmconfig"))]
    #[deprecated = "renamed to `SecACL::copy_contents`"]
    pub fn SecACLCopyContents(
        acl: &SecACL,
        application_list: NonNull<*const CFArray>,
        description: NonNull<*const CFString>,
        prompt_selector: NonNull<SecKeychainPromptSelector>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "SecBase", feature = "cssmapple", feature = "cssmconfig"))]
    #[deprecated = "renamed to `SecACL::set_simple_contents`"]
    pub fn SecACLSetSimpleContents(
        acl: &SecACL,
        application_list: Option<&CFArray>,
        description: &CFString,
        prompt_selector: NonNull<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "SecBase", feature = "cssmconfig"))]
    #[deprecated = "renamed to `SecACL::set_contents`"]
    pub fn SecACLSetContents(
        acl: &SecACL,
        application_list: Option<&CFArray>,
        description: &CFString,
        prompt_selector: SecKeychainPromptSelector,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(all(feature = "SecBase", feature = "cssmconfig", feature = "cssmtype"))]
    #[deprecated = "renamed to `SecACL::get_authorizations`"]
    pub fn SecACLGetAuthorizations(
        acl: &SecACL,
        tags: NonNull<CSSM_ACL_AUTHORIZATION_TAG>,
        tag_count: NonNull<uint32>,
    ) -> OSStatus;
}

#[cfg(feature = "SecBase")]
#[deprecated = "renamed to `SecACL::authorizations`"]
#[inline]
pub unsafe extern "C-unwind" fn SecACLCopyAuthorizations(acl: &SecACL) -> CFRetained<CFArray> {
    extern "C-unwind" {
        fn SecACLCopyAuthorizations(acl: &SecACL) -> Option<NonNull<CFArray>>;
    }
    let ret = unsafe { SecACLCopyAuthorizations(acl) };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::from_raw(ret) }
}

extern "C-unwind" {
    #[cfg(all(feature = "SecBase", feature = "cssmconfig", feature = "cssmtype"))]
    #[deprecated = "renamed to `SecACL::set_authorizations`"]
    pub fn SecACLSetAuthorizations(
        acl: &SecACL,
        tags: NonNull<CSSM_ACL_AUTHORIZATION_TAG>,
        tag_count: uint32,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "SecBase")]
    #[deprecated = "renamed to `SecACL::update_authorizations`"]
    pub fn SecACLUpdateAuthorizations(acl: &SecACL, authorizations: &CFArray) -> OSStatus;
}
