//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// Contains information about an identity search.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/security/secidentitysearch?language=objc)
#[repr(C)]
pub struct SecIdentitySearch {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl SecIdentitySearch {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"OpaqueSecIdentitySearchRef"> for SecIdentitySearch {}
);

unsafe impl ConcreteType for SecIdentitySearch {
    /// Returns the type identifier of SecIdentitySearch instances.
    ///
    /// Returns: The CFTypeID of SecIdentitySearch instances.
    ///
    /// This API is deprecated in 10.7. The SecIdentitySearchRef type is no longer used.
    #[doc(alias = "SecIdentitySearchGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn SecIdentitySearchGetTypeID() -> CFTypeID;
        }
        unsafe { SecIdentitySearchGetTypeID() }
    }
}

impl SecIdentitySearch {
    /// Creates a search reference for finding identities.
    ///
    /// Parameter `keychainOrArray`: An reference to an array of keychains to search, a single keychain, or NULL to search the user's default keychain search list.
    ///
    /// Parameter `keyUsage`: A CSSM_KEYUSE value, as defined in cssmtype.h. This value narrows the search to return only those identities which match the specified key usage. Pass a value of 0 to ignore key usage and return all available identities. Note that passing CSSM_KEYUSE_ANY limits the results to only those identities that can be used for every operation.
    ///
    /// Parameter `searchRef`: On return, an identity search reference. You must release the identity search reference by calling the CFRelease function.
    ///
    /// Returns: A result code.  See "Security Error Codes" (SecBase.h).
    ///
    /// You can set values for key usage, and one or more keychains, to control the search for identities. You can use the returned search reference to obtain the remaining identities in subsequent calls to the SecIentitySearchCopyNext function. You must release the identity search reference by calling the CFRelease function.
    /// This function is deprecated in Mac OS X 10.7 and later; to find identities which match a given key usage or other attributes, please use the SecItemCopyMatching API (see SecItem.h).
    ///
    /// # Safety
    ///
    /// - `keychain_or_array` should be of the correct type.
    /// - `search_ref` must be a valid pointer or null.
    #[doc(alias = "SecIdentitySearchCreate")]
    #[cfg(all(feature = "cssmconfig", feature = "cssmtype"))]
    #[deprecated]
    #[inline]
    pub unsafe fn create(
        keychain_or_array: Option<&CFType>,
        key_usage: CSSM_KEYUSE,
        search_ref: *mut *mut SecIdentitySearch,
    ) -> OSStatus {
        extern "C-unwind" {
            fn SecIdentitySearchCreate(
                keychain_or_array: Option<&CFType>,
                key_usage: CSSM_KEYUSE,
                search_ref: *mut *mut SecIdentitySearch,
            ) -> OSStatus;
        }
        unsafe { SecIdentitySearchCreate(keychain_or_array, key_usage, search_ref) }
    }

    /// Finds the next identity matching the given search criteria, as previously specified by a call to SecIdentitySearchCreate or SecIdentitySearchCreateWithAttributes.
    ///
    /// Parameter `searchRef`: A reference to the current identity search. You create the identity search reference by calling either SecIdentitySearchCreate or SecIdentitySearchCreateWithAttributes.
    ///
    /// Parameter `identity`: On return, an identity reference for the next found identity, if any. You must call the CFRelease function when finished with the identity reference.
    ///
    /// Returns: A result code. When there are no more identities found that match the search criteria, errSecItemNotFound is returned. See "Security Error Codes" (SecBase.h).
    ///
    /// This function is deprecated in Mac OS X 10.7 and later; to find identities which match specified attributes, please use the SecItemCopyMatching API (see SecItem.h).
    ///
    /// # Safety
    ///
    /// `identity` must be a valid pointer or null.
    #[doc(alias = "SecIdentitySearchCopyNext")]
    #[cfg(feature = "SecBase")]
    #[deprecated]
    #[inline]
    pub unsafe fn copy_next(&self, identity: *mut *mut SecIdentity) -> OSStatus {
        extern "C-unwind" {
            fn SecIdentitySearchCopyNext(
                search_ref: &SecIdentitySearch,
                identity: *mut *mut SecIdentity,
            ) -> OSStatus;
        }
        unsafe { SecIdentitySearchCopyNext(self, identity) }
    }
}

extern "C-unwind" {
    #[cfg(all(feature = "cssmconfig", feature = "cssmtype"))]
    #[deprecated = "renamed to `SecIdentitySearch::create`"]
    pub fn SecIdentitySearchCreate(
        keychain_or_array: Option<&CFType>,
        key_usage: CSSM_KEYUSE,
        search_ref: *mut *mut SecIdentitySearch,
    ) -> OSStatus;
}

extern "C-unwind" {
    #[cfg(feature = "SecBase")]
    #[deprecated = "renamed to `SecIdentitySearch::copy_next`"]
    pub fn SecIdentitySearchCopyNext(
        search_ref: &SecIdentitySearch,
        identity: *mut *mut SecIdentity,
    ) -> OSStatus;
}
