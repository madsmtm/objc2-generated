//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// A `sec_protocol_metadata` instance conatins read-only properties of a connected and configured
/// security protocol. Clients use this object to read information about a protocol instance. Properties
/// include, for example, the negotiated TLS version, ciphersuite, and peer certificates.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/security/sec_protocol_metadata?language=objc)
#[repr(C)]
#[derive(Debug)]
pub struct sec_protocol_metadata {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for sec_protocol_metadata {
    const ENCODING_REF: Encoding =
        Encoding::Pointer(&Encoding::Struct("sec_protocol_metadata", &[]));
}

/// A `sec_protocol_metadata` instance conatins read-only properties of a connected and configured
/// security protocol. Clients use this object to read information about a protocol instance. Properties
/// include, for example, the negotiated TLS version, ciphersuite, and peer certificates.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/security/sec_protocol_metadata_t?language=objc)
pub type sec_protocol_metadata_t = *mut sec_protocol_metadata;

impl sec_protocol_metadata {
    /// Get the application protocol negotiated, e.g., via the TLS ALPN extension.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: A NULL-terminated string carrying the negotiated protocol.
    ///
    /// # Safety
    ///
    /// `metadata` must be a valid pointer.
    #[doc(alias = "sec_protocol_metadata_get_negotiated_protocol")]
    #[deprecated]
    #[inline]
    pub unsafe fn negotiated_protocol(metadata: sec_protocol_metadata_t) -> *const c_char {
        extern "C-unwind" {
            fn sec_protocol_metadata_get_negotiated_protocol(
                metadata: sec_protocol_metadata_t,
            ) -> *const c_char;
        }
        unsafe { sec_protocol_metadata_get_negotiated_protocol(metadata) }
    }

    /// Copy the application protocol negotiated, e.g., via the TLS ALPN extension.
    /// The caller is expected to `free` the output string when no longer needed.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: A NULL-terminated string carrying the negotiated protocol.
    ///
    /// # Safety
    ///
    /// `metadata` must be a valid pointer.
    #[doc(alias = "sec_protocol_metadata_copy_negotiated_protocol")]
    #[inline]
    pub unsafe fn copy_negotiated_protocol(metadata: sec_protocol_metadata_t) -> *const c_char {
        extern "C-unwind" {
            fn sec_protocol_metadata_copy_negotiated_protocol(
                metadata: sec_protocol_metadata_t,
            ) -> *const c_char;
        }
        unsafe { sec_protocol_metadata_copy_negotiated_protocol(metadata) }
    }

    /// Get the negotiated TLS version.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: A `tls_protocol_version_t` value.
    ///
    /// # Safety
    ///
    /// `metadata` must be a valid pointer.
    #[doc(alias = "sec_protocol_metadata_get_negotiated_tls_protocol_version")]
    #[cfg(feature = "SecProtocolTypes")]
    #[inline]
    pub unsafe fn negotiated_tls_protocol_version(
        metadata: sec_protocol_metadata_t,
    ) -> tls_protocol_version_t {
        extern "C-unwind" {
            fn sec_protocol_metadata_get_negotiated_tls_protocol_version(
                metadata: sec_protocol_metadata_t,
            ) -> tls_protocol_version_t;
        }
        unsafe { sec_protocol_metadata_get_negotiated_tls_protocol_version(metadata) }
    }

    /// Get the negotiated TLS version.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: A SSLProtocol enum of the TLS version.
    ///
    /// # Safety
    ///
    /// `metadata` must be a valid pointer.
    #[doc(alias = "sec_protocol_metadata_get_negotiated_protocol_version")]
    #[cfg(feature = "SecProtocolTypes")]
    #[deprecated]
    #[inline]
    pub unsafe fn negotiated_protocol_version(metadata: sec_protocol_metadata_t) -> SSLProtocol {
        extern "C-unwind" {
            fn sec_protocol_metadata_get_negotiated_protocol_version(
                metadata: sec_protocol_metadata_t,
            ) -> SSLProtocol;
        }
        unsafe { sec_protocol_metadata_get_negotiated_protocol_version(metadata) }
    }

    /// Get the negotiated TLS ciphersuite.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: A `tls_ciphersuite_t`.
    ///
    /// # Safety
    ///
    /// `metadata` must be a valid pointer.
    #[doc(alias = "sec_protocol_metadata_get_negotiated_tls_ciphersuite")]
    #[cfg(feature = "SecProtocolTypes")]
    #[inline]
    pub unsafe fn negotiated_tls_ciphersuite(
        metadata: sec_protocol_metadata_t,
    ) -> tls_ciphersuite_t {
        extern "C-unwind" {
            fn sec_protocol_metadata_get_negotiated_tls_ciphersuite(
                metadata: sec_protocol_metadata_t,
            ) -> tls_ciphersuite_t;
        }
        unsafe { sec_protocol_metadata_get_negotiated_tls_ciphersuite(metadata) }
    }

    /// Get the negotiated TLS ciphersuite.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: A SSLCipherSuite.
    ///
    /// # Safety
    ///
    /// `metadata` must be a valid pointer.
    #[doc(alias = "sec_protocol_metadata_get_negotiated_ciphersuite")]
    #[cfg(feature = "CipherSuite")]
    #[deprecated]
    #[inline]
    pub unsafe fn negotiated_ciphersuite(metadata: sec_protocol_metadata_t) -> SSLCipherSuite {
        extern "C-unwind" {
            fn sec_protocol_metadata_get_negotiated_ciphersuite(
                metadata: sec_protocol_metadata_t,
            ) -> SSLCipherSuite;
        }
        unsafe { sec_protocol_metadata_get_negotiated_ciphersuite(metadata) }
    }

    /// Determine if early data was accepted by the peer.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: A bool indicating if early data was accepted.
    ///
    /// # Safety
    ///
    /// `metadata` must be a valid pointer.
    #[doc(alias = "sec_protocol_metadata_get_early_data_accepted")]
    #[inline]
    pub unsafe fn early_data_accepted(metadata: sec_protocol_metadata_t) -> bool {
        extern "C-unwind" {
            fn sec_protocol_metadata_get_early_data_accepted(
                metadata: sec_protocol_metadata_t,
            ) -> bool;
        }
        unsafe { sec_protocol_metadata_get_early_data_accepted(metadata) }
    }

    /// Get the certificate chain of the protocol instance peer.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Parameter `handler`: A block to invoke one or more times with sec_certificate_t objects
    ///
    ///
    /// Returns: Returns true if the peer certificates were accessible, false otherwise.
    ///
    /// # Safety
    ///
    /// `metadata` must be a valid pointer.
    #[doc(alias = "sec_protocol_metadata_access_peer_certificate_chain")]
    #[cfg(all(feature = "SecProtocolTypes", feature = "block2"))]
    #[inline]
    pub unsafe fn access_peer_certificate_chain(
        metadata: sec_protocol_metadata_t,
        handler: &block2::DynBlock<dyn Fn(sec_certificate_t)>,
    ) -> bool {
        extern "C-unwind" {
            fn sec_protocol_metadata_access_peer_certificate_chain(
                metadata: sec_protocol_metadata_t,
                handler: &block2::DynBlock<dyn Fn(sec_certificate_t)>,
            ) -> bool;
        }
        unsafe { sec_protocol_metadata_access_peer_certificate_chain(metadata, handler) }
    }

    /// Get the signature algorithms supported by the peer. Clients may call this
    /// in response to a challenge block.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Parameter `handler`: A block to invoke one or more times with OCSP data
    ///
    ///
    /// Returns: Returns true if the supported signature list was accessible, false otherwise.
    ///
    /// # Safety
    ///
    /// `metadata` must be a valid pointer.
    #[doc(alias = "sec_protocol_metadata_access_supported_signature_algorithms")]
    #[cfg(feature = "block2")]
    #[inline]
    pub unsafe fn access_supported_signature_algorithms(
        metadata: sec_protocol_metadata_t,
        handler: &block2::DynBlock<dyn Fn(u16)>,
    ) -> bool {
        extern "C-unwind" {
            fn sec_protocol_metadata_access_supported_signature_algorithms(
                metadata: sec_protocol_metadata_t,
                handler: &block2::DynBlock<dyn Fn(u16)>,
            ) -> bool;
        }
        unsafe { sec_protocol_metadata_access_supported_signature_algorithms(metadata, handler) }
    }

    /// Obtain the server name offered by a client or server during
    /// connection establishmet. This is the value commonly carried
    /// in the TLS SNI extesion.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: Returns A NULL-terminated string carrying the server name, or NULL
    /// if none was provided.
    ///
    /// # Safety
    ///
    /// `metadata` must be a valid pointer.
    #[doc(alias = "sec_protocol_metadata_get_server_name")]
    #[deprecated]
    #[inline]
    pub unsafe fn server_name(metadata: sec_protocol_metadata_t) -> *const c_char {
        extern "C-unwind" {
            fn sec_protocol_metadata_get_server_name(
                metadata: sec_protocol_metadata_t,
            ) -> *const c_char;
        }
        unsafe { sec_protocol_metadata_get_server_name(metadata) }
    }

    /// Obtain a copy of the server name offered by a client or server during
    /// connection establishmet. This is the value commonly carried
    /// in the TLS SNI extesion. The caller is expected to `free` the output
    /// string when it is no longer needed.
    ///
    ///
    /// Parameter `metadata`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: Returns A NULL-terminated string carrying the server name, or NULL
    /// if none was provided.
    ///
    /// # Safety
    ///
    /// `metadata` must be a valid pointer.
    #[doc(alias = "sec_protocol_metadata_copy_server_name")]
    #[inline]
    pub unsafe fn copy_server_name(metadata: sec_protocol_metadata_t) -> *const c_char {
        extern "C-unwind" {
            fn sec_protocol_metadata_copy_server_name(
                metadata: sec_protocol_metadata_t,
            ) -> *const c_char;
        }
        unsafe { sec_protocol_metadata_copy_server_name(metadata) }
    }

    /// Compare peer information for two `sec_protocol_metadata` instances.
    /// This comparison does not include protocol configuration options, e.g., ciphersuites.
    ///
    ///
    /// Parameter `metadataA`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Parameter `metadataB`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: Returns true if both metadata values refer to the same peer, and false otherwise.
    ///
    /// # Safety
    ///
    /// - `metadata_a` must be a valid pointer.
    /// - `metadata_b` must be a valid pointer.
    #[doc(alias = "sec_protocol_metadata_peers_are_equal")]
    #[inline]
    pub unsafe fn peers_are_equal(
        metadata_a: sec_protocol_metadata_t,
        metadata_b: sec_protocol_metadata_t,
    ) -> bool {
        extern "C-unwind" {
            fn sec_protocol_metadata_peers_are_equal(
                metadata_a: sec_protocol_metadata_t,
                metadata_b: sec_protocol_metadata_t,
            ) -> bool;
        }
        unsafe { sec_protocol_metadata_peers_are_equal(metadata_a, metadata_b) }
    }

    /// Compare challenge-relevant information for two `sec_protocol_metadata` instances.
    ///
    /// This comparison includes all information relevant to a challenge request, including:
    /// distinguished names, signature algorithms, and supported certificate types.
    /// See Section 7.4.4 of RFC5246 for more details.
    ///
    ///
    /// Parameter `metadataA`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Parameter `metadataB`: A `sec_protocol_metadata_t` instance.
    ///
    ///
    /// Returns: Returns true if both metadata values have the same challenge parameters.
    ///
    /// # Safety
    ///
    /// - `metadata_a` must be a valid pointer.
    /// - `metadata_b` must be a valid pointer.
    #[doc(alias = "sec_protocol_metadata_challenge_parameters_are_equal")]
    #[inline]
    pub unsafe fn challenge_parameters_are_equal(
        metadata_a: sec_protocol_metadata_t,
        metadata_b: sec_protocol_metadata_t,
    ) -> bool {
        extern "C-unwind" {
            fn sec_protocol_metadata_challenge_parameters_are_equal(
                metadata_a: sec_protocol_metadata_t,
                metadata_b: sec_protocol_metadata_t,
            ) -> bool;
        }
        unsafe { sec_protocol_metadata_challenge_parameters_are_equal(metadata_a, metadata_b) }
    }
}

extern "C-unwind" {
    #[deprecated = "renamed to `sec_protocol_metadata::negotiated_protocol`"]
    pub fn sec_protocol_metadata_get_negotiated_protocol(
        metadata: sec_protocol_metadata_t,
    ) -> *const c_char;
}

extern "C-unwind" {
    #[deprecated = "renamed to `sec_protocol_metadata::copy_negotiated_protocol`"]
    pub fn sec_protocol_metadata_copy_negotiated_protocol(
        metadata: sec_protocol_metadata_t,
    ) -> *const c_char;
}

extern "C-unwind" {
    #[cfg(feature = "SecProtocolTypes")]
    #[deprecated = "renamed to `sec_protocol_metadata::negotiated_tls_protocol_version`"]
    pub fn sec_protocol_metadata_get_negotiated_tls_protocol_version(
        metadata: sec_protocol_metadata_t,
    ) -> tls_protocol_version_t;
}

extern "C-unwind" {
    #[cfg(feature = "SecProtocolTypes")]
    #[deprecated = "renamed to `sec_protocol_metadata::negotiated_protocol_version`"]
    pub fn sec_protocol_metadata_get_negotiated_protocol_version(
        metadata: sec_protocol_metadata_t,
    ) -> SSLProtocol;
}

extern "C-unwind" {
    #[cfg(feature = "SecProtocolTypes")]
    #[deprecated = "renamed to `sec_protocol_metadata::negotiated_tls_ciphersuite`"]
    pub fn sec_protocol_metadata_get_negotiated_tls_ciphersuite(
        metadata: sec_protocol_metadata_t,
    ) -> tls_ciphersuite_t;
}

extern "C-unwind" {
    #[cfg(feature = "CipherSuite")]
    #[deprecated = "renamed to `sec_protocol_metadata::negotiated_ciphersuite`"]
    pub fn sec_protocol_metadata_get_negotiated_ciphersuite(
        metadata: sec_protocol_metadata_t,
    ) -> SSLCipherSuite;
}

extern "C-unwind" {
    #[deprecated = "renamed to `sec_protocol_metadata::early_data_accepted`"]
    pub fn sec_protocol_metadata_get_early_data_accepted(metadata: sec_protocol_metadata_t)
        -> bool;
}

extern "C-unwind" {
    #[cfg(all(feature = "SecProtocolTypes", feature = "block2"))]
    #[deprecated = "renamed to `sec_protocol_metadata::access_peer_certificate_chain`"]
    pub fn sec_protocol_metadata_access_peer_certificate_chain(
        metadata: sec_protocol_metadata_t,
        handler: &block2::DynBlock<dyn Fn(sec_certificate_t)>,
    ) -> bool;
}

extern "C-unwind" {
    #[cfg(feature = "block2")]
    #[deprecated = "renamed to `sec_protocol_metadata::access_supported_signature_algorithms`"]
    pub fn sec_protocol_metadata_access_supported_signature_algorithms(
        metadata: sec_protocol_metadata_t,
        handler: &block2::DynBlock<dyn Fn(u16)>,
    ) -> bool;
}

extern "C-unwind" {
    #[deprecated = "renamed to `sec_protocol_metadata::server_name`"]
    pub fn sec_protocol_metadata_get_server_name(
        metadata: sec_protocol_metadata_t,
    ) -> *const c_char;
}

extern "C-unwind" {
    #[deprecated = "renamed to `sec_protocol_metadata::copy_server_name`"]
    pub fn sec_protocol_metadata_copy_server_name(
        metadata: sec_protocol_metadata_t,
    ) -> *const c_char;
}

extern "C-unwind" {
    #[deprecated = "renamed to `sec_protocol_metadata::peers_are_equal`"]
    pub fn sec_protocol_metadata_peers_are_equal(
        metadata_a: sec_protocol_metadata_t,
        metadata_b: sec_protocol_metadata_t,
    ) -> bool;
}

extern "C-unwind" {
    #[deprecated = "renamed to `sec_protocol_metadata::challenge_parameters_are_equal`"]
    pub fn sec_protocol_metadata_challenge_parameters_are_equal(
        metadata_a: sec_protocol_metadata_t,
        metadata_b: sec_protocol_metadata_t,
    ) -> bool;
}
