//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsunimplemented?language=objc)
pub const errSecCSUnimplemented: OSStatus = -67072;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsinvalidobjectref?language=objc)
pub const errSecCSInvalidObjectRef: OSStatus = -67071;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsinvalidflags?language=objc)
pub const errSecCSInvalidFlags: OSStatus = -67070;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsobjectrequired?language=objc)
pub const errSecCSObjectRequired: OSStatus = -67069;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsstaticcodenotfound?language=objc)
pub const errSecCSStaticCodeNotFound: OSStatus = -67068;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsunsupportedguestattributes?language=objc)
pub const errSecCSUnsupportedGuestAttributes: OSStatus = -67067;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsinvalidattributevalues?language=objc)
pub const errSecCSInvalidAttributeValues: OSStatus = -67066;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsnosuchcode?language=objc)
pub const errSecCSNoSuchCode: OSStatus = -67065;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsmultipleguests?language=objc)
pub const errSecCSMultipleGuests: OSStatus = -67064;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsguestinvalid?language=objc)
pub const errSecCSGuestInvalid: OSStatus = -67063;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsunsigned?language=objc)
pub const errSecCSUnsigned: OSStatus = -67062;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccssignaturefailed?language=objc)
pub const errSecCSSignatureFailed: OSStatus = -67061;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccssignaturenotverifiable?language=objc)
pub const errSecCSSignatureNotVerifiable: OSStatus = -67060;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccssignatureunsupported?language=objc)
pub const errSecCSSignatureUnsupported: OSStatus = -67059;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsbaddictionaryformat?language=objc)
pub const errSecCSBadDictionaryFormat: OSStatus = -67058;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsresourcesnotsealed?language=objc)
pub const errSecCSResourcesNotSealed: OSStatus = -67057;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsresourcesnotfound?language=objc)
pub const errSecCSResourcesNotFound: OSStatus = -67056;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsresourcesinvalid?language=objc)
pub const errSecCSResourcesInvalid: OSStatus = -67055;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsbadresource?language=objc)
pub const errSecCSBadResource: OSStatus = -67054;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsresourcerulesinvalid?language=objc)
pub const errSecCSResourceRulesInvalid: OSStatus = -67053;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsreqinvalid?language=objc)
pub const errSecCSReqInvalid: OSStatus = -67052;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsrequnsupported?language=objc)
pub const errSecCSReqUnsupported: OSStatus = -67051;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsreqfailed?language=objc)
pub const errSecCSReqFailed: OSStatus = -67050;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsbadobjectformat?language=objc)
pub const errSecCSBadObjectFormat: OSStatus = -67049;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsinternalerror?language=objc)
pub const errSecCSInternalError: OSStatus = -67048;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccshostreject?language=objc)
pub const errSecCSHostReject: OSStatus = -67047;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsnotahost?language=objc)
pub const errSecCSNotAHost: OSStatus = -67046;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccssignatureinvalid?language=objc)
pub const errSecCSSignatureInvalid: OSStatus = -67045;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccshostprotocolrelativepath?language=objc)
pub const errSecCSHostProtocolRelativePath: OSStatus = -67044;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccshostprotocolcontradiction?language=objc)
pub const errSecCSHostProtocolContradiction: OSStatus = -67043;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccshostprotocoldedicationerror?language=objc)
pub const errSecCSHostProtocolDedicationError: OSStatus = -67042;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccshostprotocolnotproxy?language=objc)
pub const errSecCSHostProtocolNotProxy: OSStatus = -67041;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccshostprotocolstateerror?language=objc)
pub const errSecCSHostProtocolStateError: OSStatus = -67040;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccshostprotocolunrelated?language=objc)
pub const errSecCSHostProtocolUnrelated: OSStatus = -67039;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsnotsupported?language=objc)
pub const errSecCSNotSupported: OSStatus = -67037;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccscmstoolarge?language=objc)
pub const errSecCSCMSTooLarge: OSStatus = -67036;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccshostprotocolinvalidhash?language=objc)
pub const errSecCSHostProtocolInvalidHash: OSStatus = -67035;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsstaticcodechanged?language=objc)
pub const errSecCSStaticCodeChanged: OSStatus = -67034;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsdbdenied?language=objc)
pub const errSecCSDBDenied: OSStatus = -67033;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsdbaccess?language=objc)
pub const errSecCSDBAccess: OSStatus = -67032;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccssigdbdenied?language=objc)
pub const errSecCSSigDBDenied: OSStatus = -67033;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccssigdbaccess?language=objc)
pub const errSecCSSigDBAccess: OSStatus = -67032;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccshostprotocolinvalidattribute?language=objc)
pub const errSecCSHostProtocolInvalidAttribute: OSStatus = -67031;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsinfoplistfailed?language=objc)
pub const errSecCSInfoPlistFailed: OSStatus = -67030;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsnomainexecutable?language=objc)
pub const errSecCSNoMainExecutable: OSStatus = -67029;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsbadbundleformat?language=objc)
pub const errSecCSBadBundleFormat: OSStatus = -67028;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsnomatches?language=objc)
pub const errSecCSNoMatches: OSStatus = -67027;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsfilehardquarantined?language=objc)
pub const errSecCSFileHardQuarantined: OSStatus = -67026;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsoutdated?language=objc)
pub const errSecCSOutdated: OSStatus = -67025;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsdbcorrupt?language=objc)
pub const errSecCSDbCorrupt: OSStatus = -67024;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsresourcedirectoryfailed?language=objc)
pub const errSecCSResourceDirectoryFailed: OSStatus = -67023;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsunsignednestedcode?language=objc)
pub const errSecCSUnsignedNestedCode: OSStatus = -67022;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsbadnestedcode?language=objc)
pub const errSecCSBadNestedCode: OSStatus = -67021;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsbadcallbackvalue?language=objc)
pub const errSecCSBadCallbackValue: OSStatus = -67020;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccshelperfailed?language=objc)
pub const errSecCSHelperFailed: OSStatus = -67019;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsvetoed?language=objc)
pub const errSecCSVetoed: OSStatus = -67018;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsbadlvarch?language=objc)
pub const errSecCSBadLVArch: OSStatus = -67017;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsresourcenotsupported?language=objc)
pub const errSecCSResourceNotSupported: OSStatus = -67016;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsregularfile?language=objc)
pub const errSecCSRegularFile: OSStatus = -67015;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsunsealedapproot?language=objc)
pub const errSecCSUnsealedAppRoot: OSStatus = -67014;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsweakresourcerules?language=objc)
pub const errSecCSWeakResourceRules: OSStatus = -67013;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsdsstoresymlink?language=objc)
pub const errSecCSDSStoreSymlink: OSStatus = -67012;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsambiguousbundleformat?language=objc)
pub const errSecCSAmbiguousBundleFormat: OSStatus = -67011;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsbadmainexecutable?language=objc)
pub const errSecCSBadMainExecutable: OSStatus = -67010;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsbadframeworkversion?language=objc)
pub const errSecCSBadFrameworkVersion: OSStatus = -67009;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsunsealedframeworkroot?language=objc)
pub const errSecCSUnsealedFrameworkRoot: OSStatus = -67008;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsweakresourceenvelope?language=objc)
pub const errSecCSWeakResourceEnvelope: OSStatus = -67007;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccscancelled?language=objc)
pub const errSecCSCancelled: OSStatus = -67006;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsinvalidplatform?language=objc)
pub const errSecCSInvalidPlatform: OSStatus = -67005;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccstoobig?language=objc)
pub const errSecCSTooBig: OSStatus = -67004;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsinvalidsymlink?language=objc)
pub const errSecCSInvalidSymlink: OSStatus = -67003;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsnotapplike?language=objc)
pub const errSecCSNotAppLike: OSStatus = -67002;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsbaddiskimageformat?language=objc)
pub const errSecCSBadDiskImageFormat: OSStatus = -67001;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsunsupporteddigestalgorithm?language=objc)
pub const errSecCSUnsupportedDigestAlgorithm: OSStatus = -67000;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsinvalidassociatedfiledata?language=objc)
pub const errSecCSInvalidAssociatedFileData: OSStatus = -66999;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsinvalidteamidentifier?language=objc)
pub const errSecCSInvalidTeamIdentifier: OSStatus = -66998;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsbadteamidentifier?language=objc)
pub const errSecCSBadTeamIdentifier: OSStatus = -66997;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccssignatureuntrusted?language=objc)
pub const errSecCSSignatureUntrusted: OSStatus = -66996;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errsecmultipleexecsegments?language=objc)
pub const errSecMultipleExecSegments: OSStatus = -66995;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsinvalidentitlements?language=objc)
pub const errSecCSInvalidEntitlements: OSStatus = -66994;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsinvalidruntimeversion?language=objc)
pub const errSecCSInvalidRuntimeVersion: OSStatus = -66993;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsrevokednotarization?language=objc)
pub const errSecCSRevokedNotarization: OSStatus = -66992;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccscmsconstructionfailed?language=objc)
pub const errSecCSCMSConstructionFailed: OSStatus = -66991;
/// [Apple's documentation](https://developer.apple.com/documentation/security/errseccsremotesignerfailed?language=objc)
pub const errSecCSRemoteSignerFailed: OSStatus = -66990;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/security/kseccferrorarchitecture?language=objc)
    pub static kSecCFErrorArchitecture: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/security/kseccferrorpattern?language=objc)
    pub static kSecCFErrorPattern: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/security/kseccferrorresourceseal?language=objc)
    pub static kSecCFErrorResourceSeal: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/security/kseccferrorresourceadded?language=objc)
    pub static kSecCFErrorResourceAdded: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/security/kseccferrorresourcealtered?language=objc)
    pub static kSecCFErrorResourceAltered: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/security/kseccferrorresourcemissing?language=objc)
    pub static kSecCFErrorResourceMissing: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/security/kseccferrorresourcesideband?language=objc)
    pub static kSecCFErrorResourceSideband: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/security/kseccferrorresourcerecursive?language=objc)
    pub static kSecCFErrorResourceRecursive: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/security/kseccferrorinfoplist?language=objc)
    pub static kSecCFErrorInfoPlist: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/security/kseccferrorguestattributes?language=objc)
    pub static kSecCFErrorGuestAttributes: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/security/kseccferrorrequirementsyntax?language=objc)
    pub static kSecCFErrorRequirementSyntax: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/security/kseccferrorpath?language=objc)
    pub static kSecCFErrorPath: &'static CFString;
}

/// This is the type of a reference to running code.
///
/// In many (but not all) calls, this can be passed to a SecStaticCodeRef
/// argument, which performs an implicit SecCodeCopyStaticCode call and
/// operates on the result.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/security/seccode?language=objc)
#[doc(alias = "SecCodeRef")]
#[repr(C)]
pub struct SecCode {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl SecCode {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"__SecCode"> for SecCode {}
);

/// This is the type of a reference to static code on disk.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/security/secstaticcode?language=objc)
#[doc(alias = "SecStaticCodeRef")]
#[repr(C)]
pub struct SecStaticCode {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl SecStaticCode {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"__SecCode"> for SecStaticCode {}
);

/// This is the type of a reference to a code requirement.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/security/secrequirement?language=objc)
#[doc(alias = "SecRequirementRef")]
#[repr(C)]
pub struct SecRequirement {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl SecRequirement {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"__SecRequirement"> for SecRequirement {}
);

/// An abstract handle to identify a particular Guest in the context of its Host.
///
/// Guest handles are assigned by the host at will, with kSecNoGuest (zero) being
/// reserved as the null value. They can be reused for new children if desired.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/security/secguestref?language=objc)
pub type SecGuestRef = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/security/ksecnoguest?language=objc)
pub const kSecNoGuest: SecGuestRef = 0;

/// This is the type of flags arguments to Code Signing API calls.
/// It provides a bit mask of request and option flags. All of the bits in these
/// masks are reserved to Apple; if you set any bits not defined in these headers,
/// the behavior is generally undefined.
///
/// This list describes the flags that are shared among several Code Signing API calls.
/// Flags that only apply to one call are defined and documented with that call.
/// Global flags are assigned from high order down (31 -> 0); call-specific flags
/// are assigned from the bottom up (0 -> 31).
///
///
/// When passed to a flags argument throughout, indicates that default behavior
/// is desired. Do not mix with other flags values.
///
/// When passed to a call that performs code validation, requests that code signatures
/// made by expired certificates be rejected. By default, expiration of participating
/// certificates is not automatic grounds for rejection.
///
/// When passed to a call that performs code validation, configures the validation to
/// not perform any work that requires the network. Using this flag disables security features
/// like online certificate revocation and notarization checks by removing potentially
/// slow network requests that can delay evaluations. This flag has always been usable for
/// SecStaticCode objects and is usable with SecCode objects starting with macOS 11.3.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/security/seccsflags?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SecCSFlags(pub u32);
bitflags::bitflags! {
    impl SecCSFlags: u32 {
        #[doc(alias = "kSecCSDefaultFlags")]
        const DefaultFlags = 0;
        #[doc(alias = "kSecCSConsiderExpiration")]
        const ConsiderExpiration = 1<<31;
        #[doc(alias = "kSecCSEnforceRevocationChecks")]
        const EnforceRevocationChecks = 1<<30;
        #[doc(alias = "kSecCSNoNetworkAccess")]
        const NoNetworkAccess = 1<<29;
        #[doc(alias = "kSecCSReportProgress")]
        const ReportProgress = 1<<28;
        #[doc(alias = "kSecCSCheckTrustedAnchors")]
        const CheckTrustedAnchors = 1<<27;
        #[doc(alias = "kSecCSQuickCheck")]
        const QuickCheck = 1<<26;
        #[doc(alias = "kSecCSApplyEmbeddedPolicy")]
        const ApplyEmbeddedPolicy = 1<<25;
        #[doc(alias = "kSecCSStripDisallowedXattrs")]
        const StripDisallowedXattrs = 1<<24;
        #[doc(alias = "kSecCSMatchGuestRequirementInKernel")]
        const MatchGuestRequirementInKernel = 1<<23;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for SecCSFlags {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for SecCSFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// This is the type of option flags that can be embedded in a code signature
/// during signing, and that govern the use of the signature thereafter.
/// Some of these flags can be set through the codesign(1) command's --options
/// argument; some are set implicitly based on signing circumstances; and all
/// can be set with the kSecCodeSignerFlags item of a signing information dictionary.
///
///
/// Indicates that the code may act as a host that controls and supervises guest
/// code. If this flag is not set in a code signature, the code is never considered
/// eligible to be a host, and any attempt to act like one will be ignored or rejected.
///
/// The code has been sealed without a signing identity. No identity may be retrieved
/// from it, and any code requirement placing restrictions on the signing identity
/// will fail. This flag is set by the code signing API and cannot be set explicitly.
///
/// Implicitly set the "hard" status bit for the code when it starts running.
/// This bit indicates that the code prefers to be denied access to a resource
/// if gaining such access would cause its invalidation. Since the hard bit is
/// sticky, setting this option bit guarantees that the code will always have
/// it set.
///
/// Implicitly set the "kill" status bit for the code when it starts running.
/// This bit indicates that the code wishes to be terminated with prejudice if
/// it is ever invalidated. Since the kill bit is sticky, setting this option bit
/// guarantees that the code will always be dynamically valid, since it will die
/// immediately    if it becomes invalid.
///
/// Forces the kSecCSConsiderExpiration flag on all validations of the code.
///
/// Instructs the kernel to apply runtime hardening policies as required by the
/// hardened runtime version
///
/// The code was automatically signed by the linker. This signature should be
/// ignored in any new signing operation.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/security/seccodesignatureflags?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SecCodeSignatureFlags(pub u32);
bitflags::bitflags! {
    impl SecCodeSignatureFlags: u32 {
        #[doc(alias = "kSecCodeSignatureHost")]
        const Host = 0x0001;
        #[doc(alias = "kSecCodeSignatureAdhoc")]
        const Adhoc = 0x0002;
        #[doc(alias = "kSecCodeSignatureForceHard")]
        const ForceHard = 0x0100;
        #[doc(alias = "kSecCodeSignatureForceKill")]
        const ForceKill = 0x0200;
        #[doc(alias = "kSecCodeSignatureForceExpiration")]
        const ForceExpiration = 0x0400;
        #[doc(alias = "kSecCodeSignatureRestrict")]
        const Restrict = 0x0800;
        #[doc(alias = "kSecCodeSignatureEnforcement")]
        const Enforcement = 0x1000;
        #[doc(alias = "kSecCodeSignatureLibraryValidation")]
        const LibraryValidation = 0x2000;
        #[doc(alias = "kSecCodeSignatureRuntime")]
        const Runtime = 0x10000;
        #[doc(alias = "kSecCodeSignatureLinkerSigned")]
        const LinkerSigned = 0x20000;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for SecCodeSignatureFlags {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for SecCodeSignatureFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// The code signing system attaches a set of status flags to each running code.
/// These flags are maintained by the code's host, and can be read by anyone.
/// A code may change its own flags, a host may change its guests' flags,
/// and root may change anyone's flags.    However, these flags are sticky in that
/// each can change in only one direction (and never back, for the lifetime of the code).
/// Not even root can violate this restriction.
///
/// There are other flags in SecCodeStatus that are not publicly documented.
/// Do not rely on them, and do not ever attempt to explicitly set them.
///
///
/// Indicates that the code is dynamically valid, i.e. it started correctly
/// and has not been invalidated since then. The valid bit can only be cleared.
///
/// Warning: This bit is not your one-stop shortcut to determining the validity    of code.
/// It represents the dynamic component of the full validity function; if this
/// bit is unset, the code is definitely invalid, but the converse is not always true.
/// In fact, code hosts may represent the outcome of some delayed static validation work in this bit,
/// and thus it strictly represents a blend of (all of) dynamic and (some of) static validity,
/// depending on the implementation of the particular host managing the code. You can (only)
/// rely that (1) dynamic invalidation will clear this bit; and (2) the combination
/// of static validation and dynamic validity (as performed by the SecCodeCheckValidity* APIs)
/// will give a correct answer.
///
///
/// Indicates that the code prefers to be denied access to resources if gaining access
/// would invalidate it. This bit can only be set.
/// It is undefined whether code that is marked hard and is already invalid will still
/// be denied access to a resource that would invalidate it if it were still valid. That is,
/// the code may or may not get access to such a resource while being invalid, and that choice
/// may appear random.
///
///
/// Indicates that the code wants to be killed (terminated) if it ever loses its validity.
/// This bit can only be set. Code that has the kill flag set will never be dynamically invalid
/// (and live). Note however that a change in static validity does not necessarily trigger instant
/// death.
///
///
/// Indicated that code has been debugged by another process that was allowed to do so. The debugger
/// causes this to be set when it attachs.
///
///
/// Indicates the code is platform code, shipping with the operating system and signed by Apple.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/security/seccodestatus?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SecCodeStatus(pub u32);
bitflags::bitflags! {
    impl SecCodeStatus: u32 {
        #[doc(alias = "kSecCodeStatusValid")]
        const Valid = 0x00000001;
        #[doc(alias = "kSecCodeStatusHard")]
        const Hard = 0x00000100;
        #[doc(alias = "kSecCodeStatusKill")]
        const Kill = 0x00000200;
        #[doc(alias = "kSecCodeStatusDebugged")]
        const Debugged = 0x10000000;
        #[doc(alias = "kSecCodeStatusPlatform")]
        const Platform = 0x04000000;
    }
}

#[cfg(feature = "objc2")]
unsafe impl Encode for SecCodeStatus {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for SecCodeStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// An enumeration indicating different types of internal requirements for code.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/security/secrequirementtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SecRequirementType(pub u32);
impl SecRequirementType {
    #[doc(alias = "kSecHostRequirementType")]
    pub const HostRequirementType: Self = Self(1);
    #[doc(alias = "kSecGuestRequirementType")]
    pub const GuestRequirementType: Self = Self(2);
    #[doc(alias = "kSecDesignatedRequirementType")]
    pub const DesignatedRequirementType: Self = Self(3);
    #[doc(alias = "kSecLibraryRequirementType")]
    pub const LibraryRequirementType: Self = Self(4);
    #[doc(alias = "kSecPluginRequirementType")]
    pub const PluginRequirementType: Self = Self(5);
    #[doc(alias = "kSecInvalidRequirementType")]
    pub const InvalidRequirementType: Self = Self(6);
    #[doc(alias = "kSecRequirementTypeCount")]
    pub const RequirementTypeCount: Self = Self(SecRequirementType::InvalidRequirementType.0);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for SecRequirementType {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for SecRequirementType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// Types of cryptographic digests (hashes) used to hold code signatures
/// together.
///
/// Each combination of type, length, and other parameters is a separate
/// hash type; we don't understand "families" here.
///
/// These type codes govern the digest links that connect a CodeDirectory
/// to its subordinate data structures (code pages, resources, etc.)
/// They do not directly control other uses of hashes (such as those used
/// within X.509 certificates and CMS blobs).
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/security/seccsdigestalgorithm?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct SecCSDigestAlgorithm(pub u32);
impl SecCSDigestAlgorithm {
    #[doc(alias = "kSecCodeSignatureNoHash")]
    pub const CodeSignatureNoHash: Self = Self(0);
    #[doc(alias = "kSecCodeSignatureHashSHA1")]
    pub const CodeSignatureHashSHA1: Self = Self(1);
    #[doc(alias = "kSecCodeSignatureHashSHA256")]
    pub const CodeSignatureHashSHA256: Self = Self(2);
    #[doc(alias = "kSecCodeSignatureHashSHA256Truncated")]
    pub const CodeSignatureHashSHA256Truncated: Self = Self(3);
    #[doc(alias = "kSecCodeSignatureHashSHA384")]
    pub const CodeSignatureHashSHA384: Self = Self(4);
    #[doc(alias = "kSecCodeSignatureHashSHA512")]
    pub const CodeSignatureHashSHA512: Self = Self(5);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for SecCSDigestAlgorithm {
    const ENCODING: Encoding = u32::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for SecCSDigestAlgorithm {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}
