//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/cloudkit/cksharerequestaccessoperation?language=objc)
    #[unsafe(super(CKOperation, NSOperation, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CKOperation")]
    pub struct CKShareRequestAccessOperation;
);

#[cfg(feature = "CKOperation")]
extern_conformance!(
    unsafe impl NSObjectProtocol for CKShareRequestAccessOperation {}
);

#[cfg(feature = "CKOperation")]
impl CKShareRequestAccessOperation {
    extern_methods!(
        /// - Returns: A new ``CKShareRequestAccessOperation`` instance.
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        /// Creates a ``CKShareRequestAccessOperation`` for requesting access to the specified shares.
        ///
        /// - Parameter shareURLs: An array of `NSURL` objects for shares you wish to request access to
        /// - Returns: A ``CKShareRequestAccessOperation`` instance configured with the given share URLs.
        #[unsafe(method(initWithShareURLs:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithShareURLs(
            this: Allocated<Self>,
            share_ur_ls: &NSArray<NSURL>,
        ) -> Retained<Self>;

        /// The share URLs for which access is being requested.
        ///
        /// If requesting access to multiple shares, include multiple `NSURL` objects.
        /// The server processes them independently.
        #[unsafe(method(shareURLs))]
        #[unsafe(method_family = none)]
        pub unsafe fn shareURLs(&self) -> Option<Retained<NSArray<NSURL>>>;

        /// Setter for [`shareURLs`][Self::shareURLs].
        #[unsafe(method(setShareURLs:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setShareURLs(&self, share_ur_ls: Option<&NSArray<NSURL>>);

        #[cfg(feature = "block2")]
        /// A block that is called once for each share URL processed by the server.
        ///
        /// - Parameters:
        /// - shareURL: The URL of the processed share.
        /// - shareRequestAccessError: If non-nil, an error describing why the request failed for this share.
        ///
        /// The server does **not** reveal share existence to the requester to protect privacy.
        #[unsafe(method(perShareAccessRequestCompletionBlock))]
        #[unsafe(method_family = none)]
        pub unsafe fn perShareAccessRequestCompletionBlock(
            &self,
        ) -> *mut block2::DynBlock<dyn Fn(NonNull<NSURL>, *mut NSError)>;

        #[cfg(feature = "block2")]
        /// Setter for [`perShareAccessRequestCompletionBlock`][Self::perShareAccessRequestCompletionBlock].
        #[unsafe(method(setPerShareAccessRequestCompletionBlock:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPerShareAccessRequestCompletionBlock(
            &self,
            per_share_access_request_completion_block: Option<
                &block2::DynBlock<dyn Fn(NonNull<NSURL>, *mut NSError)>,
            >,
        );

        #[cfg(feature = "block2")]
        /// A block that is called when the entire operation completes.
        ///
        /// - Parameter operationError: If non-nil, an error describing why the request failed.
        ///
        /// If operationError is CKErrorPartialFailure, the userInfo dictionary
        /// contains per-share errors under ``CKPartialErrorsByItemIDKey``.
        #[unsafe(method(shareRequestAccessCompletionBlock))]
        #[unsafe(method_family = none)]
        pub unsafe fn shareRequestAccessCompletionBlock(
            &self,
        ) -> *mut block2::DynBlock<dyn Fn(*mut NSError)>;

        #[cfg(feature = "block2")]
        /// Setter for [`shareRequestAccessCompletionBlock`][Self::shareRequestAccessCompletionBlock].
        #[unsafe(method(setShareRequestAccessCompletionBlock:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setShareRequestAccessCompletionBlock(
            &self,
            share_request_access_completion_block: Option<&block2::DynBlock<dyn Fn(*mut NSError)>>,
        );
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "CKOperation")]
impl CKShareRequestAccessOperation {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
