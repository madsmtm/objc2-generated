// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "GameplayKit", kind = "framework")]
extern "C" {}

#[cfg(feature = "GKAgent")]
#[path = "GKAgent.rs"]
mod __GKAgent;
#[cfg(feature = "GKBehavior")]
#[path = "GKBehavior.rs"]
mod __GKBehavior;
#[cfg(feature = "GKComponent")]
#[path = "GKComponent.rs"]
mod __GKComponent;
#[cfg(feature = "GKCompositeBehavior")]
#[path = "GKCompositeBehavior.rs"]
mod __GKCompositeBehavior;
#[cfg(feature = "GKDecisionTree")]
#[path = "GKDecisionTree.rs"]
mod __GKDecisionTree;
#[cfg(feature = "GKEntity")]
#[path = "GKEntity.rs"]
mod __GKEntity;
#[cfg(feature = "GKGameModel")]
#[path = "GKGameModel.rs"]
mod __GKGameModel;
#[cfg(feature = "GKGoal")]
#[path = "GKGoal.rs"]
mod __GKGoal;
#[cfg(feature = "GKGraph")]
#[path = "GKGraph.rs"]
mod __GKGraph;
#[cfg(feature = "GKGraphNode")]
#[path = "GKGraphNode.rs"]
mod __GKGraphNode;
#[cfg(feature = "GKGridGraph")]
#[path = "GKGridGraph.rs"]
mod __GKGridGraph;
#[cfg(feature = "GKMeshGraph")]
#[path = "GKMeshGraph.rs"]
mod __GKMeshGraph;
#[cfg(feature = "GKMinmaxStrategist")]
#[path = "GKMinmaxStrategist.rs"]
mod __GKMinmaxStrategist;
#[cfg(feature = "GKMonteCarloStrategist")]
#[path = "GKMonteCarloStrategist.rs"]
mod __GKMonteCarloStrategist;
#[cfg(feature = "GKNoise")]
#[path = "GKNoise.rs"]
mod __GKNoise;
#[cfg(feature = "GKNoiseMap")]
#[path = "GKNoiseMap.rs"]
mod __GKNoiseMap;
#[cfg(feature = "GKNoiseSource")]
#[path = "GKNoiseSource.rs"]
mod __GKNoiseSource;
#[cfg(feature = "GKObstacle")]
#[path = "GKObstacle.rs"]
mod __GKObstacle;
#[cfg(feature = "GKObstacleGraph")]
#[path = "GKObstacleGraph.rs"]
mod __GKObstacleGraph;
#[cfg(feature = "GKOctree")]
#[path = "GKOctree.rs"]
mod __GKOctree;
#[cfg(feature = "GKPath")]
#[path = "GKPath.rs"]
mod __GKPath;
#[cfg(feature = "GKPrimitives")]
#[path = "GKPrimitives.rs"]
mod __GKPrimitives;
#[cfg(feature = "GKQuadtree")]
#[path = "GKQuadtree.rs"]
mod __GKQuadtree;
#[cfg(feature = "GKRTree")]
#[path = "GKRTree.rs"]
mod __GKRTree;
#[cfg(feature = "GKRandomDistribution")]
#[path = "GKRandomDistribution.rs"]
mod __GKRandomDistribution;
#[cfg(feature = "GKRandomSource")]
#[path = "GKRandomSource.rs"]
mod __GKRandomSource;
#[cfg(feature = "GKRuleSystem")]
#[path = "GKRuleSystem.rs"]
mod __GKRuleSystem;
#[cfg(feature = "GKSCNNodeComponent")]
#[path = "GKSCNNodeComponent.rs"]
mod __GKSCNNodeComponent;
#[cfg(feature = "GKSKNodeComponent")]
#[path = "GKSKNodeComponent.rs"]
mod __GKSKNodeComponent;
#[cfg(feature = "GKScene")]
#[path = "GKScene.rs"]
mod __GKScene;
#[cfg(feature = "GKState")]
#[path = "GKState.rs"]
mod __GKState;
#[cfg(feature = "GKStateMachine")]
#[path = "GKStateMachine.rs"]
mod __GKStateMachine;
#[cfg(feature = "GKStrategist")]
#[path = "GKStrategist.rs"]
mod __GKStrategist;
#[cfg(feature = "GKVersion")]
#[path = "GKVersion.rs"]
mod __GKVersion;
#[cfg(feature = "GameplayKitBase")]
#[path = "GameplayKitBase.rs"]
mod __GameplayKitBase;
#[cfg(feature = "SceneKit_Additions")]
#[path = "SceneKit_Additions.rs"]
mod __SceneKit_Additions;
#[cfg(feature = "SpriteKit_Additions")]
#[path = "SpriteKit_Additions.rs"]
mod __SpriteKit_Additions;

#[cfg(all(feature = "GKAgent", feature = "GKComponent"))]
pub use self::__GKAgent::GKAgent;
#[cfg(all(feature = "GKAgent", feature = "GKComponent"))]
pub use self::__GKAgent::GKAgent2D;
#[cfg(all(feature = "GKAgent", feature = "GKComponent"))]
pub use self::__GKAgent::GKAgent3D;
#[cfg(feature = "GKAgent")]
pub use self::__GKAgent::GKAgentDelegate;
#[cfg(feature = "GKBehavior")]
pub use self::__GKBehavior::GKBehavior;
#[cfg(feature = "GKComponent")]
pub use self::__GKComponent::GKComponent;
#[cfg(feature = "GKComponent")]
pub use self::__GKComponent::GKComponentSystem;
#[cfg(all(feature = "GKBehavior", feature = "GKCompositeBehavior"))]
pub use self::__GKCompositeBehavior::GKCompositeBehavior;
#[cfg(feature = "GKDecisionTree")]
pub use self::__GKDecisionTree::GKDecisionNode;
#[cfg(feature = "GKDecisionTree")]
pub use self::__GKDecisionTree::GKDecisionTree;
#[cfg(feature = "GKEntity")]
pub use self::__GKEntity::GKEntity;
#[cfg(feature = "GKGameModel")]
pub use self::__GKGameModel::GKGameModel;
#[cfg(feature = "GKGameModel")]
pub use self::__GKGameModel::GKGameModelMaxScore;
#[cfg(feature = "GKGameModel")]
pub use self::__GKGameModel::GKGameModelMinScore;
#[cfg(feature = "GKGameModel")]
pub use self::__GKGameModel::GKGameModelPlayer;
#[cfg(feature = "GKGameModel")]
pub use self::__GKGameModel::GKGameModelUpdate;
#[cfg(feature = "GKGoal")]
pub use self::__GKGoal::GKGoal;
#[cfg(feature = "GKGraph")]
pub use self::__GKGraph::GKGraph;
#[cfg(feature = "GKGraphNode")]
pub use self::__GKGraphNode::GKGraphNode;
#[cfg(feature = "GKGraphNode")]
pub use self::__GKGraphNode::GKGraphNode2D;
#[cfg(feature = "GKGraphNode")]
pub use self::__GKGraphNode::GKGraphNode3D;
#[cfg(feature = "GKGraphNode")]
pub use self::__GKGraphNode::GKGridGraphNode;
#[cfg(all(feature = "GKGraph", feature = "GKGridGraph"))]
pub use self::__GKGridGraph::GKGridGraph;
#[cfg(all(feature = "GKGraph", feature = "GKMeshGraph"))]
pub use self::__GKMeshGraph::GKMeshGraph;
#[cfg(feature = "GKMeshGraph")]
pub use self::__GKMeshGraph::GKMeshGraphTriangulationMode;
#[cfg(feature = "GKMinmaxStrategist")]
pub use self::__GKMinmaxStrategist::GKMinmaxStrategist;
#[cfg(feature = "GKMonteCarloStrategist")]
pub use self::__GKMonteCarloStrategist::GKMonteCarloStrategist;
#[cfg(feature = "GKNoise")]
pub use self::__GKNoise::GKNoise;
#[cfg(feature = "GKNoiseMap")]
pub use self::__GKNoiseMap::GKNoiseMap;
#[cfg(feature = "GKNoiseSource")]
pub use self::__GKNoiseSource::GKBillowNoiseSource;
#[cfg(feature = "GKNoiseSource")]
pub use self::__GKNoiseSource::GKCheckerboardNoiseSource;
#[cfg(feature = "GKNoiseSource")]
pub use self::__GKNoiseSource::GKCoherentNoiseSource;
#[cfg(feature = "GKNoiseSource")]
pub use self::__GKNoiseSource::GKConstantNoiseSource;
#[cfg(feature = "GKNoiseSource")]
pub use self::__GKNoiseSource::GKCylindersNoiseSource;
#[cfg(feature = "GKNoiseSource")]
pub use self::__GKNoiseSource::GKNoiseSource;
#[cfg(feature = "GKNoiseSource")]
pub use self::__GKNoiseSource::GKPerlinNoiseSource;
#[cfg(feature = "GKNoiseSource")]
pub use self::__GKNoiseSource::GKRidgedNoiseSource;
#[cfg(feature = "GKNoiseSource")]
pub use self::__GKNoiseSource::GKSpheresNoiseSource;
#[cfg(feature = "GKNoiseSource")]
pub use self::__GKNoiseSource::GKVoronoiNoiseSource;
#[cfg(feature = "GKObstacle")]
pub use self::__GKObstacle::GKCircleObstacle;
#[cfg(feature = "GKObstacle")]
pub use self::__GKObstacle::GKObstacle;
#[cfg(feature = "GKObstacle")]
pub use self::__GKObstacle::GKPolygonObstacle;
#[cfg(feature = "GKObstacle")]
pub use self::__GKObstacle::GKSphereObstacle;
#[cfg(all(feature = "GKGraph", feature = "GKObstacleGraph"))]
pub use self::__GKObstacleGraph::GKObstacleGraph;
#[cfg(feature = "GKOctree")]
pub use self::__GKOctree::GKOctree;
#[cfg(feature = "GKOctree")]
pub use self::__GKOctree::GKOctreeNode;
#[cfg(feature = "GKPath")]
pub use self::__GKPath::GKPath;
#[cfg(feature = "GKQuadtree")]
pub use self::__GKQuadtree::GKQuadtree;
#[cfg(feature = "GKQuadtree")]
pub use self::__GKQuadtree::GKQuadtreeNode;
#[cfg(feature = "GKRTree")]
pub use self::__GKRTree::GKRTree;
#[cfg(feature = "GKRTree")]
pub use self::__GKRTree::GKRTreeSplitStrategy;
#[cfg(feature = "GKRandomDistribution")]
pub use self::__GKRandomDistribution::GKGaussianDistribution;
#[cfg(feature = "GKRandomDistribution")]
pub use self::__GKRandomDistribution::GKRandomDistribution;
#[cfg(feature = "GKRandomDistribution")]
pub use self::__GKRandomDistribution::GKShuffledDistribution;
#[cfg(feature = "GKRandomSource")]
pub use self::__GKRandomSource::GKARC4RandomSource;
#[cfg(feature = "GKRandomSource")]
pub use self::__GKRandomSource::GKLinearCongruentialRandomSource;
#[cfg(feature = "GKRandomSource")]
pub use self::__GKRandomSource::GKMersenneTwisterRandomSource;
#[cfg(feature = "GKRandomSource")]
pub use self::__GKRandomSource::GKRandom;
#[cfg(feature = "GKRandomSource")]
pub use self::__GKRandomSource::GKRandomSource;
#[cfg(feature = "GKRandomSource")]
pub use self::__GKRandomSource::NSArrayGameplayKit;
#[cfg(feature = "GKRuleSystem")]
pub use self::__GKRuleSystem::GKNSPredicateRule;
#[cfg(feature = "GKRuleSystem")]
pub use self::__GKRuleSystem::GKRule;
#[cfg(feature = "GKRuleSystem")]
pub use self::__GKRuleSystem::GKRuleSystem;
#[cfg(all(feature = "GKComponent", feature = "GKSCNNodeComponent"))]
pub use self::__GKSCNNodeComponent::GKSCNNodeComponent;
#[cfg(all(feature = "GKComponent", feature = "GKSKNodeComponent"))]
pub use self::__GKSKNodeComponent::GKSKNodeComponent;
#[cfg(feature = "GKScene")]
pub use self::__GKScene::GKScene;
#[cfg(feature = "GKScene")]
pub use self::__GKScene::GKSceneRootNodeType;
#[cfg(feature = "GKState")]
pub use self::__GKState::GKState;
#[cfg(feature = "GKStateMachine")]
pub use self::__GKStateMachine::GKStateMachine;
#[cfg(feature = "GKStrategist")]
pub use self::__GKStrategist::GKStrategist;
#[cfg(feature = "GKVersion")]
pub use self::__GKVersion::GK_VERSION;
#[cfg(feature = "SceneKit_Additions")]
pub use self::__SceneKit_Additions::SCNNodeGameplayKit;
#[cfg(feature = "SpriteKit_Additions")]
pub use self::__SpriteKit_Additions::SKNodeGameplayKit;
#[cfg(feature = "SpriteKit_Additions")]
pub use self::__SpriteKit_Additions::SKTextureGameplayKit;
#[cfg(feature = "SpriteKit_Additions")]
pub use self::__SpriteKit_Additions::SKTileMapNodeGameplayKit;
