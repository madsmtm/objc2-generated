// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::unportable_markdown)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "CoreVideo", kind = "framework")]
extern "C" {}

#[cfg(feature = "CVBase")]
#[path = "CVBase.rs"]
mod __CVBase;
#[cfg(feature = "CVBuffer")]
#[path = "CVBuffer.rs"]
mod __CVBuffer;
#[cfg(feature = "CVDisplayLink")]
#[path = "CVDisplayLink.rs"]
mod __CVDisplayLink;
#[cfg(feature = "CVHostTime")]
#[path = "CVHostTime.rs"]
mod __CVHostTime;
#[cfg(feature = "CVImageBuffer")]
#[path = "CVImageBuffer.rs"]
mod __CVImageBuffer;
#[cfg(feature = "CVMetalBuffer")]
#[path = "CVMetalBuffer.rs"]
mod __CVMetalBuffer;
#[cfg(feature = "CVMetalBufferCache")]
#[path = "CVMetalBufferCache.rs"]
mod __CVMetalBufferCache;
#[cfg(feature = "CVMetalTexture")]
#[path = "CVMetalTexture.rs"]
mod __CVMetalTexture;
#[cfg(feature = "CVMetalTextureCache")]
#[path = "CVMetalTextureCache.rs"]
mod __CVMetalTextureCache;
#[cfg(feature = "CVOpenGLBuffer")]
#[path = "CVOpenGLBuffer.rs"]
mod __CVOpenGLBuffer;
#[cfg(feature = "CVOpenGLBufferPool")]
#[path = "CVOpenGLBufferPool.rs"]
mod __CVOpenGLBufferPool;
#[cfg(feature = "CVOpenGLTexture")]
#[path = "CVOpenGLTexture.rs"]
mod __CVOpenGLTexture;
#[cfg(feature = "CVOpenGLTextureCache")]
#[path = "CVOpenGLTextureCache.rs"]
mod __CVOpenGLTextureCache;
#[cfg(feature = "CVPixelBuffer")]
#[path = "CVPixelBuffer.rs"]
mod __CVPixelBuffer;
#[cfg(feature = "CVPixelBufferIOSurface")]
#[path = "CVPixelBufferIOSurface.rs"]
mod __CVPixelBufferIOSurface;
#[cfg(feature = "CVPixelBufferPool")]
#[path = "CVPixelBufferPool.rs"]
mod __CVPixelBufferPool;
#[cfg(feature = "CVPixelFormatDescription")]
#[path = "CVPixelFormatDescription.rs"]
mod __CVPixelFormatDescription;
#[cfg(feature = "CVReturn")]
#[path = "CVReturn.rs"]
mod __CVReturn;

#[cfg(feature = "CVBase")]
pub use self::__CVBase::kCVIndefiniteTime;
#[cfg(feature = "CVBase")]
pub use self::__CVBase::kCVZeroTime;
#[cfg(feature = "CVBase")]
pub use self::__CVBase::CVOptionFlags;
#[cfg(feature = "CVBase")]
pub use self::__CVBase::CVSMPTETime;
#[cfg(feature = "CVBase")]
pub use self::__CVBase::CVSMPTETimeFlags;
#[cfg(feature = "CVBase")]
pub use self::__CVBase::CVSMPTETimeType;
#[cfg(feature = "CVBase")]
pub use self::__CVBase::CVTime;
#[cfg(feature = "CVBase")]
pub use self::__CVBase::CVTimeFlags;
#[cfg(feature = "CVBase")]
pub use self::__CVBase::CVTimeStamp;
#[cfg(feature = "CVBase")]
pub use self::__CVBase::CVTimeStampFlags;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::kCVBufferMovieTimeKey;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::kCVBufferNonPropagatedAttachmentsKey;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::kCVBufferPropagatedAttachmentsKey;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::kCVBufferTimeScaleKey;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::kCVBufferTimeValueKey;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::CVAttachmentMode;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::CVBuffer;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::CVBufferCopyAttachment;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::CVBufferCopyAttachments;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::CVBufferGetAttachment;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::CVBufferGetAttachments;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::CVBufferHasAttachment;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::CVBufferPropagateAttachments;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::CVBufferRemoveAllAttachments;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::CVBufferRemoveAttachment;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::CVBufferSetAttachment;
#[cfg(feature = "CVBuffer")]
pub use self::__CVBuffer::CVBufferSetAttachments;
#[cfg(feature = "CVDisplayLink")]
pub use self::__CVDisplayLink::CVDisplayLink;
#[cfg(all(feature = "CVDisplayLink", feature = "CVReturn"))]
pub use self::__CVDisplayLink::CVDisplayLinkCreateWithActiveCGDisplays;
#[cfg(all(
    feature = "CVDisplayLink",
    feature = "CVReturn",
    feature = "objc2-core-graphics"
))]
pub use self::__CVDisplayLink::CVDisplayLinkCreateWithCGDisplay;
#[cfg(all(
    feature = "CVDisplayLink",
    feature = "CVReturn",
    feature = "objc2-core-graphics"
))]
pub use self::__CVDisplayLink::CVDisplayLinkCreateWithCGDisplays;
#[cfg(all(
    feature = "CVDisplayLink",
    feature = "CVReturn",
    feature = "objc2-core-graphics"
))]
pub use self::__CVDisplayLink::CVDisplayLinkCreateWithOpenGLDisplayMask;
#[cfg(feature = "CVDisplayLink")]
pub use self::__CVDisplayLink::CVDisplayLinkGetActualOutputVideoRefreshPeriod;
#[cfg(all(feature = "CVDisplayLink", feature = "objc2-core-graphics"))]
pub use self::__CVDisplayLink::CVDisplayLinkGetCurrentCGDisplay;
#[cfg(all(feature = "CVBase", feature = "CVDisplayLink", feature = "CVReturn"))]
pub use self::__CVDisplayLink::CVDisplayLinkGetCurrentTime;
#[cfg(all(feature = "CVBase", feature = "CVDisplayLink"))]
pub use self::__CVDisplayLink::CVDisplayLinkGetNominalOutputVideoRefreshPeriod;
#[cfg(all(feature = "CVBase", feature = "CVDisplayLink"))]
pub use self::__CVDisplayLink::CVDisplayLinkGetOutputVideoLatency;
#[cfg(feature = "CVDisplayLink")]
pub use self::__CVDisplayLink::CVDisplayLinkIsRunning;
#[cfg(all(feature = "CVBase", feature = "CVDisplayLink", feature = "CVReturn"))]
pub use self::__CVDisplayLink::CVDisplayLinkOutputCallback;
#[cfg(all(
    feature = "CVBase",
    feature = "CVDisplayLink",
    feature = "CVReturn",
    feature = "block2"
))]
pub use self::__CVDisplayLink::CVDisplayLinkOutputHandler;
#[cfg(all(
    feature = "CVDisplayLink",
    feature = "CVReturn",
    feature = "objc2-core-graphics"
))]
pub use self::__CVDisplayLink::CVDisplayLinkSetCurrentCGDisplay;
#[cfg(all(feature = "CVBase", feature = "CVDisplayLink", feature = "CVReturn"))]
pub use self::__CVDisplayLink::CVDisplayLinkSetOutputCallback;
#[cfg(all(
    feature = "CVBase",
    feature = "CVDisplayLink",
    feature = "CVReturn",
    feature = "block2"
))]
pub use self::__CVDisplayLink::CVDisplayLinkSetOutputHandler;
#[cfg(all(feature = "CVDisplayLink", feature = "CVReturn"))]
pub use self::__CVDisplayLink::CVDisplayLinkStart;
#[cfg(all(feature = "CVDisplayLink", feature = "CVReturn"))]
pub use self::__CVDisplayLink::CVDisplayLinkStop;
#[cfg(all(feature = "CVBase", feature = "CVDisplayLink", feature = "CVReturn"))]
pub use self::__CVDisplayLink::CVDisplayLinkTranslateTime;
#[cfg(feature = "CVHostTime")]
pub use self::__CVHostTime::CVGetCurrentHostTime;
#[cfg(feature = "CVHostTime")]
pub use self::__CVHostTime::CVGetHostClockFrequency;
#[cfg(feature = "CVHostTime")]
pub use self::__CVHostTime::CVGetHostClockMinimumTimeDelta;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferAlphaChannelIsOpaque;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferAlphaChannelModeKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferAlphaChannelMode_PremultipliedAlpha;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferAlphaChannelMode_StraightAlpha;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferAmbientViewingEnvironmentKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferCGColorSpaceKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferChromaLocationBottomFieldKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferChromaLocationTopFieldKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferChromaLocation_Bottom;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferChromaLocation_BottomLeft;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferChromaLocation_Center;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferChromaLocation_DV420;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferChromaLocation_Left;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferChromaLocation_Top;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferChromaLocation_TopLeft;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferChromaSubsamplingKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferChromaSubsampling_411;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferChromaSubsampling_420;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferChromaSubsampling_422;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferCleanApertureHeightKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferCleanApertureHorizontalOffsetKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferCleanApertureKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferCleanApertureVerticalOffsetKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferCleanApertureWidthKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferColorPrimariesKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferColorPrimaries_DCI_P3;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferColorPrimaries_EBU_3213;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferColorPrimaries_ITU_R_2020;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferColorPrimaries_ITU_R_709_2;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferColorPrimaries_P22;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferColorPrimaries_P3_D65;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferColorPrimaries_SMPTE_C;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferContentLightLevelInfoKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferDisplayDimensionsKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferDisplayHeightKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferDisplayMaskRectangleKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferDisplayMaskRectangleStereoLeftKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferDisplayMaskRectangleStereoRightKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferDisplayMaskRectangle_LeftEdgePointsKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferDisplayMaskRectangle_RectangleHeightKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferDisplayMaskRectangle_RectangleLeftKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferDisplayMaskRectangle_RectangleTopKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferDisplayMaskRectangle_RectangleWidthKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferDisplayMaskRectangle_ReferenceRasterHeightKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferDisplayMaskRectangle_ReferenceRasterWidthKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferDisplayMaskRectangle_RightEdgePointsKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferDisplayWidthKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferFieldCountKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferFieldDetailKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferFieldDetailSpatialFirstLineEarly;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferFieldDetailSpatialFirstLineLate;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferFieldDetailTemporalBottomFirst;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferFieldDetailTemporalTopFirst;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferGammaLevelKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferICCProfileKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferLogTransferFunctionKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferLogTransferFunction_AppleLog;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferMasteringDisplayColorVolumeKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferPixelAspectRatioHorizontalSpacingKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferPixelAspectRatioKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferPixelAspectRatioVerticalSpacingKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferPostDecodeProcessingFrameMetadataKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferPostDecodeProcessingSequenceMetadataKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferPreferredCleanApertureKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferRegionOfInterestKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferSceneIlluminationKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferTransferFunctionKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferTransferFunction_EBU_3213;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferTransferFunction_ITU_R_2020;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferTransferFunction_ITU_R_2100_HLG;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferTransferFunction_ITU_R_709_2;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferTransferFunction_Linear;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferTransferFunction_SMPTE_240M_1995;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferTransferFunction_SMPTE_C;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferTransferFunction_SMPTE_ST_2084_PQ;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferTransferFunction_SMPTE_ST_428_1;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferTransferFunction_UseGamma;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferTransferFunction_sRGB;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferYCbCrMatrixKey;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferYCbCrMatrix_DCI_P3;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferYCbCrMatrix_ITU_R_2020;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferYCbCrMatrix_ITU_R_601_4;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferYCbCrMatrix_ITU_R_709_2;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferYCbCrMatrix_P3_D65;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::kCVImageBufferYCbCrMatrix_SMPTE_240M_1995;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::CVColorPrimariesGetIntegerCodePointForString;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::CVColorPrimariesGetStringForIntegerCodePoint;
#[cfg(all(feature = "CVBuffer", feature = "CVImageBuffer"))]
pub use self::__CVImageBuffer::CVImageBuffer;
#[cfg(all(feature = "CVImageBuffer", feature = "objc2-core-graphics"))]
pub use self::__CVImageBuffer::CVImageBufferCreateColorSpaceFromAttachments;
#[cfg(all(feature = "CVBuffer", feature = "CVImageBuffer"))]
pub use self::__CVImageBuffer::CVImageBufferGetCleanRect;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "objc2-core-graphics"
))]
pub use self::__CVImageBuffer::CVImageBufferGetColorSpace;
#[cfg(all(feature = "CVBuffer", feature = "CVImageBuffer"))]
pub use self::__CVImageBuffer::CVImageBufferGetDisplaySize;
#[cfg(all(feature = "CVBuffer", feature = "CVImageBuffer"))]
pub use self::__CVImageBuffer::CVImageBufferGetEncodedSize;
#[cfg(all(feature = "CVBuffer", feature = "CVImageBuffer"))]
pub use self::__CVImageBuffer::CVImageBufferIsFlipped;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::CVTransferFunctionGetIntegerCodePointForString;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::CVTransferFunctionGetStringForIntegerCodePoint;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::CVYCbCrMatrixGetIntegerCodePointForString;
#[cfg(feature = "CVImageBuffer")]
pub use self::__CVImageBuffer::CVYCbCrMatrixGetStringForIntegerCodePoint;
#[cfg(all(feature = "CVBuffer", feature = "CVMetalBuffer"))]
pub use self::__CVMetalBuffer::CVMetalBuffer;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVMetalBuffer",
    feature = "objc2",
    feature = "objc2-metal"
))]
#[cfg(not(target_os = "watchos"))]
pub use self::__CVMetalBuffer::CVMetalBufferGetBuffer;
#[cfg(feature = "CVMetalBuffer")]
pub use self::__CVMetalBuffer::CVMetalBufferGetTypeID;
#[cfg(feature = "CVMetalBufferCache")]
pub use self::__CVMetalBufferCache::kCVMetalBufferCacheMaximumBufferAgeKey;
#[cfg(feature = "CVMetalBufferCache")]
pub use self::__CVMetalBufferCache::CVMetalBufferCache;
#[cfg(all(
    feature = "CVMetalBufferCache",
    feature = "CVReturn",
    feature = "objc2",
    feature = "objc2-metal"
))]
#[cfg(not(target_os = "watchos"))]
pub use self::__CVMetalBufferCache::CVMetalBufferCacheCreate;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVMetalBuffer",
    feature = "CVMetalBufferCache",
    feature = "CVReturn"
))]
pub use self::__CVMetalBufferCache::CVMetalBufferCacheCreateBufferFromImage;
#[cfg(all(feature = "CVBase", feature = "CVMetalBufferCache"))]
pub use self::__CVMetalBufferCache::CVMetalBufferCacheFlush;
#[cfg(feature = "CVMetalTexture")]
pub use self::__CVMetalTexture::kCVMetalTextureStorageMode;
#[cfg(feature = "CVMetalTexture")]
pub use self::__CVMetalTexture::kCVMetalTextureUsage;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVMetalTexture"
))]
pub use self::__CVMetalTexture::CVMetalTexture;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVMetalTexture",
    feature = "objc2",
    feature = "objc2-metal"
))]
#[cfg(not(target_os = "watchos"))]
pub use self::__CVMetalTexture::CVMetalTextureGetTexture;
#[cfg(feature = "CVMetalTexture")]
pub use self::__CVMetalTexture::CVMetalTextureGetTypeID;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVMetalTexture"
))]
pub use self::__CVMetalTexture::CVMetalTextureIsFlipped;
#[cfg(feature = "CVMetalTextureCache")]
pub use self::__CVMetalTextureCache::kCVMetalTextureCacheMaximumTextureAgeKey;
#[cfg(feature = "CVMetalTextureCache")]
pub use self::__CVMetalTextureCache::CVMetalTextureCache;
#[cfg(all(
    feature = "CVMetalTextureCache",
    feature = "CVReturn",
    feature = "objc2",
    feature = "objc2-metal"
))]
#[cfg(not(target_os = "watchos"))]
pub use self::__CVMetalTextureCache::CVMetalTextureCacheCreate;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVMetalTexture",
    feature = "CVMetalTextureCache",
    feature = "CVReturn",
    feature = "objc2-metal"
))]
#[cfg(not(target_os = "watchos"))]
pub use self::__CVMetalTextureCache::CVMetalTextureCacheCreateTextureFromImage;
#[cfg(all(feature = "CVBase", feature = "CVMetalTextureCache"))]
pub use self::__CVMetalTextureCache::CVMetalTextureCacheFlush;
#[cfg(feature = "CVOpenGLBuffer")]
pub use self::__CVOpenGLBuffer::kCVOpenGLBufferHeight;
#[cfg(feature = "CVOpenGLBuffer")]
pub use self::__CVOpenGLBuffer::kCVOpenGLBufferInternalFormat;
#[cfg(feature = "CVOpenGLBuffer")]
pub use self::__CVOpenGLBuffer::kCVOpenGLBufferMaximumMipmapLevel;
#[cfg(feature = "CVOpenGLBuffer")]
pub use self::__CVOpenGLBuffer::kCVOpenGLBufferTarget;
#[cfg(feature = "CVOpenGLBuffer")]
pub use self::__CVOpenGLBuffer::kCVOpenGLBufferWidth;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVOpenGLBuffer"
))]
pub use self::__CVOpenGLBuffer::CVOpenGLBuffer;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVOpenGLBuffer",
    feature = "CVReturn"
))]
pub use self::__CVOpenGLBuffer::CVOpenGLBufferCreate;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVOpenGLBuffer"
))]
pub use self::__CVOpenGLBuffer::CVOpenGLBufferGetAttributes;
#[cfg(feature = "CVOpenGLBuffer")]
pub use self::__CVOpenGLBuffer::CVOpenGLBufferGetTypeID;
#[cfg(feature = "CVOpenGLBufferPool")]
pub use self::__CVOpenGLBufferPool::kCVOpenGLBufferPoolMaximumBufferAgeKey;
#[cfg(feature = "CVOpenGLBufferPool")]
pub use self::__CVOpenGLBufferPool::kCVOpenGLBufferPoolMinimumBufferCountKey;
#[cfg(feature = "CVOpenGLBufferPool")]
pub use self::__CVOpenGLBufferPool::CVOpenGLBufferPool;
#[cfg(all(feature = "CVOpenGLBufferPool", feature = "CVReturn"))]
pub use self::__CVOpenGLBufferPool::CVOpenGLBufferPoolCreate;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVOpenGLBuffer",
    feature = "CVOpenGLBufferPool",
    feature = "CVReturn"
))]
pub use self::__CVOpenGLBufferPool::CVOpenGLBufferPoolCreateOpenGLBuffer;
#[cfg(feature = "CVOpenGLBufferPool")]
pub use self::__CVOpenGLBufferPool::CVOpenGLBufferPoolGetAttributes;
#[cfg(feature = "CVOpenGLBufferPool")]
pub use self::__CVOpenGLBufferPool::CVOpenGLBufferPoolGetOpenGLBufferAttributes;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVOpenGLTexture"
))]
pub use self::__CVOpenGLTexture::CVOpenGLTexture;
#[cfg(feature = "CVOpenGLTexture")]
pub use self::__CVOpenGLTexture::CVOpenGLTextureGetTypeID;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVOpenGLTexture"
))]
pub use self::__CVOpenGLTexture::CVOpenGLTextureIsFlipped;
#[cfg(feature = "CVOpenGLTextureCache")]
pub use self::__CVOpenGLTextureCache::kCVOpenGLTextureCacheChromaSamplingModeAutomatic;
#[cfg(feature = "CVOpenGLTextureCache")]
pub use self::__CVOpenGLTextureCache::kCVOpenGLTextureCacheChromaSamplingModeBestPerformance;
#[cfg(feature = "CVOpenGLTextureCache")]
pub use self::__CVOpenGLTextureCache::kCVOpenGLTextureCacheChromaSamplingModeHighestQuality;
#[cfg(feature = "CVOpenGLTextureCache")]
pub use self::__CVOpenGLTextureCache::kCVOpenGLTextureCacheChromaSamplingModeKey;
#[cfg(feature = "CVOpenGLTextureCache")]
pub use self::__CVOpenGLTextureCache::CVOpenGLTextureCache;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVOpenGLTexture",
    feature = "CVOpenGLTextureCache",
    feature = "CVReturn"
))]
pub use self::__CVOpenGLTextureCache::CVOpenGLTextureCacheCreateTextureFromImage;
#[cfg(all(feature = "CVBase", feature = "CVOpenGLTextureCache"))]
pub use self::__CVOpenGLTextureCache::CVOpenGLTextureCacheFlush;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferBytesPerRowAlignmentKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferCGBitmapContextCompatibilityKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferCGImageCompatibilityKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferExtendedPixelsBottomKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferExtendedPixelsLeftKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferExtendedPixelsRightKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferExtendedPixelsTopKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferHeightKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferIOSurfacePropertiesKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferMemoryAllocatorKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferMetalCompatibilityKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferOpenGLCompatibilityKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferOpenGLESCompatibilityKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferOpenGLESTextureCacheCompatibilityKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferOpenGLTextureCacheCompatibilityKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferPixelFormatTypeKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferPlaneAlignmentKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferProResRAWKey_BlackLevel;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferProResRAWKey_ColorMatrix;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferProResRAWKey_GainFactor;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferProResRAWKey_MetadataExtension;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferProResRAWKey_RecommendedCrop;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferProResRAWKey_SenselSitingOffsets;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferProResRAWKey_WhiteBalanceBlueFactor;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferProResRAWKey_WhiteBalanceCCT;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferProResRAWKey_WhiteBalanceRedFactor;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferProResRAWKey_WhiteLevel;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferVersatileBayerKey_BayerPattern;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelBufferWidthKey;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_128RGBAFloat;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_14Bayer_BGGR;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_14Bayer_GBRG;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_14Bayer_GRBG;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_14Bayer_RGGB;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_16BE555;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_16BE565;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_16Gray;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_16LE555;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_16LE5551;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_16LE565;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_16VersatileBayer;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_1IndexedGray_WhiteIsZero;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_1Monochrome;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_24BGR;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_24RGB;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_2Indexed;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_2IndexedGray_WhiteIsZero;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_30RGB;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_30RGBLEPackedWideGamut;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_30RGB_r210;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_32ABGR;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_32ARGB;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_32AlphaGray;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_32BGRA;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_32RGBA;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_40ARGBLEWideGamut;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_40ARGBLEWideGamutPremultiplied;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_420YpCbCr10BiPlanarFullRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_420YpCbCr8BiPlanarFullRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_420YpCbCr8Planar;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_420YpCbCr8PlanarFullRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_420YpCbCr8VideoRange_8A_TriPlanar;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_422YpCbCr10;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_422YpCbCr10BiPlanarFullRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_422YpCbCr16;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_422YpCbCr16BiPlanarVideoRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_422YpCbCr8;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_422YpCbCr8BiPlanarFullRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_422YpCbCr8FullRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_422YpCbCr8_yuvs;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_422YpCbCr_4A_8BiPlanar;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_4444AYpCbCr16;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_4444AYpCbCr8;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_4444AYpCbCrFloat;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_4444YpCbCrA8;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_4444YpCbCrA8R;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_444YpCbCr10;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_444YpCbCr10BiPlanarFullRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_444YpCbCr16BiPlanarVideoRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_444YpCbCr16VideoRange_16A_TriPlanar;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_444YpCbCr8;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_444YpCbCr8BiPlanarFullRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_444YpCbCr8BiPlanarVideoRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_48RGB;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_4Indexed;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_4IndexedGray_WhiteIsZero;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_64ARGB;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_64RGBAHalf;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_64RGBALE;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_64RGBA_DownscaledProResRAW;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_8Indexed;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_8IndexedGray_WhiteIsZero;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_96VersatileBayerPacked12;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_ARGB2101010LEPacked;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_DepthFloat16;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_DepthFloat32;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_DisparityFloat16;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_DisparityFloat32;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_Lossless_32BGRA;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_Lossless_420YpCbCr10PackedBiPlanarFullRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_Lossless_420YpCbCr10PackedBiPlanarVideoRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_Lossless_420YpCbCr8BiPlanarFullRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_Lossless_420YpCbCr8BiPlanarVideoRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_Lossless_422YpCbCr10PackedBiPlanarVideoRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_Lossless_64RGBAHalf;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_Lossy_32BGRA;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_Lossy_420YpCbCr10PackedBiPlanarVideoRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_Lossy_420YpCbCr8BiPlanarFullRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_Lossy_420YpCbCr8BiPlanarVideoRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_Lossy_422YpCbCr10PackedBiPlanarVideoRange;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_OneComponent10;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_OneComponent12;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_OneComponent16;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_OneComponent16Half;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_OneComponent32Float;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_OneComponent8;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_TwoComponent16;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_TwoComponent16Half;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_TwoComponent32Float;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVPixelFormatType_TwoComponent8;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVVersatileBayer_BayerPattern_BGGR;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVVersatileBayer_BayerPattern_GBRG;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVVersatileBayer_BayerPattern_GRBG;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::kCVVersatileBayer_BayerPattern_RGGB;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBuffer;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferCopyCreationAttributes;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer",
    feature = "CVReturn"
))]
pub use self::__CVPixelBuffer::CVPixelBufferCreate;
#[cfg(all(feature = "CVPixelBuffer", feature = "CVReturn"))]
pub use self::__CVPixelBuffer::CVPixelBufferCreateResolvedAttributesDictionary;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer",
    feature = "CVReturn"
))]
pub use self::__CVPixelBuffer::CVPixelBufferCreateWithBytes;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer",
    feature = "CVReturn"
))]
pub use self::__CVPixelBuffer::CVPixelBufferCreateWithPlanarBytes;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer",
    feature = "CVReturn"
))]
pub use self::__CVPixelBuffer::CVPixelBufferFillExtendedPixels;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferGetBaseAddress;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferGetBaseAddressOfPlane;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferGetBytesPerRow;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferGetBytesPerRowOfPlane;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferGetDataSize;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferGetExtendedPixels;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferGetHeight;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferGetHeightOfPlane;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferGetPixelFormatType;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferGetPlaneCount;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::CVPixelBufferGetTypeID;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferGetWidth;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferGetWidthOfPlane;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferIsCompatibleWithAttributes;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer"
))]
pub use self::__CVPixelBuffer::CVPixelBufferIsPlanar;
#[cfg(all(
    feature = "CVBase",
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer",
    feature = "CVReturn"
))]
pub use self::__CVPixelBuffer::CVPixelBufferLockBaseAddress;
#[cfg(all(feature = "CVBase", feature = "CVPixelBuffer"))]
pub use self::__CVPixelBuffer::CVPixelBufferLockFlags;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::CVPixelBufferReleaseBytesCallback;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::CVPixelBufferReleasePlanarBytesCallback;
#[cfg(all(
    feature = "CVBase",
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer",
    feature = "CVReturn"
))]
pub use self::__CVPixelBuffer::CVPixelBufferUnlockBaseAddress;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::CVPlanarComponentInfo;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::CVPlanarPixelBufferInfo;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::CVPlanarPixelBufferInfo_YCbCrBiPlanar;
#[cfg(feature = "CVPixelBuffer")]
pub use self::__CVPixelBuffer::CVPlanarPixelBufferInfo_YCbCrPlanar;
#[cfg(feature = "CVPixelBufferIOSurface")]
pub use self::__CVPixelBufferIOSurface::kCVPixelBufferIOSurfaceCoreAnimationCompatibilityKey;
#[cfg(feature = "CVPixelBufferIOSurface")]
pub use self::__CVPixelBufferIOSurface::kCVPixelBufferIOSurfaceOpenGLESFBOCompatibilityKey;
#[cfg(feature = "CVPixelBufferIOSurface")]
pub use self::__CVPixelBufferIOSurface::kCVPixelBufferIOSurfaceOpenGLESTextureCompatibilityKey;
#[cfg(feature = "CVPixelBufferIOSurface")]
pub use self::__CVPixelBufferIOSurface::kCVPixelBufferIOSurfaceOpenGLFBOCompatibilityKey;
#[cfg(feature = "CVPixelBufferIOSurface")]
pub use self::__CVPixelBufferIOSurface::kCVPixelBufferIOSurfaceOpenGLTextureCompatibilityKey;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer",
    feature = "CVPixelBufferIOSurface",
    feature = "CVReturn",
    feature = "objc2-io-surface"
))]
#[cfg(not(target_os = "watchos"))]
pub use self::__CVPixelBufferIOSurface::CVPixelBufferCreateWithIOSurface;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer",
    feature = "CVPixelBufferIOSurface",
    feature = "objc2-io-surface"
))]
#[cfg(not(target_os = "watchos"))]
pub use self::__CVPixelBufferIOSurface::CVPixelBufferGetIOSurface;
#[cfg(feature = "CVPixelBufferPool")]
pub use self::__CVPixelBufferPool::kCVPixelBufferPoolAllocationThresholdKey;
#[cfg(feature = "CVPixelBufferPool")]
pub use self::__CVPixelBufferPool::kCVPixelBufferPoolFreeBufferNotification;
#[cfg(feature = "CVPixelBufferPool")]
pub use self::__CVPixelBufferPool::kCVPixelBufferPoolMaximumBufferAgeKey;
#[cfg(feature = "CVPixelBufferPool")]
pub use self::__CVPixelBufferPool::kCVPixelBufferPoolMinimumBufferCountKey;
#[cfg(feature = "CVPixelBufferPool")]
pub use self::__CVPixelBufferPool::CVPixelBufferPool;
#[cfg(all(feature = "CVPixelBufferPool", feature = "CVReturn"))]
pub use self::__CVPixelBufferPool::CVPixelBufferPoolCreate;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer",
    feature = "CVPixelBufferPool",
    feature = "CVReturn"
))]
pub use self::__CVPixelBufferPool::CVPixelBufferPoolCreatePixelBuffer;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer",
    feature = "CVPixelBufferPool",
    feature = "CVReturn"
))]
pub use self::__CVPixelBufferPool::CVPixelBufferPoolCreatePixelBufferWithAuxAttributes;
#[cfg(all(feature = "CVBase", feature = "CVPixelBufferPool"))]
pub use self::__CVPixelBufferPool::CVPixelBufferPoolFlush;
#[cfg(all(feature = "CVBase", feature = "CVPixelBufferPool"))]
pub use self::__CVPixelBufferPool::CVPixelBufferPoolFlushFlags;
#[cfg(feature = "CVPixelBufferPool")]
pub use self::__CVPixelBufferPool::CVPixelBufferPoolGetAttributes;
#[cfg(feature = "CVPixelBufferPool")]
pub use self::__CVPixelBufferPool::CVPixelBufferPoolGetPixelBufferAttributes;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatBitsPerBlock;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatBitsPerComponent;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatBlackBlock;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatBlockHeight;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatBlockHorizontalAlignment;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatBlockVerticalAlignment;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatBlockWidth;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatCGBitmapContextCompatibility;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatCGBitmapInfo;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatCGImageCompatibility;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatCodecType;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatComponentRange;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatComponentRange_FullRange;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatComponentRange_VideoRange;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatComponentRange_WideRange;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatConstant;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatContainsAlpha;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatContainsGrayscale;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatContainsRGB;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatContainsSenselArray;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatContainsYCbCr;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatFillExtendedPixelsCallback;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatFourCC;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatHorizontalSubsampling;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatName;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatOpenGLCompatibility;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatOpenGLESCompatibility;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatOpenGLFormat;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatOpenGLInternalFormat;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatOpenGLType;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatPlanes;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatQDCompatibility;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::kCVPixelFormatVerticalSubsampling;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer",
    feature = "CVPixelFormatDescription"
))]
pub use self::__CVPixelFormatDescription::CVFillExtendedPixelsCallBack;
#[cfg(all(
    feature = "CVBuffer",
    feature = "CVImageBuffer",
    feature = "CVPixelBuffer",
    feature = "CVPixelFormatDescription"
))]
pub use self::__CVPixelFormatDescription::CVFillExtendedPixelsCallBackData;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::CVIsCompressedPixelFormatAvailable;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::CVPixelFormatDescriptionCreateWithPixelFormatType;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType;
#[cfg(feature = "CVPixelFormatDescription")]
pub use self::__CVPixelFormatDescription::CVPixelFormatTypeCopyFourCharCodeString;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnAllocationFailed;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnDisplayLinkAlreadyRunning;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnDisplayLinkCallbacksNotSet;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnDisplayLinkNotRunning;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnError;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnFirst;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnInvalidArgument;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnInvalidDisplay;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnInvalidPixelBufferAttributes;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnInvalidPixelFormat;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnInvalidPoolAttributes;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnInvalidSize;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnLast;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnPixelBufferNotMetalCompatible;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnPixelBufferNotOpenGLCompatible;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnPoolAllocationFailed;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnRetry;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnSuccess;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnUnsupported;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::kCVReturnWouldExceedAllocationThreshold;
#[cfg(feature = "CVReturn")]
pub use self::__CVReturn::CVReturn;
