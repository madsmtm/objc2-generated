// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::unportable_markdown)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "DiskArbitration", kind = "framework")]
extern "C" {}

#[cfg(feature = "DADisk")]
#[path = "DADisk.rs"]
mod __DADisk;
#[cfg(feature = "DADissenter")]
#[path = "DADissenter.rs"]
mod __DADissenter;
#[cfg(feature = "DASession")]
#[path = "DASession.rs"]
mod __DASession;

#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionBusNameKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionBusPathKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionDeviceGUIDKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionDeviceInternalKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionDeviceModelKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionDevicePathKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionDeviceProtocolKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionDeviceRevisionKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionDeviceTDMLockedKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionDeviceUnitKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionDeviceVendorKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionFSKitPrefix;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaBSDMajorKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaBSDMinorKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaBSDNameKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaBSDUnitKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaBlockSizeKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaContentKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaEjectableKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaEncryptedKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaEncryptionDetailKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaIconKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaKindKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaLeafKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaNameKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaPathKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaRemovableKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaSizeKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaTypeKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaUUIDKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaWholeKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionMediaWritableKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionRepairRunningKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionVolumeKindKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionVolumeMountableKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionVolumeNameKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionVolumeNetworkKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionVolumePathKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionVolumeTypeKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::kDADiskDescriptionVolumeUUIDKey;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::DADisk;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::DADiskCopyDescription;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::DADiskCopyWholeDisk;
#[cfg(all(feature = "DADisk", feature = "DASession"))]
pub use self::__DADisk::DADiskCreateFromBSDName;
#[cfg(all(feature = "DADisk", feature = "DASession"))]
pub use self::__DADisk::DADiskCreateFromVolumePath;
#[cfg(feature = "DADisk")]
pub use self::__DADisk::DADiskGetBSDName;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::kDAReturnBadArgument;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::kDAReturnBusy;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::kDAReturnError;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::kDAReturnExclusiveAccess;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::kDAReturnNoResources;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::kDAReturnNotFound;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::kDAReturnNotMounted;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::kDAReturnNotPermitted;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::kDAReturnNotPrivileged;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::kDAReturnNotReady;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::kDAReturnNotWritable;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::kDAReturnSuccess;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::kDAReturnUnsupported;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::DADissenter;
#[cfg(all(feature = "DADissenter", feature = "libc"))]
pub use self::__DADissenter::DADissenterCreate;
#[cfg(all(feature = "DADissenter", feature = "libc"))]
pub use self::__DADissenter::DADissenterGetStatus;
#[cfg(feature = "DADissenter")]
pub use self::__DADissenter::DADissenterGetStatusString;
#[cfg(all(feature = "DADissenter", feature = "libc"))]
pub use self::__DADissenter::DAReturn;
#[cfg(feature = "DASession")]
pub use self::__DASession::DAApprovalSession;
#[cfg(feature = "DASession")]
pub use self::__DASession::DAApprovalSessionCreate;
#[cfg(feature = "DASession")]
pub use self::__DASession::DAApprovalSessionScheduleWithRunLoop;
#[cfg(feature = "DASession")]
pub use self::__DASession::DAApprovalSessionUnscheduleFromRunLoop;
#[cfg(feature = "DASession")]
pub use self::__DASession::DASession;
#[cfg(feature = "DASession")]
pub use self::__DASession::DASessionCreate;
#[cfg(feature = "DASession")]
pub use self::__DASession::DASessionScheduleWithRunLoop;
#[cfg(all(feature = "DASession", feature = "dispatch2"))]
pub use self::__DASession::DASessionSetDispatchQueue;
#[cfg(feature = "DASession")]
pub use self::__DASession::DASessionUnscheduleFromRunLoop;
use core::ffi::*;
use core::ptr::NonNull;
use objc2_core_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskmountoptiondefault?language=objc)
pub const kDADiskMountOptionDefault: c_uint = 0x00000000;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskmountoptionwhole?language=objc)
pub const kDADiskMountOptionWhole: c_uint = 0x00000001;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskmountoptionnofollow?language=objc)
pub const kDADiskMountOptionNoFollow: c_uint = 0x00000002;

/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskmountoptions?language=objc)
pub type DADiskMountOptions = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskrenameoptiondefault?language=objc)
pub const kDADiskRenameOptionDefault: c_uint = 0x00000000;

/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskrenameoptions?language=objc)
pub type DADiskRenameOptions = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskunmountoptiondefault?language=objc)
pub const kDADiskUnmountOptionDefault: c_uint = 0x00000000;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskunmountoptionforce?language=objc)
pub const kDADiskUnmountOptionForce: c_uint = 0x00080000;
/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskunmountoptionwhole?language=objc)
pub const kDADiskUnmountOptionWhole: c_uint = 0x00000001;

/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskunmountoptions?language=objc)
pub type DADiskUnmountOptions = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskejectoptiondefault?language=objc)
pub const kDADiskEjectOptionDefault: c_uint = 0x00000000;

/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskejectoptions?language=objc)
pub type DADiskEjectOptions = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskclaimoptiondefault?language=objc)
pub const kDADiskClaimOptionDefault: c_uint = 0x00000000;

/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskclaimoptions?language=objc)
pub type DADiskClaimOptions = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskoptiondefault?language=objc)
pub const kDADiskOptionDefault: c_uint = 0x00000000;

/// [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskoptions?language=objc)
pub type DADiskOptions = u32;

extern "C" {
    /// Predefined CFDictionary object containing a set of disk description keys and values
    /// appropriate for matching unformatted media using DARegister*Callback().
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskdescriptionmatchmediaunformatted?language=objc)
    pub static kDADiskDescriptionMatchMediaUnformatted: &'static CFDictionary;
}

extern "C" {
    /// Predefined CFDictionary object containing a set of disk description keys and values
    /// appropriate for matching whole media using DARegister*Callback().
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskdescriptionmatchmediawhole?language=objc)
    pub static kDADiskDescriptionMatchMediaWhole: &'static CFDictionary;
}

extern "C" {
    /// Predefined CFDictionary object containing a set of disk description keys and values
    /// appropriate for matching mountable volumes using DARegister*Callback().
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskdescriptionmatchvolumemountable?language=objc)
    pub static kDADiskDescriptionMatchVolumeMountable: &'static CFDictionary;
}

extern "C" {
    /// Predefined CFDictionary object containing a set of disk description keys and values
    /// appropriate for matching unrecognized volumes using DARegister*Callback().
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskdescriptionmatchvolumeunrecognized?language=objc)
    pub static kDADiskDescriptionMatchVolumeUnrecognized: &'static CFDictionary;
}

extern "C" {
    /// Predefined CFArray object containing a set of disk description keys appropriate for
    /// watching volume name changes using DARegisterDiskDescriptionChangedCallback().
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskdescriptionwatchvolumename?language=objc)
    pub static kDADiskDescriptionWatchVolumeName: &'static CFArray;
}

extern "C" {
    /// Predefined CFArray object containing a set of disk description keys appropriate for
    /// watching volume mount changes using DARegisterDiskDescriptionChangedCallback().
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/kdadiskdescriptionwatchvolumepath?language=objc)
    pub static kDADiskDescriptionWatchVolumePath: &'static CFArray;
}

/// Type of the callback function used by DARegisterDiskAppearedCallback().
///
/// Parameter `disk`: A disk object.
///
/// Parameter `context`: The user-defined context parameter given to the registration function.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskappearedcallback?language=objc)
#[cfg(feature = "DADisk")]
pub type DADiskAppearedCallback = Option<unsafe extern "C-unwind" fn(NonNull<DADisk>, *mut c_void)>;

extern "C-unwind" {
    /// Registers a callback function to be called whenever a disk has appeared.
    ///
    /// Parameter `session`: The session object.
    ///
    /// Parameter `match`: The disk description keys to match.  Pass NULL for all disk objects.
    ///
    /// Parameter `callback`: The callback function to call when a disk has appeared.
    ///
    /// Parameter `context`: The user-defined context parameter to pass to the callback function.
    #[cfg(all(feature = "DADisk", feature = "DASession"))]
    pub fn DARegisterDiskAppearedCallback(
        session: &DASession,
        r#match: Option<&CFDictionary>,
        callback: DADiskAppearedCallback,
        context: *mut c_void,
    );
}

/// Type of the callback function used by DARegisterDiskDescriptionChangedCallback().
///
/// Parameter `disk`: A disk object.
///
/// Parameter `keys`: A list of changed keys.
///
/// Parameter `context`: The user-defined context parameter given to the registration function.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskdescriptionchangedcallback?language=objc)
#[cfg(feature = "DADisk")]
pub type DADiskDescriptionChangedCallback =
    Option<unsafe extern "C-unwind" fn(NonNull<DADisk>, NonNull<CFArray>, *mut c_void)>;

extern "C-unwind" {
    /// Registers a callback function to be called whenever a disk description has changed.
    ///
    /// Parameter `session`: The session object.
    ///
    /// Parameter `match`: The disk description keys to match.  Pass NULL for all disk objects.
    ///
    /// Parameter `watch`: The disk description keys to watch.  Pass NULL for all keys.
    ///
    /// Parameter `callback`: The callback function to call when a watched key changes.
    ///
    /// Parameter `context`: The user-defined context parameter to pass to the callback function.
    #[cfg(all(feature = "DADisk", feature = "DASession"))]
    pub fn DARegisterDiskDescriptionChangedCallback(
        session: &DASession,
        r#match: Option<&CFDictionary>,
        watch: Option<&CFArray>,
        callback: DADiskDescriptionChangedCallback,
        context: *mut c_void,
    );
}

/// Type of the callback function used by DARegisterDiskDisappearedCallback().
///
/// Parameter `disk`: A disk object.
///
/// Parameter `context`: The user-defined context parameter given to the registration function.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskdisappearedcallback?language=objc)
#[cfg(feature = "DADisk")]
pub type DADiskDisappearedCallback =
    Option<unsafe extern "C-unwind" fn(NonNull<DADisk>, *mut c_void)>;

extern "C-unwind" {
    /// Registers a callback function to be called whenever a disk has disappeared.
    ///
    /// Parameter `session`: The session object.
    ///
    /// Parameter `match`: The disk description keys to match.  Pass NULL for all disk objects.
    ///
    /// Parameter `callback`: The callback function to call when a disk has disappeared.
    ///
    /// Parameter `context`: The user-defined context parameter to pass to the callback function.
    #[cfg(all(feature = "DADisk", feature = "DASession"))]
    pub fn DARegisterDiskDisappearedCallback(
        session: &DASession,
        r#match: Option<&CFDictionary>,
        callback: DADiskDisappearedCallback,
        context: *mut c_void,
    );
}

/// Type of the callback function used by DADiskMount().
///
/// Parameter `disk`: The disk object.
///
/// Parameter `dissenter`: A dissenter object on failure or NULL on success.
///
/// Parameter `context`: The user-defined context parameter given to the mount function.
///
/// If the disk is already mounted, then status code in the dissenter object will be set to kDAReturnBusy
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskmountcallback?language=objc)
#[cfg(all(feature = "DADisk", feature = "DADissenter"))]
pub type DADiskMountCallback =
    Option<unsafe extern "C-unwind" fn(NonNull<DADisk>, *const DADissenter, *mut c_void)>;

#[cfg(feature = "DADisk")]
impl DADisk {
    /// Mounts the volume at the specified disk object.
    ///
    /// Parameter `disk`: The disk object.
    ///
    /// Parameter `path`: The mount path.  Pass NULL for a "standard" mount path.
    ///
    /// Parameter `options`: The mount options.
    ///
    /// Parameter `callback`: The callback function to call once the mount completes.
    ///
    /// Parameter `context`: The user-defined context parameter to pass to the callback function.
    #[doc(alias = "DADiskMount")]
    #[cfg(all(feature = "DADisk", feature = "DADissenter"))]
    #[inline]
    pub unsafe fn mount(
        self: &DADisk,
        path: Option<&CFURL>,
        options: DADiskMountOptions,
        callback: DADiskMountCallback,
        context: *mut c_void,
    ) {
        extern "C-unwind" {
            fn DADiskMount(
                disk: &DADisk,
                path: Option<&CFURL>,
                options: DADiskMountOptions,
                callback: DADiskMountCallback,
                context: *mut c_void,
            );
        }
        unsafe { DADiskMount(self, path, options, callback, context) }
    }

    /// Mounts the volume at the specified disk object, with the specified mount options.
    ///
    /// Parameter `disk`: The disk object.
    ///
    /// Parameter `path`: The mount path.  Pass NULL for a "standard" mount path.
    ///
    /// Parameter `options`: The mount options.
    ///
    /// Parameter `callback`: The callback function to call once the mount completes.
    ///
    /// Parameter `context`: The user-defined context parameter to pass to the callback function.
    ///
    /// Parameter `arguments`: The null-terminated list of mount options to pass to /sbin/mount -o.
    #[doc(alias = "DADiskMountWithArguments")]
    #[cfg(all(feature = "DADisk", feature = "DADissenter"))]
    #[inline]
    pub unsafe fn mount_with_arguments(
        self: &DADisk,
        path: Option<&CFURL>,
        options: DADiskMountOptions,
        callback: DADiskMountCallback,
        context: *mut c_void,
        arguments: *mut *const CFString,
    ) {
        extern "C-unwind" {
            fn DADiskMountWithArguments(
                disk: &DADisk,
                path: Option<&CFURL>,
                options: DADiskMountOptions,
                callback: DADiskMountCallback,
                context: *mut c_void,
                arguments: *mut *const CFString,
            );
        }
        unsafe { DADiskMountWithArguments(self, path, options, callback, context, arguments) }
    }
}

/// Type of the callback function used by DARegisterDiskMountApprovalCallback().
///
/// Parameter `disk`: A disk object.
///
/// Parameter `context`: The user-defined context parameter given to the registration function.
///
/// Returns: A dissenter reference.  Pass NULL to approve.
///
/// The caller of this callback receives a reference to the returned object.  The
/// caller also implicitly retains the object and is responsible for releasing it
/// with CFRelease().
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskmountapprovalcallback?language=objc)
#[cfg(all(feature = "DADisk", feature = "DADissenter"))]
pub type DADiskMountApprovalCallback =
    Option<unsafe extern "C-unwind" fn(NonNull<DADisk>, *mut c_void) -> *const DADissenter>;

extern "C-unwind" {
    /// Registers a callback function to be called whenever a volume is to be mounted.
    ///
    /// Parameter `session`: The session object.
    ///
    /// Parameter `match`: The disk description keys to match.  Pass NULL for all disk objects.
    ///
    /// Parameter `callback`: The callback function to call when a volume is to be mounted.
    ///
    /// Parameter `context`: The user-defined context parameter to pass to the callback function.
    #[cfg(all(feature = "DADisk", feature = "DADissenter", feature = "DASession"))]
    pub fn DARegisterDiskMountApprovalCallback(
        session: &DASession,
        r#match: Option<&CFDictionary>,
        callback: DADiskMountApprovalCallback,
        context: *mut c_void,
    );
}

/// Type of the callback function used by DADiskRename().
///
/// Parameter `disk`: The disk object.
///
/// Parameter `dissenter`: A dissenter object on failure or NULL on success.
///
/// Parameter `context`: The user-defined context parameter given to the rename function.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskrenamecallback?language=objc)
#[cfg(all(feature = "DADisk", feature = "DADissenter"))]
pub type DADiskRenameCallback =
    Option<unsafe extern "C-unwind" fn(NonNull<DADisk>, *const DADissenter, *mut c_void)>;

#[cfg(feature = "DADisk")]
impl DADisk {
    /// Renames the volume at the specified disk object.
    ///
    /// Parameter `disk`: The disk object.
    ///
    /// Parameter `options`: The rename options.
    ///
    /// Parameter `callback`: The callback function to call once the rename completes.
    ///
    /// Parameter `context`: The user-defined context parameter to pass to the callback function.
    #[doc(alias = "DADiskRename")]
    #[cfg(all(feature = "DADisk", feature = "DADissenter"))]
    #[inline]
    pub unsafe fn rename(
        self: &DADisk,
        name: &CFString,
        options: DADiskRenameOptions,
        callback: DADiskRenameCallback,
        context: *mut c_void,
    ) {
        extern "C-unwind" {
            fn DADiskRename(
                disk: &DADisk,
                name: &CFString,
                options: DADiskRenameOptions,
                callback: DADiskRenameCallback,
                context: *mut c_void,
            );
        }
        unsafe { DADiskRename(self, name, options, callback, context) }
    }
}

/// Type of the callback function used by DADiskUnmount().
///
/// Parameter `disk`: The disk object.
///
/// Parameter `dissenter`: A dissenter object on failure or NULL on success.
///
/// Parameter `context`: The user-defined context parameter given to the unmount function.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskunmountcallback?language=objc)
#[cfg(all(feature = "DADisk", feature = "DADissenter"))]
pub type DADiskUnmountCallback =
    Option<unsafe extern "C-unwind" fn(NonNull<DADisk>, *const DADissenter, *mut c_void)>;

#[cfg(feature = "DADisk")]
impl DADisk {
    /// Unmounts the volume at the specified disk object.
    ///
    /// Parameter `disk`: The disk object.
    ///
    /// Parameter `options`: The unmount options.
    ///
    /// Parameter `callback`: The callback function to call once the unmount completes.
    ///
    /// Parameter `context`: The user-defined context parameter to pass to the callback function.
    #[doc(alias = "DADiskUnmount")]
    #[cfg(all(feature = "DADisk", feature = "DADissenter"))]
    #[inline]
    pub unsafe fn unmount(
        self: &DADisk,
        options: DADiskUnmountOptions,
        callback: DADiskUnmountCallback,
        context: *mut c_void,
    ) {
        extern "C-unwind" {
            fn DADiskUnmount(
                disk: &DADisk,
                options: DADiskUnmountOptions,
                callback: DADiskUnmountCallback,
                context: *mut c_void,
            );
        }
        unsafe { DADiskUnmount(self, options, callback, context) }
    }
}

/// Type of the callback function used by DARegisterDiskUnmountApprovalCallback().
///
/// Parameter `disk`: A disk object.
///
/// Parameter `context`: The user-defined context parameter given to the registration function.
///
/// Returns: A dissenter reference.  Pass NULL to approve.
///
/// The caller of this callback receives a reference to the returned object.  The
/// caller also implicitly retains the object and is responsible for releasing it
/// with CFRelease().
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskunmountapprovalcallback?language=objc)
#[cfg(all(feature = "DADisk", feature = "DADissenter"))]
pub type DADiskUnmountApprovalCallback =
    Option<unsafe extern "C-unwind" fn(NonNull<DADisk>, *mut c_void) -> *const DADissenter>;

extern "C-unwind" {
    /// Registers a callback function to be called whenever a volume is to be unmounted.
    ///
    /// Parameter `session`: The session object.
    ///
    /// Parameter `match`: The disk description keys to match.  Pass NULL for all disk objects.
    ///
    /// Parameter `callback`: The callback function to call when a volume is to be unmounted.
    ///
    /// Parameter `context`: The user-defined context parameter to pass to the callback function.
    #[cfg(all(feature = "DADisk", feature = "DADissenter", feature = "DASession"))]
    pub fn DARegisterDiskUnmountApprovalCallback(
        session: &DASession,
        r#match: Option<&CFDictionary>,
        callback: DADiskUnmountApprovalCallback,
        context: *mut c_void,
    );
}

/// Type of the callback function used by DADiskEject().
///
/// Parameter `disk`: The disk object.
///
/// Parameter `dissenter`: A dissenter object on failure or NULL on success.
///
/// Parameter `context`: The user-defined context parameter given to the eject function.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskejectcallback?language=objc)
#[cfg(all(feature = "DADisk", feature = "DADissenter"))]
pub type DADiskEjectCallback =
    Option<unsafe extern "C-unwind" fn(NonNull<DADisk>, *const DADissenter, *mut c_void)>;

#[cfg(feature = "DADisk")]
impl DADisk {
    /// Ejects the specified disk object.
    ///
    /// Parameter `disk`: The disk object.
    ///
    /// Parameter `options`: The eject options.
    ///
    /// Parameter `callback`: The callback function to call once the ejection completes.
    ///
    /// Parameter `context`: The user-defined context parameter to pass to the callback function.
    #[doc(alias = "DADiskEject")]
    #[cfg(all(feature = "DADisk", feature = "DADissenter"))]
    #[inline]
    pub unsafe fn eject(
        self: &DADisk,
        options: DADiskEjectOptions,
        callback: DADiskEjectCallback,
        context: *mut c_void,
    ) {
        extern "C-unwind" {
            fn DADiskEject(
                disk: &DADisk,
                options: DADiskEjectOptions,
                callback: DADiskEjectCallback,
                context: *mut c_void,
            );
        }
        unsafe { DADiskEject(self, options, callback, context) }
    }
}

/// Type of the callback function used by DARegisterDiskEjectApprovalCallback().
///
/// Parameter `disk`: A disk object.
///
/// Parameter `context`: The user-defined context parameter given to the registration function.
///
/// Returns: A dissenter reference.  Pass NULL to approve.
///
/// The caller of this callback receives a reference to the returned object.  The
/// caller also implicitly retains the object and is responsible for releasing it
/// with CFRelease().
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskejectapprovalcallback?language=objc)
#[cfg(all(feature = "DADisk", feature = "DADissenter"))]
pub type DADiskEjectApprovalCallback =
    Option<unsafe extern "C-unwind" fn(NonNull<DADisk>, *mut c_void) -> *const DADissenter>;

extern "C-unwind" {
    /// Registers a callback function to be called whenever a volume is to be ejected.
    ///
    /// Parameter `session`: The session object.
    ///
    /// Parameter `match`: The disk description keys to match.  Pass NULL for all disk objects.
    ///
    /// Parameter `callback`: The callback function to call when a volume is to be ejected.
    ///
    /// Parameter `context`: The user-defined context parameter to pass to the callback function.
    #[cfg(all(feature = "DADisk", feature = "DADissenter", feature = "DASession"))]
    pub fn DARegisterDiskEjectApprovalCallback(
        session: &DASession,
        r#match: Option<&CFDictionary>,
        callback: DADiskEjectApprovalCallback,
        context: *mut c_void,
    );
}

/// Type of the callback function used by DADiskClaim().
///
/// Parameter `disk`: The disk object.
///
/// Parameter `dissenter`: A dissenter object on failure or NULL on success.
///
/// Parameter `context`: The user-defined context parameter given to the claim function.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskclaimcallback?language=objc)
#[cfg(all(feature = "DADisk", feature = "DADissenter"))]
pub type DADiskClaimCallback =
    Option<unsafe extern "C-unwind" fn(NonNull<DADisk>, *const DADissenter, *mut c_void)>;

/// Type of the callback function used by DADiskClaim().
///
/// Parameter `disk`: The disk object.
///
/// Parameter `context`: The user-defined context parameter given to the claim function.
///
/// Returns: A dissenter reference.  Pass NULL to release claim.
///
/// The caller of this callback receives a reference to the returned object.  The
/// caller also implicitly retains the object and is responsible for releasing it
/// with CFRelease().
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskclaimreleasecallback?language=objc)
#[cfg(all(feature = "DADisk", feature = "DADissenter"))]
pub type DADiskClaimReleaseCallback =
    Option<unsafe extern "C-unwind" fn(NonNull<DADisk>, *mut c_void) -> *const DADissenter>;

#[cfg(feature = "DADisk")]
impl DADisk {
    /// Claims the specified disk object for exclusive use.
    ///
    /// Parameter `disk`: The disk object.
    ///
    /// Parameter `options`: The claim options.
    ///
    /// Parameter `release`: The callback function to call when the claim is to be released.
    ///
    /// Parameter `releaseContext`: The user-defined context parameter to pass to the callback function.
    ///
    /// Parameter `callback`: The callback function to call once the claim completes.
    ///
    /// Parameter `callbackContext`: The user-defined context parameter to pass to the callback function.
    #[doc(alias = "DADiskClaim")]
    #[cfg(all(feature = "DADisk", feature = "DADissenter"))]
    #[inline]
    pub unsafe fn claim(
        self: &DADisk,
        options: DADiskClaimOptions,
        release: DADiskClaimReleaseCallback,
        release_context: *mut c_void,
        callback: DADiskClaimCallback,
        callback_context: *mut c_void,
    ) {
        extern "C-unwind" {
            fn DADiskClaim(
                disk: &DADisk,
                options: DADiskClaimOptions,
                release: DADiskClaimReleaseCallback,
                release_context: *mut c_void,
                callback: DADiskClaimCallback,
                callback_context: *mut c_void,
            );
        }
        unsafe {
            DADiskClaim(
                self,
                options,
                release,
                release_context,
                callback,
                callback_context,
            )
        }
    }

    /// Reports whether or not the disk is claimed.
    ///
    /// Parameter `disk`: The disk object.
    ///
    /// Returns: TRUE if the disk is claimed, otherwise FALSE.
    #[doc(alias = "DADiskIsClaimed")]
    #[cfg(feature = "DADisk")]
    #[inline]
    pub unsafe fn is_claimed(self: &DADisk) -> bool {
        extern "C-unwind" {
            fn DADiskIsClaimed(disk: &DADisk) -> Boolean;
        }
        let ret = unsafe { DADiskIsClaimed(self) };
        ret != 0
    }

    /// Unclaims the specified disk object.
    ///
    /// Parameter `disk`: The disk object.
    #[doc(alias = "DADiskUnclaim")]
    #[cfg(feature = "DADisk")]
    #[inline]
    pub unsafe fn unclaim(self: &DADisk) {
        extern "C-unwind" {
            fn DADiskUnclaim(disk: &DADisk);
        }
        unsafe { DADiskUnclaim(self) }
    }
}

/// Type of the callback function used by DARegisterDiskPeekCallback().
///
/// Parameter `disk`: A disk object.
///
/// Parameter `context`: The user-defined context parameter given to the registration function.
///
/// The peek callback functions are called in a specific order, from lowest order to highest
/// order.  DADiskClaim() could be used here to claim the disk object and DADiskSetOptions()
/// could be used here to set up options on the disk object.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/diskarbitration/dadiskpeekcallback?language=objc)
#[cfg(feature = "DADisk")]
pub type DADiskPeekCallback = Option<unsafe extern "C-unwind" fn(NonNull<DADisk>, *mut c_void)>;

extern "C-unwind" {
    /// Registers a callback function to be called whenever a disk has been probed.
    ///
    /// Parameter `session`: The session object.
    ///
    /// Parameter `match`: The disk description keys to match.  Pass NULL for all disk objects.
    ///
    /// Parameter `order`: The callback order, from lowest to highest.  Pass 0 for the default.
    ///
    /// Parameter `callback`: The callback function to call when a disk has been probed.
    ///
    /// Parameter `context`: The user-defined context parameter to pass to the callback function.
    #[cfg(all(feature = "DADisk", feature = "DASession"))]
    pub fn DARegisterDiskPeekCallback(
        session: &DASession,
        r#match: Option<&CFDictionary>,
        order: CFIndex,
        callback: DADiskPeekCallback,
        context: *mut c_void,
    );
}

#[cfg(feature = "DADisk")]
impl DADisk {
    /// Obtains the options for the specified disk.
    ///
    /// Parameter `disk`: The disk object for which to obtain the options.
    ///
    /// Returns: The options.
    #[doc(alias = "DADiskGetOptions")]
    #[cfg(feature = "DADisk")]
    #[inline]
    pub unsafe fn options(self: &DADisk) -> DADiskOptions {
        extern "C-unwind" {
            fn DADiskGetOptions(disk: &DADisk) -> DADiskOptions;
        }
        unsafe { DADiskGetOptions(self) }
    }

    /// Sets the options for the specified disk.
    ///
    /// Parameter `disk`: The disk object for which to set the options.
    ///
    /// Parameter `options`: The options to set or clear.
    ///
    /// Parameter `value`: Pass TRUE to set options; otherwise pass FALSE to clear options.
    ///
    /// Returns: A result code.
    #[doc(alias = "DADiskSetOptions")]
    #[cfg(all(feature = "DADisk", feature = "DADissenter", feature = "libc"))]
    #[inline]
    pub unsafe fn set_options(self: &DADisk, options: DADiskOptions, value: bool) -> DAReturn {
        extern "C-unwind" {
            fn DADiskSetOptions(disk: &DADisk, options: DADiskOptions, value: Boolean) -> DAReturn;
        }
        unsafe { DADiskSetOptions(self, options, value as _) }
    }
}

extern "C-unwind" {
    /// Unregisters a registered callback function.
    ///
    /// Parameter `session`: The session object.
    ///
    /// Parameter `callback`: The registered callback function.
    ///
    /// Parameter `context`: The user-defined context parameter.
    #[cfg(feature = "DASession")]
    pub fn DAUnregisterCallback(
        session: &DASession,
        callback: NonNull<c_void>,
        context: *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(feature = "DASession")]
    pub fn DAUnregisterApprovalCallback(
        session: &DASession,
        callback: NonNull<c_void>,
        context: *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "DADisk", feature = "DADissenter"))]
    #[deprecated = "renamed to `DADisk::mount`"]
    pub fn DADiskMount(
        disk: &DADisk,
        path: Option<&CFURL>,
        options: DADiskMountOptions,
        callback: DADiskMountCallback,
        context: *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "DADisk", feature = "DADissenter"))]
    #[deprecated = "renamed to `DADisk::mount_with_arguments`"]
    pub fn DADiskMountWithArguments(
        disk: &DADisk,
        path: Option<&CFURL>,
        options: DADiskMountOptions,
        callback: DADiskMountCallback,
        context: *mut c_void,
        arguments: *mut *const CFString,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "DADisk", feature = "DADissenter"))]
    #[deprecated = "renamed to `DADisk::rename`"]
    pub fn DADiskRename(
        disk: &DADisk,
        name: &CFString,
        options: DADiskRenameOptions,
        callback: DADiskRenameCallback,
        context: *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "DADisk", feature = "DADissenter"))]
    #[deprecated = "renamed to `DADisk::unmount`"]
    pub fn DADiskUnmount(
        disk: &DADisk,
        options: DADiskUnmountOptions,
        callback: DADiskUnmountCallback,
        context: *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "DADisk", feature = "DADissenter"))]
    #[deprecated = "renamed to `DADisk::eject`"]
    pub fn DADiskEject(
        disk: &DADisk,
        options: DADiskEjectOptions,
        callback: DADiskEjectCallback,
        context: *mut c_void,
    );
}

extern "C-unwind" {
    #[cfg(all(feature = "DADisk", feature = "DADissenter"))]
    #[deprecated = "renamed to `DADisk::claim`"]
    pub fn DADiskClaim(
        disk: &DADisk,
        options: DADiskClaimOptions,
        release: DADiskClaimReleaseCallback,
        release_context: *mut c_void,
        callback: DADiskClaimCallback,
        callback_context: *mut c_void,
    );
}

#[cfg(feature = "DADisk")]
#[deprecated = "renamed to `DADisk::is_claimed`"]
#[inline]
pub unsafe extern "C-unwind" fn DADiskIsClaimed(disk: &DADisk) -> bool {
    extern "C-unwind" {
        fn DADiskIsClaimed(disk: &DADisk) -> Boolean;
    }
    let ret = unsafe { DADiskIsClaimed(disk) };
    ret != 0
}

extern "C-unwind" {
    #[cfg(feature = "DADisk")]
    #[deprecated = "renamed to `DADisk::unclaim`"]
    pub fn DADiskUnclaim(disk: &DADisk);
}

extern "C-unwind" {
    #[cfg(feature = "DADisk")]
    #[deprecated = "renamed to `DADisk::options`"]
    pub fn DADiskGetOptions(disk: &DADisk) -> DADiskOptions;
}

#[cfg(all(feature = "DADisk", feature = "DADissenter", feature = "libc"))]
#[deprecated = "renamed to `DADisk::set_options`"]
#[inline]
pub unsafe extern "C-unwind" fn DADiskSetOptions(
    disk: &DADisk,
    options: DADiskOptions,
    value: bool,
) -> DAReturn {
    extern "C-unwind" {
        fn DADiskSetOptions(disk: &DADisk, options: DADiskOptions, value: Boolean) -> DAReturn;
    }
    unsafe { DADiskSetOptions(disk, options, value as _) }
}
