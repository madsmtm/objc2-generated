// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::unportable_markdown)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "CryptoTokenKit", kind = "framework")]
extern "C" {}

#[cfg(feature = "TKBase")]
#[path = "TKBase.rs"]
mod __TKBase;
#[cfg(feature = "TKError")]
#[path = "TKError.rs"]
mod __TKError;
#[cfg(feature = "TKSmartCard")]
#[path = "TKSmartCard.rs"]
mod __TKSmartCard;
#[cfg(feature = "TKSmartCardATR")]
#[path = "TKSmartCardATR.rs"]
mod __TKSmartCardATR;
#[cfg(feature = "TKSmartCardSlotNFCSession")]
#[path = "TKSmartCardSlotNFCSession.rs"]
mod __TKSmartCardSlotNFCSession;
#[cfg(feature = "TKSmartCardToken")]
#[path = "TKSmartCardToken.rs"]
mod __TKSmartCardToken;
#[cfg(feature = "TKSmartCardTokenRegistrationManager")]
#[path = "TKSmartCardTokenRegistrationManager.rs"]
mod __TKSmartCardTokenRegistrationManager;
#[cfg(feature = "TKTLVRecord")]
#[path = "TKTLVRecord.rs"]
mod __TKTLVRecord;
#[cfg(feature = "TKToken")]
#[path = "TKToken.rs"]
mod __TKToken;
#[cfg(feature = "TKTokenConfiguration")]
#[path = "TKTokenConfiguration.rs"]
mod __TKTokenConfiguration;
#[cfg(feature = "TKTokenKeychainItem")]
#[path = "TKTokenKeychainItem.rs"]
mod __TKTokenKeychainItem;
#[cfg(feature = "TKTokenWatcher")]
#[path = "TKTokenWatcher.rs"]
mod __TKTokenWatcher;

#[cfg(feature = "TKError")]
pub use self::__TKError::TKErrorCode;
#[cfg(feature = "TKError")]
pub use self::__TKError::TKErrorDomain;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCard;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCardPINCharset;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCardPINCompletion;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCardPINConfirmation;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCardPINEncoding;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCardPINFormat;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCardPINJustification;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCardSlot;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCardSlotManager;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCardSlotState;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCardUserInteraction;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCardUserInteractionDelegate;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCardUserInteractionForPINOperation;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCardUserInteractionForSecurePINChange;
#[cfg(feature = "TKSmartCard")]
pub use self::__TKSmartCard::TKSmartCardUserInteractionForSecurePINVerification;
#[cfg(feature = "TKSmartCardATR")]
pub use self::__TKSmartCardATR::TKSmartCardATR;
#[cfg(feature = "TKSmartCardATR")]
pub use self::__TKSmartCardATR::TKSmartCardATRInterfaceGroup;
#[cfg(feature = "TKSmartCardATR")]
pub use self::__TKSmartCardATR::TKSmartCardProtocol;
#[cfg(feature = "TKSmartCardSlotNFCSession")]
pub use self::__TKSmartCardSlotNFCSession::TKSmartCardSlotNFCSession;
#[cfg(all(feature = "TKSmartCardToken", feature = "TKToken"))]
pub use self::__TKSmartCardToken::TKSmartCardToken;
#[cfg(all(feature = "TKSmartCardToken", feature = "TKToken"))]
pub use self::__TKSmartCardToken::TKSmartCardTokenDriver;
#[cfg(all(feature = "TKSmartCardToken", feature = "TKToken"))]
pub use self::__TKSmartCardToken::TKSmartCardTokenDriverDelegate;
#[cfg(all(feature = "TKSmartCardToken", feature = "TKToken"))]
pub use self::__TKSmartCardToken::TKSmartCardTokenSession;
#[cfg(all(feature = "TKSmartCardToken", feature = "TKToken"))]
pub use self::__TKSmartCardToken::TKTokenSmartCardPINAuthOperation;
#[cfg(feature = "TKSmartCardTokenRegistrationManager")]
pub use self::__TKSmartCardTokenRegistrationManager::TKSmartCardTokenRegistrationManager;
#[cfg(feature = "TKTLVRecord")]
pub use self::__TKTLVRecord::TKBERTLVRecord;
#[cfg(feature = "TKTLVRecord")]
pub use self::__TKTLVRecord::TKCompactTLVRecord;
#[cfg(feature = "TKTLVRecord")]
pub use self::__TKTLVRecord::TKSimpleTLVRecord;
#[cfg(feature = "TKTLVRecord")]
pub use self::__TKTLVRecord::TKTLVRecord;
#[cfg(feature = "TKTLVRecord")]
pub use self::__TKTLVRecord::TKTLVTag;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKToken;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKTokenAuthOperation;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKTokenDelegate;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKTokenDriver;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKTokenDriverClassID;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKTokenDriverDelegate;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKTokenInstanceID;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKTokenKeyAlgorithm;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKTokenKeyExchangeParameters;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKTokenObjectID;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKTokenOperation;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKTokenOperationConstraint;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKTokenPasswordAuthOperation;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKTokenSession;
#[cfg(feature = "TKToken")]
pub use self::__TKToken::TKTokenSessionDelegate;
#[cfg(feature = "TKTokenConfiguration")]
pub use self::__TKTokenConfiguration::TKTokenConfiguration;
#[cfg(feature = "TKTokenConfiguration")]
pub use self::__TKTokenConfiguration::TKTokenDriverConfiguration;
#[cfg(feature = "TKTokenKeychainItem")]
pub use self::__TKTokenKeychainItem::TKTokenKeychainCertificate;
#[cfg(feature = "TKTokenKeychainItem")]
pub use self::__TKTokenKeychainItem::TKTokenKeychainContents;
#[cfg(feature = "TKTokenKeychainItem")]
pub use self::__TKTokenKeychainItem::TKTokenKeychainItem;
#[cfg(feature = "TKTokenKeychainItem")]
pub use self::__TKTokenKeychainItem::TKTokenKeychainKey;
#[cfg(feature = "TKTokenWatcher")]
pub use self::__TKTokenWatcher::TKTokenWatcher;
#[cfg(feature = "TKTokenWatcher")]
pub use self::__TKTokenWatcher::TKTokenWatcherTokenInfo;
