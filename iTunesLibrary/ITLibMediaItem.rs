//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// These constants specify the possible media kinds of a iTunes media item.
///
/// The media item kind is unknown.
///
/// The media item is a song.
///
/// The media item is a movie.
///
/// The media item is an audio or video podcast.
///
/// The media item is an audiobook.
///
/// The media item is an unwrapped PDF file that is part of a Music album.
///
/// The media item is a music video.
///
/// The media item is a TV show.
///
/// The media item is a QuickTime movie with embedded flash (deprecated)
///
/// The media item is a non-iTunes Store movie.
///
/// The media item is an iOS ringtone.
///
/// The media item is an iTunes Extra or an iTunes LP.
///
/// The media item is an iPhone or iPod touch application.
///
/// The media item is a voice memo recorded on iPod/iPhone.
///
/// The media item is an iTunesU audio of video file.
///
/// The media item is an EPUB or iBooks Author book.
///
/// The media item is a PDF treated as Books in the UI unless overridden by the user.
///
/// The media item is an audio tone on an iOS device which is not a protected ringtone.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitemmediakind?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ITLibMediaItemMediaKind(pub NSUInteger);
impl ITLibMediaItemMediaKind {
    #[doc(alias = "ITLibMediaItemMediaKindUnknown")]
    pub const KindUnknown: Self = Self(1);
    #[doc(alias = "ITLibMediaItemMediaKindSong")]
    pub const KindSong: Self = Self(2);
    #[doc(alias = "ITLibMediaItemMediaKindMovie")]
    pub const KindMovie: Self = Self(3);
    #[doc(alias = "ITLibMediaItemMediaKindPodcast")]
    pub const KindPodcast: Self = Self(4);
    #[doc(alias = "ITLibMediaItemMediaKindAudiobook")]
    pub const KindAudiobook: Self = Self(5);
    #[doc(alias = "ITLibMediaItemMediaKindPDFBooklet")]
    pub const KindPDFBooklet: Self = Self(6);
    #[doc(alias = "ITLibMediaItemMediaKindMusicVideo")]
    pub const KindMusicVideo: Self = Self(7);
    #[doc(alias = "ITLibMediaItemMediaKindTVShow")]
    pub const KindTVShow: Self = Self(8);
    #[doc(alias = "ITLibMediaItemMediaKindInteractiveBooklet")]
    pub const KindInteractiveBooklet: Self = Self(9);
    #[doc(alias = "ITLibMediaItemMediaKindHomeVideo")]
    pub const KindHomeVideo: Self = Self(12);
    #[doc(alias = "ITLibMediaItemMediaKindRingtone")]
    pub const KindRingtone: Self = Self(14);
    #[doc(alias = "ITLibMediaItemMediaKindDigitalBooklet")]
    pub const KindDigitalBooklet: Self = Self(15);
    #[doc(alias = "ITLibMediaItemMediaKindIOSApplication")]
    pub const KindIOSApplication: Self = Self(16);
    #[doc(alias = "ITLibMediaItemMediaKindVoiceMemo")]
    pub const KindVoiceMemo: Self = Self(17);
    #[doc(alias = "ITLibMediaItemMediaKindiTunesU")]
    pub const KindiTunesU: Self = Self(18);
    #[doc(alias = "ITLibMediaItemMediaKindBook")]
    pub const KindBook: Self = Self(19);
    #[doc(alias = "ITLibMediaItemMediaKindPDFBook")]
    pub const KindPDFBook: Self = Self(20);
    #[doc(alias = "ITLibMediaItemMediaKindAlertTone")]
    pub const KindAlertTone: Self = Self(21);
}

unsafe impl Encode for ITLibMediaItemMediaKind {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for ITLibMediaItemMediaKind {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// These constants specify the possible ratings of media item lyrics.
///
/// No rating information for the media item lyrics.
///
/// The media item lyrics contain explicit language.
///
/// The media item lyrics do not contain explicit language.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitemlyricscontentrating?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ITLibMediaItemLyricsContentRating(pub NSUInteger);
impl ITLibMediaItemLyricsContentRating {
    #[doc(alias = "ITLibMediaItemLyricsContentRatingNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "ITLibMediaItemLyricsContentRatingExplicit")]
    pub const Explicit: Self = Self(1);
    #[doc(alias = "ITLibMediaItemLyricsContentRatingClean")]
    pub const Clean: Self = Self(2);
}

unsafe impl Encode for ITLibMediaItemLyricsContentRating {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for ITLibMediaItemLyricsContentRating {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// These constants specify the location type of a media item.
///
/// The media item location type is not known.
///
/// The media item location refers to a local file.
///
/// The media item location refers to a URL (for example, a podcast).
///
/// The media item location refers to a remote file.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitemlocationtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ITLibMediaItemLocationType(pub NSUInteger);
impl ITLibMediaItemLocationType {
    #[doc(alias = "ITLibMediaItemLocationTypeUnknown")]
    pub const Unknown: Self = Self(0);
    #[doc(alias = "ITLibMediaItemLocationTypeFile")]
    pub const File: Self = Self(1);
    #[doc(alias = "ITLibMediaItemLocationTypeURL")]
    pub const URL: Self = Self(2);
    #[doc(alias = "ITLibMediaItemLocationTypeRemote")]
    pub const Remote: Self = Self(3);
}

unsafe impl Encode for ITLibMediaItemLocationType {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for ITLibMediaItemLocationType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// These constants specify the "blue dot" play status of this media item.
///
/// The item has been played (see playCount) or the play status is not tracked for this type of media item.
///
/// The media item has been partially played.
///
/// The media item has not been played.  Note that the user can also set this state manually.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitemplaystatus?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ITLibMediaItemPlayStatus(pub NSUInteger);
impl ITLibMediaItemPlayStatus {
    #[doc(alias = "ITLibMediaItemPlayStatusNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "ITLibMediaItemPlayStatusPartiallyPlayed")]
    pub const PartiallyPlayed: Self = Self(1);
    #[doc(alias = "ITLibMediaItemPlayStatusUnplayed")]
    pub const Unplayed: Self = Self(2);
}

unsafe impl Encode for ITLibMediaItemPlayStatus {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for ITLibMediaItemPlayStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// A media item represents a single piece of media (such as a song, a video, a podcast, etc) in the iTunes library.
    /// A media item has an overall unique identifier, accessed using the persistentID property. The media item
    /// metadata may be accessed through its individual properties or via the ITLibMediaEntity general property accessor
    /// methods.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitem?language=objc)
    #[unsafe(super(ITLibMediaEntity, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "ITLibMediaEntity")]
    pub struct ITLibMediaItem;
);

#[cfg(feature = "ITLibMediaEntity")]
extern_conformance!(
    unsafe impl NSObjectProtocol for ITLibMediaItem {}
);

#[cfg(feature = "ITLibMediaEntity")]
impl ITLibMediaItem {
    extern_methods!(
        /// The title of this media item. May be empty.
        #[unsafe(method(title))]
        #[unsafe(method_family = none)]
        pub unsafe fn title(&self) -> Retained<NSString>;

        /// The title of this media item that should be used for sorting purposes.  If nil, use the title field.
        #[unsafe(method(sortTitle))]
        #[unsafe(method_family = none)]
        pub unsafe fn sortTitle(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "ITLibArtist")]
        /// The artist associated with this media item.
        #[unsafe(method(artist))]
        #[unsafe(method_family = none)]
        pub unsafe fn artist(&self) -> Option<Retained<ITLibArtist>>;

        /// The name of the composer associated with this media item.  May be empty.
        #[unsafe(method(composer))]
        #[unsafe(method_family = none)]
        pub unsafe fn composer(&self) -> Retained<NSString>;

        /// The name of the composer associated with this media item that should be used for sorting purposes. If nil, use the composer field.
        #[unsafe(method(sortComposer))]
        #[unsafe(method_family = none)]
        pub unsafe fn sortComposer(&self) -> Option<Retained<NSString>>;

        /// The rating of this media item.
        #[unsafe(method(rating))]
        #[unsafe(method_family = none)]
        pub unsafe fn rating(&self) -> NSInteger;

        /// Whether this media item's rating is computed.
        #[unsafe(method(isRatingComputed))]
        #[unsafe(method_family = none)]
        pub unsafe fn isRatingComputed(&self) -> bool;

        /// If non-zero, the actual time playback for this media item will start instead of 0:00 (in milliseconds).
        #[unsafe(method(startTime))]
        #[unsafe(method_family = none)]
        pub unsafe fn startTime(&self) -> NSUInteger;

        /// If non-zero, the actual time playback for this media item will stop vs. the total time (in milliseconds).
        #[unsafe(method(stopTime))]
        #[unsafe(method_family = none)]
        pub unsafe fn stopTime(&self) -> NSUInteger;

        #[cfg(feature = "ITLibAlbum")]
        /// The album where this media item belongs.
        #[unsafe(method(album))]
        #[unsafe(method_family = none)]
        pub unsafe fn album(&self) -> Retained<ITLibAlbum>;

        /// The genre associated with this media item. May be empty.
        #[unsafe(method(genre))]
        #[unsafe(method_family = none)]
        pub unsafe fn genre(&self) -> Retained<NSString>;

        /// This media item's file kind (ex. MPEG audio file).
        #[unsafe(method(kind))]
        #[unsafe(method_family = none)]
        pub unsafe fn kind(&self) -> Option<Retained<NSString>>;

        /// This media item's media kind.
        #[unsafe(method(mediaKind))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaKind(&self) -> ITLibMediaItemMediaKind;

        /// The size in bytes of this media item on disk.
        #[unsafe(method(fileSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn fileSize(&self) -> c_ulonglong;

        /// The size in bytes of this media item on disk. (deprecated: use fileSize instead)
        #[deprecated]
        #[unsafe(method(size))]
        #[unsafe(method_family = none)]
        pub unsafe fn size(&self) -> NSUInteger;

        /// The length of this media item in milliseconds.
        #[unsafe(method(totalTime))]
        #[unsafe(method_family = none)]
        pub unsafe fn totalTime(&self) -> NSUInteger;

        /// The position of this media item within its album.
        #[unsafe(method(trackNumber))]
        #[unsafe(method_family = none)]
        pub unsafe fn trackNumber(&self) -> NSUInteger;

        /// The podcast category of this media item (implies this media item is a podcast).
        #[unsafe(method(category))]
        #[unsafe(method_family = none)]
        pub unsafe fn category(&self) -> Option<Retained<NSString>>;

        /// Any podcast description of with this media item (implies this media item is a podcast).
        #[unsafe(method(description))]
        #[unsafe(method_family = none)]
        pub unsafe fn description(&self) -> Option<Retained<NSString>>;

        /// The content rating of this media item's lyrics.
        #[unsafe(method(lyricsContentRating))]
        #[unsafe(method_family = none)]
        pub unsafe fn lyricsContentRating(&self) -> ITLibMediaItemLyricsContentRating;

        /// The extended content rating of this media item.
        #[unsafe(method(contentRating))]
        #[unsafe(method_family = none)]
        pub unsafe fn contentRating(&self) -> Option<Retained<NSString>>;

        /// The date and time this media item was last modified.
        #[unsafe(method(modifiedDate))]
        #[unsafe(method_family = none)]
        pub unsafe fn modifiedDate(&self) -> Option<Retained<NSDate>>;

        /// The date and media item this media item was added to the iTunes database.
        #[unsafe(method(addedDate))]
        #[unsafe(method_family = none)]
        pub unsafe fn addedDate(&self) -> Option<Retained<NSDate>>;

        /// The bitrate of this media item in kbps.
        #[unsafe(method(bitrate))]
        #[unsafe(method_family = none)]
        pub unsafe fn bitrate(&self) -> NSUInteger;

        /// The sample rate of this media item in samples per second.
        #[unsafe(method(sampleRate))]
        #[unsafe(method_family = none)]
        pub unsafe fn sampleRate(&self) -> NSUInteger;

        /// The BPM (beats per minute) of this media item.
        #[unsafe(method(beatsPerMinute))]
        #[unsafe(method_family = none)]
        pub unsafe fn beatsPerMinute(&self) -> NSUInteger;

        /// The number of times this media item has been played in iTunes.
        #[unsafe(method(playCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn playCount(&self) -> NSUInteger;

        /// The date and time this media item was last played in iTunes, or nil if this media item has not been played.
        #[unsafe(method(lastPlayedDate))]
        #[unsafe(method_family = none)]
        pub unsafe fn lastPlayedDate(&self) -> Option<Retained<NSDate>>;

        /// The play status for this media.  Represents partially played and unplayed states for videos and podcasts. Other media kinds always return "none".
        #[unsafe(method(playStatus))]
        #[unsafe(method_family = none)]
        pub unsafe fn playStatus(&self) -> ITLibMediaItemPlayStatus;

        /// The location of this media item on disk.
        #[unsafe(method(location))]
        #[unsafe(method_family = none)]
        pub unsafe fn location(&self) -> Option<Retained<NSURL>>;

        /// Whether this media item has artwork.
        #[unsafe(method(hasArtworkAvailable))]
        #[unsafe(method_family = none)]
        pub unsafe fn hasArtworkAvailable(&self) -> bool;

        #[cfg(feature = "ITLibArtwork")]
        /// Whether this media item has artwork.
        #[unsafe(method(artwork))]
        #[unsafe(method_family = none)]
        pub unsafe fn artwork(&self) -> Option<Retained<ITLibArtwork>>;

        /// Any comments associated with this media item.
        #[unsafe(method(comments))]
        #[unsafe(method_family = none)]
        pub unsafe fn comments(&self) -> Option<Retained<NSString>>;

        /// Whether this media item was purchased.
        #[unsafe(method(isPurchased))]
        #[unsafe(method_family = none)]
        pub unsafe fn isPurchased(&self) -> bool;

        /// Whether this media item is iTunes Match or iTunes in the Cloud.
        #[unsafe(method(isCloud))]
        #[unsafe(method_family = none)]
        pub unsafe fn isCloud(&self) -> bool;

        /// Whether this media item is DRM protected.
        #[unsafe(method(isDRMProtected))]
        #[unsafe(method_family = none)]
        pub unsafe fn isDRMProtected(&self) -> bool;

        /// Whether this media item is a video media item (video podcast, movie, etc).
        #[unsafe(method(isVideo))]
        #[unsafe(method_family = none)]
        pub unsafe fn isVideo(&self) -> bool;

        #[cfg(feature = "ITLibMediaItemVideoInfo")]
        /// The video information of this media item (implies this media item is a video media item).
        #[unsafe(method(videoInfo))]
        #[unsafe(method_family = none)]
        pub unsafe fn videoInfo(&self) -> Option<Retained<ITLibMediaItemVideoInfo>>;

        /// The date this media item was released.
        #[unsafe(method(releaseDate))]
        #[unsafe(method_family = none)]
        pub unsafe fn releaseDate(&self) -> Option<Retained<NSDate>>;

        /// The year when this media item was released.
        #[unsafe(method(year))]
        #[unsafe(method_family = none)]
        pub unsafe fn year(&self) -> NSUInteger;

        /// The type of the file this media item refers to.
        #[deprecated]
        #[unsafe(method(fileType))]
        #[unsafe(method_family = none)]
        pub unsafe fn fileType(&self) -> NSUInteger;

        /// The number of times this media item has been skiped.
        #[unsafe(method(skipCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn skipCount(&self) -> NSUInteger;

        /// The date and time when this media item was last skipped.
        #[unsafe(method(skipDate))]
        #[unsafe(method_family = none)]
        pub unsafe fn skipDate(&self) -> Option<Retained<NSDate>>;

        /// The voice-over language of this media item
        #[deprecated]
        #[unsafe(method(voiceOverLanguage))]
        #[unsafe(method_family = none)]
        pub unsafe fn voiceOverLanguage(&self) -> Option<Retained<NSString>>;

        /// The volume adjustment used for this media item if any.
        #[unsafe(method(volumeAdjustment))]
        #[unsafe(method_family = none)]
        pub unsafe fn volumeAdjustment(&self) -> NSInteger;

        /// The volume normalization energy applied to this media item.
        #[unsafe(method(volumeNormalizationEnergy))]
        #[unsafe(method_family = none)]
        pub unsafe fn volumeNormalizationEnergy(&self) -> NSUInteger;

        /// Whether the user has disabled this media item.
        #[unsafe(method(isUserDisabled))]
        #[unsafe(method_family = none)]
        pub unsafe fn isUserDisabled(&self) -> bool;

        /// The grouping of this media item.
        #[unsafe(method(grouping))]
        #[unsafe(method_family = none)]
        pub unsafe fn grouping(&self) -> Option<Retained<NSString>>;

        /// The type of this media item with respect to its location.
        #[unsafe(method(locationType))]
        #[unsafe(method_family = none)]
        pub unsafe fn locationType(&self) -> ITLibMediaItemLocationType;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "ITLibMediaEntity")]
impl ITLibMediaItem {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyalbumtitle?language=objc)
    pub static ITLibMediaItemPropertyAlbumTitle: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertysortalbumtitle?language=objc)
    pub static ITLibMediaItemPropertySortAlbumTitle: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyalbumartist?language=objc)
    pub static ITLibMediaItemPropertyAlbumArtist: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyalbumrating?language=objc)
    pub static ITLibMediaItemPropertyAlbumRating: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyalbumratingcomputed?language=objc)
    pub static ITLibMediaItemPropertyAlbumRatingComputed: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertysortalbumartist?language=objc)
    pub static ITLibMediaItemPropertySortAlbumArtist: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyalbumisgapless?language=objc)
    pub static ITLibMediaItemPropertyAlbumIsGapless: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyalbumiscompilation?language=objc)
    pub static ITLibMediaItemPropertyAlbumIsCompilation: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyalbumdisccount?language=objc)
    pub static ITLibMediaItemPropertyAlbumDiscCount: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyalbumdiscnumber?language=objc)
    pub static ITLibMediaItemPropertyAlbumDiscNumber: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyalbumtrackcount?language=objc)
    pub static ITLibMediaItemPropertyAlbumTrackCount: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyartistname?language=objc)
    pub static ITLibMediaItemPropertyArtistName: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertysortartistname?language=objc)
    pub static ITLibMediaItemPropertySortArtistName: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyvideoishd?language=objc)
    pub static ITLibMediaItemPropertyVideoIsHD: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyvideowidth?language=objc)
    pub static ITLibMediaItemPropertyVideoWidth: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyvideoheight?language=objc)
    pub static ITLibMediaItemPropertyVideoHeight: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyvideoseries?language=objc)
    pub static ITLibMediaItemPropertyVideoSeries: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyvideosortseries?language=objc)
    pub static ITLibMediaItemPropertyVideoSortSeries: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyvideoseason?language=objc)
    pub static ITLibMediaItemPropertyVideoSeason: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyvideoepisode?language=objc)
    pub static ITLibMediaItemPropertyVideoEpisode: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyvideoepisodeorder?language=objc)
    pub static ITLibMediaItemPropertyVideoEpisodeOrder: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyhasartwork?language=objc)
    pub static ITLibMediaItemPropertyHasArtwork: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertybitrate?language=objc)
    pub static ITLibMediaItemPropertyBitRate: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertybeatsperminute?language=objc)
    pub static ITLibMediaItemPropertyBeatsPerMinute: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertycategory?language=objc)
    pub static ITLibMediaItemPropertyCategory: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertycomments?language=objc)
    pub static ITLibMediaItemPropertyComments: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertycomposer?language=objc)
    pub static ITLibMediaItemPropertyComposer: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertysortcomposer?language=objc)
    pub static ITLibMediaItemPropertySortComposer: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertycontentrating?language=objc)
    pub static ITLibMediaItemPropertyContentRating: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertylyricscontentrating?language=objc)
    pub static ITLibMediaItemPropertyLyricsContentRating: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyaddeddate?language=objc)
    pub static ITLibMediaItemPropertyAddedDate: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertymodifieddate?language=objc)
    pub static ITLibMediaItemPropertyModifiedDate: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertydescription?language=objc)
    pub static ITLibMediaItemPropertyDescription: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyisuserdisabled?language=objc)
    pub static ITLibMediaItemPropertyIsUserDisabled: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyfiletype?language=objc)
    pub static ITLibMediaItemPropertyFileType: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertygenre?language=objc)
    pub static ITLibMediaItemPropertyGenre: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertygrouping?language=objc)
    pub static ITLibMediaItemPropertyGrouping: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyisvideo?language=objc)
    pub static ITLibMediaItemPropertyIsVideo: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertykind?language=objc)
    pub static ITLibMediaItemPropertyKind: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertytitle?language=objc)
    pub static ITLibMediaItemPropertyTitle: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertysorttitle?language=objc)
    pub static ITLibMediaItemPropertySortTitle: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyvolumenormalizationenergy?language=objc)
    pub static ITLibMediaItemPropertyVolumeNormalizationEnergy: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyplaycount?language=objc)
    pub static ITLibMediaItemPropertyPlayCount: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertylastplaydate?language=objc)
    pub static ITLibMediaItemPropertyLastPlayDate: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyplaystatus?language=objc)
    pub static ITLibMediaItemPropertyPlayStatus: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyisdrmprotected?language=objc)
    pub static ITLibMediaItemPropertyIsDRMProtected: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyispurchased?language=objc)
    pub static ITLibMediaItemPropertyIsPurchased: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertymovementcount?language=objc)
    pub static ITLibMediaItemPropertyMovementCount: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertymovementname?language=objc)
    pub static ITLibMediaItemPropertyMovementName: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertymovementnumber?language=objc)
    pub static ITLibMediaItemPropertyMovementNumber: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyrating?language=objc)
    pub static ITLibMediaItemPropertyRating: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyratingcomputed?language=objc)
    pub static ITLibMediaItemPropertyRatingComputed: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyreleasedate?language=objc)
    pub static ITLibMediaItemPropertyReleaseDate: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertysamplerate?language=objc)
    pub static ITLibMediaItemPropertySampleRate: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertysize?language=objc)
    pub static ITLibMediaItemPropertySize: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyfilesize?language=objc)
    pub static ITLibMediaItemPropertyFileSize: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyuserskipcount?language=objc)
    pub static ITLibMediaItemPropertyUserSkipCount: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyskipdate?language=objc)
    pub static ITLibMediaItemPropertySkipDate: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertystarttime?language=objc)
    pub static ITLibMediaItemPropertyStartTime: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertystoptime?language=objc)
    pub static ITLibMediaItemPropertyStopTime: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertytotaltime?language=objc)
    pub static ITLibMediaItemPropertyTotalTime: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertytracknumber?language=objc)
    pub static ITLibMediaItemPropertyTrackNumber: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertylocationtype?language=objc)
    pub static ITLibMediaItemPropertyLocationType: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyvoiceoverlanguage?language=objc)
    pub static ITLibMediaItemPropertyVoiceOverLanguage: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyvolumeadjustment?language=objc)
    pub static ITLibMediaItemPropertyVolumeAdjustment: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertywork?language=objc)
    pub static ITLibMediaItemPropertyWork: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyyear?language=objc)
    pub static ITLibMediaItemPropertyYear: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertymediakind?language=objc)
    pub static ITLibMediaItemPropertyMediaKind: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertylocation?language=objc)
    pub static ITLibMediaItemPropertyLocation: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibmediaitempropertyartwork?language=objc)
    pub static ITLibMediaItemPropertyArtwork: &'static NSString;
}
