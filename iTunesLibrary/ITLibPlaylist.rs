//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// These constants specify the possible kinds of playlists.
///
///
/// The playlist is not a distinguished playlist.
///
/// The playlist contains all the movies in the iTunes Library.
///
/// The playlists contains all the TV shows in the iTunes Library.
///
/// The playlist contains all the music items in the iTunes Library.
///
/// The playlist contains all the audiobooks in the iTunes Library
///
/// The playlist contains all the ringtones in the iTunes Library.
///
/// The playlist contains all the podcasts in the iTunes library
///
/// The playlist contains all voice memos.
///
/// The playlist contains all the iOS applications of the user in iTunes.
///
/// The playlist contains all the user's purchases in the iTunes Store.
///
/// The playlist contains the user's iTunesU items.
///
/// The playlist is the default 90's music iTunes playlist.
///
/// The playlist is the default Top Rated smart playlist generated by iTunes.
///
/// The playlist is the default 25 Most Played smart playlist generated by iTunes.
///
/// The playlist is the default Recently Played smart playlist generated by iTunes .
///
/// The playlist is the default Recently Added smart playlist generated by iTunes.
///
/// The playlist is the default Music Videos smart playlist generated by iTunes.
///
/// The playlist is the default Classical Music smart playlist generated by iTunes.
///
/// The playlist contains all music videos in the iTunes Library. This is NOT the same as the default Music Videos smart playlist.
///
/// The playlist contains all homes videos in the iTunes Library.
///
/// The playlist is the default Music Shows and Movies smart playlist generated by iTunes.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibdistinguishedplaylistkind?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ITLibDistinguishedPlaylistKind(pub NSUInteger);
impl ITLibDistinguishedPlaylistKind {
    #[doc(alias = "ITLibDistinguishedPlaylistKindNone")]
    pub const KindNone: Self = Self(0);
    #[doc(alias = "ITLibDistinguishedPlaylistKindMovies")]
    pub const KindMovies: Self = Self(1);
    #[doc(alias = "ITLibDistinguishedPlaylistKindTVShows")]
    pub const KindTVShows: Self = Self(2);
    #[doc(alias = "ITLibDistinguishedPlaylistKindMusic")]
    pub const KindMusic: Self = Self(3);
    #[doc(alias = "ITLibDistinguishedPlaylistKindAudiobooks")]
    pub const KindAudiobooks: Self = Self(4);
    #[doc(alias = "ITLibDistinguishedPlaylistKindBooks")]
    pub const KindBooks: Self = Self(ITLibDistinguishedPlaylistKind::KindAudiobooks.0);
    #[doc(alias = "ITLibDistinguishedPlaylistKindRingtones")]
    pub const KindRingtones: Self = Self(5);
    #[doc(alias = "ITLibDistinguishedPlaylistKindPodcasts")]
    pub const KindPodcasts: Self = Self(7);
    #[doc(alias = "ITLibDistinguishedPlaylistKindVoiceMemos")]
    pub const KindVoiceMemos: Self = Self(14);
    #[doc(alias = "ITLibDistinguishedPlaylistKindPurchases")]
    pub const KindPurchases: Self = Self(16);
    #[doc(alias = "ITLibDistinguishedPlaylistKindiTunesU")]
    pub const KindiTunesU: Self = Self(26);
    #[doc(alias = "ITLibDistinguishedPlaylistKind90sMusic")]
    pub const Kind90sMusic: Self = Self(42);
    #[doc(alias = "ITLibDistinguishedPlaylistKindMyTopRated")]
    pub const KindMyTopRated: Self = Self(43);
    #[doc(alias = "ITLibDistinguishedPlaylistKindTop25MostPlayed")]
    pub const KindTop25MostPlayed: Self = Self(44);
    #[doc(alias = "ITLibDistinguishedPlaylistKindRecentlyPlayed")]
    pub const KindRecentlyPlayed: Self = Self(45);
    #[doc(alias = "ITLibDistinguishedPlaylistKindRecentlyAdded")]
    pub const KindRecentlyAdded: Self = Self(46);
    #[doc(alias = "ITLibDistinguishedPlaylistKindMusicVideos")]
    pub const KindMusicVideos: Self = Self(47);
    #[doc(alias = "ITLibDistinguishedPlaylistKindClassicalMusic")]
    pub const KindClassicalMusic: Self = Self(48);
    #[doc(alias = "ITLibDistinguishedPlaylistKindLibraryMusicVideos")]
    pub const KindLibraryMusicVideos: Self = Self(49);
    #[doc(alias = "ITLibDistinguishedPlaylistKindHomeVideos")]
    pub const KindHomeVideos: Self = Self(50);
    #[doc(alias = "ITLibDistinguishedPlaylistKindApplications")]
    pub const KindApplications: Self = Self(51);
    #[doc(alias = "ITLibDistinguishedPlaylistKindLovedSongs")]
    pub const KindLovedSongs: Self = Self(52);
    #[doc(alias = "ITLibDistinguishedPlaylistKindMusicShowsAndMovies")]
    pub const KindMusicShowsAndMovies: Self = Self(53);
}

unsafe impl Encode for ITLibDistinguishedPlaylistKind {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for ITLibDistinguishedPlaylistKind {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// These constants specify the possible kinds of playlists.
///
///
/// A normal playlist created by the user or by iTunes (e.g. "Music", "Movies", "Brit-Pop Mix" or "My Awesome Stone Roses Playlist").
///
/// A smart playlist whose contents are dynamically generated by evaluating a set of rules. (e.g. "90s Music" or "Songs From 1999").
///
/// A saved Genius playlist.
///
/// A playlist folder created by the user or by iTunes (e.g. "My Playlist Folder" or "Genius Mixes").
///
/// A Genius Mix playlist.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibplaylistkind?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct ITLibPlaylistKind(pub NSUInteger);
impl ITLibPlaylistKind {
    #[doc(alias = "ITLibPlaylistKindRegular")]
    pub const Regular: Self = Self(0);
    #[doc(alias = "ITLibPlaylistKindSmart")]
    pub const Smart: Self = Self(1);
    #[doc(alias = "ITLibPlaylistKindGenius")]
    pub const Genius: Self = Self(2);
    #[doc(alias = "ITLibPlaylistKindFolder")]
    pub const Folder: Self = Self(3);
    #[doc(alias = "ITLibPlaylistKindGeniusMix")]
    pub const GeniusMix: Self = Self(4);
}

unsafe impl Encode for ITLibPlaylistKind {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for ITLibPlaylistKind {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// A playlist is a collection of related media items. (Media items are described in ITLibMediaItem Class Reference.)
    /// Each playlist has a name, a set of attributes, and a unique identifier that persists across application launches.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibplaylist?language=objc)
    #[unsafe(super(ITLibMediaEntity, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "ITLibMediaEntity")]
    pub struct ITLibPlaylist;
);

#[cfg(feature = "ITLibMediaEntity")]
extern_conformance!(
    unsafe impl NSObjectProtocol for ITLibPlaylist {}
);

#[cfg(feature = "ITLibMediaEntity")]
impl ITLibPlaylist {
    extern_methods!(
        /// The name or title of this playlist.
        #[unsafe(method(name))]
        #[unsafe(method_family = none)]
        pub unsafe fn name(&self) -> Retained<NSString>;

        /// Whether this playlist is the primary playlist.
        #[unsafe(method(isPrimary))]
        #[unsafe(method_family = none)]
        pub unsafe fn isPrimary(&self) -> bool;

        /// The unique identifier of this playlist' parent.
        #[unsafe(method(parentID))]
        #[unsafe(method_family = none)]
        pub unsafe fn parentID(&self) -> Option<Retained<NSNumber>>;

        /// Whether this playlist is visible.
        #[unsafe(method(isVisible))]
        #[unsafe(method_family = none)]
        pub unsafe fn isVisible(&self) -> bool;

        /// Whether or not every item in this playlist is exposed via this API.  Generally true but not that useful.
        #[deprecated]
        #[unsafe(method(isAllItemsPlaylist))]
        #[unsafe(method_family = none)]
        pub unsafe fn isAllItemsPlaylist(&self) -> bool;

        #[cfg(feature = "ITLibMediaItem")]
        /// The media items contained within this playlist.
        #[unsafe(method(items))]
        #[unsafe(method_family = none)]
        pub unsafe fn items(&self) -> Retained<NSArray<ITLibMediaItem>>;

        /// The distinguished kind of this playlist.
        #[unsafe(method(distinguishedKind))]
        #[unsafe(method_family = none)]
        pub unsafe fn distinguishedKind(&self) -> ITLibDistinguishedPlaylistKind;

        /// The kind of this playlist.
        #[unsafe(method(kind))]
        #[unsafe(method_family = none)]
        pub unsafe fn kind(&self) -> ITLibPlaylistKind;

        /// Whether this playlist is the primary playlist.
        #[deprecated]
        #[unsafe(method(isMaster))]
        #[unsafe(method_family = none)]
        pub unsafe fn isMaster(&self) -> bool;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "ITLibMediaEntity")]
impl ITLibPlaylist {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern "C" {
    /// Retrieves the name or title of the playlist. See
    ///
    /// ```text
    ///  name
    /// ```
    ///
    /// .
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibplaylistpropertyname?language=objc)
    pub static ITLibPlaylistPropertyName: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibplaylistpropertyallitemsplaylist?language=objc)
    pub static ITLibPlaylistPropertyAllItemsPlaylist: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibplaylistpropertydistinguisedkind?language=objc)
    pub static ITLibPlaylistPropertyDistinguisedKind: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibplaylistpropertyprimary?language=objc)
    pub static ITLibPlaylistPropertyPrimary: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibplaylistpropertyparentpersistentid?language=objc)
    pub static ITLibPlaylistPropertyParentPersistentID: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibplaylistpropertyvisible?language=objc)
    pub static ITLibPlaylistPropertyVisible: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibplaylistpropertyitems?language=objc)
    pub static ITLibPlaylistPropertyItems: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibplaylistpropertykind?language=objc)
    pub static ITLibPlaylistPropertyKind: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibplaylistpropertymaster?language=objc)
    pub static ITLibPlaylistPropertyMaster: &'static NSString;
}
