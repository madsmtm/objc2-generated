//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// The ITLibAlbum class represents an album where a given media item (ITLibMediaItem) is contained.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/ituneslibrary/itlibalbum?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ITLibAlbum;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for ITLibAlbum {}
);

impl ITLibAlbum {
    extern_methods!(
        /// The name of this album.
        #[unsafe(method(title))]
        #[unsafe(method_family = none)]
        pub unsafe fn title(&self) -> Option<Retained<NSString>>;

        /// The name of this that should be used for sorting purposes.
        #[unsafe(method(sortTitle))]
        #[unsafe(method_family = none)]
        pub unsafe fn sortTitle(&self) -> Option<Retained<NSString>>;

        /// Whether this album is a compilation.
        #[unsafe(method(isCompilation))]
        #[unsafe(method_family = none)]
        pub unsafe fn isCompilation(&self) -> bool;

        #[cfg(feature = "ITLibArtist")]
        /// Deprecated. Will be removed in future versions.
        #[deprecated]
        #[unsafe(method(artist))]
        #[unsafe(method_family = none)]
        pub unsafe fn artist(&self) -> Option<Retained<ITLibArtist>>;

        /// The number of discs in this album.
        #[unsafe(method(discCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn discCount(&self) -> NSUInteger;

        /// The index (i.e. 1, 2, 3, etc.) of the disc this album refers to within a compilation.
        #[unsafe(method(discNumber))]
        #[unsafe(method_family = none)]
        pub unsafe fn discNumber(&self) -> NSUInteger;

        /// The rating of this track's album.
        #[unsafe(method(rating))]
        #[unsafe(method_family = none)]
        pub unsafe fn rating(&self) -> NSInteger;

        /// The rating of this track's album.
        #[unsafe(method(isRatingComputed))]
        #[unsafe(method_family = none)]
        pub unsafe fn isRatingComputed(&self) -> bool;

        /// Whether this track's album is gapless.
        #[unsafe(method(isGapless))]
        #[unsafe(method_family = none)]
        pub unsafe fn isGapless(&self) -> bool;

        /// Number of tracks in this album.
        #[unsafe(method(trackCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn trackCount(&self) -> NSUInteger;

        /// The artist associated with this album.
        #[unsafe(method(albumArtist))]
        #[unsafe(method_family = none)]
        pub unsafe fn albumArtist(&self) -> Option<Retained<NSString>>;

        /// The artist associated with this album. This field should be used when sorting.
        #[unsafe(method(sortAlbumArtist))]
        #[unsafe(method_family = none)]
        pub unsafe fn sortAlbumArtist(&self) -> Option<Retained<NSString>>;

        /// The unique identifier of this album.
        #[unsafe(method(persistentID))]
        #[unsafe(method_family = none)]
        pub unsafe fn persistentID(&self) -> Retained<NSNumber>;
    );
}

/// Methods declared on superclass `NSObject`.
impl ITLibAlbum {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
