//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlesmptimeout?language=objc)
pub const kBluetoothLESMPTimeout: c_uint = 30;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlesmpminencryptionkeysize?language=objc)
pub const kBluetoothLESMPMinEncryptionKeySize: c_uint = 7;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlesmpmaxencryptionkeysize?language=objc)
pub const kBluetoothLESMPMaxEncryptionKeySize: c_uint = 16;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kinfostringmaxlength?language=objc)
pub const kInfoStringMaxLength: c_uint = 35;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhciinquiryresultsmaxresults?language=objc)
pub const kBluetoothHCIInquiryResultsMaxResults: c_uint = 50;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kmaxchannelidperside?language=objc)
pub const kMaxChannelIDPerSide: c_uint = 31;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothconnectionhandle?language=objc)
pub type BluetoothConnectionHandle = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlmphandle?language=objc)
pub type BluetoothLMPHandle = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothconnectionhandleserialdevicereserved?language=objc)
pub const kBluetoothConnectionHandleSerialDeviceReserved: c_uint = 0x0fff;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothconnectionhandlenone?language=objc)
pub const kBluetoothConnectionHandleNone: c_uint = 0xffff;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothreasoncode?language=objc)
pub type BluetoothReasonCode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothencryptionenable?language=objc)
pub type BluetoothEncryptionEnable = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothencryptionenableoff?language=objc)
pub const kBluetoothEncryptionEnableOff: c_uint = 0x00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothencryptionenableon?language=objc)
pub const kBluetoothEncryptionEnableOn: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothencryptionenablebredre0?language=objc)
pub const kBluetoothEncryptionEnableBREDRE0: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothencryptionenableleaesccm?language=objc)
pub const kBluetoothEncryptionEnableLEAESCCM: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothencryptionenablebredraesccm?language=objc)
pub const kBluetoothEncryptionEnableBREDRAESCCM: c_uint = 0x02;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothkeyflag?language=objc)
pub type BluetoothKeyFlag = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothkeyflagsemipermanent?language=objc)
pub const kBluetoothKeyFlagSemiPermanent: c_uint = 0x00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothkeyflagtemporary?language=objc)
pub const kBluetoothKeyFlagTemporary: c_uint = 0x01;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothkeytype?language=objc)
pub type BluetoothKeyType = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothkeytypecombination?language=objc)
pub const kBluetoothKeyTypeCombination: c_uint = 0x00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothkeytypelocalunit?language=objc)
pub const kBluetoothKeyTypeLocalUnit: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothkeytyperemoteunit?language=objc)
pub const kBluetoothKeyTypeRemoteUnit: c_uint = 0x02;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothkeytypedebugcombination?language=objc)
pub const kBluetoothKeyTypeDebugCombination: c_uint = 0x03;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothkeytypeunauthenticatedcombination?language=objc)
pub const kBluetoothKeyTypeUnauthenticatedCombination: c_uint = 0x04;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothkeytypeauthenticatedcombination?language=objc)
pub const kBluetoothKeyTypeAuthenticatedCombination: c_uint = 0x05;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothkeytypechangedcombination?language=objc)
pub const kBluetoothKeyTypeChangedCombination: c_uint = 0x06;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothkeytypeunauthenticatedcombinationp256?language=objc)
pub const kBluetoothKeyTypeUnauthenticatedCombinationP256: c_uint = 0x07;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothkeytypeauthenticatedcombinationp256?language=objc)
pub const kBluetoothKeyTypeAuthenticatedCombinationP256: c_uint = 0x08;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothpackettype?language=objc)
pub type BluetoothPacketType = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettypereserved1?language=objc)
pub const kBluetoothPacketTypeReserved1: c_uint = 0x0001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettype2dh1omit?language=objc)
pub const kBluetoothPacketType2DH1Omit: c_uint = 0x0002;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettype3dh1omit?language=objc)
pub const kBluetoothPacketType3DH1Omit: c_uint = 0x0004;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettypedm1?language=objc)
pub const kBluetoothPacketTypeDM1: c_uint = 0x0008;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettypedh1?language=objc)
pub const kBluetoothPacketTypeDH1: c_uint = 0x0010;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettypehv1?language=objc)
pub const kBluetoothPacketTypeHV1: c_uint = 0x0020;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettypehv2?language=objc)
pub const kBluetoothPacketTypeHV2: c_uint = 0x0040;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettypehv3?language=objc)
pub const kBluetoothPacketTypeHV3: c_uint = 0x0080;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettypedv?language=objc)
pub const kBluetoothPacketTypeDV: c_uint = 0x0100;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettype2dh3omit?language=objc)
pub const kBluetoothPacketType2DH3Omit: c_uint = 0x0100;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettype3dh3omit?language=objc)
pub const kBluetoothPacketType3DH3Omit: c_uint = 0x0200;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettypeaux?language=objc)
pub const kBluetoothPacketTypeAUX: c_uint = 0x0200;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettypedm3?language=objc)
pub const kBluetoothPacketTypeDM3: c_uint = 0x0400;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettypedh3?language=objc)
pub const kBluetoothPacketTypeDH3: c_uint = 0x0800;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettype2dh5omit?language=objc)
pub const kBluetoothPacketType2DH5Omit: c_uint = 0x1000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettype3dm5omit?language=objc)
pub const kBluetoothPacketType3DM5Omit: c_uint = 0x2000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettypedm5?language=objc)
pub const kBluetoothPacketTypeDM5: c_uint = 0x4000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettypedh5?language=objc)
pub const kBluetoothPacketTypeDH5: c_uint = 0x8000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpackettypeend?language=objc)
pub const kBluetoothPacketTypeEnd: c_uint = 32769;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsynchronousconnectionpackettypenone?language=objc)
pub const kBluetoothSynchronousConnectionPacketTypeNone: c_uint = 0x0000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsynchronousconnectionpackettypehv1?language=objc)
pub const kBluetoothSynchronousConnectionPacketTypeHV1: c_uint = 0x0001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsynchronousconnectionpackettypehv2?language=objc)
pub const kBluetoothSynchronousConnectionPacketTypeHV2: c_uint = 0x0002;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsynchronousconnectionpackettypehv3?language=objc)
pub const kBluetoothSynchronousConnectionPacketTypeHV3: c_uint = 0x0004;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsynchronousconnectionpackettypeev3?language=objc)
pub const kBluetoothSynchronousConnectionPacketTypeEV3: c_uint = 0x0008;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsynchronousconnectionpackettypeev4?language=objc)
pub const kBluetoothSynchronousConnectionPacketTypeEV4: c_uint = 0x0010;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsynchronousconnectionpackettypeev5?language=objc)
pub const kBluetoothSynchronousConnectionPacketTypeEV5: c_uint = 0x0020;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsynchronousconnectionpackettype2ev3omit?language=objc)
pub const kBluetoothSynchronousConnectionPacketType2EV3Omit: c_uint = 0x0040;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsynchronousconnectionpackettype3ev3omit?language=objc)
pub const kBluetoothSynchronousConnectionPacketType3EV3Omit: c_uint = 0x0080;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsynchronousconnectionpackettype2ev5omit?language=objc)
pub const kBluetoothSynchronousConnectionPacketType2EV5Omit: c_uint = 0x0100;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsynchronousconnectionpackettype3ev5omit?language=objc)
pub const kBluetoothSynchronousConnectionPacketType3EV5Omit: c_uint = 0x0200;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsynchronousconnectionpackettypefutureuse?language=objc)
pub const kBluetoothSynchronousConnectionPacketTypeFutureUse: c_uint = 0xFC00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsynchronousconnectionpackettypeall?language=objc)
pub const kBluetoothSynchronousConnectionPacketTypeAll: c_uint = 0xFFFF;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsynchronousconnectionpackettypeend?language=objc)
pub const kBluetoothSynchronousConnectionPacketTypeEnd: c_uint = 65536;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlap?language=objc)
pub type BluetoothLAP = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothgeneralinquiryaccesscodeindex?language=objc)
pub const kBluetoothGeneralInquiryAccessCodeIndex: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothgeneralinquiryaccesscodelapvalue?language=objc)
pub const kBluetoothGeneralInquiryAccessCodeLAPValue: c_uint = 0x9E8B33;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlimitedinquiryaccesscodeindex?language=objc)
pub const kBluetoothLimitedInquiryAccessCodeIndex: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlimitedinquiryaccesscodelapvalue?language=objc)
pub const kBluetoothLimitedInquiryAccessCodeLAPValue: c_uint = 0x9E8B00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlimitedinquiryaccesscodeend?language=objc)
pub const kBluetoothLimitedInquiryAccessCodeEnd: c_uint = 10390273;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothpagescanrepetitionmode?language=objc)
pub type BluetoothPageScanRepetitionMode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpagescanrepetitionmoder0?language=objc)
pub const kBluetoothPageScanRepetitionModeR0: c_uint = 0x00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpagescanrepetitionmoder1?language=objc)
pub const kBluetoothPageScanRepetitionModeR1: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpagescanrepetitionmoder2?language=objc)
pub const kBluetoothPageScanRepetitionModeR2: c_uint = 0x02;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothpagescanperiodmode?language=objc)
pub type BluetoothPageScanPeriodMode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpagescanperiodmodep0?language=objc)
pub const kBluetoothPageScanPeriodModeP0: c_uint = 0x00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpagescanperiodmodep1?language=objc)
pub const kBluetoothPageScanPeriodModeP1: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpagescanperiodmodep2?language=objc)
pub const kBluetoothPageScanPeriodModeP2: c_uint = 0x02;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothpagescanmode?language=objc)
pub type BluetoothPageScanMode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpagescanmodemandatory?language=objc)
pub const kBluetoothPageScanModeMandatory: c_uint = 0x00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpagescanmodeoptional1?language=objc)
pub const kBluetoothPageScanModeOptional1: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpagescanmodeoptional2?language=objc)
pub const kBluetoothPageScanModeOptional2: c_uint = 0x02;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothpagescanmodeoptional3?language=objc)
pub const kBluetoothPageScanModeOptional3: c_uint = 0x03;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcipagescantype?language=objc)
pub type BluetoothHCIPageScanType = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcipagescantypes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIPageScanTypes(pub c_uint);
impl BluetoothHCIPageScanTypes {
    #[doc(alias = "kBluetoothHCIPageScanTypeStandard")]
    pub const Standard: Self = Self(0x00);
    #[doc(alias = "kBluetoothHCIPageScanTypeInterlaced")]
    pub const Interlaced: Self = Self(0x01);
    #[doc(alias = "kBluetoothHCIPageScanTypeReservedStart")]
    pub const ReservedStart: Self = Self(0x02);
    #[doc(alias = "kBluetoothHCIPageScanTypeReservedEnd")]
    pub const ReservedEnd: Self = Self(0xFF);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIPageScanTypes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIPageScanTypes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcierroneousdatareporting?language=objc)
pub type BluetoothHCIErroneousDataReporting = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierroneousdatareportingdisabled?language=objc)
pub const kBluetoothHCIErroneousDataReportingDisabled: c_uint = 0x00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierroneousdatareportingenabled?language=objc)
pub const kBluetoothHCIErroneousDataReportingEnabled: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierroneousdatareportingreservedstart?language=objc)
pub const kBluetoothHCIErroneousDataReportingReservedStart: c_uint = 0x02;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierroneousdatareportingreservedend?language=objc)
pub const kBluetoothHCIErroneousDataReportingReservedEnd: c_uint = 0xFF;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothdeviceaddress?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothDeviceAddress {
    pub data: [u8; 6],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothDeviceAddress {
    const ENCODING: Encoding = Encoding::Struct("BluetoothDeviceAddress", &[<[u8; 6]>::ENCODING]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothDeviceAddress {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothkey?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothKey {
    pub data: [u8; 16],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothKey {
    const ENCODING: Encoding = Encoding::Struct("BluetoothKey", &[<[u8; 16]>::ENCODING]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothKey {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothirk?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothIRK {
    pub data: [u8; 16],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothIRK {
    const ENCODING: Encoding = Encoding::Struct("BluetoothIRK", &[<[u8; 16]>::ENCODING]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothIRK {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothpincode?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothPINCode {
    pub data: [u8; 16],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothPINCode {
    const ENCODING: Encoding = Encoding::Struct("BluetoothPINCode", &[<[u8; 16]>::ENCODING]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothPINCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothclassofdevice?language=objc)
pub type BluetoothClassOfDevice = u32;

/// Major Service Classes (11-bit value - bits 13-23 of Device/Service field)
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothserviceclassmajor?language=objc)
pub type BluetoothServiceClassMajor = u32;

/// Major Device Classes (5-bit value - bits 8-12 of Device/Service field)
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothdeviceclassmajor?language=objc)
pub type BluetoothDeviceClassMajor = u32;

/// Minor Device Classes (6-bit value - bits 2-7 of Device/Service field)
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothdeviceclassminor?language=objc)
pub type BluetoothDeviceClassMinor = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothdevicenamemaxlength?language=objc)
pub const kBluetoothDeviceNameMaxLength: c_uint = 248;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothclockoffset?language=objc)
pub type BluetoothClockOffset = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothrole?language=objc)
pub type BluetoothRole = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothallowroleswitch?language=objc)
pub type BluetoothAllowRoleSwitch = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothdontallowroleswitch?language=objc)
pub const kBluetoothDontAllowRoleSwitch: c_uint = 0x00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothallowroleswitch?language=objc)
pub const kBluetoothAllowRoleSwitch: c_uint = 0x01;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothrolebecomecentral?language=objc)
pub const kBluetoothRoleBecomeCentral: c_uint = 0x00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothroleremainperipheral?language=objc)
pub const kBluetoothRoleRemainPeripheral: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothrolebecomemaster?language=objc)
pub const kBluetoothRoleBecomeMaster: c_uint = kBluetoothRoleBecomeCentral;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothroleremainslave?language=objc)
pub const kBluetoothRoleRemainSlave: c_uint = kBluetoothRoleRemainPeripheral;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothseteventmask?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothSetEventMask {
    pub data: [u8; 8],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothSetEventMask {
    const ENCODING: Encoding = Encoding::Struct("BluetoothSetEventMask", &[<[u8; 8]>::ENCODING]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothSetEventMask {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothpintype?language=objc)
pub type BluetoothPINType = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capmaxpacketsize?language=objc)
pub const kBluetoothL2CAPMaxPacketSize: c_uint = 65535;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothacllogicalchannelreserved?language=objc)
pub const kBluetoothACLLogicalChannelReserved: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothacllogicalchannell2capcontinue?language=objc)
pub const kBluetoothACLLogicalChannelL2CAPContinue: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothacllogicalchannell2capstart?language=objc)
pub const kBluetoothACLLogicalChannelL2CAPStart: c_uint = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothacllogicalchannellmp?language=objc)
pub const kBluetoothACLLogicalChannelLMP: c_uint = 3;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capchannelid?language=objc)
pub type BluetoothL2CAPChannelID = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelnull?language=objc)
pub const kBluetoothL2CAPChannelNull: c_uint = 0x0000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelsignalling?language=objc)
pub const kBluetoothL2CAPChannelSignalling: c_uint = 0x0001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelconnectionlessdata?language=objc)
pub const kBluetoothL2CAPChannelConnectionLessData: c_uint = 0x0002;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelampmanagerprotocol?language=objc)
pub const kBluetoothL2CAPChannelAMPManagerProtocol: c_uint = 0x0003;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelattributeprotocol?language=objc)
pub const kBluetoothL2CAPChannelAttributeProtocol: c_uint = 0x0004;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannellesignalling?language=objc)
pub const kBluetoothL2CAPChannelLESignalling: c_uint = 0x0005;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelsecuritymanager?language=objc)
pub const kBluetoothL2CAPChannelSecurityManager: c_uint = 0x0006;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelbredrsecuritymanager?language=objc)
pub const kBluetoothL2CAPChannelBREDRSecurityManager: c_uint = 0x0007;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelreservedstart?language=objc)
pub const kBluetoothL2CAPChannelReservedStart: c_uint = 0x0008;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelleap?language=objc)
pub const kBluetoothL2CAPChannelLEAP: c_uint = 0x002A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelleas?language=objc)
pub const kBluetoothL2CAPChannelLEAS: c_uint = 0x002B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelmagicpairing?language=objc)
pub const kBluetoothL2CAPChannelMagicPairing: c_uint = 0x0030;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelmagnet?language=objc)
pub const kBluetoothL2CAPChannelMagnet: c_uint = 0x003A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelreservedend?language=objc)
pub const kBluetoothL2CAPChannelReservedEnd: c_uint = 0x003E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelamptestmanager?language=objc)
pub const kBluetoothL2CAPChannelAMPTestManager: c_uint = 0x003F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchanneldynamicstart?language=objc)
pub const kBluetoothL2CAPChannelDynamicStart: c_uint = 0x0040;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchanneldynamicend?language=objc)
pub const kBluetoothL2CAPChannelDynamicEnd: c_uint = 0xffff;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capchannelend?language=objc)
pub const kBluetoothL2CAPChannelEnd: c_uint = 0xffff;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capgroupid?language=objc)
pub type BluetoothL2CAPGroupID = BluetoothL2CAPChannelID;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2cappsm?language=objc)
pub type BluetoothL2CAPPSM = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capcommandcode?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothL2CAPCommandCode(pub c_uint);
impl BluetoothL2CAPCommandCode {
    #[doc(alias = "kBluetoothL2CAPCommandCodeReserved")]
    pub const Reserved: Self = Self(0x00);
    #[doc(alias = "kBluetoothL2CAPCommandCodeCommandReject")]
    pub const CommandReject: Self = Self(0x01);
    #[doc(alias = "kBluetoothL2CAPCommandCodeConnectionRequest")]
    pub const ConnectionRequest: Self = Self(0x02);
    #[doc(alias = "kBluetoothL2CAPCommandCodeConnectionResponse")]
    pub const ConnectionResponse: Self = Self(0x03);
    #[doc(alias = "kBluetoothL2CAPCommandCodeConfigureRequest")]
    pub const ConfigureRequest: Self = Self(0x04);
    #[doc(alias = "kBluetoothL2CAPCommandCodeConfigureResponse")]
    pub const ConfigureResponse: Self = Self(0x05);
    #[doc(alias = "kBluetoothL2CAPCommandCodeDisconnectionRequest")]
    pub const DisconnectionRequest: Self = Self(0x06);
    #[doc(alias = "kBluetoothL2CAPCommandCodeDisconnectionResponse")]
    pub const DisconnectionResponse: Self = Self(0x07);
    #[doc(alias = "kBluetoothL2CAPCommandCodeEchoRequest")]
    pub const EchoRequest: Self = Self(0x08);
    #[doc(alias = "kBluetoothL2CAPCommandCodeEchoResponse")]
    pub const EchoResponse: Self = Self(0x09);
    #[doc(alias = "kBluetoothL2CAPCommandCodeInformationRequest")]
    pub const InformationRequest: Self = Self(0x0A);
    #[doc(alias = "kBluetoothL2CAPCommandCodeInformationResponse")]
    pub const InformationResponse: Self = Self(0x0B);
    #[doc(alias = "kBluetoothL2CAPCommandCodeCreateChannelRequest")]
    pub const CreateChannelRequest: Self = Self(0x0C);
    #[doc(alias = "kBluetoothL2CAPCommandCodeCreateChannelResponse")]
    pub const CreateChannelResponse: Self = Self(0x0D);
    #[doc(alias = "kBluetoothL2CAPCommandCodeMoveChannelRequest")]
    pub const MoveChannelRequest: Self = Self(0x0E);
    #[doc(alias = "kBluetoothL2CAPCommandCodeMoveChannelResponse")]
    pub const MoveChannelResponse: Self = Self(0x0F);
    #[doc(alias = "kBluetoothL2CAPCommandCodeMoveChannelConfirmation")]
    pub const MoveChannelConfirmation: Self = Self(0x10);
    #[doc(alias = "kBluetoothL2CAPCommandCodeMoveChannelConfirmationResponse")]
    pub const MoveChannelConfirmationResponse: Self = Self(0x11);
    #[doc(alias = "kBluetoothL2CAPCommandCodeConnectionParameterUpdateRequest")]
    pub const ConnectionParameterUpdateRequest: Self = Self(0x12);
    #[doc(alias = "kBluetoothL2CAPCommandCodeConnectionParameterUpdateResponse")]
    pub const ConnectionParameterUpdateResponse: Self = Self(0x13);
    #[doc(alias = "kBluetoothL2CAPCommandCodeLECreditBasedConnectionRequest")]
    pub const LECreditBasedConnectionRequest: Self = Self(0x14);
    #[doc(alias = "kBluetoothL2CAPCommandCodeLECreditBasedConnectionResponse")]
    pub const LECreditBasedConnectionResponse: Self = Self(0x15);
    #[doc(alias = "kBluetoothL2CAPCommandCodeLEFlowControlCredit")]
    pub const LEFlowControlCredit: Self = Self(0x16);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPCommandCode {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPCommandCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capcommandrejectreason?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothL2CAPCommandRejectReason(pub c_uint);
impl BluetoothL2CAPCommandRejectReason {
    #[doc(alias = "kBluetoothL2CAPCommandRejectReasonCommandNotUnderstood")]
    pub const CommandNotUnderstood: Self = Self(0x0000);
    #[doc(alias = "kBluetoothL2CAPCommandRejectReasonSignallingMTUExceeded")]
    pub const SignallingMTUExceeded: Self = Self(0x0001);
    #[doc(alias = "kBluetoothL2CAPCommandRejectReasonInvalidCIDInRequest")]
    pub const InvalidCIDInRequest: Self = Self(0x0002);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPCommandRejectReason {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPCommandRejectReason {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capmtu?language=objc)
pub type BluetoothL2CAPMTU = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2caplinktimeout?language=objc)
pub type BluetoothL2CAPLinkTimeout = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capflushtimeout?language=objc)
pub type BluetoothL2CAPFlushTimeout = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capflushtimeoutuseexisting?language=objc)
pub const kBluetoothL2CAPFlushTimeoutUseExisting: c_uint = 0x0000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capflushtimeoutimmediate?language=objc)
pub const kBluetoothL2CAPFlushTimeoutImmediate: c_uint = 0x0001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capflushtimeoutforever?language=objc)
pub const kBluetoothL2CAPFlushTimeoutForever: c_uint = 0xFFFF;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capflushtimeoutend?language=objc)
pub const kBluetoothL2CAPFlushTimeoutEnd: c_uint = 65536;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capqualityofserviceoptions?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothL2CAPQualityOfServiceOptions {
    pub flags: u8,
    pub serviceType: u8,
    pub tokenRate: u32,
    pub tokenBucketSize: u32,
    pub peakBandwidth: u32,
    pub latency: u32,
    pub delayVariation: u32,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPQualityOfServiceOptions {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothL2CAPQualityOfServiceOptions",
        &[
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPQualityOfServiceOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capretransmissionandflowcontroloptions?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothL2CAPRetransmissionAndFlowControlOptions {
    pub flags: u8,
    pub txWindowSize: u8,
    pub maxTransmit: u8,
    pub retransmissionTimeout: u16,
    pub monitorTimeout: u16,
    pub maxPDUPayloadSize: u16,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPRetransmissionAndFlowControlOptions {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothL2CAPRetransmissionAndFlowControlOptions",
        &[
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPRetransmissionAndFlowControlOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capsegmentationandreassembly?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothL2CAPSegmentationAndReassembly(pub c_uint);
impl BluetoothL2CAPSegmentationAndReassembly {
    #[doc(alias = "kBluetoothL2CAPSegmentationAndReassemblyUnsegmentedSDU")]
    pub const UnsegmentedSDU: Self = Self(0x00);
    #[doc(alias = "kBluetoothL2CAPSegmentationAndReassemblyStartOfSDU")]
    pub const StartOfSDU: Self = Self(0x01);
    #[doc(alias = "kBluetoothL2CAPSegmentationAndReassemblyEndOfSDU")]
    pub const EndOfSDU: Self = Self(0x02);
    #[doc(alias = "kBluetoothL2CAPSegmentationAndReassemblyContinuationOfSDU")]
    pub const ContinuationOfSDU: Self = Self(0x03);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPSegmentationAndReassembly {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPSegmentationAndReassembly {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capinfotypemaxconnectionlessmtusize?language=objc)
pub const kBluetoothL2CAPInfoTypeMaxConnectionlessMTUSize: c_uint = 0x0001;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2cappacketheadersize?language=objc)
pub const kBluetoothL2CAPPacketHeaderSize: c_uint = 4;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capbytecount?language=objc)
pub type BluetoothL2CAPByteCount = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capcommandid?language=objc)
pub type BluetoothL2CAPCommandID = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capcommandbytecount?language=objc)
pub type BluetoothL2CAPCommandByteCount = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capconnectionresult?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothL2CAPConnectionResult(pub c_uint);
impl BluetoothL2CAPConnectionResult {
    #[doc(alias = "kBluetoothL2CAPConnectionResultSuccessful")]
    pub const Successful: Self = Self(0x0000);
    #[doc(alias = "kBluetoothL2CAPConnectionResultPending")]
    pub const Pending: Self = Self(0x0001);
    #[doc(alias = "kBluetoothL2CAPConnectionResultRefusedPSMNotSupported")]
    pub const RefusedPSMNotSupported: Self = Self(0x0002);
    #[doc(alias = "kBluetoothL2CAPConnectionResultRefusedSecurityBlock")]
    pub const RefusedSecurityBlock: Self = Self(0x0003);
    #[doc(alias = "kBluetoothL2CAPConnectionResultRefusedNoResources")]
    pub const RefusedNoResources: Self = Self(0x0004);
    #[doc(alias = "kBluetoothL2CAPConnectionResultRefusedReserved")]
    pub const RefusedReserved: Self = Self(0x0005);
    #[doc(alias = "kBluetoothL2CAPConnectionResultRefusedInvalidSourceCID")]
    pub const RefusedInvalidSourceCID: Self = Self(0x0006);
    #[doc(alias = "kBluetoothL2CAPConnectionResultRefusedSourceCIDAlreadyAllocated")]
    pub const RefusedSourceCIDAlreadyAllocated: Self = Self(0x0007);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPConnectionResult {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPConnectionResult {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capconnectionstatus?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothL2CAPConnectionStatus(pub c_uint);
impl BluetoothL2CAPConnectionStatus {
    #[doc(alias = "kBluetoothL2CAPConnectionStatusNoInfoAvailable")]
    pub const NoInfoAvailable: Self = Self(0x0000);
    #[doc(alias = "kBluetoothL2CAPConnectionStatusAuthenticationPending")]
    pub const AuthenticationPending: Self = Self(0x0001);
    #[doc(alias = "kBluetoothL2CAPConnectionStatusAuthorizationPending")]
    pub const AuthorizationPending: Self = Self(0x0002);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPConnectionStatus {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPConnectionStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capconfigurationresult?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothL2CAPConfigurationResult(pub c_uint);
impl BluetoothL2CAPConfigurationResult {
    #[doc(alias = "kBluetoothL2CAPConfigurationResultSuccess")]
    pub const Success: Self = Self(0x0000);
    #[doc(alias = "kBluetoothL2CAPConfigurationResultUnacceptableParams")]
    pub const UnacceptableParams: Self = Self(0x0001);
    #[doc(alias = "kBluetoothL2CAPConfigurationResultRejected")]
    pub const Rejected: Self = Self(0x0002);
    #[doc(alias = "kBluetoothL2CAPConfigurationResultUnknownOptions")]
    pub const UnknownOptions: Self = Self(0x0003);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPConfigurationResult {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPConfigurationResult {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capconfigurationoption?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothL2CAPConfigurationOption(pub c_uint);
impl BluetoothL2CAPConfigurationOption {
    #[doc(alias = "kBluetoothL2CAPConfigurationOptionMTU")]
    pub const MTU: Self = Self(0x01);
    #[doc(alias = "kBluetoothL2CAPConfigurationOptionFlushTimeout")]
    pub const FlushTimeout: Self = Self(0x02);
    #[doc(alias = "kBluetoothL2CAPConfigurationOptionQoS")]
    pub const QoS: Self = Self(0x03);
    #[doc(alias = "kBluetoothL2CAPConfigurationOptionRetransmissionAndFlowControl")]
    pub const RetransmissionAndFlowControl: Self = Self(0x04);
    #[doc(alias = "kBluetoothL2CAPConfigurationOptionFrameCheckSequence")]
    pub const FrameCheckSequence: Self = Self(0x05);
    #[doc(alias = "kBluetoothL2CAPConfigurationOptionExtendedFlowSpecification")]
    pub const ExtendedFlowSpecification: Self = Self(0x06);
    #[doc(alias = "kBluetoothL2CAPConfigurationOptionExtendedWindowSize")]
    pub const ExtendedWindowSize: Self = Self(0x07);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPConfigurationOption {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPConfigurationOption {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capconfigurationoptionmtulength?language=objc)
pub const kBluetoothL2CAPConfigurationOptionMTULength: c_uint = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capconfigurationoptionflushtimeoutlength?language=objc)
pub const kBluetoothL2CAPConfigurationOptionFlushTimeoutLength: c_uint = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capconfigurationoptionqoslength?language=objc)
pub const kBluetoothL2CAPConfigurationOptionQoSLength: c_uint = 22;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capconfigurationoptionretransmissionandflowcontrollength?language=objc)
pub const kBluetoothL2CAPConfigurationOptionRetransmissionAndFlowControlLength: c_uint = 9;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capconfigurationretransmissionandflowcontrolflags?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothL2CAPConfigurationRetransmissionAndFlowControlFlags(pub c_uint);
impl BluetoothL2CAPConfigurationRetransmissionAndFlowControlFlags {
    #[doc(alias = "kBluetoothL2CAPConfigurationBasicL2CAPModeFlag")]
    pub const BasicL2CAPModeFlag: Self = Self(0x00);
    #[doc(alias = "kBluetoothL2CAPConfigurationRetransmissionModeFlag")]
    pub const RetransmissionModeFlag: Self = Self(0x01);
    #[doc(alias = "kBluetoothL2CAPConfigurationFlowControlModeFlag")]
    pub const FlowControlModeFlag: Self = Self(0x02);
    #[doc(alias = "kBluetoothL2CAPConfigurationEnhancedRetransmissionMode")]
    pub const EnhancedRetransmissionMode: Self = Self(0x03);
    #[doc(alias = "kBluetoothL2CAPConfigurationStreamingMode")]
    pub const StreamingMode: Self = Self(0x04);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPConfigurationRetransmissionAndFlowControlFlags {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPConfigurationRetransmissionAndFlowControlFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capinformationtype?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothL2CAPInformationType(pub c_uint);
impl BluetoothL2CAPInformationType {
    #[doc(alias = "kBluetoothL2CAPInformationTypeConnectionlessMTU")]
    pub const ConnectionlessMTU: Self = Self(0x0001);
    #[doc(alias = "kBluetoothL2CAPInformationTypeExtendedFeatures")]
    pub const ExtendedFeatures: Self = Self(0x0002);
    #[doc(alias = "kBluetoothL2CAPInformationTypeFixedChannelsSupported")]
    pub const FixedChannelsSupported: Self = Self(0x0003);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPInformationType {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPInformationType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capinformationresult?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothL2CAPInformationResult(pub c_uint);
impl BluetoothL2CAPInformationResult {
    #[doc(alias = "kBluetoothL2CAPInformationResultSuccess")]
    pub const Success: Self = Self(0x0000);
    #[doc(alias = "kBluetoothL2CAPInformationResultNotSupported")]
    pub const NotSupported: Self = Self(0x0001);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPInformationResult {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPInformationResult {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capinformationextendedfeaturesmask?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothL2CAPInformationExtendedFeaturesMask(pub c_uint);
impl BluetoothL2CAPInformationExtendedFeaturesMask {
    #[doc(alias = "kBluetoothL2CAPInformationNoExtendedFeatures")]
    pub const InformationNoExtendedFeatures: Self = Self(0x00000000);
    #[doc(alias = "kBluetoothL2CAPInformationFlowControlMode")]
    pub const InformationFlowControlMode: Self = Self(0x00000001);
    #[doc(alias = "kBluetoothL2CAPInformationRetransmissionMode")]
    pub const InformationRetransmissionMode: Self = Self(0x00000002);
    #[doc(alias = "kBluetoothL2CAPInformationBidirectionalQoS")]
    pub const InformationBidirectionalQoS: Self = Self(0x00000004);
    #[doc(alias = "kBluetoothL2CAPInformationEnhancedRetransmissionMode")]
    pub const InformationEnhancedRetransmissionMode: Self = Self(0x00000008);
    #[doc(alias = "kBluetoothL2CAPInformationStreamingMode")]
    pub const InformationStreamingMode: Self = Self(0x00000010);
    #[doc(alias = "kBluetoothL2CAPInformationFCSOption")]
    pub const InformationFCSOption: Self = Self(0x00000020);
    #[doc(alias = "kBluetoothL2CAPInformationExtendedFlowSpecification")]
    pub const InformationExtendedFlowSpecification: Self = Self(0x00000040);
    #[doc(alias = "kBluetoothL2CAPInformationFixedChannels")]
    pub const InformationFixedChannels: Self = Self(0x00000080);
    #[doc(alias = "kBluetoothL2CAPInformationExtendedWindowSize")]
    pub const InformationExtendedWindowSize: Self = Self(0x00000100);
    #[doc(alias = "kBluetoothL2CAPUnicastConnectionlessDataReception")]
    pub const UnicastConnectionlessDataReception: Self = Self(0x00000200);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPInformationExtendedFeaturesMask {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPInformationExtendedFeaturesMask {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capqostype?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothL2CAPQoSType(pub c_uint);
impl BluetoothL2CAPQoSType {
    #[doc(alias = "kBluetoothL2CAPQoSTypeNoTraffic")]
    pub const NoTraffic: Self = Self(0x00);
    #[doc(alias = "kBluetoothL2CAPQoSTypeBestEffort")]
    pub const BestEffort: Self = Self(0x01);
    #[doc(alias = "kBluetoothL2CAPQoSTypeGuaranteed")]
    pub const Guaranteed: Self = Self(0x02);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPQoSType {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPQoSType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothl2capsupervisoryfuctiontype?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothL2CAPSupervisoryFuctionType(pub c_uint);
impl BluetoothL2CAPSupervisoryFuctionType {
    #[doc(alias = "kBluetoothL2CAPSupervisoryFuctionTypeReceiverReady")]
    pub const ReceiverReady: Self = Self(0x0);
    #[doc(alias = "kBluetoothL2CAPSupervisoryFuctionTypeReject")]
    pub const Reject: Self = Self(0x1);
    #[doc(alias = "kBluetoothL2CAPSupervisoryFuctionTypeReceiverNotReady")]
    pub const ReceiverNotReady: Self = Self(0x2);
    #[doc(alias = "kBluetoothL2CAPSupervisoryFuctionTypeSelectiveReject")]
    pub const SelectiveReject: Self = Self(0x3);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothL2CAPSupervisoryFuctionType {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothL2CAPSupervisoryFuctionType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothletxtimemin?language=objc)
pub const kBluetoothLETXTimeMin: c_uint = 0x0148;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothletxtimedefault?language=objc)
pub const kBluetoothLETXTimeDefault: c_uint = 0x0148;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothletxtimemax?language=objc)
pub const kBluetoothLETXTimeMax: c_uint = 0x0848;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothletxoctetsmin?language=objc)
pub const kBluetoothLETXOctetsMin: c_uint = 0x001b;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothletxoctetsdefault?language=objc)
pub const kBluetoothLETXOctetsDefault: c_uint = 0x001b;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothletxoctetsmax?language=objc)
pub const kBluetoothLETXOctetsMax: c_uint = 0x00fb;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capmtulowenergydefault?language=objc)
pub const kBluetoothL2CAPMTULowEnergyDefault: c_uint = kBluetoothLETXOctetsMin;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capmtulowenergymax?language=objc)
pub const kBluetoothL2CAPMTULowEnergyMax: c_uint = kBluetoothLETXOctetsMax;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capmtuminimum?language=objc)
pub const kBluetoothL2CAPMTUMinimum: c_uint = 0x0030;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capmtudefault?language=objc)
pub const kBluetoothL2CAPMTUDefault: c_uint = 0x03F9;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capmtumaximum?language=objc)
pub const kBluetoothL2CAPMTUMaximum: c_uint = 0xffff;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capmtustart?language=objc)
pub const kBluetoothL2CAPMTUStart: c_uint = 0x7fff;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capmtusig?language=objc)
pub const kBluetoothL2CAPMTUSIG: c_uint = 0x0030;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capflushtimeoutdefault?language=objc)
pub const kBluetoothL2CAPFlushTimeoutDefault: c_uint = kBluetoothL2CAPFlushTimeoutForever;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capqosflagsdefault?language=objc)
pub const kBluetoothL2CAPQoSFlagsDefault: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capqostypedefault?language=objc)
pub const kBluetoothL2CAPQoSTypeDefault: c_uint = BluetoothL2CAPQoSType::BestEffort.0;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capqostokenratedefault?language=objc)
pub const kBluetoothL2CAPQoSTokenRateDefault: c_uint = 0x00000000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capqostokenbucketsizedefault?language=objc)
pub const kBluetoothL2CAPQoSTokenBucketSizeDefault: c_uint = 0x00000000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capqospeakbandwidthdefault?language=objc)
pub const kBluetoothL2CAPQoSPeakBandwidthDefault: c_uint = 0x00000000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capqoslatencydefault?language=objc)
pub const kBluetoothL2CAPQoSLatencyDefault: c_uint = 0xffffffff;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2capqosdelayvariationdefault?language=objc)
pub const kBluetoothL2CAPQoSDelayVariationDefault: c_uint = 0xffffffff;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlemaxtxtimemin?language=objc)
pub const kBluetoothLEMaxTXTimeMin: c_uint = 0x0148;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlemaxtxtimedefault?language=objc)
pub const kBluetoothLEMaxTXTimeDefault: c_uint = kBluetoothL2CAPMTULowEnergyDefault;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlemaxtxtimemax?language=objc)
pub const kBluetoothLEMaxTXTimeMax: c_uint = 0x0848;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlemaxtxoctetsmin?language=objc)
pub const kBluetoothLEMaxTXOctetsMin: c_uint = 0x001b;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlemaxtxoctetsdefault?language=objc)
pub const kBluetoothLEMaxTXOctetsDefault: c_uint = 0x0080;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlemaxtxoctetsmax?language=objc)
pub const kBluetoothLEMaxTXOctetsMax: c_uint = 0x00fb;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlesecuritymanagerkeydistributionformat?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLESecurityManagerKeyDistributionFormat(pub c_uint);
impl BluetoothLESecurityManagerKeyDistributionFormat {
    #[doc(alias = "kBluetoothLESecurityManagerEncryptionKey")]
    pub const EncryptionKey: Self = Self(1 << 0);
    #[doc(alias = "kBluetoothLESecurityManagerIDKey")]
    pub const IDKey: Self = Self(1 << 1);
    #[doc(alias = "kBluetoothLESecurityManagerSignKey")]
    pub const SignKey: Self = Self(1 << 2);
    #[doc(alias = "kBluetoothLESecurityManagerLinkKey")]
    pub const LinkKey: Self = Self(1 << 3);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLESecurityManagerKeyDistributionFormat {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLESecurityManagerKeyDistributionFormat {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlesecuritymanagercommandcode?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLESecurityManagerCommandCode(pub c_uint);
impl BluetoothLESecurityManagerCommandCode {
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodeReserved")]
    pub const Reserved: Self = Self(0x00);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodePairingRequest")]
    pub const PairingRequest: Self = Self(0x01);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodePairingResponse")]
    pub const PairingResponse: Self = Self(0x02);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodePairingConfirm")]
    pub const PairingConfirm: Self = Self(0x03);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodePairingRandom")]
    pub const PairingRandom: Self = Self(0x04);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodePairingFailed")]
    pub const PairingFailed: Self = Self(0x05);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodeEncryptionInfo")]
    pub const EncryptionInfo: Self = Self(0x06);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodeMasterIdentification")]
    pub const MasterIdentification: Self = Self(0x07);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodeIdentityInfo")]
    pub const IdentityInfo: Self = Self(0x08);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodeIdentityAddressInfo")]
    pub const IdentityAddressInfo: Self = Self(0x09);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodeSigningInfo")]
    pub const SigningInfo: Self = Self(0x0A);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodeSecurityRequest")]
    pub const SecurityRequest: Self = Self(0x0B);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodePairingPublicKey")]
    pub const PairingPublicKey: Self = Self(0x0C);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodePairingDHKeyCheck")]
    pub const PairingDHKeyCheck: Self = Self(0x0D);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodePairingKeypressNotification")]
    pub const PairingKeypressNotification: Self = Self(0x0E);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodeReservedStart")]
    pub const ReservedStart: Self = Self(0x0F);
    #[doc(alias = "kBluetoothLESecurityManagerCommandCodeReservedEnd")]
    pub const ReservedEnd: Self = Self(0xFF);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLESecurityManagerCommandCode {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLESecurityManagerCommandCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlesecuritymanageruserinputcapability?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLESecurityManagerUserInputCapability(pub c_uint);
impl BluetoothLESecurityManagerUserInputCapability {
    #[doc(alias = "kBluetoothLESecurityManagerUserInputCapabilityNoInput")]
    pub const NoInput: Self = Self(0x01);
    #[doc(alias = "kBluetoothLESecurityManagerUserInputCapabilityYesNo")]
    pub const YesNo: Self = Self(0x02);
    #[doc(alias = "kBluetoothLESecurityManagerUserInputCapabilityKeyboard")]
    pub const Keyboard: Self = Self(0x03);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLESecurityManagerUserInputCapability {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLESecurityManagerUserInputCapability {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlesecuritymanageruseroutputcapability?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLESecurityManagerUserOutputCapability(pub c_uint);
impl BluetoothLESecurityManagerUserOutputCapability {
    #[doc(alias = "kBluetoothLESecurityManagerUserOutputCapabilityNoOutput")]
    pub const NoOutput: Self = Self(0x01);
    #[doc(alias = "kBluetoothLESecurityManagerUserOutputCapabilityNumericOutput")]
    pub const NumericOutput: Self = Self(0x02);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLESecurityManagerUserOutputCapability {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLESecurityManagerUserOutputCapability {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlesecuritymanageriocapability?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLESecurityManagerIOCapability(pub c_uint);
impl BluetoothLESecurityManagerIOCapability {
    #[doc(alias = "kBluetoothLESecurityManagerIOCapabilityDisplayOnly")]
    pub const DisplayOnly: Self = Self(0x00);
    #[doc(alias = "kBluetoothLESecurityManagerIOCapabilityDisplayYesNo")]
    pub const DisplayYesNo: Self = Self(0x01);
    #[doc(alias = "kBluetoothLESecurityManagerIOCapabilityKeyboardOnly")]
    pub const KeyboardOnly: Self = Self(0x02);
    #[doc(alias = "kBluetoothLESecurityManagerIOCapabilityNoInputNoOutput")]
    pub const NoInputNoOutput: Self = Self(0x03);
    #[doc(alias = "kBluetoothLESecurityManagerIOCapabilityKeyboardDisplay")]
    pub const KeyboardDisplay: Self = Self(0x04);
    #[doc(alias = "kBluetoothLESecurityManagerIOCapabilityReservedStart")]
    pub const ReservedStart: Self = Self(0x05);
    #[doc(alias = "kBluetoothLESecurityManagerIOCapabilityReservedEnd")]
    pub const ReservedEnd: Self = Self(0xFF);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLESecurityManagerIOCapability {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLESecurityManagerIOCapability {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlesecuritymanageroobdata?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLESecurityManagerOOBData(pub c_uint);
impl BluetoothLESecurityManagerOOBData {
    #[doc(alias = "kBluetoothLESecurityManagerOOBAuthenticationDataNotPresent")]
    pub const AuthenticationDataNotPresent: Self = Self(0x00);
    #[doc(alias = "kBluetoothLESecurityManagerOOBAuthenticationDataPresent")]
    pub const AuthenticationDataPresent: Self = Self(0x01);
    #[doc(alias = "kBluetoothLESecurityManagerOOBDataReservedStart")]
    pub const DataReservedStart: Self = Self(0x02);
    #[doc(alias = "kBluetoothLESecurityManagerOOBDataReservedEnd")]
    pub const DataReservedEnd: Self = Self(0xFF);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLESecurityManagerOOBData {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLESecurityManagerOOBData {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlesecuritymanagernobonding?language=objc)
pub const kBluetoothLESecurityManagerNoBonding: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlesecuritymanagerbonding?language=objc)
pub const kBluetoothLESecurityManagerBonding: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlesecuritymanagerreservedstart?language=objc)
pub const kBluetoothLESecurityManagerReservedStart: c_uint = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothlesecuritymanagerreservedend?language=objc)
pub const kBluetoothLESecurityManagerReservedEnd: c_uint = 3;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlesecuritymanagerpairingfailedreasoncode?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLESecurityManagerPairingFailedReasonCode(pub c_uint);
impl BluetoothLESecurityManagerPairingFailedReasonCode {
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodeReserved")]
    pub const ReasonCodeReserved: Self = Self(0x00);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodePasskeyEntryFailed")]
    pub const ReasonCodePasskeyEntryFailed: Self = Self(0x01);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodeOOBNotAvailbale")]
    pub const ReasonCodeOOBNotAvailbale: Self = Self(0x02);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodeAuthenticationRequirements")]
    pub const ReasonCodeAuthenticationRequirements: Self = Self(0x03);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodeConfirmValueFailed")]
    pub const ReasonCodeConfirmValueFailed: Self = Self(0x04);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodePairingNotSupported")]
    pub const ReasonCodePairingNotSupported: Self = Self(0x05);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodeEncryptionKeySize")]
    pub const ReasonCodeEncryptionKeySize: Self = Self(0x06);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodeCommandNotSupported")]
    pub const ReasonCodeCommandNotSupported: Self = Self(0x07);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodeUnspecifiedReason")]
    pub const ReasonCodeUnspecifiedReason: Self = Self(0x08);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodeRepeatedAttempts")]
    pub const ReasonCodeRepeatedAttempts: Self = Self(0x09);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodeInvalidParameters")]
    pub const ReasonCodeInvalidParameters: Self = Self(0x0A);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodeDHKeyCheckFailed")]
    pub const ReasonCodeDHKeyCheckFailed: Self = Self(0x0B);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodeNumericComparisonFailed")]
    pub const ReasonCodeNumericComparisonFailed: Self = Self(0x0C);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodeBREDRPairingInProgress")]
    pub const ReasonCodeBREDRPairingInProgress: Self = Self(0x0D);
    #[doc(
        alias = "kBluetoothLESecurityManagerReasonCodeCrossTransportKeyDerivationGenerationNotAllowed"
    )]
    pub const ReasonCodeCrossTransportKeyDerivationGenerationNotAllowed: Self = Self(0x0E);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodeReservedStart")]
    pub const ReasonCodeReservedStart: Self = Self(0x0F);
    #[doc(alias = "kBluetoothLESecurityManagerReasonCodeReservedEnd")]
    pub const ReasonCodeReservedEnd: Self = Self(0xFF);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLESecurityManagerPairingFailedReasonCode {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLESecurityManagerPairingFailedReasonCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlesecuritymanagerkeypressnotificationtype?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLESecurityManagerKeypressNotificationType(pub c_uint);
impl BluetoothLESecurityManagerKeypressNotificationType {
    #[doc(alias = "kBluetoothLESecurityManagerNotificationTypePasskeyEntryStarted")]
    pub const NotificationTypePasskeyEntryStarted: Self = Self(0);
    #[doc(alias = "kBluetoothLESecurityManagerNotificationTypePasskeyDigitEntered")]
    pub const NotificationTypePasskeyDigitEntered: Self = Self(1);
    #[doc(alias = "kBluetoothLESecurityManagerNotificationTypePasskeyDigitErased")]
    pub const NotificationTypePasskeyDigitErased: Self = Self(2);
    #[doc(alias = "kBluetoothLESecurityManagerNotificationTypePasskeyCleared")]
    pub const NotificationTypePasskeyCleared: Self = Self(3);
    #[doc(alias = "kBluetoothLESecurityManagerNotificationTypePasskeyEntryCompleted")]
    pub const NotificationTypePasskeyEntryCompleted: Self = Self(4);
    #[doc(alias = "kBluetoothLESecurityManagerNotificationTypeReservedStart")]
    pub const NotificationTypeReservedStart: Self = Self(5);
    #[doc(alias = "kBluetoothLESecurityManagerNotificationTypeReservedEnd")]
    pub const NotificationTypeReservedEnd: Self = Self(255);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLESecurityManagerKeypressNotificationType {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLESecurityManagerKeypressNotificationType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothampmanagercode?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothAMPManagerCode(pub c_uint);
impl BluetoothAMPManagerCode {
    #[doc(alias = "kBluetoothAMPManagerCodeReserved")]
    pub const Reserved: Self = Self(0x00);
    #[doc(alias = "kBluetoothAMPManagerCodeAMPCommandReject")]
    pub const AMPCommandReject: Self = Self(0x01);
    #[doc(alias = "kBluetoothAMPManagerCodeAMPDiscoverRequest")]
    pub const AMPDiscoverRequest: Self = Self(0x02);
    #[doc(alias = "kBluetoothAMPManagerCodeAMPDiscoverResponse")]
    pub const AMPDiscoverResponse: Self = Self(0x03);
    #[doc(alias = "kBluetoothAMPManagerCodeAMPChangeNotify")]
    pub const AMPChangeNotify: Self = Self(0x04);
    #[doc(alias = "kBluetoothAMPManagerCodeAMPChangeResponse")]
    pub const AMPChangeResponse: Self = Self(0x05);
    #[doc(alias = "kBluetoothAMPManagerCodeAMPGetInfoRequest")]
    pub const AMPGetInfoRequest: Self = Self(0x06);
    #[doc(alias = "kBluetoothAMPManagerCodeAMPGetInfoResponse")]
    pub const AMPGetInfoResponse: Self = Self(0x07);
    #[doc(alias = "kBluetoothAMPManagerCodeAMPGetAssocRequest")]
    pub const AMPGetAssocRequest: Self = Self(0x08);
    #[doc(alias = "kBluetoothAMPManagerCodeAMPGetAssocResponse")]
    pub const AMPGetAssocResponse: Self = Self(0x09);
    #[doc(alias = "kBluetoothAMPManagerCodeAMPCreatePhysicalLinkRequest")]
    pub const AMPCreatePhysicalLinkRequest: Self = Self(0x0A);
    #[doc(alias = "kBluetoothAMPManagerCodeAMPCreatePhysicalLinkResponse")]
    pub const AMPCreatePhysicalLinkResponse: Self = Self(0x0B);
    #[doc(alias = "kBluetoothAMPManagerCodeAMPDisconnectPhysicalLinkRequest")]
    pub const AMPDisconnectPhysicalLinkRequest: Self = Self(0x0C);
    #[doc(alias = "kBluetoothAMPManagerCodeAMPDisconnectPhysicalLinkResponse")]
    pub const AMPDisconnectPhysicalLinkResponse: Self = Self(0x0D);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothAMPManagerCode {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothAMPManagerCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothampcommandrejectreason?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothAMPCommandRejectReason(pub c_uint);
impl BluetoothAMPCommandRejectReason {
    #[doc(alias = "kBluetoothAMPManagerCommandRejectReasonCommandNotRecognized")]
    pub const ManagerCommandRejectReasonCommandNotRecognized: Self = Self(0x0000);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothAMPCommandRejectReason {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothAMPCommandRejectReason {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothampdiscoverresponsecontrollerstatus?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothAMPDiscoverResponseControllerStatus(pub c_uint);
impl BluetoothAMPDiscoverResponseControllerStatus {
    #[doc(alias = "kBluetoothAMPManagerDiscoverResponseControllerStatusPoweredDown")]
    pub const ManagerDiscoverResponseControllerStatusPoweredDown: Self = Self(0x00);
    #[doc(alias = "kBluetoothAMPManagerDiscoverResponseControllerStatusBluetoothOnly")]
    pub const ManagerDiscoverResponseControllerStatusBluetoothOnly: Self = Self(0x01);
    #[doc(alias = "kBluetoothAMPManagerDiscoverResponseControllerStatusNoCapacity")]
    pub const ManagerDiscoverResponseControllerStatusNoCapacity: Self = Self(0x02);
    #[doc(alias = "kBluetoothAMPManagerDiscoverResponseControllerStatusLowCapacity")]
    pub const ManagerDiscoverResponseControllerStatusLowCapacity: Self = Self(0x03);
    #[doc(alias = "kBluetoothAMPManagerDiscoverResponseControllerStatusMediumCapacity")]
    pub const ManagerDiscoverResponseControllerStatusMediumCapacity: Self = Self(0x04);
    #[doc(alias = "kBluetoothAMPManagerDiscoverResponseControllerStatusHighCapacity")]
    pub const ManagerDiscoverResponseControllerStatusHighCapacity: Self = Self(0x05);
    #[doc(alias = "kBluetoothAMPManagerDiscoverResponseControllerStatusFullCapacity")]
    pub const ManagerDiscoverResponseControllerStatusFullCapacity: Self = Self(0x06);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothAMPDiscoverResponseControllerStatus {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothAMPDiscoverResponseControllerStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothampgetinforesponsestatus?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothAMPGetInfoResponseStatus(pub c_uint);
impl BluetoothAMPGetInfoResponseStatus {
    #[doc(alias = "kBluetoothAMPManagerGetInfoResponseSuccess")]
    pub const ManagerGetInfoResponseSuccess: Self = Self(0x00);
    #[doc(alias = "kBluetoothAMPManagerGetInfoResponseInvalidControllerID")]
    pub const ManagerGetInfoResponseInvalidControllerID: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothAMPGetInfoResponseStatus {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothAMPGetInfoResponseStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothampgetassocresponsestatus?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothAMPGetAssocResponseStatus(pub c_uint);
impl BluetoothAMPGetAssocResponseStatus {
    #[doc(alias = "kBluetoothAMPManagerGetAssocResponseSuccess")]
    pub const ManagerGetAssocResponseSuccess: Self = Self(0x00);
    #[doc(alias = "kBluetoothAMPManagerGetAssocResponseInvalidControllerID")]
    pub const ManagerGetAssocResponseInvalidControllerID: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothAMPGetAssocResponseStatus {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothAMPGetAssocResponseStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothampcreatephysicallinkresponsestatus?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothAMPCreatePhysicalLinkResponseStatus(pub c_uint);
impl BluetoothAMPCreatePhysicalLinkResponseStatus {
    #[doc(alias = "kBluetoothAMPManagerCreatePhysicalLinkResponseSuccess")]
    pub const ManagerCreatePhysicalLinkResponseSuccess: Self = Self(0x00);
    #[doc(alias = "kBluetoothAMPManagerCreatePhysicalLinkResponseInvalidControllerID")]
    pub const ManagerCreatePhysicalLinkResponseInvalidControllerID: Self = Self(0x01);
    #[doc(alias = "kBluetoothAMPManagerCreatePhysicalLinkResponseUnableToStartLinkCreation")]
    pub const ManagerCreatePhysicalLinkResponseUnableToStartLinkCreation: Self = Self(0x02);
    #[doc(alias = "kBluetoothAMPManagerCreatePhysicalLinkResponseCollisionOccurred")]
    pub const ManagerCreatePhysicalLinkResponseCollisionOccurred: Self = Self(0x03);
    #[doc(
        alias = "kBluetoothAMPManagerCreatePhysicalLinkResponseAMPDisconnectedPhysicalLinkRequestReceived"
    )]
    pub const ManagerCreatePhysicalLinkResponseAMPDisconnectedPhysicalLinkRequestReceived: Self =
        Self(0x04);
    #[doc(alias = "kBluetoothAMPManagerCreatePhysicalLinkResponsePhysicalLinkAlreadyExists")]
    pub const ManagerCreatePhysicalLinkResponsePhysicalLinkAlreadyExists: Self = Self(0x05);
    #[doc(alias = "kBluetoothAMPManagerCreatePhysicalLinkResponseSecurityViolation")]
    pub const ManagerCreatePhysicalLinkResponseSecurityViolation: Self = Self(0x06);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothAMPCreatePhysicalLinkResponseStatus {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothAMPCreatePhysicalLinkResponseStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothampdisconnectphysicallinkresponsestatus?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothAMPDisconnectPhysicalLinkResponseStatus(pub c_uint);
impl BluetoothAMPDisconnectPhysicalLinkResponseStatus {
    #[doc(alias = "kBluetoothAMPManagerDisconnectPhysicalLinkResponseSuccess")]
    pub const ManagerDisconnectPhysicalLinkResponseSuccess: Self = Self(0x00);
    #[doc(alias = "kBluetoothAMPManagerDisconnectPhysicalLinkResponseInvalidControllerID")]
    pub const ManagerDisconnectPhysicalLinkResponseInvalidControllerID: Self = Self(0x01);
    #[doc(alias = "kBluetoothAMPManagerDisconnectPhysicalLinkResponseNoPhysicalLink")]
    pub const ManagerDisconnectPhysicalLinkResponseNoPhysicalLink: Self = Self(0x02);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothAMPDisconnectPhysicalLinkResponseStatus {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothAMPDisconnectPhysicalLinkResponseStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcicommandopcodegroup?language=objc)
pub type BluetoothHCICommandOpCodeGroup = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcicommandopcodecommand?language=objc)
pub type BluetoothHCICommandOpCodeCommand = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcicommandopcode?language=objc)
pub type BluetoothHCICommandOpCode = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcivendorcommandselector?language=objc)
pub type BluetoothHCIVendorCommandSelector = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhciopcodenoop?language=objc)
pub const kBluetoothHCIOpCodeNoOp: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandgroupnoop?language=objc)
pub const kBluetoothHCICommandGroupNoOp: c_uint = 0x00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandnoop?language=objc)
pub const kBluetoothHCICommandNoOp: c_uint = 0x0000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandgrouplinkcontrol?language=objc)
pub const kBluetoothHCICommandGroupLinkControl: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandinquiry?language=objc)
pub const kBluetoothHCICommandInquiry: c_uint = 0x0001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandinquirycancel?language=objc)
pub const kBluetoothHCICommandInquiryCancel: c_uint = 0x0002;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandperiodicinquirymode?language=objc)
pub const kBluetoothHCICommandPeriodicInquiryMode: c_uint = 0x0003;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandexitperiodicinquirymode?language=objc)
pub const kBluetoothHCICommandExitPeriodicInquiryMode: c_uint = 0x0004;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandcreateconnection?language=objc)
pub const kBluetoothHCICommandCreateConnection: c_uint = 0x0005;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommanddisconnect?language=objc)
pub const kBluetoothHCICommandDisconnect: c_uint = 0x0006;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandaddscoconnection?language=objc)
pub const kBluetoothHCICommandAddSCOConnection: c_uint = 0x0007;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandcreateconnectioncancel?language=objc)
pub const kBluetoothHCICommandCreateConnectionCancel: c_uint = 0x0008;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandacceptconnectionrequest?language=objc)
pub const kBluetoothHCICommandAcceptConnectionRequest: c_uint = 0x0009;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandrejectconnectionrequest?language=objc)
pub const kBluetoothHCICommandRejectConnectionRequest: c_uint = 0x000A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlinkkeyrequestreply?language=objc)
pub const kBluetoothHCICommandLinkKeyRequestReply: c_uint = 0x000B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlinkkeyrequestnegativereply?language=objc)
pub const kBluetoothHCICommandLinkKeyRequestNegativeReply: c_uint = 0x000C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandpincoderequestreply?language=objc)
pub const kBluetoothHCICommandPINCodeRequestReply: c_uint = 0x000D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandpincoderequestnegativereply?language=objc)
pub const kBluetoothHCICommandPINCodeRequestNegativeReply: c_uint = 0x000E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandchangeconnectionpackettype?language=objc)
pub const kBluetoothHCICommandChangeConnectionPacketType: c_uint = 0x000F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandauthenticationrequested?language=objc)
pub const kBluetoothHCICommandAuthenticationRequested: c_uint = 0x0011;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetconnectionencryption?language=objc)
pub const kBluetoothHCICommandSetConnectionEncryption: c_uint = 0x0013;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandchangeconnectionlinkkey?language=objc)
pub const kBluetoothHCICommandChangeConnectionLinkKey: c_uint = 0x0015;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandmasterlinkkey?language=objc)
pub const kBluetoothHCICommandMasterLinkKey: c_uint = 0x0017;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandremotenamerequest?language=objc)
pub const kBluetoothHCICommandRemoteNameRequest: c_uint = 0x0019;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadremotesupportedfeatures?language=objc)
pub const kBluetoothHCICommandReadRemoteSupportedFeatures: c_uint = 0x001B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadremoteextendedfeatures?language=objc)
pub const kBluetoothHCICommandReadRemoteExtendedFeatures: c_uint = 0x001C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadremoteversioninformation?language=objc)
pub const kBluetoothHCICommandReadRemoteVersionInformation: c_uint = 0x001D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadclockoffset?language=objc)
pub const kBluetoothHCICommandReadClockOffset: c_uint = 0x001F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandremotenamerequestcancel?language=objc)
pub const kBluetoothHCICommandRemoteNameRequestCancel: c_uint = 0x001A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlmphandle?language=objc)
pub const kBluetoothHCICommandReadLMPHandle: c_uint = 0x0020;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetupsynchronousconnection?language=objc)
pub const kBluetoothHCICommandSetupSynchronousConnection: c_uint = 0x0028;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandacceptsynchronousconnectionrequest?language=objc)
pub const kBluetoothHCICommandAcceptSynchronousConnectionRequest: c_uint = 0x0029;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandrejectsynchronousconnectionrequest?language=objc)
pub const kBluetoothHCICommandRejectSynchronousConnectionRequest: c_uint = 0x002A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandiocapabilityrequestreply?language=objc)
pub const kBluetoothHCICommandIOCapabilityRequestReply: c_uint = 0x002B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommanduserconfirmationrequestreply?language=objc)
pub const kBluetoothHCICommandUserConfirmationRequestReply: c_uint = 0x002C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommanduserconfirmationrequestnegativereply?language=objc)
pub const kBluetoothHCICommandUserConfirmationRequestNegativeReply: c_uint = 0x002D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommanduserpasskeyrequestreply?language=objc)
pub const kBluetoothHCICommandUserPasskeyRequestReply: c_uint = 0x002E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommanduserpasskeyrequestnegativereply?language=objc)
pub const kBluetoothHCICommandUserPasskeyRequestNegativeReply: c_uint = 0x002F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandremoteoobdatarequestreply?language=objc)
pub const kBluetoothHCICommandRemoteOOBDataRequestReply: c_uint = 0x0030;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandremoteoobdatarequestnegativereply?language=objc)
pub const kBluetoothHCICommandRemoteOOBDataRequestNegativeReply: c_uint = 0x0033;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandiocapabilityrequestnegativereply?language=objc)
pub const kBluetoothHCICommandIOCapabilityRequestNegativeReply: c_uint = 0x0034;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandenhancedsetupsynchronousconnection?language=objc)
pub const kBluetoothHCICommandEnhancedSetupSynchronousConnection: c_uint = 0x003D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandenhancedacceptsynchronousconnectionrequest?language=objc)
pub const kBluetoothHCICommandEnhancedAcceptSynchronousConnectionRequest: c_uint = 0x003E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandtruncatedpage?language=objc)
pub const kBluetoothHCICommandTruncatedPage: c_uint = 0x003F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandtruncatedpagecancel?language=objc)
pub const kBluetoothHCICommandTruncatedPageCancel: c_uint = 0x0040;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetconnectionlessperipheralbroadcast?language=objc)
pub const kBluetoothHCICommandSetConnectionlessPeripheralBroadcast: c_uint = 0x0041;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetconnectionlessperipheralbroadcastreceive?language=objc)
pub const kBluetoothHCICommandSetConnectionlessPeripheralBroadcastReceive: c_uint = 0x0042;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandstartsynchronizationtrain?language=objc)
pub const kBluetoothHCICommandStartSynchronizationTrain: c_uint = 0x0043;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreceivesynchronizationtrain?language=objc)
pub const kBluetoothHCICommandReceiveSynchronizationTrain: c_uint = 0x0044;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandremoteoobextendeddatarequestreply?language=objc)
pub const kBluetoothHCICommandRemoteOOBExtendedDataRequestReply: c_uint = 0x0045;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetconnectionlessslavebroadcast?language=objc)
pub const kBluetoothHCICommandSetConnectionlessSlaveBroadcast: c_uint =
    kBluetoothHCICommandSetConnectionlessPeripheralBroadcast;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetconnectionlessslavebroadcastreceive?language=objc)
pub const kBluetoothHCICommandSetConnectionlessSlaveBroadcastReceive: c_uint =
    kBluetoothHCICommandSetConnectionlessPeripheralBroadcastReceive;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandgrouplinkpolicy?language=objc)
pub const kBluetoothHCICommandGroupLinkPolicy: c_uint = 0x02;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandholdmode?language=objc)
pub const kBluetoothHCICommandHoldMode: c_uint = 0x0001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsniffmode?language=objc)
pub const kBluetoothHCICommandSniffMode: c_uint = 0x0003;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandexitsniffmode?language=objc)
pub const kBluetoothHCICommandExitSniffMode: c_uint = 0x0004;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandparkmode?language=objc)
pub const kBluetoothHCICommandParkMode: c_uint = 0x0005;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandexitparkmode?language=objc)
pub const kBluetoothHCICommandExitParkMode: c_uint = 0x0006;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandqossetup?language=objc)
pub const kBluetoothHCICommandQoSSetup: c_uint = 0x0007;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandrolediscovery?language=objc)
pub const kBluetoothHCICommandRoleDiscovery: c_uint = 0x0009;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandswitchrole?language=objc)
pub const kBluetoothHCICommandSwitchRole: c_uint = 0x000B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlinkpolicysettings?language=objc)
pub const kBluetoothHCICommandReadLinkPolicySettings: c_uint = 0x000C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritelinkpolicysettings?language=objc)
pub const kBluetoothHCICommandWriteLinkPolicySettings: c_uint = 0x000D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreaddefaultlinkpolicysettings?language=objc)
pub const kBluetoothHCICommandReadDefaultLinkPolicySettings: c_uint = 0x000E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritedefaultlinkpolicysettings?language=objc)
pub const kBluetoothHCICommandWriteDefaultLinkPolicySettings: c_uint = 0x000F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandflowspecification?language=objc)
pub const kBluetoothHCICommandFlowSpecification: c_uint = 0x0010;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsniffsubrating?language=objc)
pub const kBluetoothHCICommandSniffSubrating: c_uint = 0x0011;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandacceptsniffrequest?language=objc)
pub const kBluetoothHCICommandAcceptSniffRequest: c_uint = 0x0031;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandrejectsniffrequest?language=objc)
pub const kBluetoothHCICommandRejectSniffRequest: c_uint = 0x0032;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandgrouphostcontroller?language=objc)
pub const kBluetoothHCICommandGroupHostController: c_uint = 0x03;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandseteventmask?language=objc)
pub const kBluetoothHCICommandSetEventMask: c_uint = 0x0001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreset?language=objc)
pub const kBluetoothHCICommandReset: c_uint = 0x0003;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandseteventfilter?language=objc)
pub const kBluetoothHCICommandSetEventFilter: c_uint = 0x0005;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandflush?language=objc)
pub const kBluetoothHCICommandFlush: c_uint = 0x0008;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadpintype?language=objc)
pub const kBluetoothHCICommandReadPINType: c_uint = 0x0009;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritepintype?language=objc)
pub const kBluetoothHCICommandWritePINType: c_uint = 0x000A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandcreatenewunitkey?language=objc)
pub const kBluetoothHCICommandCreateNewUnitKey: c_uint = 0x000B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadstoredlinkkey?language=objc)
pub const kBluetoothHCICommandReadStoredLinkKey: c_uint = 0x000D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritestoredlinkkey?language=objc)
pub const kBluetoothHCICommandWriteStoredLinkKey: c_uint = 0x0011;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommanddeletestoredlinkkey?language=objc)
pub const kBluetoothHCICommandDeleteStoredLinkKey: c_uint = 0x0012;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandchangelocalname?language=objc)
pub const kBluetoothHCICommandChangeLocalName: c_uint = 0x0013;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlocalname?language=objc)
pub const kBluetoothHCICommandReadLocalName: c_uint = 0x0014;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadconnectionaccepttimeout?language=objc)
pub const kBluetoothHCICommandReadConnectionAcceptTimeout: c_uint = 0x0015;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteconnectionaccepttimeout?language=objc)
pub const kBluetoothHCICommandWriteConnectionAcceptTimeout: c_uint = 0x0016;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadpagetimeout?language=objc)
pub const kBluetoothHCICommandReadPageTimeout: c_uint = 0x0017;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritepagetimeout?language=objc)
pub const kBluetoothHCICommandWritePageTimeout: c_uint = 0x0018;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadscanenable?language=objc)
pub const kBluetoothHCICommandReadScanEnable: c_uint = 0x0019;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritescanenable?language=objc)
pub const kBluetoothHCICommandWriteScanEnable: c_uint = 0x001A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadpagescanactivity?language=objc)
pub const kBluetoothHCICommandReadPageScanActivity: c_uint = 0x001B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritepagescanactivity?language=objc)
pub const kBluetoothHCICommandWritePageScanActivity: c_uint = 0x001C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadinquiryscanactivity?language=objc)
pub const kBluetoothHCICommandReadInquiryScanActivity: c_uint = 0x001D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteinquiryscanactivity?language=objc)
pub const kBluetoothHCICommandWriteInquiryScanActivity: c_uint = 0x001E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadauthenticationenable?language=objc)
pub const kBluetoothHCICommandReadAuthenticationEnable: c_uint = 0x001F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteauthenticationenable?language=objc)
pub const kBluetoothHCICommandWriteAuthenticationEnable: c_uint = 0x0020;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadencryptionmode?language=objc)
pub const kBluetoothHCICommandReadEncryptionMode: c_uint = 0x0021;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteencryptionmode?language=objc)
pub const kBluetoothHCICommandWriteEncryptionMode: c_uint = 0x0022;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadclassofdevice?language=objc)
pub const kBluetoothHCICommandReadClassOfDevice: c_uint = 0x0023;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteclassofdevice?language=objc)
pub const kBluetoothHCICommandWriteClassOfDevice: c_uint = 0x0024;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadvoicesetting?language=objc)
pub const kBluetoothHCICommandReadVoiceSetting: c_uint = 0x0025;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritevoicesetting?language=objc)
pub const kBluetoothHCICommandWriteVoiceSetting: c_uint = 0x0026;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadautomaticflushtimeout?language=objc)
pub const kBluetoothHCICommandReadAutomaticFlushTimeout: c_uint = 0x0027;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteautomaticflushtimeout?language=objc)
pub const kBluetoothHCICommandWriteAutomaticFlushTimeout: c_uint = 0x0028;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadnumberofbroadcastretransmissions?language=objc)
pub const kBluetoothHCICommandReadNumberOfBroadcastRetransmissions: c_uint = 0x0029;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritenumberofbroadcastretransmissions?language=objc)
pub const kBluetoothHCICommandWriteNumberOfBroadcastRetransmissions: c_uint = 0x002A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadholdmodeactivity?language=objc)
pub const kBluetoothHCICommandReadHoldModeActivity: c_uint = 0x002B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteholdmodeactivity?language=objc)
pub const kBluetoothHCICommandWriteHoldModeActivity: c_uint = 0x002C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadtransmitpowerlevel?language=objc)
pub const kBluetoothHCICommandReadTransmitPowerLevel: c_uint = 0x002D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadscoflowcontrolenable?language=objc)
pub const kBluetoothHCICommandReadSCOFlowControlEnable: c_uint = 0x002E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritescoflowcontrolenable?language=objc)
pub const kBluetoothHCICommandWriteSCOFlowControlEnable: c_uint = 0x002F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsethostcontrollertohostflowcontrol?language=objc)
pub const kBluetoothHCICommandSetHostControllerToHostFlowControl: c_uint = 0x0031;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandhostbuffersize?language=objc)
pub const kBluetoothHCICommandHostBufferSize: c_uint = 0x0033;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandhostnumberofcompletedpackets?language=objc)
pub const kBluetoothHCICommandHostNumberOfCompletedPackets: c_uint = 0x0035;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlinksupervisiontimeout?language=objc)
pub const kBluetoothHCICommandReadLinkSupervisionTimeout: c_uint = 0x0036;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritelinksupervisiontimeout?language=objc)
pub const kBluetoothHCICommandWriteLinkSupervisionTimeout: c_uint = 0x0037;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadnumberofsupportediac?language=objc)
pub const kBluetoothHCICommandReadNumberOfSupportedIAC: c_uint = 0x0038;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadcurrentiaclap?language=objc)
pub const kBluetoothHCICommandReadCurrentIACLAP: c_uint = 0x0039;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritecurrentiaclap?language=objc)
pub const kBluetoothHCICommandWriteCurrentIACLAP: c_uint = 0x003A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadpagescanperiodmode?language=objc)
pub const kBluetoothHCICommandReadPageScanPeriodMode: c_uint = 0x003B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritepagescanperiodmode?language=objc)
pub const kBluetoothHCICommandWritePageScanPeriodMode: c_uint = 0x003C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadpagescanmode?language=objc)
pub const kBluetoothHCICommandReadPageScanMode: c_uint = 0x003D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritepagescanmode?language=objc)
pub const kBluetoothHCICommandWritePageScanMode: c_uint = 0x003E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetafhclassification?language=objc)
pub const kBluetoothHCICommandSetAFHClassification: c_uint = 0x003F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadinquiryscantype?language=objc)
pub const kBluetoothHCICommandReadInquiryScanType: c_uint = 0x0042;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteinquiryscantype?language=objc)
pub const kBluetoothHCICommandWriteInquiryScanType: c_uint = 0x0043;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadinquirymode?language=objc)
pub const kBluetoothHCICommandReadInquiryMode: c_uint = 0x0044;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteinquirymode?language=objc)
pub const kBluetoothHCICommandWriteInquiryMode: c_uint = 0x0045;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadpagescantype?language=objc)
pub const kBluetoothHCICommandReadPageScanType: c_uint = 0x0046;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritepagescantype?language=objc)
pub const kBluetoothHCICommandWritePageScanType: c_uint = 0x0047;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadafhchannelassessmentmode?language=objc)
pub const kBluetoothHCICommandReadAFHChannelAssessmentMode: c_uint = 0x0048;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteafhchannelassessmentmode?language=objc)
pub const kBluetoothHCICommandWriteAFHChannelAssessmentMode: c_uint = 0x0049;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadextendedinquiryresponse?language=objc)
pub const kBluetoothHCICommandReadExtendedInquiryResponse: c_uint = 0x0051;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteextendedinquiryresponse?language=objc)
pub const kBluetoothHCICommandWriteExtendedInquiryResponse: c_uint = 0x0052;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandrefreshencryptionkey?language=objc)
pub const kBluetoothHCICommandRefreshEncryptionKey: c_uint = 0x0053;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadsimplepairingmode?language=objc)
pub const kBluetoothHCICommandReadSimplePairingMode: c_uint = 0x0055;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritesimplepairingmode?language=objc)
pub const kBluetoothHCICommandWriteSimplePairingMode: c_uint = 0x0056;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlocaloobdata?language=objc)
pub const kBluetoothHCICommandReadLocalOOBData: c_uint = 0x0057;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadinquiryresponsetransmitpower?language=objc)
pub const kBluetoothHCICommandReadInquiryResponseTransmitPower: c_uint = 0x0058;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteinquiryresponsetransmitpower?language=objc)
pub const kBluetoothHCICommandWriteInquiryResponseTransmitPower: c_uint = 0x0059;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsendkeypressnotification?language=objc)
pub const kBluetoothHCICommandSendKeypressNotification: c_uint = 0x0060;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreaddefaulterroneousdatareporting?language=objc)
pub const kBluetoothHCICommandReadDefaultErroneousDataReporting: c_uint = 0x005A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritedefaulterroneousdatareporting?language=objc)
pub const kBluetoothHCICommandWriteDefaultErroneousDataReporting: c_uint = 0x005B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandenhancedflush?language=objc)
pub const kBluetoothHCICommandEnhancedFlush: c_uint = 0x005F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlogicallinkaccepttimeout?language=objc)
pub const kBluetoothHCICommandReadLogicalLinkAcceptTimeout: c_uint = 0x0061;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritelogicallinkaccepttimeout?language=objc)
pub const kBluetoothHCICommandWriteLogicalLinkAcceptTimeout: c_uint = 0x0062;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandseteventmaskpagetwo?language=objc)
pub const kBluetoothHCICommandSetEventMaskPageTwo: c_uint = 0x0063;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlocationdata?language=objc)
pub const kBluetoothHCICommandReadLocationData: c_uint = 0x0064;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritelocationdata?language=objc)
pub const kBluetoothHCICommandWriteLocationData: c_uint = 0x0065;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadflowcontrolmode?language=objc)
pub const kBluetoothHCICommandReadFlowControlMode: c_uint = 0x0066;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteflowcontrolmode?language=objc)
pub const kBluetoothHCICommandWriteFlowControlMode: c_uint = 0x0067;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadenhancedtransmitpowerlevel?language=objc)
pub const kBluetoothHCICommandReadEnhancedTransmitPowerLevel: c_uint = 0x0068;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadbesteffortflushtimeout?language=objc)
pub const kBluetoothHCICommandReadBestEffortFlushTimeout: c_uint = 0x0069;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritebesteffortflushtimeout?language=objc)
pub const kBluetoothHCICommandWriteBestEffortFlushTimeout: c_uint = 0x006A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandshortrangemode?language=objc)
pub const kBluetoothHCICommandShortRangeMode: c_uint = 0x006B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlehostsupported?language=objc)
pub const kBluetoothHCICommandReadLEHostSupported: c_uint = 0x006C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritelehostsupported?language=objc)
pub const kBluetoothHCICommandWriteLEHostSupported: c_uint = 0x006D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetmwschannelparameters?language=objc)
pub const kBluetoothHCICommandSetMWSChannelParameters: c_uint = 0x006E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetexternalframeconfiguration?language=objc)
pub const kBluetoothHCICommandSetExternalFrameConfiguration: c_uint = 0x006F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetmwssignaling?language=objc)
pub const kBluetoothHCICommandSetMWSSignaling: c_uint = 0x0070;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetmwstransportlayer?language=objc)
pub const kBluetoothHCICommandSetMWSTransportLayer: c_uint = 0x0071;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetmwsscanfrequencytable?language=objc)
pub const kBluetoothHCICommandSetMWSScanFrequencyTable: c_uint = 0x0072;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetmwspatternconfiguration?language=objc)
pub const kBluetoothHCICommandSetMWSPATTERNConfiguration: c_uint = 0x0073;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetreservedltaddr?language=objc)
pub const kBluetoothHCICommandSetReservedLTADDR: c_uint = 0x0074;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommanddeletereservedltaddr?language=objc)
pub const kBluetoothHCICommandDeleteReservedLTADDR: c_uint = 0x0075;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetconnectionlessperipheralbroadcastdata?language=objc)
pub const kBluetoothHCICommandSetConnectionlessPeripheralBroadcastData: c_uint = 0x0076;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadsynchronizationtrainparameters?language=objc)
pub const kBluetoothHCICommandReadSynchronizationTrainParameters: c_uint = 0x0077;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritesynchronizationtrainparameters?language=objc)
pub const kBluetoothHCICommandWriteSynchronizationTrainParameters: c_uint = 0x0078;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadsecureconnectionshostsupport?language=objc)
pub const kBluetoothHCICommandReadSecureConnectionsHostSupport: c_uint = 0x0079;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritesecureconnectionshostsupport?language=objc)
pub const kBluetoothHCICommandWriteSecureConnectionsHostSupport: c_uint = 0x007A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadauthenticatedpayloadtimeout?language=objc)
pub const kBluetoothHCICommandReadAuthenticatedPayloadTimeout: c_uint = 0x007B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteauthenticatedpayloadtimeout?language=objc)
pub const kBluetoothHCICommandWriteAuthenticatedPayloadTimeout: c_uint = 0x007C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlocaloobextendeddata?language=objc)
pub const kBluetoothHCICommandReadLocalOOBExtendedData: c_uint = 0x007D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadextendedpagetimeout?language=objc)
pub const kBluetoothHCICommandReadExtendedPageTimeout: c_uint = 0x007E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteextendedpagetimeout?language=objc)
pub const kBluetoothHCICommandWriteExtendedPageTimeout: c_uint = 0x007F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadextendedinquirylength?language=objc)
pub const kBluetoothHCICommandReadExtendedInquiryLength: c_uint = 0x0080;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteextendedinquirylength?language=objc)
pub const kBluetoothHCICommandWriteExtendedInquiryLength: c_uint = 0x0081;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsetconnectionlessslavebroadcastdata?language=objc)
pub const kBluetoothHCICommandSetConnectionlessSlaveBroadcastData: c_uint =
    kBluetoothHCICommandSetConnectionlessPeripheralBroadcastData;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandgroupinformational?language=objc)
pub const kBluetoothHCICommandGroupInformational: c_uint = 0x04;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlocalversioninformation?language=objc)
pub const kBluetoothHCICommandReadLocalVersionInformation: c_uint = 0x0001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlocalsupportedcommands?language=objc)
pub const kBluetoothHCICommandReadLocalSupportedCommands: c_uint = 0x0002;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlocalsupportedfeatures?language=objc)
pub const kBluetoothHCICommandReadLocalSupportedFeatures: c_uint = 0x0003;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlocalextendedfeatures?language=objc)
pub const kBluetoothHCICommandReadLocalExtendedFeatures: c_uint = 0x0004;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadbuffersize?language=objc)
pub const kBluetoothHCICommandReadBufferSize: c_uint = 0x0005;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadcountrycode?language=objc)
pub const kBluetoothHCICommandReadCountryCode: c_uint = 0x0007;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreaddeviceaddress?language=objc)
pub const kBluetoothHCICommandReadDeviceAddress: c_uint = 0x0009;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreaddatablocksize?language=objc)
pub const kBluetoothHCICommandReadDataBlockSize: c_uint = 0x000A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlocalsupportedcodecs?language=objc)
pub const kBluetoothHCICommandReadLocalSupportedCodecs: c_uint = 0x000B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandgroupstatus?language=objc)
pub const kBluetoothHCICommandGroupStatus: c_uint = 0x05;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadfailedcontactcounter?language=objc)
pub const kBluetoothHCICommandReadFailedContactCounter: c_uint = 0x0001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandresetfailedcontactcounter?language=objc)
pub const kBluetoothHCICommandResetFailedContactCounter: c_uint = 0x0002;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandgetlinkquality?language=objc)
pub const kBluetoothHCICommandGetLinkQuality: c_uint = 0x0003;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadrssi?language=objc)
pub const kBluetoothHCICommandReadRSSI: c_uint = 0x0005;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadafhmappings?language=objc)
pub const kBluetoothHCICommandReadAFHMappings: c_uint = 0x0006;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadclock?language=objc)
pub const kBluetoothHCICommandReadClock: c_uint = 0x0007;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadencryptionkeysize?language=objc)
pub const kBluetoothHCICommandReadEncryptionKeySize: c_uint = 0x0008;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlocalampinfo?language=objc)
pub const kBluetoothHCICommandReadLocalAMPInfo: c_uint = 0x0009;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadlocalampassoc?language=objc)
pub const kBluetoothHCICommandReadLocalAMPASSOC: c_uint = 0x000A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteremoteampassoc?language=objc)
pub const kBluetoothHCICommandWriteRemoteAMPASSOC: c_uint = 0x000B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandgetmwstransportlayerconfiguration?language=objc)
pub const kBluetoothHCICommandGetMWSTransportLayerConfiguration: c_uint = 0x000C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandsettriggeredclockcapture?language=objc)
pub const kBluetoothHCICommandSetTriggeredClockCapture: c_uint = 0x000D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandgrouptesting?language=objc)
pub const kBluetoothHCICommandGroupTesting: c_uint = 0x06;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandreadloopbackmode?language=objc)
pub const kBluetoothHCICommandReadLoopbackMode: c_uint = 0x0001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwriteloopbackmode?language=objc)
pub const kBluetoothHCICommandWriteLoopbackMode: c_uint = 0x0002;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandenabledeviceundertestmode?language=objc)
pub const kBluetoothHCICommandEnableDeviceUnderTestMode: c_uint = 0x0003;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandwritesimplepairingdebugmode?language=objc)
pub const kBluetoothHCICommandWriteSimplePairingDebugMode: c_uint = 0x0004;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandenableampreceiverreports?language=objc)
pub const kBluetoothHCICommandEnableAMPReceiverReports: c_uint = 0x0007;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandamptestend?language=objc)
pub const kBluetoothHCICommandAMPTestEnd: c_uint = 0x0008;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandamptest?language=objc)
pub const kBluetoothHCICommandAMPTest: c_uint = 0x0009;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandgrouplowenergy?language=objc)
pub const kBluetoothHCICommandGroupLowEnergy: c_uint = 0x08;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleseteventmask?language=objc)
pub const kBluetoothHCICommandLESetEventMask: c_uint = 0x0001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadbuffersize?language=objc)
pub const kBluetoothHCICommandLEReadBufferSize: c_uint = 0x0002;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadlocalsupportedfeatures?language=objc)
pub const kBluetoothHCICommandLEReadLocalSupportedFeatures: c_uint = 0x0003;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetrandomaddress?language=objc)
pub const kBluetoothHCICommandLESetRandomAddress: c_uint = 0x0005;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetadvertisingparameters?language=objc)
pub const kBluetoothHCICommandLESetAdvertisingParameters: c_uint = 0x0006;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadadvertisingchanneltxpower?language=objc)
pub const kBluetoothHCICommandLEReadAdvertisingChannelTxPower: c_uint = 0x0007;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetadvertisingdata?language=objc)
pub const kBluetoothHCICommandLESetAdvertisingData: c_uint = 0x0008;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetscanresponsedata?language=objc)
pub const kBluetoothHCICommandLESetScanResponseData: c_uint = 0x0009;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetadvertiseenable?language=objc)
pub const kBluetoothHCICommandLESetAdvertiseEnable: c_uint = 0x000A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetscanparameters?language=objc)
pub const kBluetoothHCICommandLESetScanParameters: c_uint = 0x000B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetscanenable?language=objc)
pub const kBluetoothHCICommandLESetScanEnable: c_uint = 0x000C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlecreateconnection?language=objc)
pub const kBluetoothHCICommandLECreateConnection: c_uint = 0x000D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlecreateconnectioncancel?language=objc)
pub const kBluetoothHCICommandLECreateConnectionCancel: c_uint = 0x000E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadwhitelistsize?language=objc)
pub const kBluetoothHCICommandLEReadWhiteListSize: c_uint = 0x000F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleclearwhitelist?language=objc)
pub const kBluetoothHCICommandLEClearWhiteList: c_uint = 0x0010;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleadddevicetowhitelist?language=objc)
pub const kBluetoothHCICommandLEAddDeviceToWhiteList: c_uint = 0x0011;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleremovedevicefromwhitelist?language=objc)
pub const kBluetoothHCICommandLERemoveDeviceFromWhiteList: c_uint = 0x0012;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleconnectionupdate?language=objc)
pub const kBluetoothHCICommandLEConnectionUpdate: c_uint = 0x0013;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesethostchannelclassification?language=objc)
pub const kBluetoothHCICommandLESetHostChannelClassification: c_uint = 0x0014;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadchannelmap?language=objc)
pub const kBluetoothHCICommandLEReadChannelMap: c_uint = 0x0015;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadremoteusedfeatures?language=objc)
pub const kBluetoothHCICommandLEReadRemoteUsedFeatures: c_uint = 0x0016;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleencrypt?language=objc)
pub const kBluetoothHCICommandLEEncrypt: c_uint = 0x0017;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlerand?language=objc)
pub const kBluetoothHCICommandLERand: c_uint = 0x0018;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlestartencryption?language=objc)
pub const kBluetoothHCICommandLEStartEncryption: c_uint = 0x0019;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlelongtermkeyrequestreply?language=objc)
pub const kBluetoothHCICommandLELongTermKeyRequestReply: c_uint = 0x001A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlelongtermkeyrequestnegativereply?language=objc)
pub const kBluetoothHCICommandLELongTermKeyRequestNegativeReply: c_uint = 0x001B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadsupportedstates?language=objc)
pub const kBluetoothHCICommandLEReadSupportedStates: c_uint = 0x001C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereceivertest?language=objc)
pub const kBluetoothHCICommandLEReceiverTest: c_uint = 0x001D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandletransmittertest?language=objc)
pub const kBluetoothHCICommandLETransmitterTest: c_uint = 0x001E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandletestend?language=objc)
pub const kBluetoothHCICommandLETestEnd: c_uint = 0x001F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleremoteconnectionparameterrequestreply?language=objc)
pub const kBluetoothHCICommandLERemoteConnectionParameterRequestReply: c_uint = 0x0020;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleremoteconnectionparameterrequestnegativereply?language=objc)
pub const kBluetoothHCICommandLERemoteConnectionParameterRequestNegativeReply: c_uint = 0x0021;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetdatalength?language=objc)
pub const kBluetoothHCICommandLESetDataLength: c_uint = 0x0022;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadsuggesteddefaultdatalength?language=objc)
pub const kBluetoothHCICommandLEReadSuggestedDefaultDataLength: c_uint = 0x0023;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlewritesuggesteddefaultdatalength?language=objc)
pub const kBluetoothHCICommandLEWriteSuggestedDefaultDataLength: c_uint = 0x0024;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadlocalp256publickey?language=objc)
pub const kBluetoothHCICommandLEReadLocalP256PublicKey: c_uint = 0x0025;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlegeneratedhkey?language=objc)
pub const kBluetoothHCICommandLEGenerateDHKey: c_uint = 0x0026;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleadddevicetoresolvinglist?language=objc)
pub const kBluetoothHCICommandLEAddDeviceToResolvingList: c_uint = 0x0027;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleremovedevicefromresolvinglist?language=objc)
pub const kBluetoothHCICommandLERemoveDeviceFromResolvingList: c_uint = 0x0028;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleclearresolvinglist?language=objc)
pub const kBluetoothHCICommandLEClearResolvingList: c_uint = 0x0029;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadresolvinglistsize?language=objc)
pub const kBluetoothHCICommandLEReadResolvingListSize: c_uint = 0x002A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadpeerresolvableaddress?language=objc)
pub const kBluetoothHCICommandLEReadPeerResolvableAddress: c_uint = 0x002B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadlocalresolvableaddress?language=objc)
pub const kBluetoothHCICommandLEReadLocalResolvableAddress: c_uint = 0x002C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetaddressresolutionenable?language=objc)
pub const kBluetoothHCICommandLESetAddressResolutionEnable: c_uint = 0x002D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetresolvableprivateaddresstimeout?language=objc)
pub const kBluetoothHCICommandLESetResolvablePrivateAddressTimeout: c_uint = 0x002E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadmaximumdatalength?language=objc)
pub const kBluetoothHCICommandLEReadMaximumDataLength: c_uint = 0x002F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadphy?language=objc)
pub const kBluetoothHCICommandLEReadPhy: c_uint = 0x0030;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetdefaultphy?language=objc)
pub const kBluetoothHCICommandLESetDefaultPhy: c_uint = 0x0031;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetphy?language=objc)
pub const kBluetoothHCICommandLESetPhy: c_uint = 0x0032;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleenhancedreceivertest?language=objc)
pub const kBluetoothHCICommandLEEnhancedReceiverTest: c_uint = 0x0033;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleenhancedtransmittertest?language=objc)
pub const kBluetoothHCICommandLEEnhancedTransmitterTest: c_uint = 0x0034;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetadvertisingsetrandomaddress?language=objc)
pub const kBluetoothHCICommandLESetAdvertisingSetRandomAddress: c_uint = 0x0035;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetextendedadvertisingparameters?language=objc)
pub const kBluetoothHCICommandLESetExtendedAdvertisingParameters: c_uint = 0x0036;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetextendedadvertisingdata?language=objc)
pub const kBluetoothHCICommandLESetExtendedAdvertisingData: c_uint = 0x0037;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetextendedscanresponsedata?language=objc)
pub const kBluetoothHCICommandLESetExtendedScanResponseData: c_uint = 0x0038;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetextendedadvertisingenablecommand?language=objc)
pub const kBluetoothHCICommandLESetExtendedAdvertisingEnableCommand: c_uint = 0x0039;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadmaximumadvertisingdatalength?language=objc)
pub const kBluetoothHCICommandLEReadMaximumAdvertisingDataLength: c_uint = 0x003A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadnumberofsupportedadvertisingsets?language=objc)
pub const kBluetoothHCICommandLEReadNumberofSupportedAdvertisingSets: c_uint = 0x003B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleremoveadvertisingset?language=objc)
pub const kBluetoothHCICommandLERemoveAdvertisingSet: c_uint = 0x003C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleclearadvertisingsets?language=objc)
pub const kBluetoothHCICommandLEClearAdvertisingSets: c_uint = 0x003D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetperiodicadvertisingparameters?language=objc)
pub const kBluetoothHCICommandLESetPeriodicAdvertisingParameters: c_uint = 0x003E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetperiodicadvertisingdata?language=objc)
pub const kBluetoothHCICommandLESetPeriodicAdvertisingData: c_uint = 0x003F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetperiodicadvertisingenable?language=objc)
pub const kBluetoothHCICommandLESetPeriodicAdvertisingEnable: c_uint = 0x0040;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetextendedscanparameters?language=objc)
pub const kBluetoothHCICommandLESetExtendedScanParameters: c_uint = 0x0041;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetextendedscanenable?language=objc)
pub const kBluetoothHCICommandLESetExtendedScanEnable: c_uint = 0x0042;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleextendedcreateconnection?language=objc)
pub const kBluetoothHCICommandLEExtendedCreateConnection: c_uint = 0x0043;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleperiodicadvertisingcreatesync?language=objc)
pub const kBluetoothHCICommandLEPeriodicAdvertisingCreateSync: c_uint = 0x0044;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleperiodicadvertisingcreatesynccancel?language=objc)
pub const kBluetoothHCICommandLEPeriodicAdvertisingCreateSyncCancel: c_uint = 0x0045;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleperiodicadvertisingterminatesync?language=objc)
pub const kBluetoothHCICommandLEPeriodicAdvertisingTerminateSync: c_uint = 0x0046;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleadddevicetoperiodicadvertiserlist?language=objc)
pub const kBluetoothHCICommandLEAddDeviceToPeriodicAdvertiserList: c_uint = 0x0047;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleremovedevicefromperiodicadvertiserlist?language=objc)
pub const kBluetoothHCICommandLERemoveDeviceFromPeriodicAdvertiserList: c_uint = 0x0048;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandleclearperiodicadvertiserlist?language=objc)
pub const kBluetoothHCICommandLEClearPeriodicAdvertiserList: c_uint = 0x0049;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadperiodicadvertiserlistsize?language=objc)
pub const kBluetoothHCICommandLEReadPeriodicAdvertiserListSize: c_uint = 0x004A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadtransmitpower?language=objc)
pub const kBluetoothHCICommandLEReadTransmitPower: c_uint = 0x004B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlereadrfpathcompensation?language=objc)
pub const kBluetoothHCICommandLEReadRFPathCompensation: c_uint = 0x004C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlewriterfpathcompensation?language=objc)
pub const kBluetoothHCICommandLEWriteRFPathCompensation: c_uint = 0x004D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandlesetprivacymode?language=objc)
pub const kBluetoothHCICommandLESetPrivacyMode: c_uint = 0x004E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandgrouplogotesting?language=objc)
pub const kBluetoothHCICommandGroupLogoTesting: c_uint = 0x3E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandgroupvendorspecific?language=objc)
pub const kBluetoothHCICommandGroupVendorSpecific: c_uint = 0x3F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandgroupmax?language=objc)
pub const kBluetoothHCICommandGroupMax: c_uint = 0x40;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandmax?language=objc)
pub const kBluetoothHCICommandMax: c_uint = 0x03FF;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciqosflags?language=objc)
pub type BluetoothHCIQoSFlags = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciparambytecount?language=objc)
pub type BluetoothHCIParamByteCount = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciacldatabytecount?language=objc)
pub type BluetoothHCIACLDataByteCount = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciscodatabytecount?language=objc)
pub type BluetoothHCISCODataByteCount = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinquirylength?language=objc)
pub type BluetoothHCIInquiryLength = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciresponsecount?language=objc)
pub type BluetoothHCIResponseCount = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcicountrycode?language=objc)
pub type BluetoothHCICountryCode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcimodeinterval?language=objc)
pub type BluetoothHCIModeInterval = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcisniffattemptcount?language=objc)
pub type BluetoothHCISniffAttemptCount = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcisnifftimeout?language=objc)
pub type BluetoothHCISniffTimeout = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciparkmodebeaconinterval?language=objc)
pub type BluetoothHCIParkModeBeaconInterval = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothmaxslots?language=objc)
pub type BluetoothMaxSlots = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothmanufacturername?language=objc)
pub type BluetoothManufacturerName = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlmpversion?language=objc)
pub type BluetoothLMPVersion = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlmpsubversion?language=objc)
pub type BluetoothLMPSubversion = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciconnectionmode?language=objc)
pub type BluetoothHCIConnectionMode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciconnectionmodes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIConnectionModes(pub c_uint);
impl BluetoothHCIConnectionModes {
    #[doc(alias = "kConnectionActiveMode")]
    pub const ConnectionActiveMode: Self = Self(0);
    #[doc(alias = "kConnectionHoldMode")]
    pub const ConnectionHoldMode: Self = Self(1);
    #[doc(alias = "kConnectionSniffMode")]
    pub const ConnectionSniffMode: Self = Self(2);
    #[doc(alias = "kConnectionParkMode")]
    pub const ConnectionParkMode: Self = Self(3);
    #[doc(alias = "kConnectionModeReservedForFutureUse")]
    pub const ConnectionModeReservedForFutureUse: Self = Self(4);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIConnectionModes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIConnectionModes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcisupportedcommands?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCISupportedCommands {
    pub data: [u8; 64],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCISupportedCommands {
    const ENCODING: Encoding =
        Encoding::Struct("BluetoothHCISupportedCommands", &[<[u8; 64]>::ENCODING]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCISupportedCommands {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcisupportedfeatures?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCISupportedFeatures {
    pub data: [u8; 8],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCISupportedFeatures {
    const ENCODING: Encoding =
        Encoding::Struct("BluetoothHCISupportedFeatures", &[<[u8; 8]>::ENCODING]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCISupportedFeatures {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcilesupportedfeatures?language=objc)
pub type BluetoothHCILESupportedFeatures = BluetoothHCISupportedFeatures;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcileusedfeatures?language=objc)
pub type BluetoothHCILEUsedFeatures = BluetoothHCISupportedFeatures;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcipagenumber?language=objc)
pub type BluetoothHCIPageNumber = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciextendedfeaturesinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIExtendedFeaturesInfo {
    pub page: BluetoothHCIPageNumber,
    pub maxPage: BluetoothHCIPageNumber,
    pub data: [u8; 8],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIExtendedFeaturesInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIExtendedFeaturesInfo",
        &[
            <BluetoothHCIPageNumber>::ENCODING,
            <BluetoothHCIPageNumber>::ENCODING,
            <[u8; 8]>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIExtendedFeaturesInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlefeaturebits?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLEFeatureBits(pub c_uint);
impl BluetoothLEFeatureBits {
    #[doc(alias = "kBluetoothLEFeatureLEEncryption")]
    pub const LEEncryption: Self = Self(1 << 0);
    #[doc(alias = "kBluetoothLEFeatureConnectionParamsRequestProcedure")]
    pub const ConnectionParamsRequestProcedure: Self = Self(1 << 1);
    #[doc(alias = "kBluetoothLEFeatureExtendedRejectIndication")]
    pub const ExtendedRejectIndication: Self = Self(1 << 2);
    #[doc(alias = "kBluetoothLEFeaturePeripheralInitiatedFeaturesExchange")]
    pub const PeripheralInitiatedFeaturesExchange: Self = Self(1 << 3);
    #[doc(alias = "kBluetoothLEFeatureLEPing")]
    pub const LEPing: Self = Self(1 << 4);
    #[doc(alias = "kBluetoothLEFeatureLEDataPacketLengthExtension")]
    pub const LEDataPacketLengthExtension: Self = Self(1 << 5);
    #[doc(alias = "kBluetoothLEFeatureLLPrivacy")]
    pub const LLPrivacy: Self = Self(1 << 6);
    #[doc(alias = "kBluetoothLEFeatureExtendedScannerFilterPolicies")]
    pub const ExtendedScannerFilterPolicies: Self = Self(1 << 7);
    #[doc(alias = "kBluetoothLEFeatureSlaveInitiatedFeaturesExchange")]
    pub const SlaveInitiatedFeaturesExchange: Self =
        Self(BluetoothLEFeatureBits::PeripheralInitiatedFeaturesExchange.0);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLEFeatureBits {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLEFeatureBits {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothfeaturebits?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothFeatureBits(pub c_uint);
impl BluetoothFeatureBits {
    pub const kBluetoothFeatureThreeSlotPackets: Self = Self(1 << 0);
    pub const kBluetoothFeatureFiveSlotPackets: Self = Self(1 << 1);
    pub const kBluetoothFeatureEncryption: Self = Self(1 << 2);
    pub const kBluetoothFeatureSlotOffset: Self = Self(1 << 3);
    pub const kBluetoothFeatureTimingAccuracy: Self = Self(1 << 4);
    pub const kBluetoothFeatureSwitchRoles: Self = Self(1 << 5);
    pub const kBluetoothFeatureHoldMode: Self = Self(1 << 6);
    pub const kBluetoothFeatureSniffMode: Self = Self(1 << 7);
    pub const kBluetoothFeatureParkMode: Self = Self(1 << 0);
    pub const kBluetoothFeatureRSSI: Self = Self(1 << 1);
    pub const kBluetoothFeaturePowerControlRequests: Self = Self(1 << 1);
    pub const kBluetoothFeatureChannelQuality: Self = Self(1 << 2);
    pub const kBluetoothFeatureSCOLink: Self = Self(1 << 3);
    pub const kBluetoothFeatureHV2Packets: Self = Self(1 << 4);
    pub const kBluetoothFeatureHV3Packets: Self = Self(1 << 5);
    pub const kBluetoothFeatureULawLog: Self = Self(1 << 6);
    pub const kBluetoothFeatureALawLog: Self = Self(1 << 7);
    pub const kBluetoothFeatureCVSD: Self = Self(1 << 0);
    pub const kBluetoothFeaturePagingScheme: Self = Self(1 << 1);
    pub const kBluetoothFeaturePowerControl: Self = Self(1 << 2);
    pub const kBluetoothFeatureTransparentSCOData: Self = Self(1 << 3);
    pub const kBluetoothFeatureFlowControlLagBit0: Self = Self(1 << 4);
    pub const kBluetoothFeatureFlowControlLagBit1: Self = Self(1 << 5);
    pub const kBluetoothFeatureFlowControlLagBit2: Self = Self(1 << 6);
    pub const kBluetoothFeatureBroadcastEncryption: Self = Self(1 << 7);
    pub const kBluetoothFeatureScatterMode: Self = Self(1 << 0);
    pub const kBluetoothFeatureEnhancedDataRateACL2MbpsMode: Self = Self(1 << 1);
    pub const kBluetoothFeatureEnhancedDataRateACL3MbpsMode: Self = Self(1 << 2);
    pub const kBluetoothFeatureEnhancedInquiryScan: Self = Self(1 << 3);
    pub const kBluetoothFeatureInterlacedInquiryScan: Self = Self(1 << 4);
    pub const kBluetoothFeatureInterlacedPageScan: Self = Self(1 << 5);
    pub const kBluetoothFeatureRSSIWithInquiryResult: Self = Self(1 << 6);
    pub const kBluetoothFeatureExtendedSCOLink: Self = Self(1 << 7);
    pub const kBluetoothFeatureEV4Packets: Self = Self(1 << 0);
    pub const kBluetoothFeatureEV5Packets: Self = Self(1 << 1);
    pub const kBluetoothFeatureAbsenceMasks: Self = Self(1 << 2);
    pub const kBluetoothFeatureAFHCapablePeripheral: Self = Self(1 << 3);
    pub const kBluetoothFeatureAFHClassificationPeripheral: Self = Self(1 << 4);
    pub const kBluetoothFeatureAliasAuhentication: Self = Self(1 << 5);
    pub const kBluetoothFeatureLESupportedController: Self = Self(1 << 6);
    pub const kBluetoothFeature3SlotEnhancedDataRateACLPackets: Self = Self(1 << 7);
    pub const kBluetoothFeatureAFHCapableSlave: Self =
        Self(BluetoothFeatureBits::kBluetoothFeatureAFHCapablePeripheral.0);
    pub const kBluetoothFeatureAFHClassificationSlave: Self =
        Self(BluetoothFeatureBits::kBluetoothFeatureAFHClassificationPeripheral.0);
    pub const kBluetoothFeature5SlotEnhancedDataRateACLPackets: Self = Self(1 << 0);
    pub const kBluetoothFeatureSniffSubrating: Self = Self(1 << 1);
    pub const kBluetoothFeaturePauseEncryption: Self = Self(1 << 2);
    pub const kBluetoothFeatureAFHCapableMaster: Self = Self(1 << 3);
    pub const kBluetoothFeatureAFHClassificationMaster: Self = Self(1 << 4);
    pub const kBluetoothFeatureEnhancedDataRateeSCO2MbpsMode: Self = Self(1 << 5);
    pub const kBluetoothFeatureEnhancedDataRateeSCO3MbpsMode: Self = Self(1 << 6);
    pub const kBluetoothFeature3SlotEnhancedDataRateeSCOPackets: Self = Self(1 << 7);
    pub const kBluetoothFeatureExtendedInquiryResponse: Self = Self(1 << 0);
    pub const kBluetoothFeatureSecureSimplePairing: Self = Self(1 << 3);
    pub const kBluetoothFeatureEncapsulatedPDU: Self = Self(1 << 4);
    pub const kBluetoothFeatureErroneousDataReporting: Self = Self(1 << 5);
    pub const kBluetoothFeatureNonFlushablePacketBoundaryFlag: Self = Self(1 << 6);
    pub const kBluetoothFeatureLinkSupervisionTimeoutChangedEvent: Self = Self(1 << 0);
    pub const kBluetoothFeatureInquiryTransmissionPowerLevel: Self = Self(1 << 1);
    pub const kBluetoothFeatureExtendedFeatures: Self = Self(1 << 7);
    pub const kBluetoothExtendedFeatureSimpleSecurePairingHostMode: Self = Self(1 << 0);
    pub const kBluetoothExtendedFeatureLESupportedHostMode: Self = Self(1 << 1);
    pub const kBluetoothExtendedFeatureLEAndBREDRToSameDeviceHostMode: Self = Self(1 << 2);
    pub const KBluetoothExtendedFeatureSecureConnectionsHostMode: Self = Self(1 << 3);
    pub const kBluetoothExtendedFeatureSecureConnectionsControllerSupport: Self = Self(1 << 0);
    pub const kBluetoothExtendedFeaturePing: Self = Self(1 << 1);
    pub const kBluetoothExtendedFeatureReserved: Self = Self(1 << 2);
    pub const kBluetoothExtendedFeatureTrainNudging: Self = Self(1 << 3);
    pub const kBluetoothExtendedFeatureSlotAvailabilityMask: Self = Self(1 << 4);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothFeatureBits {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothFeatureBits {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetootheventfiltercondition?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothEventFilterCondition {
    pub data: [u8; 7],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothEventFilterCondition {
    const ENCODING: Encoding =
        Encoding::Struct("BluetoothEventFilterCondition", &[<[u8; 7]>::ENCODING]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothEventFilterCondition {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcifailedcontactcount?language=objc)
pub type BluetoothHCIFailedContactCount = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcifailedcontactinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIFailedContactInfo {
    pub count: BluetoothHCIFailedContactCount,
    pub handle: BluetoothConnectionHandle,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIFailedContactInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIFailedContactInfo",
        &[
            <BluetoothHCIFailedContactCount>::ENCODING,
            <BluetoothConnectionHandle>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIFailedContactInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcirssivalue?language=objc)
pub type BluetoothHCIRSSIValue = i8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcirssiinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIRSSIInfo {
    pub handle: BluetoothConnectionHandle,
    pub RSSIValue: BluetoothHCIRSSIValue,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIRSSIInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIRSSIInfo",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothHCIRSSIValue>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIRSSIInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcilinkquality?language=objc)
pub type BluetoothHCILinkQuality = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcilinkqualityinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCILinkQualityInfo {
    pub handle: BluetoothConnectionHandle,
    pub qualityValue: BluetoothHCILinkQuality,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCILinkQualityInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCILinkQualityInfo",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothHCILinkQuality>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCILinkQualityInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciencryptionkeysize?language=objc)
pub type BluetoothHCIEncryptionKeySize = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciencryptionkeysizeinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEncryptionKeySizeInfo {
    pub handle: BluetoothConnectionHandle,
    pub keySize: BluetoothHCIEncryptionKeySize,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEncryptionKeySizeInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEncryptionKeySizeInfo",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothHCIEncryptionKeySize>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEncryptionKeySizeInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcirole?language=objc)
pub type BluetoothHCIRole = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciroleinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIRoleInfo {
    pub role: u8,
    pub handle: BluetoothConnectionHandle,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIRoleInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIRoleInfo",
        &[<u8>::ENCODING, <BluetoothConnectionHandle>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIRoleInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciroles?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIRoles(pub c_uint);
impl BluetoothHCIRoles {
    #[doc(alias = "kBluetoothHCICentralRole")]
    pub const CentralRole: Self = Self(0x00);
    #[doc(alias = "kBluetoothHCIPeripheralRole")]
    pub const PeripheralRole: Self = Self(0x01);
    #[doc(alias = "kBluetoothHCIMasterRole")]
    pub const MasterRole: Self = Self(BluetoothHCIRoles::CentralRole.0);
    #[doc(alias = "kBluetoothHCISlaveRole")]
    pub const SlaveRole: Self = Self(BluetoothHCIRoles::PeripheralRole.0);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIRoles {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIRoles {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcilinkpolicysettings?language=objc)
pub type BluetoothHCILinkPolicySettings = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcilinkpolicysettingsvalues?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCILinkPolicySettingsValues(pub c_uint);
impl BluetoothHCILinkPolicySettingsValues {
    #[doc(alias = "kDisableAllLMModes")]
    pub const DisableAllLMModes: Self = Self(0x0000);
    #[doc(alias = "kEnableCentralPeripheralSwitch")]
    pub const EnableCentralPeripheralSwitch: Self = Self(0x0001);
    #[doc(alias = "kEnableHoldMode")]
    pub const EnableHoldMode: Self = Self(0x0002);
    #[doc(alias = "kEnableSniffMode")]
    pub const EnableSniffMode: Self = Self(0x0004);
    #[doc(alias = "kEnableParkMode")]
    pub const EnableParkMode: Self = Self(0x0008);
    #[doc(alias = "kReservedForFutureUse")]
    pub const ReservedForFutureUse: Self = Self(0x0010);
    #[doc(alias = "kEnableMasterSlaveSwitch")]
    pub const EnableMasterSlaveSwitch: Self =
        Self(BluetoothHCILinkPolicySettingsValues::EnableCentralPeripheralSwitch.0);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCILinkPolicySettingsValues {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCILinkPolicySettingsValues {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcilinkpolicysettingsinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCILinkPolicySettingsInfo {
    pub settings: BluetoothHCILinkPolicySettings,
    pub handle: BluetoothConnectionHandle,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCILinkPolicySettingsInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCILinkPolicySettingsInfo",
        &[
            <BluetoothHCILinkPolicySettings>::ENCODING,
            <BluetoothConnectionHandle>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCILinkPolicySettingsInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciqualityofservicesetupparams?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIQualityOfServiceSetupParams {
    pub flags: u8,
    pub serviceType: u8,
    pub tokenRate: u32,
    pub peakBandwidth: u32,
    pub latency: u32,
    pub delayVariation: u32,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIQualityOfServiceSetupParams {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIQualityOfServiceSetupParams",
        &[
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIQualityOfServiceSetupParams {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcisetupsynchronousconnectionparams?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCISetupSynchronousConnectionParams {
    pub transmitBandwidth: u32,
    pub receiveBandwidth: u32,
    pub maxLatency: u16,
    pub voiceSetting: u16,
    pub retransmissionEffort: u8,
    pub packetType: u16,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCISetupSynchronousConnectionParams {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCISetupSynchronousConnectionParams",
        &[
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u8>::ENCODING,
            <u16>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCISetupSynchronousConnectionParams {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciacceptsynchronousconnectionrequestparams?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIAcceptSynchronousConnectionRequestParams {
    pub transmitBandwidth: u32,
    pub receiveBandwidth: u32,
    pub maxLatency: u16,
    pub contentFormat: u16,
    pub retransmissionEffort: u8,
    pub packetType: u16,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIAcceptSynchronousConnectionRequestParams {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIAcceptSynchronousConnectionRequestParams",
        &[
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u8>::ENCODING,
            <u16>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIAcceptSynchronousConnectionRequestParams {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcienhancedsetupsynchronousconnectionparams?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEnhancedSetupSynchronousConnectionParams {
    pub transmitBandwidth: u32,
    pub receiveBandwidth: u32,
    pub transmitCodingFormat: u64,
    pub receiveCodingFormat: u64,
    pub transmitCodecFrameSize: u16,
    pub receiveCodecFrameSize: u16,
    pub inputBandwidth: u32,
    pub outputBandwidth: u32,
    pub inputCodingFormat: u64,
    pub outputCodingFormat: u64,
    pub inputCodedDataSize: u16,
    pub outputCodedDataSize: u16,
    pub inputPCMDataFormat: u8,
    pub outputPCMDataFormat: u8,
    pub inputPCMSamplePayloadMSBPosition: u8,
    pub outputPCMSamplePayloadMSBPosition: u8,
    pub inputDataPath: u8,
    pub outputDataPath: u8,
    pub inputTransportUnitSize: u8,
    pub outputTransportUnitSize: u8,
    pub maxLatency: u16,
    pub packetType: u16,
    pub retransmissionEffort: u8,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEnhancedSetupSynchronousConnectionParams {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEnhancedSetupSynchronousConnectionParams",
        &[
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u8>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEnhancedSetupSynchronousConnectionParams {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcienhancedacceptsynchronousconnectionrequestparams?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEnhancedAcceptSynchronousConnectionRequestParams {
    pub transmitBandwidth: u32,
    pub receiveBandwidth: u32,
    pub transmitCodingFormat: u64,
    pub receiveCodingFormat: u64,
    pub transmitCodecFrameSize: u16,
    pub receiveCodecFrameSize: u16,
    pub inputBandwidth: u32,
    pub outputBandwidth: u32,
    pub inputCodingFormat: u64,
    pub outputCodingFormat: u64,
    pub inputCodedDataSize: u16,
    pub outputCodedDataSize: u16,
    pub inputPCMDataFormat: u8,
    pub outputPCMDataFormat: u8,
    pub inputPCMSamplePayloadMSBPosition: u8,
    pub outputPCMSamplePayloadMSBPosition: u8,
    pub inputDataPath: u8,
    pub outputDataPath: u8,
    pub inputTransportUnitSize: u8,
    pub outputTransportUnitSize: u8,
    pub maxLatency: u16,
    pub packetType: u16,
    pub retransmissionEffort: u8,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEnhancedAcceptSynchronousConnectionRequestParams {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEnhancedAcceptSynchronousConnectionRequestParams",
        &[
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u8>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEnhancedAcceptSynchronousConnectionRequestParams {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciloopbackmode?language=objc)
pub type BluetoothHCILoopbackMode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhciloopbackmodeoff?language=objc)
pub const kBluetoothHCILoopbackModeOff: c_uint = 0x00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhciloopbackmodelocal?language=objc)
pub const kBluetoothHCILoopbackModeLocal: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhciloopbackmoderemote?language=objc)
pub const kBluetoothHCILoopbackModeRemote: c_uint = 0x02;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothreadclockinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothReadClockInfo {
    pub handle: BluetoothConnectionHandle,
    pub clock: u32,
    pub accuracy: u16,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothReadClockInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothReadClockInfo",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <u32>::ENCODING,
            <u16>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothReadClockInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventflowspecificationdata?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventFlowSpecificationData {
    pub connectionHandle: BluetoothConnectionHandle,
    pub flags: u8,
    pub flowDirection: u8,
    pub serviceType: u8,
    pub tokenRate: u32,
    pub tokenBucketSize: u32,
    pub peakBandwidth: u32,
    pub accessLatency: u32,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventFlowSpecificationData {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventFlowSpecificationData",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventFlowSpecificationData {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcioperationid?language=objc)
pub type BluetoothHCIOperationID = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventid?language=objc)
pub type BluetoothHCIEventID = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcidataid?language=objc)
pub type BluetoothHCIDataID = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcisignalid?language=objc)
pub type BluetoothHCISignalID = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcitransportid?language=objc)
pub type BluetoothHCITransportID = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcitransportcommandid?language=objc)
pub type BluetoothHCITransportCommandID = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcirequestid?language=objc)
pub type BluetoothHCIRequestID = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciversioninfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIVersionInfo {
    pub manufacturerName: BluetoothManufacturerName,
    pub lmpVersion: BluetoothLMPVersion,
    pub lmpSubVersion: BluetoothLMPSubversion,
    pub hciVersion: u8,
    pub hciRevision: u16,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIVersionInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIVersionInfo",
        &[
            <BluetoothManufacturerName>::ENCODING,
            <BluetoothLMPVersion>::ENCODING,
            <BluetoothLMPSubversion>::ENCODING,
            <u8>::ENCODING,
            <u16>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIVersionInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcibuffersize?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIBufferSize {
    pub ACLDataPacketLength: u16,
    pub SCODataPacketLength: u8,
    pub totalNumACLDataPackets: u16,
    pub totalNumSCODataPackets: u16,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIBufferSize {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIBufferSize",
        &[
            <u16>::ENCODING,
            <u8>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIBufferSize {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcilebuffersize?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCILEBufferSize {
    pub ACLDataPacketLength: u16,
    pub totalNumACLDataPackets: u8,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCILEBufferSize {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCILEBufferSize",
        &[<u16>::ENCODING, <u8>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCILEBufferSize {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciconnectionaccepttimeout?language=objc)
pub type BluetoothHCIConnectionAcceptTimeout = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcipagetimeout?language=objc)
pub type BluetoothHCIPageTimeout = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcitimeoutvalues?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCITimeoutValues(pub c_uint);
impl BluetoothHCITimeoutValues {
    #[doc(alias = "kDefaultPageTimeout")]
    pub const DefaultPageTimeout: Self = Self(0x2710);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCITimeoutValues {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCITimeoutValues {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcinumlinkkeysdeleted?language=objc)
pub type BluetoothHCINumLinkKeysDeleted = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcinumlinkkeystowrite?language=objc)
pub type BluetoothHCINumLinkKeysToWrite = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcideletestoredlinkkeyflag?language=objc)
pub type BluetoothHCIDeleteStoredLinkKeyFlag = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcideletestoredlinkkeyflags?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIDeleteStoredLinkKeyFlags(pub c_uint);
impl BluetoothHCIDeleteStoredLinkKeyFlags {
    #[doc(alias = "kDeleteKeyForSpecifiedDeviceOnly")]
    pub const DeleteKeyForSpecifiedDeviceOnly: Self = Self(0x00);
    #[doc(alias = "kDeleteAllStoredLinkKeys")]
    pub const DeleteAllStoredLinkKeys: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIDeleteStoredLinkKeyFlags {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIDeleteStoredLinkKeyFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcireadstoredlinkkeysflag?language=objc)
pub type BluetoothHCIReadStoredLinkKeysFlag = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcireadstoredlinkkeysflags?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIReadStoredLinkKeysFlags(pub c_uint);
impl BluetoothHCIReadStoredLinkKeysFlags {
    #[doc(alias = "kReturnLinkKeyForSpecifiedDeviceOnly")]
    pub const ReturnLinkKeyForSpecifiedDeviceOnly: Self = Self(0x00);
    #[doc(alias = "kReadAllStoredLinkKeys")]
    pub const ReadAllStoredLinkKeys: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIReadStoredLinkKeysFlags {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIReadStoredLinkKeysFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcistoredlinkkeysinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIStoredLinkKeysInfo {
    pub numLinkKeysRead: u16,
    pub maxNumLinkKeysAllowedInDevice: u16,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIStoredLinkKeysInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIStoredLinkKeysInfo",
        &[<u16>::ENCODING, <u16>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIStoredLinkKeysInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcipagescanmode?language=objc)
pub type BluetoothHCIPageScanMode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcipagescanmodes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIPageScanModes(pub c_uint);
impl BluetoothHCIPageScanModes {
    #[doc(alias = "kMandatoryPageScanMode")]
    pub const MandatoryPageScanMode: Self = Self(0x00);
    #[doc(alias = "kOptionalPageScanMode1")]
    pub const OptionalPageScanMode1: Self = Self(0x01);
    #[doc(alias = "kOptionalPageScanMode2")]
    pub const OptionalPageScanMode2: Self = Self(0x02);
    #[doc(alias = "kOptionalPageScanMode3")]
    pub const OptionalPageScanMode3: Self = Self(0x03);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIPageScanModes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIPageScanModes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcipagescanperiodmode?language=objc)
pub type BluetoothHCIPageScanPeriodMode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcipagescanperiodmodes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIPageScanPeriodModes(pub c_uint);
impl BluetoothHCIPageScanPeriodModes {
    #[doc(alias = "kP0Mode")]
    pub const P0Mode: Self = Self(0x00);
    #[doc(alias = "kP1Mode")]
    pub const P1Mode: Self = Self(0x01);
    #[doc(alias = "kP2Mode")]
    pub const P2Mode: Self = Self(0x02);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIPageScanPeriodModes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIPageScanPeriodModes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcipagescanenablestate?language=objc)
pub type BluetoothHCIPageScanEnableState = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcipagescanenablestates?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIPageScanEnableStates(pub c_uint);
impl BluetoothHCIPageScanEnableStates {
    #[doc(alias = "kNoScansEnabled")]
    pub const NoScansEnabled: Self = Self(0x00);
    #[doc(alias = "kInquiryScanEnabledPageScanDisabled")]
    pub const InquiryScanEnabledPageScanDisabled: Self = Self(0x01);
    #[doc(alias = "kInquiryScanDisabledPageScanEnabled")]
    pub const InquiryScanDisabledPageScanEnabled: Self = Self(0x02);
    #[doc(alias = "kInquiryScanEnabledPageScanEnabled")]
    pub const InquiryScanEnabledPageScanEnabled: Self = Self(0x03);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIPageScanEnableStates {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIPageScanEnableStates {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciscanactivity?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIScanActivity {
    pub scanInterval: u16,
    pub scanWindow: u16,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIScanActivity {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIScanActivity",
        &[<u16>::ENCODING, <u16>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIScanActivity {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinquiryaccesscode?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIInquiryAccessCode {
    pub data: [u8; 3],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIInquiryAccessCode {
    const ENCODING: Encoding =
        Encoding::Struct("BluetoothHCIInquiryAccessCode", &[<[u8; 3]>::ENCODING]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIInquiryAccessCode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinquiryaccesscodecount?language=objc)
pub type BluetoothHCIInquiryAccessCodeCount = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcicurrentinquiryaccesscodes?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCICurrentInquiryAccessCodes {
    pub count: BluetoothHCIInquiryAccessCodeCount,
    pub codes: *mut BluetoothHCIInquiryAccessCode,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCICurrentInquiryAccessCodes {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCICurrentInquiryAccessCodes",
        &[
            <BluetoothHCIInquiryAccessCodeCount>::ENCODING,
            <*mut BluetoothHCIInquiryAccessCode>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCICurrentInquiryAccessCodes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kmaximumnumberofinquiryaccesscodes?language=objc)
pub const kMaximumNumberOfInquiryAccessCodes: c_uint = 0x40;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcicurrentinquiryaccesscodesforwrite?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCICurrentInquiryAccessCodesForWrite {
    pub count: BluetoothHCIInquiryAccessCodeCount,
    pub codes: [u8; 192],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCICurrentInquiryAccessCodesForWrite {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCICurrentInquiryAccessCodesForWrite",
        &[
            <BluetoothHCIInquiryAccessCodeCount>::ENCODING,
            <[u8; 192]>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCICurrentInquiryAccessCodesForWrite {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcilinksupervisiontimeout?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCILinkSupervisionTimeout {
    pub handle: BluetoothConnectionHandle,
    pub timeout: u16,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCILinkSupervisionTimeout {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCILinkSupervisionTimeout",
        &[<BluetoothConnectionHandle>::ENCODING, <u16>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCILinkSupervisionTimeout {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciflowcontrolstate?language=objc)
pub type BluetoothHCIFlowControlState = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciscoflowcontrolstates?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCISCOFlowControlStates(pub c_uint);
impl BluetoothHCISCOFlowControlStates {
    #[doc(alias = "kSCOFlowControlDisabled")]
    pub const SCOFlowControlDisabled: Self = Self(0x00);
    #[doc(alias = "kSCOFlowControlEnabled")]
    pub const SCOFlowControlEnabled: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCISCOFlowControlStates {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCISCOFlowControlStates {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcigeneralflowcontrolstates?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIGeneralFlowControlStates(pub c_uint);
impl BluetoothHCIGeneralFlowControlStates {
    #[doc(alias = "kHostControllerToHostFlowControlOff")]
    pub const HostControllerToHostFlowControlOff: Self = Self(0x00);
    #[doc(alias = "kHCIACLDataPacketsOnHCISCODataPacketsOff")]
    pub const HCIACLDataPacketsOnHCISCODataPacketsOff: Self = Self(0x01);
    #[doc(alias = "kHCIACLDataPacketsOffHCISCODataPacketsOn")]
    pub const HCIACLDataPacketsOffHCISCODataPacketsOn: Self = Self(0x02);
    #[doc(alias = "kHCIACLDataPacketsOnHCISCODataPacketsOn")]
    pub const HCIACLDataPacketsOnHCISCODataPacketsOn: Self = Self(0x03);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIGeneralFlowControlStates {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIGeneralFlowControlStates {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcitransmitpowerlevel?language=objc)
pub type BluetoothHCITransmitPowerLevel = i8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcitransmitpowerleveltype?language=objc)
pub type BluetoothHCITransmitPowerLevelType = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcitransmitreadpowerleveltypes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCITransmitReadPowerLevelTypes(pub c_uint);
impl BluetoothHCITransmitReadPowerLevelTypes {
    #[doc(alias = "kReadCurrentTransmitPowerLevel")]
    pub const ReadCurrentTransmitPowerLevel: Self = Self(0x00);
    #[doc(alias = "kReadMaximumTransmitPowerLevel")]
    pub const ReadMaximumTransmitPowerLevel: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCITransmitReadPowerLevelTypes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCITransmitReadPowerLevelTypes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciafhchannelassessmentmode?language=objc)
pub type BluetoothHCIAFHChannelAssessmentMode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciafhchannelassessmentmodes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIAFHChannelAssessmentModes(pub c_uint);
impl BluetoothHCIAFHChannelAssessmentModes {
    #[doc(alias = "kAFHChannelAssessmentModeDisabled")]
    pub const AFHChannelAssessmentModeDisabled: Self = Self(0x00);
    #[doc(alias = "kAFHChannelAssessmentModeEnabled")]
    pub const AFHChannelAssessmentModeEnabled: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIAFHChannelAssessmentModes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIAFHChannelAssessmentModes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcitransmitpowerlevelinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCITransmitPowerLevelInfo {
    pub handle: BluetoothConnectionHandle,
    pub level: BluetoothHCITransmitPowerLevel,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCITransmitPowerLevelInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCITransmitPowerLevelInfo",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothHCITransmitPowerLevel>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCITransmitPowerLevelInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcinumbroadcastretransmissions?language=objc)
pub type BluetoothHCINumBroadcastRetransmissions = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciholdmodeactivity?language=objc)
pub type BluetoothHCIHoldModeActivity = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciholdmodeactivitystates?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIHoldModeActivityStates(pub c_uint);
impl BluetoothHCIHoldModeActivityStates {
    #[doc(alias = "kMaintainCurrentPowerState")]
    pub const MaintainCurrentPowerState: Self = Self(0x00);
    #[doc(alias = "kSuspendPageScan")]
    pub const SuspendPageScan: Self = Self(0x01);
    #[doc(alias = "kSuspendInquiryScan")]
    pub const SuspendInquiryScan: Self = Self(0x02);
    #[doc(alias = "kSuspendPeriodicInquiries")]
    pub const SuspendPeriodicInquiries: Self = Self(0x03);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIHoldModeActivityStates {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIHoldModeActivityStates {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciauthenticationenable?language=objc)
pub type BluetoothHCIAuthenticationEnable = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciauthentionenablemodes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIAuthentionEnableModes(pub c_uint);
impl BluetoothHCIAuthentionEnableModes {
    #[doc(alias = "kAuthenticationDisabled")]
    pub const AuthenticationDisabled: Self = Self(0x00);
    #[doc(alias = "kAuthenticationEnabled")]
    pub const AuthenticationEnabled: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIAuthentionEnableModes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIAuthentionEnableModes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciencryptionmode?language=objc)
pub type BluetoothHCIEncryptionMode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciencryptionmodes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIEncryptionModes(pub c_uint);
impl BluetoothHCIEncryptionModes {
    #[doc(alias = "kEncryptionDisabled")]
    pub const EncryptionDisabled: Self = Self(0x00);
    #[doc(alias = "kEncryptionOnlyForPointToPointPackets")]
    pub const EncryptionOnlyForPointToPointPackets: Self = Self(0x01);
    #[doc(alias = "kEncryptionForBothPointToPointAndBroadcastPackets")]
    pub const EncryptionForBothPointToPointAndBroadcastPackets: Self = Self(0x02);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEncryptionModes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEncryptionModes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciautomaticflushtimeout?language=objc)
pub type BluetoothHCIAutomaticFlushTimeout = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciautomaticflushtimeoutinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIAutomaticFlushTimeoutInfo {
    pub handle: BluetoothConnectionHandle,
    pub timeout: BluetoothHCIAutomaticFlushTimeout,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIAutomaticFlushTimeoutInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIAutomaticFlushTimeoutInfo",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothHCIAutomaticFlushTimeout>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIAutomaticFlushTimeoutInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothtransportinfoptr?language=objc)
pub type BluetoothTransportInfoPtr = *mut BluetoothTransportInfo;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothtransportinfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothTransportInfo {
    pub productID: u32,
    pub vendorID: u32,
    pub r#type: u32,
    pub productName: [c_char; 35],
    pub vendorName: [c_char; 35],
    pub totalDataBytesSent: u64,
    pub totalSCOBytesSent: u64,
    pub totalDataBytesReceived: u64,
    pub totalSCOBytesReceived: u64,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothTransportInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothTransportInfo",
        &[
            <u32>::ENCODING,
            <u32>::ENCODING,
            <u32>::ENCODING,
            <[c_char; 35]>::ENCODING,
            <[c_char; 35]>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
            <u64>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothTransportInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothtransporttypes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothTransportTypes(pub c_uint);
impl BluetoothTransportTypes {
    #[doc(alias = "kBluetoothTransportTypeUSB")]
    pub const USB: Self = Self(0x01);
    #[doc(alias = "kBluetoothTransportTypePCCard")]
    pub const PCCard: Self = Self(0x02);
    #[doc(alias = "kBluetoothTransportTypePCICard")]
    pub const PCICard: Self = Self(0x03);
    #[doc(alias = "kBluetoothTransportTypeUART")]
    pub const UART: Self = Self(0x04);
    #[doc(alias = "kBluetoothTransportTypePCIe")]
    pub const PCIe: Self = Self(0x05);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothTransportTypes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothTransportTypes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinquiryresult?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIInquiryResult {
    pub deviceAddress: BluetoothDeviceAddress,
    pub pageScanRepetitionMode: BluetoothPageScanRepetitionMode,
    pub pageScanPeriodMode: BluetoothHCIPageScanPeriodMode,
    pub pageScanMode: BluetoothHCIPageScanMode,
    pub classOfDevice: BluetoothClassOfDevice,
    pub clockOffset: BluetoothClockOffset,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIInquiryResult {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIInquiryResult",
        &[
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothPageScanRepetitionMode>::ENCODING,
            <BluetoothHCIPageScanPeriodMode>::ENCODING,
            <BluetoothHCIPageScanMode>::ENCODING,
            <BluetoothClassOfDevice>::ENCODING,
            <BluetoothClockOffset>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIInquiryResult {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinquiryresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIInquiryResults {
    pub results: [BluetoothHCIInquiryResult; 50],
    pub count: IOItemCount,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIInquiryResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIInquiryResults",
        &[
            <[BluetoothHCIInquiryResult; 50]>::ENCODING,
            <IOItemCount>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIInquiryResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinquirywithrssiresult?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIInquiryWithRSSIResult {
    pub deviceAddress: BluetoothDeviceAddress,
    pub pageScanRepetitionMode: BluetoothPageScanRepetitionMode,
    pub reserved: u8,
    pub classOfDevice: BluetoothClassOfDevice,
    pub clockOffset: BluetoothClockOffset,
    pub RSSIValue: BluetoothHCIRSSIValue,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIInquiryWithRSSIResult {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIInquiryWithRSSIResult",
        &[
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothPageScanRepetitionMode>::ENCODING,
            <u8>::ENCODING,
            <BluetoothClassOfDevice>::ENCODING,
            <BluetoothClockOffset>::ENCODING,
            <BluetoothHCIRSSIValue>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIInquiryWithRSSIResult {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinquirywithrssiresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIInquiryWithRSSIResults {
    pub results: [BluetoothHCIInquiryWithRSSIResult; 50],
    pub count: IOItemCount,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIInquiryWithRSSIResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIInquiryWithRSSIResults",
        &[
            <[BluetoothHCIInquiryWithRSSIResult; 50]>::ENCODING,
            <IOItemCount>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIInquiryWithRSSIResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcifecrequired?language=objc)
pub type BluetoothHCIFECRequired = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcifecrequiredvalues?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIFECRequiredValues(pub c_uint);
impl BluetoothHCIFECRequiredValues {
    #[doc(alias = "kBluetoothHCIFECRequired")]
    pub const Required: Self = Self(0x00);
    #[doc(alias = "kBluetoothHCIFECNotRequired")]
    pub const NotRequired: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIFECRequiredValues {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIFECRequiredValues {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinquirymode?language=objc)
pub type BluetoothHCIInquiryMode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinquirymodes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIInquiryModes(pub c_uint);
impl BluetoothHCIInquiryModes {
    #[doc(alias = "kBluetoothHCIInquiryModeResultFormatStandard")]
    pub const ResultFormatStandard: Self = Self(0x00);
    #[doc(alias = "kBluetoothHCIInquiryModeResultFormatWithRSSI")]
    pub const ResultFormatWithRSSI: Self = Self(0x01);
    #[doc(alias = "kBluetoothHCIInquiryModeResultFormatWithRSSIOrExtendedInquiryResultFormat")]
    pub const ResultFormatWithRSSIOrExtendedInquiryResultFormat: Self = Self(0x02);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIInquiryModes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIInquiryModes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinquiryscantype?language=objc)
pub type BluetoothHCIInquiryScanType = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinquiryscantypes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIInquiryScanTypes(pub c_uint);
impl BluetoothHCIInquiryScanTypes {
    #[doc(alias = "kBluetoothHCIInquiryScanTypeStandard")]
    pub const Standard: Self = Self(0x00);
    #[doc(alias = "kBluetoothHCIInquiryScanTypeInterlaced")]
    pub const Interlaced: Self = Self(0x01);
    #[doc(alias = "kBluetoothHCIInquiryScanTypeReservedStart")]
    pub const ReservedStart: Self = Self(0x02);
    #[doc(alias = "kBluetoothHCIInquiryScanTypeReservedEnd")]
    pub const ReservedEnd: Self = Self(0xFF);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIInquiryScanTypes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIInquiryScanTypes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciextendedinquiryresponsedatatype?language=objc)
pub type BluetoothHCIExtendedInquiryResponseDataType = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciextendedinquiryresponse?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIExtendedInquiryResponse {
    pub data: [u8; 240],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIExtendedInquiryResponse {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIExtendedInquiryResponse",
        &[<[u8; 240]>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIExtendedInquiryResponse {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcireadextendedinquiryresponseresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIReadExtendedInquiryResponseResults {
    pub outFECRequired: BluetoothHCIFECRequired,
    pub extendedInquiryResponse: BluetoothHCIExtendedInquiryResponse,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIReadExtendedInquiryResponseResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIReadExtendedInquiryResponseResults",
        &[
            <BluetoothHCIFECRequired>::ENCODING,
            <BluetoothHCIExtendedInquiryResponse>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIReadExtendedInquiryResponseResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciextendedinquiryresult?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIExtendedInquiryResult {
    pub numberOfReponses: u8,
    pub deviceAddress: BluetoothDeviceAddress,
    pub pageScanRepetitionMode: BluetoothPageScanRepetitionMode,
    pub reserved: u8,
    pub classOfDevice: BluetoothClassOfDevice,
    pub clockOffset: BluetoothClockOffset,
    pub RSSIValue: BluetoothHCIRSSIValue,
    pub extendedInquiryResponse: BluetoothHCIExtendedInquiryResponse,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIExtendedInquiryResult {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIExtendedInquiryResult",
        &[
            <u8>::ENCODING,
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothPageScanRepetitionMode>::ENCODING,
            <u8>::ENCODING,
            <BluetoothClassOfDevice>::ENCODING,
            <BluetoothClockOffset>::ENCODING,
            <BluetoothHCIRSSIValue>::ENCODING,
            <BluetoothHCIExtendedInquiryResponse>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIExtendedInquiryResult {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcireadlmphandleresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIReadLMPHandleResults {
    pub handle: BluetoothConnectionHandle,
    pub lmp_handle: BluetoothLMPHandle,
    pub reserved: u32,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIReadLMPHandleResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIReadLMPHandleResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothLMPHandle>::ENCODING,
            <u32>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIReadLMPHandleResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcisimplepairingmode?language=objc)
pub type BluetoothHCISimplePairingMode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcisimplepairingmodes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCISimplePairingModes(pub c_uint);
impl BluetoothHCISimplePairingModes {
    #[doc(alias = "kBluetoothHCISimplePairingModeNotSet")]
    pub const NotSet: Self = Self(0x00);
    #[doc(alias = "kBluetoothHCISimplePairingModeEnabled")]
    pub const Enabled: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCISimplePairingModes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCISimplePairingModes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothsimplepairingdebugmode?language=objc)
pub type BluetoothSimplePairingDebugMode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothsimplepairingdebugmodes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothSimplePairingDebugModes(pub c_uint);
impl BluetoothSimplePairingDebugModes {
    #[doc(alias = "kBluetoothHCISimplePairingDebugModeDisabled")]
    pub const HCISimplePairingDebugModeDisabled: Self = Self(0x00);
    #[doc(alias = "kBluetoothHCISimplePairingDebugModeEnabled")]
    pub const HCISimplePairingDebugModeEnabled: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothSimplePairingDebugModes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothSimplePairingDebugModes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcisimplepairingoobdata?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCISimplePairingOOBData {
    pub data: [u8; 16],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCISimplePairingOOBData {
    const ENCODING: Encoding =
        Encoding::Struct("BluetoothHCISimplePairingOOBData", &[<[u8; 16]>::ENCODING]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCISimplePairingOOBData {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcireadlocaloobdataresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIReadLocalOOBDataResults {
    pub hash: BluetoothHCISimplePairingOOBData,
    pub randomizer: BluetoothHCISimplePairingOOBData,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIReadLocalOOBDataResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIReadLocalOOBDataResults",
        &[
            <BluetoothHCISimplePairingOOBData>::ENCODING,
            <BluetoothHCISimplePairingOOBData>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIReadLocalOOBDataResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothiocapability?language=objc)
pub type BluetoothIOCapability = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothiocapabilities?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothIOCapabilities(pub c_uint);
impl BluetoothIOCapabilities {
    #[doc(alias = "kBluetoothCapabilityTypeDisplayOnly")]
    pub const CapabilityTypeDisplayOnly: Self = Self(0x00);
    #[doc(alias = "kBluetoothCapabilityTypeDisplayYesNo")]
    pub const CapabilityTypeDisplayYesNo: Self = Self(0x01);
    #[doc(alias = "kBluetoothCapabilityTypeKeyboardOnly")]
    pub const CapabilityTypeKeyboardOnly: Self = Self(0x02);
    #[doc(alias = "kBluetoothCapabilityTypeNoInputNoOutput")]
    pub const CapabilityTypeNoInputNoOutput: Self = Self(0x03);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothIOCapabilities {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothIOCapabilities {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothoobdatapresence?language=objc)
pub type BluetoothOOBDataPresence = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothoobdatapresencevalues?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothOOBDataPresenceValues(pub c_uint);
impl BluetoothOOBDataPresenceValues {
    #[doc(alias = "kBluetoothOOBAuthenticationDataNotPresent")]
    pub const AuthenticationDataNotPresent: Self = Self(0x00);
    #[doc(alias = "kBluetoothOOBAuthenticationDataFromRemoteDevicePresent")]
    pub const AuthenticationDataFromRemoteDevicePresent: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothOOBDataPresenceValues {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothOOBDataPresenceValues {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothauthenticationrequirements?language=objc)
pub type BluetoothAuthenticationRequirements = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothauthenticationrequirementsvalues?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothAuthenticationRequirementsValues(pub c_uint);
impl BluetoothAuthenticationRequirementsValues {
    #[doc(alias = "kBluetoothAuthenticationRequirementsMITMProtectionNotRequired")]
    pub const MITMProtectionNotRequired: Self = Self(0x00);
    #[doc(alias = "kBluetoothAuthenticationRequirementsMITMProtectionRequired")]
    pub const MITMProtectionRequired: Self = Self(0x01);
    #[doc(alias = "kBluetoothAuthenticationRequirementsMITMProtectionNotRequiredNoBonding")]
    pub const MITMProtectionNotRequiredNoBonding: Self = Self(0x00);
    #[doc(alias = "kBluetoothAuthenticationRequirementsMITMProtectionRequiredNoBonding")]
    pub const MITMProtectionRequiredNoBonding: Self = Self(0x01);
    #[doc(alias = "kBluetoothAuthenticationRequirementsMITMProtectionNotRequiredDedicatedBonding")]
    pub const MITMProtectionNotRequiredDedicatedBonding: Self = Self(0x02);
    #[doc(alias = "kBluetoothAuthenticationRequirementsMITMProtectionRequiredDedicatedBonding")]
    pub const MITMProtectionRequiredDedicatedBonding: Self = Self(0x03);
    #[doc(alias = "kBluetoothAuthenticationRequirementsMITMProtectionNotRequiredGeneralBonding")]
    pub const MITMProtectionNotRequiredGeneralBonding: Self = Self(0x04);
    #[doc(alias = "kBluetoothAuthenticationRequirementsMITMProtectionRequiredGeneralBonding")]
    pub const MITMProtectionRequiredGeneralBonding: Self = Self(0x05);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothAuthenticationRequirementsValues {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothAuthenticationRequirementsValues {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothiocapabilityresponse?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothIOCapabilityResponse {
    pub deviceAddress: BluetoothDeviceAddress,
    pub ioCapability: BluetoothIOCapability,
    pub OOBDataPresence: BluetoothOOBDataPresence,
    pub authenticationRequirements: BluetoothAuthenticationRequirements,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothIOCapabilityResponse {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothIOCapabilityResponse",
        &[
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothIOCapability>::ENCODING,
            <BluetoothOOBDataPresence>::ENCODING,
            <BluetoothAuthenticationRequirements>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothIOCapabilityResponse {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothpasskey?language=objc)
pub type BluetoothPasskey = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothuserpasskeynotification?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothUserPasskeyNotification {
    pub deviceAddress: BluetoothDeviceAddress,
    pub passkey: BluetoothPasskey,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothUserPasskeyNotification {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothUserPasskeyNotification",
        &[
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothPasskey>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothUserPasskeyNotification {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothkeypressnotificationtype?language=objc)
pub type BluetoothKeypressNotificationType = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothkeypressnotificationtypes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothKeypressNotificationTypes(pub c_uint);
impl BluetoothKeypressNotificationTypes {
    #[doc(alias = "kBluetoothKeypressNotificationTypePasskeyEntryStarted")]
    pub const PasskeyEntryStarted: Self = Self(0);
    #[doc(alias = "kBluetoothKeypressNotificationTypePasskeyDigitEntered")]
    pub const PasskeyDigitEntered: Self = Self(1);
    #[doc(alias = "kBluetoothKeypressNotificationTypePasskeyDigitErased")]
    pub const PasskeyDigitErased: Self = Self(2);
    #[doc(alias = "kBluetoothKeypressNotificationTypePasskeyCleared")]
    pub const PasskeyCleared: Self = Self(3);
    #[doc(alias = "kBluetoothKeypressNotificationTypePasskeyEntryCompleted")]
    pub const PasskeyEntryCompleted: Self = Self(4);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothKeypressNotificationTypes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothKeypressNotificationTypes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothkeypressnotification?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothKeypressNotification {
    pub deviceAddress: BluetoothDeviceAddress,
    pub notificationType: BluetoothKeypressNotificationType,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothKeypressNotification {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothKeypressNotification",
        &[
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothKeypressNotificationType>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothKeypressNotification {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothremotehostsupportedfeaturesnotification?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothRemoteHostSupportedFeaturesNotification {
    pub deviceAddress: BluetoothDeviceAddress,
    pub hostSupportedFeatures: BluetoothHCISupportedFeatures,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothRemoteHostSupportedFeaturesNotification {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothRemoteHostSupportedFeaturesNotification",
        &[
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothHCISupportedFeatures>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothRemoteHostSupportedFeaturesNotification {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/transmissionpower?language=objc)
pub type TransmissionPower = i8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothafhhostchannelclassification?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothAFHHostChannelClassification {
    pub data: [u8; 10],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothAFHHostChannelClassification {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothAFHHostChannelClassification",
        &[<[u8; 10]>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothAFHHostChannelClassification {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothafhmode?language=objc)
pub type BluetoothAFHMode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothafhresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothAFHResults {
    pub handle: BluetoothConnectionHandle,
    pub mode: BluetoothAFHMode,
    pub afhMap: [u8; 10],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothAFHResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothAFHResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothAFHMode>::ENCODING,
            <[u8; 10]>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothAFHResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothnumericvalue?language=objc)
pub type BluetoothNumericValue = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothuserconfirmationrequest?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothUserConfirmationRequest {
    pub deviceAddress: BluetoothDeviceAddress,
    pub numericValue: BluetoothNumericValue,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothUserConfirmationRequest {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothUserConfirmationRequest",
        &[
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothNumericValue>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothUserConfirmationRequest {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventsimplepairingcompleteresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventSimplePairingCompleteResults {
    pub deviceAddress: BluetoothDeviceAddress,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventSimplePairingCompleteResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventSimplePairingCompleteResults",
        &[<BluetoothDeviceAddress>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventSimplePairingCompleteResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandpacketheadersize?language=objc)
pub const kBluetoothHCICommandPacketHeaderSize: c_uint = 3;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcicommandpacketmaxdatasize?language=objc)
pub const kBluetoothHCICommandPacketMaxDataSize: c_uint = 255;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcimaxcommandpacketsize?language=objc)
pub const kBluetoothHCIMaxCommandPacketSize: c_uint =
    kBluetoothHCICommandPacketHeaderSize + kBluetoothHCICommandPacketMaxDataSize;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventpacketheadersize?language=objc)
pub const kBluetoothHCIEventPacketHeaderSize: c_uint = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventpacketmaxdatasize?language=objc)
pub const kBluetoothHCIEventPacketMaxDataSize: c_uint = 255;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcimaxeventpacketsize?language=objc)
pub const kBluetoothHCIMaxEventPacketSize: c_uint =
    kBluetoothHCIEventPacketHeaderSize + kBluetoothHCIEventPacketMaxDataSize;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcidatapacketheadersize?language=objc)
pub const kBluetoothHCIDataPacketHeaderSize: c_uint = 4;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcidatapacketmaxdatasize?language=objc)
pub const kBluetoothHCIDataPacketMaxDataSize: c_uint = 65535;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcimaxdatapacketsize?language=objc)
pub const kBluetoothHCIMaxDataPacketSize: c_uint =
    kBluetoothHCIDataPacketHeaderSize + kBluetoothHCIDataPacketMaxDataSize;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventcode?language=objc)
pub type BluetoothHCIEventCode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlinktype?language=objc)
pub type BluetoothLinkType = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlinktypes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLinkTypes(pub c_uint);
impl BluetoothLinkTypes {
    #[doc(alias = "kBluetoothSCOConnection")]
    pub const SCOConnection: Self = Self(0);
    #[doc(alias = "kBluetoothACLConnection")]
    pub const ACLConnection: Self = Self(1);
    #[doc(alias = "kBluetoothESCOConnection")]
    pub const ESCOConnection: Self = Self(2);
    #[doc(alias = "kBluetoothLinkTypeNone")]
    pub const LinkTypeNone: Self = Self(0xff);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLinkTypes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLinkTypes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcicontentformat?language=objc)
pub type BluetoothHCIContentFormat = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcivoicesetting?language=objc)
pub type BluetoothHCIVoiceSetting = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettinginputcodingmask?language=objc)
pub const kBluetoothVoiceSettingInputCodingMask: c_uint = 0x300;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettinginputcodinglinearinputcoding?language=objc)
pub const kBluetoothVoiceSettingInputCodingLinearInputCoding: c_uint = 0x000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettinginputcodingulawinputcoding?language=objc)
pub const kBluetoothVoiceSettingInputCodingULawInputCoding: c_uint = 0x100;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettinginputcodingalawinputcoding?language=objc)
pub const kBluetoothVoiceSettingInputCodingALawInputCoding: c_uint = 0x200;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettinginputdataformatmask?language=objc)
pub const kBluetoothVoiceSettingInputDataFormatMask: c_uint = 0x0C0;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettinginputdataformat1scomplement?language=objc)
pub const kBluetoothVoiceSettingInputDataFormat1sComplement: c_uint = 0x000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettinginputdataformat2scomplement?language=objc)
pub const kBluetoothVoiceSettingInputDataFormat2sComplement: c_uint = 0x040;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettinginputdataformatsignmagnitude?language=objc)
pub const kBluetoothVoiceSettingInputDataFormatSignMagnitude: c_uint = 0x080;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettinginputdataformatunsigned?language=objc)
pub const kBluetoothVoiceSettingInputDataFormatUnsigned: c_uint = 0x0C0;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettinginputsamplesizemask?language=objc)
pub const kBluetoothVoiceSettingInputSampleSizeMask: c_uint = 0x020;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettinginputsamplesize8bit?language=objc)
pub const kBluetoothVoiceSettingInputSampleSize8Bit: c_uint = 0x000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettinginputsamplesize16bit?language=objc)
pub const kBluetoothVoiceSettingInputSampleSize16Bit: c_uint = 0x020;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettingpcmbitpositionmask?language=objc)
pub const kBluetoothVoiceSettingPCMBitPositionMask: c_uint = 0x01C;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettingaircodingformatmask?language=objc)
pub const kBluetoothVoiceSettingAirCodingFormatMask: c_uint = 0x003;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettingaircodingformatcvsd?language=objc)
pub const kBluetoothVoiceSettingAirCodingFormatCVSD: c_uint = 0x000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettingaircodingformatulaw?language=objc)
pub const kBluetoothVoiceSettingAirCodingFormatULaw: c_uint = 0x001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettingaircodingformatalaw?language=objc)
pub const kBluetoothVoiceSettingAirCodingFormatALaw: c_uint = 0x002;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothvoicesettingaircodingformattransparentdata?language=objc)
pub const kBluetoothVoiceSettingAirCodingFormatTransparentData: c_uint = 0x003;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcisupportediac?language=objc)
pub type BluetoothHCISupportedIAC = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcitransmitbandwidth?language=objc)
pub type BluetoothHCITransmitBandwidth = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcireceivebandwidth?language=objc)
pub type BluetoothHCIReceiveBandwidth = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcitransmitcodingformat?language=objc)
pub type BluetoothHCITransmitCodingFormat = u64;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcireceivecodingformat?language=objc)
pub type BluetoothHCIReceiveCodingFormat = u64;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcitransmitcodecframesize?language=objc)
pub type BluetoothHCITransmitCodecFrameSize = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcireceivecodecframesize?language=objc)
pub type BluetoothHCIReceiveCodecFrameSize = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinputbandwidth?language=objc)
pub type BluetoothHCIInputBandwidth = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcioutputbandwidth?language=objc)
pub type BluetoothHCIOutputBandwidth = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinputcodingformat?language=objc)
pub type BluetoothHCIInputCodingFormat = u64;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcioutputcodingformat?language=objc)
pub type BluetoothHCIOutputCodingFormat = u64;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinputcodeddatasize?language=objc)
pub type BluetoothHCIInputCodedDataSize = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcioutputcodeddatasize?language=objc)
pub type BluetoothHCIOutputCodedDataSize = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinputpcmdataformat?language=objc)
pub type BluetoothHCIInputPCMDataFormat = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcioutputpcmdataformat?language=objc)
pub type BluetoothHCIOutputPCMDataFormat = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinputpcmsamplepayloadmsbposition?language=objc)
pub type BluetoothHCIInputPCMSamplePayloadMSBPosition = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcioutputpcmsamplepayloadmsbposition?language=objc)
pub type BluetoothHCIOutputPCMSamplePayloadMSBPosition = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinputdatapath?language=objc)
pub type BluetoothHCIInputDataPath = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcioutputdatapath?language=objc)
pub type BluetoothHCIOutputDataPath = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciinputtransportunitsize?language=objc)
pub type BluetoothHCIInputTransportUnitSize = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcioutputtransportunitsize?language=objc)
pub type BluetoothHCIOutputTransportUnitSize = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcimaxlatency?language=objc)
pub type BluetoothHCIMaxLatency = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciretransmissioneffort?language=objc)
pub type BluetoothHCIRetransmissionEffort = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhciretransmissionefforttypes?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIRetransmissionEffortTypes(pub c_uint);
impl BluetoothHCIRetransmissionEffortTypes {
    #[doc(alias = "kHCIRetransmissionEffortTypeNone")]
    pub const HCIRetransmissionEffortTypeNone: Self = Self(0x00);
    #[doc(alias = "kHCIRetransmissionEffortTypeAtLeastOneAndOptimizeForPower")]
    pub const HCIRetransmissionEffortTypeAtLeastOneAndOptimizeForPower: Self = Self(0x01);
    #[doc(alias = "kHCIRetransmissionEffortTypeAtLeastOneAndOptimizeLinkQuality")]
    pub const HCIRetransmissionEffortTypeAtLeastOneAndOptimizeLinkQuality: Self = Self(0x02);
    #[doc(alias = "kHCIRetransmissionEffortTypeDontCare")]
    pub const HCIRetransmissionEffortTypeDontCare: Self = Self(0xFF);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIRetransmissionEffortTypes {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIRetransmissionEffortTypes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothairmode?language=objc)
pub type BluetoothAirMode = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothairmodeulawlog?language=objc)
pub const kBluetoothAirModeULawLog: c_uint = 0x00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothairmodealawlog?language=objc)
pub const kBluetoothAirModeALawLog: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothairmodecvsd?language=objc)
pub const kBluetoothAirModeCVSD: c_uint = 0x02;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothairmodetransparentdata?language=objc)
pub const kBluetoothAirModeTransparentData: c_uint = 0x03;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothsynchronousconnectioninfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothSynchronousConnectionInfo {
    pub transmitBandWidth: BluetoothHCITransmitBandwidth,
    pub receiveBandWidth: BluetoothHCIReceiveBandwidth,
    pub maxLatency: BluetoothHCIMaxLatency,
    pub voiceSetting: BluetoothHCIVoiceSetting,
    pub retransmissionEffort: BluetoothHCIRetransmissionEffort,
    pub packetType: BluetoothPacketType,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothSynchronousConnectionInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothSynchronousConnectionInfo",
        &[
            <BluetoothHCITransmitBandwidth>::ENCODING,
            <BluetoothHCIReceiveBandwidth>::ENCODING,
            <BluetoothHCIMaxLatency>::ENCODING,
            <BluetoothHCIVoiceSetting>::ENCODING,
            <BluetoothHCIRetransmissionEffort>::ENCODING,
            <BluetoothPacketType>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothSynchronousConnectionInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothenhancedsynchronousconnectioninfo?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothEnhancedSynchronousConnectionInfo {
    pub transmitBandWidth: BluetoothHCITransmitBandwidth,
    pub receiveBandWidth: BluetoothHCIReceiveBandwidth,
    pub transmitCodingFormat: BluetoothHCITransmitCodingFormat,
    pub receiveCodingFormat: BluetoothHCIReceiveCodingFormat,
    pub transmitCodecFrameSize: BluetoothHCITransmitCodecFrameSize,
    pub receiveCodecFrameSize: BluetoothHCIReceiveCodecFrameSize,
    pub inputBandwidth: BluetoothHCIInputBandwidth,
    pub outputBandwidth: BluetoothHCIOutputBandwidth,
    pub inputCodingFormat: BluetoothHCIInputCodingFormat,
    pub outputCodingFormat: BluetoothHCIOutputCodingFormat,
    pub inputCodedDataSize: BluetoothHCIInputCodedDataSize,
    pub outputCodedDataSize: BluetoothHCIOutputCodedDataSize,
    pub inputPCMDataFormat: BluetoothHCIInputPCMDataFormat,
    pub outputPCMDataFormat: BluetoothHCIOutputPCMDataFormat,
    pub inputPCMSampelPayloadMSBPosition: BluetoothHCIInputPCMSamplePayloadMSBPosition,
    pub outputPCMSampelPayloadMSBPosition: BluetoothHCIOutputPCMSamplePayloadMSBPosition,
    pub inputDataPath: BluetoothHCIInputDataPath,
    pub outputDataPath: BluetoothHCIOutputDataPath,
    pub inputTransportUnitSize: BluetoothHCIInputTransportUnitSize,
    pub outputTransportUnitSize: BluetoothHCIOutputTransportUnitSize,
    pub maxLatency: BluetoothHCIMaxLatency,
    pub voiceSetting: BluetoothHCIVoiceSetting,
    pub retransmissionEffort: BluetoothHCIRetransmissionEffort,
    pub packetType: BluetoothPacketType,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothEnhancedSynchronousConnectionInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothEnhancedSynchronousConnectionInfo",
        &[
            <BluetoothHCITransmitBandwidth>::ENCODING,
            <BluetoothHCIReceiveBandwidth>::ENCODING,
            <BluetoothHCITransmitCodingFormat>::ENCODING,
            <BluetoothHCIReceiveCodingFormat>::ENCODING,
            <BluetoothHCITransmitCodecFrameSize>::ENCODING,
            <BluetoothHCIReceiveCodecFrameSize>::ENCODING,
            <BluetoothHCIInputBandwidth>::ENCODING,
            <BluetoothHCIOutputBandwidth>::ENCODING,
            <BluetoothHCIInputCodingFormat>::ENCODING,
            <BluetoothHCIOutputCodingFormat>::ENCODING,
            <BluetoothHCIInputCodedDataSize>::ENCODING,
            <BluetoothHCIOutputCodedDataSize>::ENCODING,
            <BluetoothHCIInputPCMDataFormat>::ENCODING,
            <BluetoothHCIOutputPCMDataFormat>::ENCODING,
            <BluetoothHCIInputPCMSamplePayloadMSBPosition>::ENCODING,
            <BluetoothHCIOutputPCMSamplePayloadMSBPosition>::ENCODING,
            <BluetoothHCIInputDataPath>::ENCODING,
            <BluetoothHCIOutputDataPath>::ENCODING,
            <BluetoothHCIInputTransportUnitSize>::ENCODING,
            <BluetoothHCIOutputTransportUnitSize>::ENCODING,
            <BluetoothHCIMaxLatency>::ENCODING,
            <BluetoothHCIVoiceSetting>::ENCODING,
            <BluetoothHCIRetransmissionEffort>::ENCODING,
            <BluetoothPacketType>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothEnhancedSynchronousConnectionInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventsynchronousconnectioncompleteresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventSynchronousConnectionCompleteResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub deviceAddress: BluetoothDeviceAddress,
    pub linkType: BluetoothLinkType,
    pub transmissionInterval: u8,
    pub retransmissionWindow: u8,
    pub receivePacketLength: u16,
    pub transmitPacketLength: u16,
    pub airMode: BluetoothAirMode,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventSynchronousConnectionCompleteResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventSynchronousConnectionCompleteResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothLinkType>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <BluetoothAirMode>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventSynchronousConnectionCompleteResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventsynchronousconnectionchangedresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventSynchronousConnectionChangedResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub transmissionInterval: u8,
    pub retransmissionWindow: u8,
    pub receivePacketLength: u16,
    pub transmitPacketLength: u16,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventSynchronousConnectionChangedResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventSynchronousConnectionChangedResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventSynchronousConnectionChangedResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcistatus?language=objc)
pub type BluetoothHCIStatus = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventstatus?language=objc)
pub type BluetoothHCIEventStatus = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventinquirycomplete?language=objc)
pub const kBluetoothHCIEventInquiryComplete: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventinquiryresult?language=objc)
pub const kBluetoothHCIEventInquiryResult: c_uint = 0x02;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventconnectioncomplete?language=objc)
pub const kBluetoothHCIEventConnectionComplete: c_uint = 0x03;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventconnectionrequest?language=objc)
pub const kBluetoothHCIEventConnectionRequest: c_uint = 0x04;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventdisconnectioncomplete?language=objc)
pub const kBluetoothHCIEventDisconnectionComplete: c_uint = 0x05;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventauthenticationcomplete?language=objc)
pub const kBluetoothHCIEventAuthenticationComplete: c_uint = 0x06;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventremotenamerequestcomplete?language=objc)
pub const kBluetoothHCIEventRemoteNameRequestComplete: c_uint = 0x07;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventencryptionchange?language=objc)
pub const kBluetoothHCIEventEncryptionChange: c_uint = 0x08;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventchangeconnectionlinkkeycomplete?language=objc)
pub const kBluetoothHCIEventChangeConnectionLinkKeyComplete: c_uint = 0x09;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmasterlinkkeycomplete?language=objc)
pub const kBluetoothHCIEventMasterLinkKeyComplete: c_uint = 0x0A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventreadremotesupportedfeaturescomplete?language=objc)
pub const kBluetoothHCIEventReadRemoteSupportedFeaturesComplete: c_uint = 0x0B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventreadremoteversioninformationcomplete?language=objc)
pub const kBluetoothHCIEventReadRemoteVersionInformationComplete: c_uint = 0x0C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventqossetupcomplete?language=objc)
pub const kBluetoothHCIEventQoSSetupComplete: c_uint = 0x0D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventcommandcomplete?language=objc)
pub const kBluetoothHCIEventCommandComplete: c_uint = 0x0E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventcommandstatus?language=objc)
pub const kBluetoothHCIEventCommandStatus: c_uint = 0x0F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventhardwareerror?language=objc)
pub const kBluetoothHCIEventHardwareError: c_uint = 0x10;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventflushoccurred?language=objc)
pub const kBluetoothHCIEventFlushOccurred: c_uint = 0x11;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventrolechange?language=objc)
pub const kBluetoothHCIEventRoleChange: c_uint = 0x12;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventnumberofcompletedpackets?language=objc)
pub const kBluetoothHCIEventNumberOfCompletedPackets: c_uint = 0x13;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmodechange?language=objc)
pub const kBluetoothHCIEventModeChange: c_uint = 0x14;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventreturnlinkkeys?language=objc)
pub const kBluetoothHCIEventReturnLinkKeys: c_uint = 0x15;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventpincoderequest?language=objc)
pub const kBluetoothHCIEventPINCodeRequest: c_uint = 0x16;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventlinkkeyrequest?language=objc)
pub const kBluetoothHCIEventLinkKeyRequest: c_uint = 0x17;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventlinkkeynotification?language=objc)
pub const kBluetoothHCIEventLinkKeyNotification: c_uint = 0x18;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventloopbackcommand?language=objc)
pub const kBluetoothHCIEventLoopbackCommand: c_uint = 0x19;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventdatabufferoverflow?language=objc)
pub const kBluetoothHCIEventDataBufferOverflow: c_uint = 0x1A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaxslotschange?language=objc)
pub const kBluetoothHCIEventMaxSlotsChange: c_uint = 0x1B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventreadclockoffsetcomplete?language=objc)
pub const kBluetoothHCIEventReadClockOffsetComplete: c_uint = 0x1C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventconnectionpackettype?language=objc)
pub const kBluetoothHCIEventConnectionPacketType: c_uint = 0x1D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventqosviolation?language=objc)
pub const kBluetoothHCIEventQoSViolation: c_uint = 0x1E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventpagescanmodechange?language=objc)
pub const kBluetoothHCIEventPageScanModeChange: c_uint = 0x1F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventpagescanrepetitionmodechange?language=objc)
pub const kBluetoothHCIEventPageScanRepetitionModeChange: c_uint = 0x20;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventflowspecificationcomplete?language=objc)
pub const kBluetoothHCIEventFlowSpecificationComplete: c_uint = 0x21;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventinquiryresultwithrssi?language=objc)
pub const kBluetoothHCIEventInquiryResultWithRSSI: c_uint = 0x22;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventreadremoteextendedfeaturescomplete?language=objc)
pub const kBluetoothHCIEventReadRemoteExtendedFeaturesComplete: c_uint = 0x23;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventsynchronousconnectioncomplete?language=objc)
pub const kBluetoothHCIEventSynchronousConnectionComplete: c_uint = 0x2C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventsynchronousconnectionchanged?language=objc)
pub const kBluetoothHCIEventSynchronousConnectionChanged: c_uint = 0x2D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventsniffsubrating?language=objc)
pub const kBluetoothHCIEventSniffSubrating: c_uint = 0x2E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventextendedinquiryresult?language=objc)
pub const kBluetoothHCIEventExtendedInquiryResult: c_uint = 0x2F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventencryptionkeyrefreshcomplete?language=objc)
pub const kBluetoothHCIEventEncryptionKeyRefreshComplete: c_uint = 0x30;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventiocapabilityrequest?language=objc)
pub const kBluetoothHCIEventIOCapabilityRequest: c_uint = 0x31;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventiocapabilityresponse?language=objc)
pub const kBluetoothHCIEventIOCapabilityResponse: c_uint = 0x32;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventuserconfirmationrequest?language=objc)
pub const kBluetoothHCIEventUserConfirmationRequest: c_uint = 0x33;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventuserpasskeyrequest?language=objc)
pub const kBluetoothHCIEventUserPasskeyRequest: c_uint = 0x34;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventremoteoobdatarequest?language=objc)
pub const kBluetoothHCIEventRemoteOOBDataRequest: c_uint = 0x35;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventsimplepairingcomplete?language=objc)
pub const kBluetoothHCIEventSimplePairingComplete: c_uint = 0x36;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventlinksupervisiontimeoutchanged?language=objc)
pub const kBluetoothHCIEventLinkSupervisionTimeoutChanged: c_uint = 0x38;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventenhancedflushcomplete?language=objc)
pub const kBluetoothHCIEventEnhancedFlushComplete: c_uint = 0x39;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventuserpasskeynotification?language=objc)
pub const kBluetoothHCIEventUserPasskeyNotification: c_uint = 0x3B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventkeypressnotification?language=objc)
pub const kBluetoothHCIEventKeypressNotification: c_uint = 0x3C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventremotehostsupportedfeaturesnotification?language=objc)
pub const kBluetoothHCIEventRemoteHostSupportedFeaturesNotification: c_uint = 0x3D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventlemetaevent?language=objc)
pub const kBluetoothHCIEventLEMetaEvent: c_uint = 0x3E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventleconnectioncomplete?language=objc)
pub const kBluetoothHCISubEventLEConnectionComplete: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventleadvertisingreport?language=objc)
pub const kBluetoothHCISubEventLEAdvertisingReport: c_uint = 0x02;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventleconnectionupdatecomplete?language=objc)
pub const kBluetoothHCISubEventLEConnectionUpdateComplete: c_uint = 0x03;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventlereadremoteusedfeaturescomplete?language=objc)
pub const kBluetoothHCISubEventLEReadRemoteUsedFeaturesComplete: c_uint = 0x04;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventlelongtermkeyrequest?language=objc)
pub const kBluetoothHCISubEventLELongTermKeyRequest: c_uint = 0x05;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventleremoteconnectionparameterrequest?language=objc)
pub const kBluetoothHCISubEventLERemoteConnectionParameterRequest: c_uint = 0x06;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventledatalengthchange?language=objc)
pub const kBluetoothHCISubEventLEDataLengthChange: c_uint = 0x07;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventlereadlocalp256publickeycomplete?language=objc)
pub const kBluetoothHCISubEventLEReadLocalP256PublicKeyComplete: c_uint = 0x08;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventlegeneratedhkeycomplete?language=objc)
pub const kBluetoothHCISubEventLEGenerateDHKeyComplete: c_uint = 0x09;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventleenhancedconnectioncomplete?language=objc)
pub const kBluetoothHCISubEventLEEnhancedConnectionComplete: c_uint = 0x0A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventledirectadvertisingreport?language=objc)
pub const kBluetoothHCISubEventLEDirectAdvertisingReport: c_uint = 0x0B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventlephyupdatecomplete?language=objc)
pub const kBluetoothHCISubEventLEPhyUpdateComplete: c_uint = 0x0C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventleextendedadvertising?language=objc)
pub const kBluetoothHCISubEventLEExtendedAdvertising: c_uint = 0x0D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventleperiodicadvertisingsyncestablished?language=objc)
pub const kBluetoothHCISubEventLEPeriodicAdvertisingSyncEstablished: c_uint = 0x0E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventleperiodicadvertisingreport?language=objc)
pub const kBluetoothHCISubEventLEPeriodicAdvertisingReport: c_uint = 0x0F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventleperiodicadvertisingsynclost?language=objc)
pub const kBluetoothHCISubEventLEPeriodicAdvertisingSyncLost: c_uint = 0x10;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventlescantimeout?language=objc)
pub const kBluetoothHCISubEventLEScanTimeout: c_uint = 0x11;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventleadvertisingsetterminated?language=objc)
pub const kBluetoothHCISubEventLEAdvertisingSetTerminated: c_uint = 0x12;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventlescanrequestreceived?language=objc)
pub const kBluetoothHCISubEventLEScanRequestReceived: c_uint = 0x13;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcisubeventlechannelselectionalgorithm?language=objc)
pub const kBluetoothHCISubEventLEChannelSelectionAlgorithm: c_uint = 0x14;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventphysicallinkcomplete?language=objc)
pub const kBluetoothHCIEventPhysicalLinkComplete: c_uint = 0x40;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventchannelselected?language=objc)
pub const kBluetoothHCIEventChannelSelected: c_uint = 0x41;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventdisconnectionphysicallinkcomplete?language=objc)
pub const kBluetoothHCIEventDisconnectionPhysicalLinkComplete: c_uint = 0x42;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventphysicallinklossearlywarning?language=objc)
pub const kBluetoothHCIEventPhysicalLinkLossEarlyWarning: c_uint = 0x43;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventphysicallinkrecovery?language=objc)
pub const kBluetoothHCIEventPhysicalLinkRecovery: c_uint = 0x44;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventlogicallinkcomplete?language=objc)
pub const kBluetoothHCIEventLogicalLinkComplete: c_uint = 0x45;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventdisconnectionlogicallinkcomplete?language=objc)
pub const kBluetoothHCIEventDisconnectionLogicalLinkComplete: c_uint = 0x46;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventflowspecmodifycomplete?language=objc)
pub const kBluetoothHCIEventFlowSpecModifyComplete: c_uint = 0x47;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventnumberofcompleteddatablocks?language=objc)
pub const kBluetoothHCIEventNumberOfCompletedDataBlocks: c_uint = 0x48;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventshortrangemodechangecomplete?language=objc)
pub const kBluetoothHCIEventShortRangeModeChangeComplete: c_uint = 0x4C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventampstatuschange?language=objc)
pub const kBluetoothHCIEventAMPStatusChange: c_uint = 0x4D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventampstarttest?language=objc)
pub const kBluetoothHCIEventAMPStartTest: c_uint = 0x49;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventamptestend?language=objc)
pub const kBluetoothHCIEventAMPTestEnd: c_uint = 0x4A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventampreceiverreport?language=objc)
pub const kBluetoothHCIEventAMPReceiverReport: c_uint = 0x4B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventlogotesting?language=objc)
pub const kBluetoothHCIEventLogoTesting: c_uint = 0xFE;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventvendorspecific?language=objc)
pub const kBluetoothHCIEventVendorSpecific: c_uint = 0xFF;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventmask?language=objc)
pub type BluetoothHCIEventMask = u64;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmasknone?language=objc)
pub const kBluetoothHCIEventMaskNone: c_uint = 0x00000000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskinquirycomplete?language=objc)
pub const kBluetoothHCIEventMaskInquiryComplete: c_uint = 0x00000001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskinquiryresult?language=objc)
pub const kBluetoothHCIEventMaskInquiryResult: c_uint = 0x00000002;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskconnectioncomplete?language=objc)
pub const kBluetoothHCIEventMaskConnectionComplete: c_uint = 0x00000004;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskconnectionrequest?language=objc)
pub const kBluetoothHCIEventMaskConnectionRequest: c_uint = 0x00000008;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskdisconnectioncomplete?language=objc)
pub const kBluetoothHCIEventMaskDisconnectionComplete: c_uint = 0x00000010;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskauthenticationcomplete?language=objc)
pub const kBluetoothHCIEventMaskAuthenticationComplete: c_uint = 0x00000020;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskremotenamerequestcomplete?language=objc)
pub const kBluetoothHCIEventMaskRemoteNameRequestComplete: c_uint = 0x00000040;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskencryptionchange?language=objc)
pub const kBluetoothHCIEventMaskEncryptionChange: c_uint = 0x00000080;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskchangeconnectionlinkkeycomplete?language=objc)
pub const kBluetoothHCIEventMaskChangeConnectionLinkKeyComplete: c_uint = 0x00000100;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskmasterlinkkeycomplete?language=objc)
pub const kBluetoothHCIEventMaskMasterLinkKeyComplete: c_uint = 0x00000200;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskreadremotesupportedfeaturescomplete?language=objc)
pub const kBluetoothHCIEventMaskReadRemoteSupportedFeaturesComplete: c_uint = 0x00000400;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskreadremoteversioninformationcomplete?language=objc)
pub const kBluetoothHCIEventMaskReadRemoteVersionInformationComplete: c_uint = 0x00000800;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskqossetupcomplete?language=objc)
pub const kBluetoothHCIEventMaskQoSSetupComplete: c_uint = 0x00001000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskcommandcomplete?language=objc)
pub const kBluetoothHCIEventMaskCommandComplete: c_uint = 0x00002000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskcommandstatus?language=objc)
pub const kBluetoothHCIEventMaskCommandStatus: c_uint = 0x00004000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskhardwareerror?language=objc)
pub const kBluetoothHCIEventMaskHardwareError: c_uint = 0x00008000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskflushoccurred?language=objc)
pub const kBluetoothHCIEventMaskFlushOccurred: c_uint = 0x00010000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskrolechange?language=objc)
pub const kBluetoothHCIEventMaskRoleChange: c_uint = 0x00020000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmasknumberofcompletedpackets?language=objc)
pub const kBluetoothHCIEventMaskNumberOfCompletedPackets: c_uint = 0x00040000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskmodechange?language=objc)
pub const kBluetoothHCIEventMaskModeChange: c_uint = 0x00080000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskreturnlinkkeys?language=objc)
pub const kBluetoothHCIEventMaskReturnLinkKeys: c_uint = 0x00100000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskpincoderequest?language=objc)
pub const kBluetoothHCIEventMaskPINCodeRequest: c_uint = 0x00200000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmasklinkkeyrequest?language=objc)
pub const kBluetoothHCIEventMaskLinkKeyRequest: c_uint = 0x00400000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmasklinkkeynotification?language=objc)
pub const kBluetoothHCIEventMaskLinkKeyNotification: c_uint = 0x00800000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskloopbackcommand?language=objc)
pub const kBluetoothHCIEventMaskLoopbackCommand: c_uint = 0x01000000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskdatabufferoverflow?language=objc)
pub const kBluetoothHCIEventMaskDataBufferOverflow: c_uint = 0x02000000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskmaxslotschange?language=objc)
pub const kBluetoothHCIEventMaskMaxSlotsChange: c_uint = 0x04000000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskreadclockoffsetcomplete?language=objc)
pub const kBluetoothHCIEventMaskReadClockOffsetComplete: c_uint = 0x08000000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskconnectionpackettypechanged?language=objc)
pub const kBluetoothHCIEventMaskConnectionPacketTypeChanged: c_uint = 0x10000000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskqosviolation?language=objc)
pub const kBluetoothHCIEventMaskQoSViolation: c_uint = 0x20000000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskpagescanmodechange?language=objc)
pub const kBluetoothHCIEventMaskPageScanModeChange: c_uint = 0x40000000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskpagescanrepetitionmodechange?language=objc)
pub const kBluetoothHCIEventMaskPageScanRepetitionModeChange: c_uint = 0x80000000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskall?language=objc)
pub const kBluetoothHCIEventMaskAll: c_uint = 0xFFFFFFFF;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcieventmaskdefault?language=objc)
pub const kBluetoothHCIEventMaskDefault: c_uint = kBluetoothHCIEventMaskAll;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventconnectioncompleteresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventConnectionCompleteResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub deviceAddress: BluetoothDeviceAddress,
    pub linkType: BluetoothLinkType,
    pub encryptionMode: BluetoothHCIEncryptionMode,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventConnectionCompleteResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventConnectionCompleteResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothLinkType>::ENCODING,
            <BluetoothHCIEncryptionMode>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventConnectionCompleteResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventleconnectioncompleteresults?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventLEConnectionCompleteResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub role: u8,
    pub peerAddressType: u8,
    pub peerAddress: BluetoothDeviceAddress,
    pub connInterval: u16,
    pub connLatency: u16,
    pub supervisionTimeout: u16,
    pub masterClockAccuracy: u8,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventLEConnectionCompleteResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventLEConnectionCompleteResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <BluetoothDeviceAddress>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u8>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventLEConnectionCompleteResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventleenhancedconnectioncompleteresults?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventLEEnhancedConnectionCompleteResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub role: u8,
    pub peerAddressType: u8,
    pub peerAddress: BluetoothDeviceAddress,
    pub localResolvablePrivateAddress: BluetoothDeviceAddress,
    pub peerResolvablePrivateAddress: BluetoothDeviceAddress,
    pub connInterval: u16,
    pub connLatency: u16,
    pub supervisionTimeout: u16,
    pub masterClockAccuracy: u8,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventLEEnhancedConnectionCompleteResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventLEEnhancedConnectionCompleteResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <u8>::ENCODING,
            <u8>::ENCODING,
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothDeviceAddress>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u8>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventLEEnhancedConnectionCompleteResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventleconnectionupdatecompleteresults?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventLEConnectionUpdateCompleteResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub connInterval: u16,
    pub connLatency: u16,
    pub supervisionTimeout: u16,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventLEConnectionUpdateCompleteResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventLEConnectionUpdateCompleteResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventLEConnectionUpdateCompleteResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventlereadremoteusedfeaturescompleteresults?language=objc)
#[repr(C, packed)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventLEReadRemoteUsedFeaturesCompleteResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub usedFeatures: BluetoothHCISupportedFeatures,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventLEReadRemoteUsedFeaturesCompleteResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventLEReadRemoteUsedFeaturesCompleteResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothHCISupportedFeatures>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventLEReadRemoteUsedFeaturesCompleteResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventdisconnectioncompleteresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventDisconnectionCompleteResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub reason: BluetoothReasonCode,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventDisconnectionCompleteResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventDisconnectionCompleteResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothReasonCode>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventDisconnectionCompleteResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventreadsupportedfeaturesresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventReadSupportedFeaturesResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub supportedFeatures: BluetoothHCISupportedFeatures,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventReadSupportedFeaturesResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventReadSupportedFeaturesResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothHCISupportedFeatures>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventReadSupportedFeaturesResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventreadextendedfeaturesresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventReadExtendedFeaturesResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub supportedFeaturesInfo: BluetoothHCIExtendedFeaturesInfo,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventReadExtendedFeaturesResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventReadExtendedFeaturesResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothHCIExtendedFeaturesInfo>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventReadExtendedFeaturesResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventreadremoteversioninforesults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventReadRemoteVersionInfoResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub lmpVersion: BluetoothLMPVersion,
    pub manufacturerName: BluetoothManufacturerName,
    pub lmpSubversion: BluetoothLMPSubversion,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventReadRemoteVersionInfoResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventReadRemoteVersionInfoResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothLMPVersion>::ENCODING,
            <BluetoothManufacturerName>::ENCODING,
            <BluetoothLMPSubversion>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventReadRemoteVersionInfoResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventremotenamerequestresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventRemoteNameRequestResults {
    pub deviceAddress: BluetoothDeviceAddress,
    pub deviceName: BluetoothDeviceName,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventRemoteNameRequestResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventRemoteNameRequestResults",
        &[
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothDeviceName>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventRemoteNameRequestResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventreadclockoffsetresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventReadClockOffsetResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub clockOffset: BluetoothClockOffset,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventReadClockOffsetResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventReadClockOffsetResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothClockOffset>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventReadClockOffsetResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventconnectionrequestresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventConnectionRequestResults {
    pub deviceAddress: BluetoothDeviceAddress,
    pub classOfDevice: BluetoothClassOfDevice,
    pub linkType: BluetoothLinkType,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventConnectionRequestResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventConnectionRequestResults",
        &[
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothClassOfDevice>::ENCODING,
            <BluetoothLinkType>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventConnectionRequestResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventlinkkeynotificationresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventLinkKeyNotificationResults {
    pub deviceAddress: BluetoothDeviceAddress,
    pub linkKey: BluetoothKey,
    pub keyType: BluetoothKeyType,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventLinkKeyNotificationResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventLinkKeyNotificationResults",
        &[
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothKey>::ENCODING,
            <BluetoothKeyType>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventLinkKeyNotificationResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventmaxslotschangeresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventMaxSlotsChangeResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub maxSlots: BluetoothMaxSlots,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventMaxSlotsChangeResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventMaxSlotsChangeResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothMaxSlots>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventMaxSlotsChangeResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventmodechangeresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventModeChangeResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub mode: BluetoothHCIConnectionMode,
    pub modeInterval: BluetoothHCIModeInterval,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventModeChangeResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventModeChangeResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothHCIConnectionMode>::ENCODING,
            <BluetoothHCIModeInterval>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventModeChangeResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventreturnlinkkeysresults_linkkeys?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventReturnLinkKeysResults_linkKeys {
    pub deviceAddress: BluetoothDeviceAddress,
    pub linkKey: BluetoothKey,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventReturnLinkKeysResults_linkKeys {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[<BluetoothDeviceAddress>::ENCODING, <BluetoothKey>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventReturnLinkKeysResults_linkKeys {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventreturnlinkkeysresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventReturnLinkKeysResults {
    pub numLinkKeys: u8,
    pub linkKeys: [BluetoothHCIEventReturnLinkKeysResults_linkKeys; 1],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventReturnLinkKeysResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventReturnLinkKeysResults",
        &[
            <u8>::ENCODING,
            <[BluetoothHCIEventReturnLinkKeysResults_linkKeys; 1]>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventReturnLinkKeysResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventauthenticationcompleteresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventAuthenticationCompleteResults {
    pub connectionHandle: BluetoothConnectionHandle,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventAuthenticationCompleteResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventAuthenticationCompleteResults",
        &[<BluetoothConnectionHandle>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventAuthenticationCompleteResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventencryptionchangeresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventEncryptionChangeResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub enable: BluetoothEncryptionEnable,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventEncryptionChangeResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventEncryptionChangeResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothEncryptionEnable>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventEncryptionChangeResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventchangeconnectionlinkkeycompleteresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventChangeConnectionLinkKeyCompleteResults {
    pub connectionHandle: BluetoothConnectionHandle,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventChangeConnectionLinkKeyCompleteResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventChangeConnectionLinkKeyCompleteResults",
        &[<BluetoothConnectionHandle>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventChangeConnectionLinkKeyCompleteResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventmasterlinkkeycompleteresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventMasterLinkKeyCompleteResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub keyFlag: BluetoothKeyFlag,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventMasterLinkKeyCompleteResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventMasterLinkKeyCompleteResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothKeyFlag>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventMasterLinkKeyCompleteResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventqossetupcompleteresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventQoSSetupCompleteResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub setupParams: BluetoothHCIQualityOfServiceSetupParams,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventQoSSetupCompleteResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventQoSSetupCompleteResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothHCIQualityOfServiceSetupParams>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventQoSSetupCompleteResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventhardwareerrorresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventHardwareErrorResults {
    pub error: BluetoothHCIStatus,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventHardwareErrorResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventHardwareErrorResults",
        &[<BluetoothHCIStatus>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventHardwareErrorResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventflushoccurredresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventFlushOccurredResults {
    pub connectionHandle: BluetoothConnectionHandle,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventFlushOccurredResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventFlushOccurredResults",
        &[<BluetoothConnectionHandle>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventFlushOccurredResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventrolechangeresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventRoleChangeResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub deviceAddress: BluetoothDeviceAddress,
    pub role: BluetoothRole,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventRoleChangeResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventRoleChangeResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothRole>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventRoleChangeResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventdatabufferoverflowresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventDataBufferOverflowResults {
    pub linkType: BluetoothLinkType,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventDataBufferOverflowResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventDataBufferOverflowResults",
        &[<BluetoothLinkType>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventDataBufferOverflowResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventconnectionpackettyperesults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventConnectionPacketTypeResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub packetType: BluetoothPacketType,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventConnectionPacketTypeResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventConnectionPacketTypeResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothPacketType>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventConnectionPacketTypeResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventreadremotesupportedfeaturesresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventReadRemoteSupportedFeaturesResults {
    pub error: BluetoothHCIStatus,
    pub connectionHandle: BluetoothConnectionHandle,
    pub lmpFeatures: BluetoothHCISupportedFeatures,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventReadRemoteSupportedFeaturesResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventReadRemoteSupportedFeaturesResults",
        &[
            <BluetoothHCIStatus>::ENCODING,
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothHCISupportedFeatures>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventReadRemoteSupportedFeaturesResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventreadremoteextendedfeaturesresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventReadRemoteExtendedFeaturesResults {
    pub error: BluetoothHCIStatus,
    pub connectionHandle: BluetoothConnectionHandle,
    pub page: BluetoothHCIPageNumber,
    pub maxPage: BluetoothHCIPageNumber,
    pub lmpFeatures: BluetoothHCISupportedFeatures,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventReadRemoteExtendedFeaturesResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventReadRemoteExtendedFeaturesResults",
        &[
            <BluetoothHCIStatus>::ENCODING,
            <BluetoothConnectionHandle>::ENCODING,
            <BluetoothHCIPageNumber>::ENCODING,
            <BluetoothHCIPageNumber>::ENCODING,
            <BluetoothHCISupportedFeatures>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventReadRemoteExtendedFeaturesResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventqosviolationresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventQoSViolationResults {
    pub connectionHandle: BluetoothConnectionHandle,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventQoSViolationResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventQoSViolationResults",
        &[<BluetoothConnectionHandle>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventQoSViolationResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventpagescanmodechangeresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventPageScanModeChangeResults {
    pub deviceAddress: BluetoothDeviceAddress,
    pub pageScanMode: BluetoothPageScanMode,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventPageScanModeChangeResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventPageScanModeChangeResults",
        &[
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothPageScanMode>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventPageScanModeChangeResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventpagescanrepetitionmodechangeresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventPageScanRepetitionModeChangeResults {
    pub deviceAddress: BluetoothDeviceAddress,
    pub pageScanRepetitionMode: BluetoothPageScanRepetitionMode,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventPageScanRepetitionModeChangeResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventPageScanRepetitionModeChangeResults",
        &[
            <BluetoothDeviceAddress>::ENCODING,
            <BluetoothPageScanRepetitionMode>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventPageScanRepetitionModeChangeResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventvendorspecificresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventVendorSpecificResults {
    pub length: u8,
    pub data: [u8; 255],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventVendorSpecificResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventVendorSpecificResults",
        &[<u8>::ENCODING, <[u8; 255]>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventVendorSpecificResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventencryptionkeyrefreshcompleteresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventEncryptionKeyRefreshCompleteResults {
    pub connectionHandle: BluetoothConnectionHandle,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventEncryptionKeyRefreshCompleteResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventEncryptionKeyRefreshCompleteResults",
        &[<BluetoothConnectionHandle>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventEncryptionKeyRefreshCompleteResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventsniffsubratingresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventSniffSubratingResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub maxTransmitLatency: u16,
    pub maxReceiveLatency: u16,
    pub minRemoteTimeout: u16,
    pub minLocalTimeout: u16,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventSniffSubratingResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventSniffSubratingResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
            <u16>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventSniffSubratingResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventlemetaresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventLEMetaResults {
    pub length: u8,
    pub data: [u8; 255],
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventLEMetaResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventLEMetaResults",
        &[<u8>::ENCODING, <[u8; 255]>::ENCODING],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventLEMetaResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcieventlelongtermkeyrequestresults?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIEventLELongTermKeyRequestResults {
    pub connectionHandle: BluetoothConnectionHandle,
    pub randomNumber: [u8; 8],
    pub ediv: u16,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIEventLELongTermKeyRequestResults {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIEventLELongTermKeyRequestResults",
        &[
            <BluetoothConnectionHandle>::ENCODING,
            <[u8; 8]>::ENCODING,
            <u16>::ENCODING,
        ],
    );
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIEventLELongTermKeyRequestResults {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcirequestcallbackinfo?language=objc)
#[cfg(feature = "libc")]
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct BluetoothHCIRequestCallbackInfo {
    pub userCallback: libc::mach_vm_address_t,
    pub userRefCon: libc::mach_vm_address_t,
    pub internalRefCon: libc::mach_vm_address_t,
    pub asyncIDRefCon: libc::mach_vm_address_t,
    pub reserved: libc::mach_vm_address_t,
}

#[cfg(all(feature = "libc", feature = "objc2"))]
unsafe impl Encode for BluetoothHCIRequestCallbackInfo {
    const ENCODING: Encoding = Encoding::Struct(
        "BluetoothHCIRequestCallbackInfo",
        &[
            <libc::mach_vm_address_t>::ENCODING,
            <libc::mach_vm_address_t>::ENCODING,
            <libc::mach_vm_address_t>::ENCODING,
            <libc::mach_vm_address_t>::ENCODING,
            <libc::mach_vm_address_t>::ENCODING,
        ],
    );
}

#[cfg(all(feature = "libc", feature = "objc2"))]
unsafe impl RefEncode for BluetoothHCIRequestCallbackInfo {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorsuccess?language=objc)
pub const kBluetoothHCIErrorSuccess: c_uint = 0x00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorunknownhcicommand?language=objc)
pub const kBluetoothHCIErrorUnknownHCICommand: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrornoconnection?language=objc)
pub const kBluetoothHCIErrorNoConnection: c_uint = 0x02;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorhardwarefailure?language=objc)
pub const kBluetoothHCIErrorHardwareFailure: c_uint = 0x03;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorpagetimeout?language=objc)
pub const kBluetoothHCIErrorPageTimeout: c_uint = 0x04;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorauthenticationfailure?language=objc)
pub const kBluetoothHCIErrorAuthenticationFailure: c_uint = 0x05;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorkeymissing?language=objc)
pub const kBluetoothHCIErrorKeyMissing: c_uint = 0x06;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrormemoryfull?language=objc)
pub const kBluetoothHCIErrorMemoryFull: c_uint = 0x07;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorconnectiontimeout?language=objc)
pub const kBluetoothHCIErrorConnectionTimeout: c_uint = 0x08;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrormaxnumberofconnections?language=objc)
pub const kBluetoothHCIErrorMaxNumberOfConnections: c_uint = 0x09;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrormaxnumberofscoconnectionstoadevice?language=objc)
pub const kBluetoothHCIErrorMaxNumberOfSCOConnectionsToADevice: c_uint = 0x0A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierroraclconnectionalreadyexists?language=objc)
pub const kBluetoothHCIErrorACLConnectionAlreadyExists: c_uint = 0x0B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorcommanddisallowed?language=objc)
pub const kBluetoothHCIErrorCommandDisallowed: c_uint = 0x0C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorhostrejectedlimitedresources?language=objc)
pub const kBluetoothHCIErrorHostRejectedLimitedResources: c_uint = 0x0D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorhostrejectedsecurityreasons?language=objc)
pub const kBluetoothHCIErrorHostRejectedSecurityReasons: c_uint = 0x0E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorhostrejectedremotedeviceispersonal?language=objc)
pub const kBluetoothHCIErrorHostRejectedRemoteDeviceIsPersonal: c_uint = 0x0F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorhosttimeout?language=objc)
pub const kBluetoothHCIErrorHostTimeout: c_uint = 0x10;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorunsupportedfeatureorparametervalue?language=objc)
pub const kBluetoothHCIErrorUnsupportedFeatureOrParameterValue: c_uint = 0x11;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorinvalidhcicommandparameters?language=objc)
pub const kBluetoothHCIErrorInvalidHCICommandParameters: c_uint = 0x12;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorotherendterminatedconnectionuserended?language=objc)
pub const kBluetoothHCIErrorOtherEndTerminatedConnectionUserEnded: c_uint = 0x13;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorotherendterminatedconnectionlowresources?language=objc)
pub const kBluetoothHCIErrorOtherEndTerminatedConnectionLowResources: c_uint = 0x14;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorotherendterminatedconnectionabouttopoweroff?language=objc)
pub const kBluetoothHCIErrorOtherEndTerminatedConnectionAboutToPowerOff: c_uint = 0x15;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorconnectionterminatedbylocalhost?language=objc)
pub const kBluetoothHCIErrorConnectionTerminatedByLocalHost: c_uint = 0x16;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorrepeatedattempts?language=objc)
pub const kBluetoothHCIErrorRepeatedAttempts: c_uint = 0x17;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorpairingnotallowed?language=objc)
pub const kBluetoothHCIErrorPairingNotAllowed: c_uint = 0x18;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorunknownlmppdu?language=objc)
pub const kBluetoothHCIErrorUnknownLMPPDU: c_uint = 0x19;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorunsupportedremotefeature?language=objc)
pub const kBluetoothHCIErrorUnsupportedRemoteFeature: c_uint = 0x1A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorscooffsetrejected?language=objc)
pub const kBluetoothHCIErrorSCOOffsetRejected: c_uint = 0x1B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorscointervalrejected?language=objc)
pub const kBluetoothHCIErrorSCOIntervalRejected: c_uint = 0x1C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorscoairmoderejected?language=objc)
pub const kBluetoothHCIErrorSCOAirModeRejected: c_uint = 0x1D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorinvalidlmpparameters?language=objc)
pub const kBluetoothHCIErrorInvalidLMPParameters: c_uint = 0x1E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorunspecifiederror?language=objc)
pub const kBluetoothHCIErrorUnspecifiedError: c_uint = 0x1F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorunsupportedlmpparametervalue?language=objc)
pub const kBluetoothHCIErrorUnsupportedLMPParameterValue: c_uint = 0x20;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorrolechangenotallowed?language=objc)
pub const kBluetoothHCIErrorRoleChangeNotAllowed: c_uint = 0x21;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorlmpresponsetimeout?language=objc)
pub const kBluetoothHCIErrorLMPResponseTimeout: c_uint = 0x22;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorlmperrortransactioncollision?language=objc)
pub const kBluetoothHCIErrorLMPErrorTransactionCollision: c_uint = 0x23;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorlmppdunotallowed?language=objc)
pub const kBluetoothHCIErrorLMPPDUNotAllowed: c_uint = 0x24;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorencryptionmodenotacceptable?language=objc)
pub const kBluetoothHCIErrorEncryptionModeNotAcceptable: c_uint = 0x25;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorunitkeyused?language=objc)
pub const kBluetoothHCIErrorUnitKeyUsed: c_uint = 0x26;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorqosnotsupported?language=objc)
pub const kBluetoothHCIErrorQoSNotSupported: c_uint = 0x27;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorinstantpassed?language=objc)
pub const kBluetoothHCIErrorInstantPassed: c_uint = 0x28;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorpairingwithunitkeynotsupported?language=objc)
pub const kBluetoothHCIErrorPairingWithUnitKeyNotSupported: c_uint = 0x29;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorhostrejectedunacceptabledeviceaddress?language=objc)
pub const kBluetoothHCIErrorHostRejectedUnacceptableDeviceAddress: c_uint = 0x0F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrordifferenttransactioncollision?language=objc)
pub const kBluetoothHCIErrorDifferentTransactionCollision: c_uint = 0x2A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorqosunacceptableparameter?language=objc)
pub const kBluetoothHCIErrorQoSUnacceptableParameter: c_uint = 0x2C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorqosrejected?language=objc)
pub const kBluetoothHCIErrorQoSRejected: c_uint = 0x2D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorchannelclassificationnotsupported?language=objc)
pub const kBluetoothHCIErrorChannelClassificationNotSupported: c_uint = 0x2E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorinsufficientsecurity?language=objc)
pub const kBluetoothHCIErrorInsufficientSecurity: c_uint = 0x2F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorparameteroutofmandatoryrange?language=objc)
pub const kBluetoothHCIErrorParameterOutOfMandatoryRange: c_uint = 0x30;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorroleswitchpending?language=objc)
pub const kBluetoothHCIErrorRoleSwitchPending: c_uint = 0x31;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorreservedslotviolation?language=objc)
pub const kBluetoothHCIErrorReservedSlotViolation: c_uint = 0x34;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorroleswitchfailed?language=objc)
pub const kBluetoothHCIErrorRoleSwitchFailed: c_uint = 0x35;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorextendedinquiryresponsetoolarge?language=objc)
pub const kBluetoothHCIErrorExtendedInquiryResponseTooLarge: c_uint = 0x36;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorsecuresimplepairingnotsupportedbyhost?language=objc)
pub const kBluetoothHCIErrorSecureSimplePairingNotSupportedByHost: c_uint = 0x37;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorhostbusypairing?language=objc)
pub const kBluetoothHCIErrorHostBusyPairing: c_uint = 0x38;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorconnectionrejectedduetonosuitablechannelfound?language=objc)
pub const kBluetoothHCIErrorConnectionRejectedDueToNoSuitableChannelFound: c_uint = 0x39;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorcontrollerbusy?language=objc)
pub const kBluetoothHCIErrorControllerBusy: c_uint = 0x3A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorunacceptableconnectioninterval?language=objc)
pub const kBluetoothHCIErrorUnacceptableConnectionInterval: c_uint = 0x3B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrordirectedadvertisingtimeout?language=objc)
pub const kBluetoothHCIErrorDirectedAdvertisingTimeout: c_uint = 0x3C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorconnectionterminatedduetomicfailure?language=objc)
pub const kBluetoothHCIErrorConnectionTerminatedDueToMICFailure: c_uint = 0x3D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorconnectionfailedtobeestablished?language=objc)
pub const kBluetoothHCIErrorConnectionFailedToBeEstablished: c_uint = 0x3E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrormacconnectionfailed?language=objc)
pub const kBluetoothHCIErrorMACConnectionFailed: c_uint = 0x3F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorcoarseclockadjustmentrejected?language=objc)
pub const kBluetoothHCIErrorCoarseClockAdjustmentRejected: c_uint = 0x40;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrormax?language=objc)
pub const kBluetoothHCIErrorMax: c_uint = 0x40;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothhcipowerstate?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothHCIPowerState(pub c_uint);
impl BluetoothHCIPowerState {
    #[doc(alias = "kBluetoothHCIPowerStateON")]
    pub const ON: Self = Self(0x01);
    #[doc(alias = "kBluetoothHCIPowerStateOFF")]
    pub const OFF: Self = Self(0x00);
    #[doc(alias = "kBluetoothHCIPowerStateUnintialized")]
    pub const Unintialized: Self = Self(0xFF);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothHCIPowerState {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothHCIPowerState {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcierrorpowerisoff?language=objc)
pub const kBluetoothHCIErrorPowerIsOFF: c_uint = kBluetoothHCIErrorMax + 1;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcitransportusbclasscode?language=objc)
pub const kBluetoothHCITransportUSBClassCode: c_uint = 0xE0;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcitransportusbsubclasscode?language=objc)
pub const kBluetoothHCITransportUSBSubClassCode: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothhcitransportusbprotocolcode?language=objc)
pub const kBluetoothHCITransportUSBProtocolCode: c_uint = 0x01;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcieventidreserved?language=objc)
pub const kBluetoothL2CAPTCIEventIDReserved: c_uint = 0x00;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcieventidl2ca_connectind?language=objc)
pub const kBluetoothL2CAPTCIEventIDL2CA_ConnectInd: c_uint = 0x01;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcieventidl2ca_configind?language=objc)
pub const kBluetoothL2CAPTCIEventIDL2CA_ConfigInd: c_uint = 0x02;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcieventidl2ca_disconnectind?language=objc)
pub const kBluetoothL2CAPTCIEventIDL2CA_DisconnectInd: c_uint = 0x03;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcieventidl2ca_qosviolationind?language=objc)
pub const kBluetoothL2CAPTCIEventIDL2CA_QoSViolationInd: c_uint = 0x04;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcieventidl2ca_timeoutind?language=objc)
pub const kBluetoothL2CAPTCIEventIDL2CA_TimeOutInd: c_uint = 0x05;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandreserved?language=objc)
pub const kBluetoothL2CAPTCICommandReserved: c_uint = 0x0000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_connectreq?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_ConnectReq: c_uint = 0x0001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_disconnectreq?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_DisconnectReq: c_uint = 0x0002;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_configreq?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_ConfigReq: c_uint = 0x0003;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_disableclt?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_DisableCLT: c_uint = 0x0004;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_enableclt?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_EnableCLT: c_uint = 0x0005;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_groupcreate?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_GroupCreate: c_uint = 0x0006;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_groupclose?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_GroupClose: c_uint = 0x0007;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_groupaddmember?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_GroupAddMember: c_uint = 0x0008;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_groupremovemember?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_GroupRemoveMember: c_uint = 0x0009;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_groupmembership?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_GroupMembership: c_uint = 0x000A;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_writedata?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_WriteData: c_uint = 0x000B;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_readdata?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_ReadData: c_uint = 0x000C;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_ping?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_Ping: c_uint = 0x000D;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_getinfo?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_GetInfo: c_uint = 0x000E;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_reserved1?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_Reserved1: c_uint = 0x000F;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_reserved2?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_Reserved2: c_uint = 0x0010;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_connectresp?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_ConnectResp: c_uint = 0x0011;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_disconnectresp?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_DisconnectResp: c_uint = 0x0012;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothl2captcicommandl2ca_configresp?language=objc)
pub const kBluetoothL2CAPTCICommandL2CA_ConfigResp: c_uint = 0x0013;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothrfcommchannelid?language=objc)
pub type BluetoothRFCOMMChannelID = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothrfcommmtu?language=objc)
pub type BluetoothRFCOMMMTU = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothrfcommparitytype?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothRFCOMMParityType(pub c_uint);
impl BluetoothRFCOMMParityType {
    #[doc(alias = "kBluetoothRFCOMMParityTypeNoParity")]
    pub const NoParity: Self = Self(0);
    #[doc(alias = "kBluetoothRFCOMMParityTypeOddParity")]
    pub const OddParity: Self = Self(1);
    #[doc(alias = "kBluetoothRFCOMMParityTypeEvenParity")]
    pub const EvenParity: Self = Self(2);
    #[doc(alias = "kBluetoothRFCOMMParityTypeMaxParity")]
    pub const MaxParity: Self = Self(3);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothRFCOMMParityType {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothRFCOMMParityType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothrfcommlinestatus?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothRFCOMMLineStatus(pub c_uint);
impl BluetoothRFCOMMLineStatus {
    #[doc(alias = "BluetoothRFCOMMLineStatusNoError")]
    pub const NoError: Self = Self(0);
    #[doc(alias = "BluetoothRFCOMMLineStatusOverrunError")]
    pub const OverrunError: Self = Self(1);
    #[doc(alias = "BluetoothRFCOMMLineStatusParityError")]
    pub const ParityError: Self = Self(2);
    #[doc(alias = "BluetoothRFCOMMLineStatusFramingError")]
    pub const FramingError: Self = Self(3);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothRFCOMMLineStatus {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothRFCOMMLineStatus {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothsdppduid?language=objc)
pub type BluetoothSDPPDUID = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdppduidreserved?language=objc)
pub const kBluetoothSDPPDUIDReserved: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdppduiderrorresponse?language=objc)
pub const kBluetoothSDPPDUIDErrorResponse: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdppduidservicesearchrequest?language=objc)
pub const kBluetoothSDPPDUIDServiceSearchRequest: c_uint = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdppduidservicesearchresponse?language=objc)
pub const kBluetoothSDPPDUIDServiceSearchResponse: c_uint = 3;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdppduidserviceattributerequest?language=objc)
pub const kBluetoothSDPPDUIDServiceAttributeRequest: c_uint = 4;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdppduidserviceattributeresponse?language=objc)
pub const kBluetoothSDPPDUIDServiceAttributeResponse: c_uint = 5;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdppduidservicesearchattributerequest?language=objc)
pub const kBluetoothSDPPDUIDServiceSearchAttributeRequest: c_uint = 6;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdppduidservicesearchattributeresponse?language=objc)
pub const kBluetoothSDPPDUIDServiceSearchAttributeResponse: c_uint = 7;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothsdperrorcode?language=objc)
pub type BluetoothSDPErrorCode = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdperrorcodesuccess?language=objc)
pub const kBluetoothSDPErrorCodeSuccess: c_uint = 0x0000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdperrorcodereserved?language=objc)
pub const kBluetoothSDPErrorCodeReserved: c_uint = 0x0000;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdperrorcodeinvalidsdpversion?language=objc)
pub const kBluetoothSDPErrorCodeInvalidSDPVersion: c_uint = 0x0001;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdperrorcodeinvalidservicerecordhandle?language=objc)
pub const kBluetoothSDPErrorCodeInvalidServiceRecordHandle: c_uint = 0x0002;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdperrorcodeinvalidrequestsyntax?language=objc)
pub const kBluetoothSDPErrorCodeInvalidRequestSyntax: c_uint = 0x0003;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdperrorcodeinvalidpdusize?language=objc)
pub const kBluetoothSDPErrorCodeInvalidPDUSize: c_uint = 0x0004;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdperrorcodeinvalidcontinuationstate?language=objc)
pub const kBluetoothSDPErrorCodeInvalidContinuationState: c_uint = 0x0005;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdperrorcodeinsufficientresources?language=objc)
pub const kBluetoothSDPErrorCodeInsufficientResources: c_uint = 0x0006;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdperrorcodereservedstart?language=objc)
pub const kBluetoothSDPErrorCodeReservedStart: c_uint = 0x0007;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdperrorcodereservedend?language=objc)
pub const kBluetoothSDPErrorCodeReservedEnd: c_uint = 0xFFFF;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothsdptransactionid?language=objc)
pub type BluetoothSDPTransactionID = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothsdpservicerecordhandle?language=objc)
pub type BluetoothSDPServiceRecordHandle = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdpdataelementtypenil?language=objc)
pub const kBluetoothSDPDataElementTypeNil: c_uint = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdpdataelementtypeunsignedint?language=objc)
pub const kBluetoothSDPDataElementTypeUnsignedInt: c_uint = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdpdataelementtypesignedint?language=objc)
pub const kBluetoothSDPDataElementTypeSignedInt: c_uint = 2;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdpdataelementtypeuuid?language=objc)
pub const kBluetoothSDPDataElementTypeUUID: c_uint = 3;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdpdataelementtypestring?language=objc)
pub const kBluetoothSDPDataElementTypeString: c_uint = 4;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdpdataelementtypeboolean?language=objc)
pub const kBluetoothSDPDataElementTypeBoolean: c_uint = 5;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdpdataelementtypedataelementsequence?language=objc)
pub const kBluetoothSDPDataElementTypeDataElementSequence: c_uint = 6;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdpdataelementtypedataelementalternative?language=objc)
pub const kBluetoothSDPDataElementTypeDataElementAlternative: c_uint = 7;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdpdataelementtypeurl?language=objc)
pub const kBluetoothSDPDataElementTypeURL: c_uint = 8;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdpdataelementtypereservedstart?language=objc)
pub const kBluetoothSDPDataElementTypeReservedStart: c_uint = 9;
/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/kbluetoothsdpdataelementtypereservedend?language=objc)
pub const kBluetoothSDPDataElementTypeReservedEnd: c_uint = 31;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothsdpuuid16?language=objc)
pub type BluetoothSDPUUID16 = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothsdpuuid32?language=objc)
pub type BluetoothSDPUUID32 = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothsdpdataelementtypedescriptor?language=objc)
pub type BluetoothSDPDataElementTypeDescriptor = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothsdpdataelementsizedescriptor?language=objc)
pub type BluetoothSDPDataElementSizeDescriptor = u8;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothsdpserviceattributeid?language=objc)
pub type BluetoothSDPServiceAttributeID = u16;

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlescantype?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLEScanType(pub c_uint);
impl BluetoothLEScanType {
    #[doc(alias = "BluetoothLEScanTypePassive")]
    pub const Passive: Self = Self(0x00);
    #[doc(alias = "BluetoothLEScanTypeActive")]
    pub const Active: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLEScanType {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLEScanType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothleaddresstype?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLEAddressType(pub c_uint);
impl BluetoothLEAddressType {
    #[doc(alias = "BluetoothLEAddressTypePublic")]
    pub const Public: Self = Self(0x00);
    #[doc(alias = "BluetoothLEAddressTypeRandom")]
    pub const Random: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLEAddressType {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLEAddressType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlescanfilter?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLEScanFilter(pub c_uint);
impl BluetoothLEScanFilter {
    #[doc(alias = "BluetoothLEScanFilterNone")]
    pub const None: Self = Self(0x00);
    #[doc(alias = "BluetoothLEScanFilterSafelist")]
    pub const Safelist: Self = Self(0x01);
    #[doc(alias = "BluetoothLEScanFilterWhitelist")]
    pub const Whitelist: Self = Self(BluetoothLEScanFilter::Safelist.0);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLEScanFilter {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLEScanFilter {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlescan?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLEScan(pub c_uint);
impl BluetoothLEScan {
    #[doc(alias = "BluetoothLEScanDisable")]
    pub const Disable: Self = Self(0x00);
    #[doc(alias = "BluetoothLEScanEnable")]
    pub const Enable: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLEScan {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLEScan {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothleconnectioninterval?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLEConnectionInterval(pub c_uint);
impl BluetoothLEConnectionInterval {
    #[doc(alias = "BluetoothLEConnectionIntervalMin")]
    pub const Min: Self = Self(0x06);
    #[doc(alias = "BluetoothLEConnectionIntervalMax")]
    pub const Max: Self = Self(0x0C80);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLEConnectionInterval {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLEConnectionInterval {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothlescanduplicatefilter?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLEScanDuplicateFilter(pub c_uint);
impl BluetoothLEScanDuplicateFilter {
    #[doc(alias = "BluetoothLEScanDuplicateFilterDisable")]
    pub const Disable: Self = Self(0x00);
    #[doc(alias = "BluetoothLEScanDuplicateFilterEnable")]
    pub const Enable: Self = Self(0x01);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLEScanDuplicateFilter {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLEScanDuplicateFilter {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/iobluetooth/bluetoothleadvertisingtype?language=objc)
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct BluetoothLEAdvertisingType(pub c_uint);
impl BluetoothLEAdvertisingType {
    #[doc(alias = "BluetoothLEAdvertisingTypeConnectableUndirected")]
    pub const ConnectableUndirected: Self = Self(0x00);
    #[doc(alias = "BluetoothLEAdvertisingTypeConnectableDirected")]
    pub const ConnectableDirected: Self = Self(0x01);
    #[doc(alias = "BluetoothLEAdvertisingTypeDiscoverableUndirected")]
    pub const DiscoverableUndirected: Self = Self(0x02);
    #[doc(alias = "BluetoothLEAdvertisingTypeNonConnectableUndirected")]
    pub const NonConnectableUndirected: Self = Self(0x03);
    #[doc(alias = "BluetoothLEAdvertisingTypeScanResponse")]
    pub const ScanResponse: Self = Self(0x04);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for BluetoothLEAdvertisingType {
    const ENCODING: Encoding = c_uint::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for BluetoothLEAdvertisingType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}
