//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;
use objc2_local_authentication::*;

use crate::*;

extern_class!(
    /// Compact authentication view providing authentication similar to
    /// `LAContext`evaluatePolicy API.
    ///
    /// This view is non-textual, it displays only a compact icon hinting
    /// users to use Touch ID or Watch to authenticate. The reason for the
    /// authentication must be apparent from the surrounding UI to avoid confusion and
    /// security risks.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/localauthenticationembeddedui/laauthenticationview?language=objc)
    #[unsafe(super(NSView, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    pub struct LAAuthenticationView;
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAccessibility for LAAuthenticationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAccessibilityElementProtocol for LAAuthenticationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAnimatablePropertyContainer for LAAuthenticationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAppearanceCustomization for LAAuthenticationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSCoding for LAAuthenticationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSDraggingDestination for LAAuthenticationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSObjectProtocol for LAAuthenticationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSUserInterfaceItemIdentification for LAAuthenticationView {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl LAAuthenticationView {
    extern_methods!(
        #[unsafe(method(initWithFrame:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame_rect: NSRect) -> Retained<Self>;

        /// # Safety
        ///
        /// `coder` possibly has further requirements.
        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(this: Allocated<Self>, coder: &NSCoder) -> Retained<Self>;

        /// Creates a new view and pairs it with the specified authentication context.
        ///
        /// The authentication is controlled using the provided authentication
        /// context. When `evaluatePolicy` or `evaluateAccessControl` is called on this
        /// context, the UI will be presented using this view rather than using the standard
        /// authentication alert.
        /// Since the view is designed for authentication with Touch ID or Watch
        /// the only supported policies for calling `evaluatePolicy` on the context are
        /// - `LAPolicyDeviceOwnerAuthenticationWithBiometrics`
        /// - `LAPolicyDeviceOwnerAuthenticationWithCompanion`
        /// - `LAPolicyDeviceOwnerAuthenticationWitchBiometricsOrCompanion`
        /// - `LAPolicyDeviceOwnerAuthentication` (This one is supported just for convenience. If neither biometric nor watch authentication is available, the evaluation of the policy fails)
        ///
        /// Parameter `context`: `LAContext`instance to control the authentication.
        #[unsafe(method(initWithContext:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithContext(this: Allocated<Self>, context: &LAContext)
            -> Retained<Self>;

        /// Creates a new view and pairs it with the specified authentication context.
        ///
        /// The authentication is controlled using the provided authentication
        /// context. When `evaluatePolicy` or `evaluateAccessControl` is called on this
        /// context, the UI will be presented using this view rather than using the standard
        /// authentication alert.
        /// Since the view is designed for authentication with Touch ID or Watch
        /// the only supported policies for calling `evaluatePolicy` on the context are
        /// - `LAPolicyDeviceOwnerAuthenticationWithBiometrics`
        /// - `LAPolicyDeviceOwnerAuthenticationWithCompanion`
        /// - `LAPolicyDeviceOwnerAuthenticationWitchBiometricsOrCompanion`
        /// - `LAPolicyDeviceOwnerAuthentication` (This one is supported just for convenience. If neither biometric nor watch authentication is available, the evaluation of the policy fails)
        ///
        /// Parameter `context`: `LAContext`instance to control the authentication.
        ///
        /// Parameter `controlSize`: Preferred size of
        /// `LAAuthenticationView`provided using
        /// `NSControlSize`
        #[unsafe(method(initWithContext:controlSize:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithContext_controlSize(
            this: Allocated<Self>,
            context: &LAContext,
            control_size: NSControlSize,
        ) -> Retained<Self>;

        /// `LAContext`instance passed to the initializer.
        #[unsafe(method(context))]
        #[unsafe(method_family = none)]
        pub unsafe fn context(&self) -> Retained<LAContext>;

        /// `NSControlSize`instance passed to the initializer.
        #[unsafe(method(controlSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn controlSize(&self) -> NSControlSize;
    );
}

/// Methods declared on superclass `NSResponder`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl LAAuthenticationView {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl LAAuthenticationView {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}
