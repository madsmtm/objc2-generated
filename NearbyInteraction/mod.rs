// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::unportable_markdown)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "NearbyInteraction", kind = "framework")]
extern "C" {}

#[cfg(feature = "NIAlgorithmConvergenceStatusReason")]
#[path = "NIAlgorithmConvergenceStatusReason.rs"]
mod __NIAlgorithmConvergenceStatusReason;
#[cfg(feature = "NIConfiguration")]
#[path = "NIConfiguration.rs"]
mod __NIConfiguration;
#[cfg(feature = "NIDLTDOAMeasurement")]
#[path = "NIDLTDOAMeasurement.rs"]
mod __NIDLTDOAMeasurement;
#[cfg(feature = "NIDeviceCapability")]
#[path = "NIDeviceCapability.rs"]
mod __NIDeviceCapability;
#[cfg(feature = "NIError")]
#[path = "NIError.rs"]
mod __NIError;
#[cfg(feature = "NIExport")]
#[path = "NIExport.rs"]
mod __NIExport;
#[cfg(feature = "NINearbyObject")]
#[path = "NINearbyObject.rs"]
mod __NINearbyObject;
#[cfg(feature = "NISession")]
#[path = "NISession.rs"]
mod __NISession;

#[cfg(feature = "NIAlgorithmConvergenceStatusReason")]
pub use self::__NIAlgorithmConvergenceStatusReason::NIAlgorithmConvergenceStatusReason;
#[cfg(feature = "NIAlgorithmConvergenceStatusReason")]
pub use self::__NIAlgorithmConvergenceStatusReason::NIAlgorithmConvergenceStatusReasonDescription;
#[cfg(feature = "NIAlgorithmConvergenceStatusReason")]
pub use self::__NIAlgorithmConvergenceStatusReason::NIAlgorithmConvergenceStatusReasonInsufficientHorizontalSweep;
#[cfg(feature = "NIAlgorithmConvergenceStatusReason")]
pub use self::__NIAlgorithmConvergenceStatusReason::NIAlgorithmConvergenceStatusReasonInsufficientLighting;
#[cfg(feature = "NIAlgorithmConvergenceStatusReason")]
pub use self::__NIAlgorithmConvergenceStatusReason::NIAlgorithmConvergenceStatusReasonInsufficientMovement;
#[cfg(feature = "NIAlgorithmConvergenceStatusReason")]
pub use self::__NIAlgorithmConvergenceStatusReason::NIAlgorithmConvergenceStatusReasonInsufficientVerticalSweep;
#[cfg(feature = "NIConfiguration")]
pub use self::__NIConfiguration::NIConfiguration;
#[cfg(feature = "NIConfiguration")]
pub use self::__NIConfiguration::NIDLTDOAConfiguration;
#[cfg(feature = "NIConfiguration")]
pub use self::__NIConfiguration::NIDiscoveryToken;
#[cfg(feature = "NIConfiguration")]
pub use self::__NIConfiguration::NINearbyAccessoryConfiguration;
#[cfg(feature = "NIConfiguration")]
pub use self::__NIConfiguration::NINearbyPeerConfiguration;
#[cfg(feature = "NIDLTDOAMeasurement")]
pub use self::__NIDLTDOAMeasurement::NIDLTDOACoordinatesType;
#[cfg(feature = "NIDLTDOAMeasurement")]
pub use self::__NIDLTDOAMeasurement::NIDLTDOAMeasurement;
#[cfg(feature = "NIDLTDOAMeasurement")]
pub use self::__NIDLTDOAMeasurement::NIDLTDOAMeasurementType;
#[cfg(feature = "NIDeviceCapability")]
pub use self::__NIDeviceCapability::NIDeviceCapability;
#[cfg(feature = "NIError")]
pub use self::__NIError::NIErrorCode;
#[cfg(feature = "NIError")]
pub use self::__NIError::NIErrorDomain;
#[cfg(feature = "NINearbyObject")]
pub use self::__NINearbyObject::NINearbyObject;
#[cfg(feature = "NINearbyObject")]
pub use self::__NINearbyObject::NINearbyObjectAngleNotAvailable;
#[cfg(feature = "NINearbyObject")]
pub use self::__NINearbyObject::NINearbyObjectDistanceNotAvailable;
#[cfg(feature = "NINearbyObject")]
pub use self::__NINearbyObject::NINearbyObjectVerticalDirectionEstimate;
#[cfg(feature = "NISession")]
pub use self::__NISession::NIAlgorithmConvergence;
#[cfg(feature = "NISession")]
pub use self::__NISession::NIAlgorithmConvergenceStatus;
#[cfg(feature = "NISession")]
pub use self::__NISession::NINearbyObjectRemovalReason;
#[cfg(feature = "NISession")]
pub use self::__NISession::NISession;
#[cfg(feature = "NISession")]
pub use self::__NISession::NISessionDelegate;
