//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediatype?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MPMediaType(pub NSUInteger);
bitflags::bitflags! {
    impl MPMediaType: NSUInteger {
        #[doc(alias = "MPMediaTypeMusic")]
        const Music = 1<<0;
        #[doc(alias = "MPMediaTypePodcast")]
        const Podcast = 1<<1;
        #[doc(alias = "MPMediaTypeAudioBook")]
        const AudioBook = 1<<2;
        #[doc(alias = "MPMediaTypeAudioITunesU")]
        const AudioITunesU = 1<<3;
        #[doc(alias = "MPMediaTypeAnyAudio")]
        const AnyAudio = 0x00ff;
        #[doc(alias = "MPMediaTypeMovie")]
        const Movie = 1<<8;
        #[doc(alias = "MPMediaTypeTVShow")]
        const TVShow = 1<<9;
        #[doc(alias = "MPMediaTypeVideoPodcast")]
        const VideoPodcast = 1<<10;
        #[doc(alias = "MPMediaTypeMusicVideo")]
        const MusicVideo = 1<<11;
        #[doc(alias = "MPMediaTypeVideoITunesU")]
        const VideoITunesU = 1<<12;
        #[doc(alias = "MPMediaTypeHomeVideo")]
        const HomeVideo = 1<<13;
        #[doc(alias = "MPMediaTypeAnyVideo")]
        const AnyVideo = 0xff00;
        #[doc(alias = "MPMediaTypeAny")]
        const Any = !0;
    }
}

unsafe impl Encode for MPMediaType {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MPMediaType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertypersistentid?language=objc)
    pub static MPMediaItemPropertyPersistentID: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertymediatype?language=objc)
    pub static MPMediaItemPropertyMediaType: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertytitle?language=objc)
    pub static MPMediaItemPropertyTitle: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyalbumtitle?language=objc)
    pub static MPMediaItemPropertyAlbumTitle: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyalbumpersistentid?language=objc)
    pub static MPMediaItemPropertyAlbumPersistentID: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyartist?language=objc)
    pub static MPMediaItemPropertyArtist: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyartistpersistentid?language=objc)
    pub static MPMediaItemPropertyArtistPersistentID: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyalbumartist?language=objc)
    pub static MPMediaItemPropertyAlbumArtist: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyalbumartistpersistentid?language=objc)
    pub static MPMediaItemPropertyAlbumArtistPersistentID: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertygenre?language=objc)
    pub static MPMediaItemPropertyGenre: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertygenrepersistentid?language=objc)
    pub static MPMediaItemPropertyGenrePersistentID: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertycomposer?language=objc)
    pub static MPMediaItemPropertyComposer: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertycomposerpersistentid?language=objc)
    pub static MPMediaItemPropertyComposerPersistentID: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyplaybackduration?language=objc)
    pub static MPMediaItemPropertyPlaybackDuration: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyalbumtracknumber?language=objc)
    pub static MPMediaItemPropertyAlbumTrackNumber: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyalbumtrackcount?language=objc)
    pub static MPMediaItemPropertyAlbumTrackCount: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertydiscnumber?language=objc)
    pub static MPMediaItemPropertyDiscNumber: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertydisccount?language=objc)
    pub static MPMediaItemPropertyDiscCount: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyartwork?language=objc)
    pub static MPMediaItemPropertyArtwork: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyisexplicit?language=objc)
    pub static MPMediaItemPropertyIsExplicit: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertylyrics?language=objc)
    pub static MPMediaItemPropertyLyrics: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyiscompilation?language=objc)
    pub static MPMediaItemPropertyIsCompilation: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyreleasedate?language=objc)
    pub static MPMediaItemPropertyReleaseDate: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertybeatsperminute?language=objc)
    pub static MPMediaItemPropertyBeatsPerMinute: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertycomments?language=objc)
    pub static MPMediaItemPropertyComments: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyasseturl?language=objc)
    pub static MPMediaItemPropertyAssetURL: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyisclouditem?language=objc)
    pub static MPMediaItemPropertyIsCloudItem: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyhasprotectedasset?language=objc)
    pub static MPMediaItemPropertyHasProtectedAsset: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertypodcasttitle?language=objc)
    pub static MPMediaItemPropertyPodcastTitle: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertypodcastpersistentid?language=objc)
    pub static MPMediaItemPropertyPodcastPersistentID: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyplaycount?language=objc)
    pub static MPMediaItemPropertyPlayCount: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyskipcount?language=objc)
    pub static MPMediaItemPropertySkipCount: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyrating?language=objc)
    pub static MPMediaItemPropertyRating: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertylastplayeddate?language=objc)
    pub static MPMediaItemPropertyLastPlayedDate: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyusergrouping?language=objc)
    pub static MPMediaItemPropertyUserGrouping: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertybookmarktime?language=objc)
    pub static MPMediaItemPropertyBookmarkTime: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertydateadded?language=objc)
    pub static MPMediaItemPropertyDateAdded: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyplaybackstoreid?language=objc)
    pub static MPMediaItemPropertyPlaybackStoreID: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitempropertyispreorder?language=objc)
    pub static MPMediaItemPropertyIsPreorder: &'static NSString;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitem?language=objc)
    #[unsafe(super(MPMediaEntity, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MPMediaEntity")]
    pub struct MPMediaItem;
);

#[cfg(feature = "MPMediaEntity")]
extern_conformance!(
    unsafe impl NSCoding for MPMediaItem {}
);

#[cfg(feature = "MPMediaEntity")]
extern_conformance!(
    unsafe impl NSObjectProtocol for MPMediaItem {}
);

#[cfg(feature = "MPMediaEntity")]
extern_conformance!(
    unsafe impl NSSecureCoding for MPMediaItem {}
);

#[cfg(feature = "MPMediaEntity")]
impl MPMediaItem {
    extern_methods!(
        #[unsafe(method(persistentID))]
        #[unsafe(method_family = none)]
        pub unsafe fn persistentID(&self) -> MPMediaEntityPersistentID;

        #[unsafe(method(mediaType))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaType(&self) -> MPMediaType;

        #[unsafe(method(title))]
        #[unsafe(method_family = none)]
        pub unsafe fn title(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(albumTitle))]
        #[unsafe(method_family = none)]
        pub unsafe fn albumTitle(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(albumPersistentID))]
        #[unsafe(method_family = none)]
        pub unsafe fn albumPersistentID(&self) -> MPMediaEntityPersistentID;

        #[unsafe(method(artist))]
        #[unsafe(method_family = none)]
        pub unsafe fn artist(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(artistPersistentID))]
        #[unsafe(method_family = none)]
        pub unsafe fn artistPersistentID(&self) -> MPMediaEntityPersistentID;

        #[unsafe(method(albumArtist))]
        #[unsafe(method_family = none)]
        pub unsafe fn albumArtist(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(albumArtistPersistentID))]
        #[unsafe(method_family = none)]
        pub unsafe fn albumArtistPersistentID(&self) -> MPMediaEntityPersistentID;

        #[unsafe(method(genre))]
        #[unsafe(method_family = none)]
        pub unsafe fn genre(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(genrePersistentID))]
        #[unsafe(method_family = none)]
        pub unsafe fn genrePersistentID(&self) -> MPMediaEntityPersistentID;

        #[unsafe(method(composer))]
        #[unsafe(method_family = none)]
        pub unsafe fn composer(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(composerPersistentID))]
        #[unsafe(method_family = none)]
        pub unsafe fn composerPersistentID(&self) -> MPMediaEntityPersistentID;

        #[unsafe(method(playbackDuration))]
        #[unsafe(method_family = none)]
        pub unsafe fn playbackDuration(&self) -> NSTimeInterval;

        #[unsafe(method(albumTrackNumber))]
        #[unsafe(method_family = none)]
        pub unsafe fn albumTrackNumber(&self) -> NSUInteger;

        #[unsafe(method(albumTrackCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn albumTrackCount(&self) -> NSUInteger;

        #[unsafe(method(discNumber))]
        #[unsafe(method_family = none)]
        pub unsafe fn discNumber(&self) -> NSUInteger;

        #[unsafe(method(discCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn discCount(&self) -> NSUInteger;

        #[unsafe(method(artwork))]
        #[unsafe(method_family = none)]
        pub unsafe fn artwork(&self) -> Option<Retained<MPMediaItemArtwork>>;

        #[unsafe(method(isExplicitItem))]
        #[unsafe(method_family = none)]
        pub unsafe fn isExplicitItem(&self) -> bool;

        #[unsafe(method(lyrics))]
        #[unsafe(method_family = none)]
        pub unsafe fn lyrics(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(isCompilation))]
        #[unsafe(method_family = none)]
        pub unsafe fn isCompilation(&self) -> bool;

        #[unsafe(method(releaseDate))]
        #[unsafe(method_family = none)]
        pub unsafe fn releaseDate(&self) -> Option<Retained<NSDate>>;

        #[unsafe(method(beatsPerMinute))]
        #[unsafe(method_family = none)]
        pub unsafe fn beatsPerMinute(&self) -> NSUInteger;

        #[unsafe(method(comments))]
        #[unsafe(method_family = none)]
        pub unsafe fn comments(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(assetURL))]
        #[unsafe(method_family = none)]
        pub unsafe fn assetURL(&self) -> Option<Retained<NSURL>>;

        #[unsafe(method(isCloudItem))]
        #[unsafe(method_family = none)]
        pub unsafe fn isCloudItem(&self) -> bool;

        #[unsafe(method(hasProtectedAsset))]
        #[unsafe(method_family = none)]
        pub unsafe fn hasProtectedAsset(&self) -> bool;

        #[unsafe(method(podcastTitle))]
        #[unsafe(method_family = none)]
        pub unsafe fn podcastTitle(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(podcastPersistentID))]
        #[unsafe(method_family = none)]
        pub unsafe fn podcastPersistentID(&self) -> MPMediaEntityPersistentID;

        #[unsafe(method(playCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn playCount(&self) -> NSUInteger;

        #[unsafe(method(skipCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn skipCount(&self) -> NSUInteger;

        #[unsafe(method(rating))]
        #[unsafe(method_family = none)]
        pub unsafe fn rating(&self) -> NSUInteger;

        #[unsafe(method(lastPlayedDate))]
        #[unsafe(method_family = none)]
        pub unsafe fn lastPlayedDate(&self) -> Option<Retained<NSDate>>;

        #[unsafe(method(userGrouping))]
        #[unsafe(method_family = none)]
        pub unsafe fn userGrouping(&self) -> Option<Retained<NSString>>;

        #[unsafe(method(bookmarkTime))]
        #[unsafe(method_family = none)]
        pub unsafe fn bookmarkTime(&self) -> NSTimeInterval;

        #[unsafe(method(dateAdded))]
        #[unsafe(method_family = none)]
        pub unsafe fn dateAdded(&self) -> Retained<NSDate>;

        #[unsafe(method(playbackStoreID))]
        #[unsafe(method_family = none)]
        pub unsafe fn playbackStoreID(&self) -> Retained<NSString>;

        #[unsafe(method(isPreorder))]
        #[unsafe(method_family = none)]
        pub unsafe fn isPreorder(&self) -> bool;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "MPMediaEntity")]
impl MPMediaItem {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitemartwork?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPMediaItemArtwork;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for MPMediaItemArtwork {}
);

impl MPMediaItemArtwork {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(all(
            feature = "block2",
            feature = "objc2-app-kit",
            feature = "objc2-core-foundation"
        ))]
        #[cfg(target_os = "macos")]
        #[unsafe(method(initWithBoundsSize:requestHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithBoundsSize_requestHandler(
            this: Allocated<Self>,
            bounds_size: CGSize,
            request_handler: &block2::DynBlock<dyn Fn(CGSize) -> NonNull<NSImage>>,
        ) -> Retained<Self>;

        #[cfg(all(feature = "objc2-app-kit", feature = "objc2-core-foundation"))]
        #[cfg(target_os = "macos")]
        #[unsafe(method(imageWithSize:))]
        #[unsafe(method_family = none)]
        pub unsafe fn imageWithSize(&self, size: CGSize) -> Option<Retained<NSImage>>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(bounds))]
        #[unsafe(method_family = none)]
        pub unsafe fn bounds(&self) -> CGRect;

        #[cfg(feature = "objc2-core-foundation")]
        #[deprecated = "cropRect is no longer used"]
        #[unsafe(method(imageCropRect))]
        #[unsafe(method_family = none)]
        pub unsafe fn imageCropRect(&self) -> CGRect;
    );
}

extern_class!(
    /// An animated image, such as an animated music album cover art, for a media item.
    ///
    /// A single instance of animated artwork is comprised of two assets: an artwork video asset, and a
    /// preview image which should match the first frame of the artwork video. The preview image may be
    /// used when displaying the animated artwork whilst the video becomes available.
    ///
    /// Both the preview image and artwork video can be fetched asynchronously and will only be
    /// requested when required at point of display. Aim to provide preview images as quickly as
    /// possible once requested, and ideally synchronously.
    ///
    /// Video asset `URL`s you provide must be local file `URL`s. You should make the associated assets
    /// available locally before providing them via the relevant handler, for example by fetching the
    /// associated video asset over the network. The `URL`s should remain valid for the lifetime of the
    /// ``MPMediaItemAnimatedArtwork``, once provided.
    ///
    /// ``MPMediaItemAnimatedArtwork`` should not be subclassed.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mediaplayer/mpmediaitemanimatedartwork?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MPMediaItemAnimatedArtwork;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for MPMediaItemAnimatedArtwork {}
);

impl MPMediaItemAnimatedArtwork {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(all(
            feature = "block2",
            feature = "objc2-app-kit",
            feature = "objc2-core-foundation"
        ))]
        #[cfg(target_os = "macos")]
        /// Creates an animated artwork.
        ///
        /// - Parameters:
        /// - artworkID: A unique identifier for this animated artwork. This identifier should encapsulate
        /// the identity of both the preview frame and video asset. If you change either, you should
        /// provide an ``MPMediaItemAnimatedArtwork`` with an updated `artworkID`.
        /// - previewImageRequestHandler: A handler to return a preview image for this artwork, for the
        /// requested `CGSize` in pixels. Once requested, you should pass the preview image to the
        /// provided completion handler, or you can pass `nil` if the preview image cannot be resolved
        /// for any reason. You can call the completion handler on an arbitrary queue, however it must
        /// only be called once. The `NSImage` you provide should ideally have a size equal to the
        /// requested `CGSize`, however an image of the same aspect ratio is acceptable. Images that
        /// diverge significantly from the requested aspect ratio may be rejected by the system. Aim to
        /// provide preview images quickly and ideally synchronously, and if possible you should preload
        /// these images in order to reduce perceived latency when displaying animated artwork to the
        /// user.
        /// - videoAssetFileURLRequestHandler: A handler to return a file `URL` for the artwork video
        /// asset for this artwork, for the requested `CGSize` in pixels. Once requested, you should pass
        /// the `URL` to the provided completion handler, or you can pass `nil` if the artwork video asset
        /// cannot be resolved for any reason. You can call the completion handler on an arbitrary queue,
        /// however it must only be called once. The `URL` you provide must reference a local asset,
        /// ideally with a size equal to the requested `CGSize`, however an asset with the same aspect
        /// ratio is acceptable. Assets that diverge significantly from the requested aspect ratio may be
        /// rejected by the system. The video assets you provide should loop cleanly, and should be
        /// available relatively quickly from this handler (particularly when re-fetched). It’s advised
        /// that assets are cached for subsequent fetches.
        #[unsafe(method(initWithArtworkID:previewImageRequestHandler:videoAssetFileURLRequestHandler:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithArtworkID_previewImageRequestHandler_videoAssetFileURLRequestHandler(
            this: Allocated<Self>,
            artwork_id: &NSString,
            preview_image_request_handler: &block2::DynBlock<
                dyn Fn(CGSize, NonNull<block2::DynBlock<dyn Fn(*mut NSImage)>>),
            >,
            video_asset_file_url_request_handler: &block2::DynBlock<
                dyn Fn(CGSize, NonNull<block2::DynBlock<dyn Fn(*mut NSURL)>>),
            >,
        ) -> Retained<Self>;
    );
}
