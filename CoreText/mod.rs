// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "CoreText", kind = "framework")]
extern "C" {}

#[cfg(feature = "CTDefines")]
#[path = "CTDefines.rs"]
mod __CTDefines;
#[cfg(feature = "CTFont")]
#[path = "CTFont.rs"]
mod __CTFont;
#[cfg(feature = "CTFontCollection")]
#[path = "CTFontCollection.rs"]
mod __CTFontCollection;
#[cfg(feature = "CTFontDescriptor")]
#[path = "CTFontDescriptor.rs"]
mod __CTFontDescriptor;
#[cfg(feature = "CTFontManager")]
#[path = "CTFontManager.rs"]
mod __CTFontManager;
#[cfg(feature = "CTFontManagerErrors")]
#[path = "CTFontManagerErrors.rs"]
mod __CTFontManagerErrors;
#[cfg(feature = "CTFontTraits")]
#[path = "CTFontTraits.rs"]
mod __CTFontTraits;
#[cfg(feature = "CTFrame")]
#[path = "CTFrame.rs"]
mod __CTFrame;
#[cfg(feature = "CTFramesetter")]
#[path = "CTFramesetter.rs"]
mod __CTFramesetter;
#[cfg(feature = "CTGlyphInfo")]
#[path = "CTGlyphInfo.rs"]
mod __CTGlyphInfo;
#[cfg(feature = "CTLine")]
#[path = "CTLine.rs"]
mod __CTLine;
#[cfg(feature = "CTParagraphStyle")]
#[path = "CTParagraphStyle.rs"]
mod __CTParagraphStyle;
#[cfg(feature = "CTRubyAnnotation")]
#[path = "CTRubyAnnotation.rs"]
mod __CTRubyAnnotation;
#[cfg(feature = "CTRun")]
#[path = "CTRun.rs"]
mod __CTRun;
#[cfg(feature = "CTRunDelegate")]
#[path = "CTRunDelegate.rs"]
mod __CTRunDelegate;
#[cfg(feature = "CTStringAttributes")]
#[path = "CTStringAttributes.rs"]
mod __CTStringAttributes;
#[cfg(feature = "CTTextTab")]
#[path = "CTTextTab.rs"]
mod __CTTextTab;
#[cfg(feature = "CTTypesetter")]
#[path = "CTTypesetter.rs"]
mod __CTTypesetter;
#[cfg(feature = "SFNTLayoutTypes")]
#[path = "SFNTLayoutTypes.rs"]
mod __SFNTLayoutTypes;
#[cfg(feature = "SFNTTypes")]
#[path = "SFNTTypes.rs"]
mod __SFNTTypes;

#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTBaselineClassHanging;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTBaselineClassIdeographicCentered;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTBaselineClassIdeographicHigh;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTBaselineClassIdeographicLow;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTBaselineClassMath;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTBaselineClassRoman;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTBaselineOriginalFont;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTBaselineReferenceFont;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontCopyrightNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontDescriptionNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontDesignerNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontDesignerURLNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontFamilyNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontFeatureSampleTextKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontFeatureSelectorDefaultKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontFeatureSelectorIdentifierKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontFeatureSelectorNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontFeatureSelectorSettingKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontFeatureTooltipTextKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontFeatureTypeExclusiveKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontFeatureTypeIdentifierKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontFeatureTypeNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontFeatureTypeSelectorsKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontFullNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontLicenseNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontLicenseURLNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontManufacturerNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontOpenTypeFeatureTag;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontOpenTypeFeatureValue;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontPostScriptCIDNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontPostScriptNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontSampleTextNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontStyleNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontSubFamilyNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableAcnt;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableAnkr;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableAvar;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableBASE;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableBdat;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableBhed;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableBloc;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableBsln;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableCBDT;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableCBLC;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableCFF;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableCFF2;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableCOLR;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableCPAL;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableCidg;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableCmap;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableCvar;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableCvt;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableDSIG;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableEBDT;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableEBLC;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableEBSC;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableFdsc;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableFeat;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableFmtx;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableFond;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableFpgm;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableFvar;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableGDEF;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableGPOS;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableGSUB;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableGasp;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableGlyf;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableGvar;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableHVAR;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableHdmx;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableHead;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableHhea;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableHmtx;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableHsty;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableJSTF;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableJust;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableKern;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableKerx;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableLTSH;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableLcar;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableLoca;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableLtag;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableMATH;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableMERG;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableMVAR;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableMaxp;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableMeta;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableMort;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableMorx;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableName;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableOS2;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableOpbd;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTablePCLT;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTablePost;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTablePrep;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableProp;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableSTAT;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableSVG;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableSbit;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableSbix;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableTrak;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableVDMX;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableVORG;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableVVAR;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableVhea;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableVmtx;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableXref;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTableZapf;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontTrademarkNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontUniqueNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontVariationAxisDefaultValueKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontVariationAxisHiddenKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontVariationAxisIdentifierKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontVariationAxisMaximumValueKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontVariationAxisMinimumValueKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontVariationAxisNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontVendorURLNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::kCTFontVersionNameKey;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::ATSFontRef;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFont;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyAttribute;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyAvailableTables;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyCharacterSet;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyDefaultCascadeListForLanguages;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyDisplayName;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyFamilyName;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyFeatureSettings;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyFeatures;
#[cfg(all(feature = "CTFont", feature = "CTFontDescriptor"))]
pub use self::__CTFont::CTFontCopyFontDescriptor;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyFullName;
#[cfg(all(
    feature = "CTFont",
    feature = "CTFontDescriptor",
    feature = "objc2-core-graphics"
))]
pub use self::__CTFont::CTFontCopyGraphicsFont;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyLocalizedName;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyName;
#[cfg(all(feature = "CTFont", feature = "objc2-core-graphics"))]
pub use self::__CTFont::CTFontCopyNameForGlyph;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyPostScriptName;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopySupportedLanguages;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyTable;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyTraits;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyVariation;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCopyVariationAxes;
#[cfg(all(feature = "CTFont", feature = "CTFontDescriptor"))]
pub use self::__CTFont::CTFontCreateCopyWithAttributes;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCreateCopyWithFamily;
#[cfg(all(feature = "CTFont", feature = "CTFontTraits"))]
pub use self::__CTFont::CTFontCreateCopyWithSymbolicTraits;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCreateForString;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCreateForStringWithLanguage;
#[cfg(all(feature = "CTFont", feature = "objc2-core-graphics"))]
pub use self::__CTFont::CTFontCreatePathForGlyph;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCreateUIFontForLanguage;
#[cfg(all(feature = "CTFont", feature = "CTFontDescriptor"))]
pub use self::__CTFont::CTFontCreateWithFontDescriptor;
#[cfg(all(feature = "CTFont", feature = "CTFontDescriptor"))]
pub use self::__CTFont::CTFontCreateWithFontDescriptorAndOptions;
#[cfg(all(
    feature = "CTFont",
    feature = "CTFontDescriptor",
    feature = "objc2-core-graphics"
))]
pub use self::__CTFont::CTFontCreateWithGraphicsFont;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCreateWithName;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCreateWithNameAndOptions;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontCreateWithQuickdrawInstance;
#[cfg(all(feature = "CTFont", feature = "objc2-core-graphics"))]
pub use self::__CTFont::CTFontDrawGlyphs;
#[cfg(all(
    feature = "CTFont",
    feature = "CTRunDelegate",
    feature = "objc2",
    feature = "objc2-core-graphics"
))]
pub use self::__CTFont::CTFontDrawImageFromAdaptiveImageProviderAtPoint;
#[cfg(all(
    feature = "CTFont",
    feature = "CTFontDescriptor",
    feature = "objc2-core-graphics"
))]
pub use self::__CTFont::CTFontGetAdvancesForGlyphs;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontGetAscent;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontGetBoundingBox;
#[cfg(all(
    feature = "CTFont",
    feature = "CTFontDescriptor",
    feature = "objc2-core-graphics"
))]
pub use self::__CTFont::CTFontGetBoundingRectsForGlyphs;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontGetCapHeight;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontGetDescent;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontGetGlyphCount;
#[cfg(all(feature = "CTFont", feature = "objc2-core-graphics"))]
pub use self::__CTFont::CTFontGetGlyphWithName;
#[cfg(all(feature = "CTFont", feature = "objc2-core-graphics"))]
pub use self::__CTFont::CTFontGetGlyphsForCharacters;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontGetLeading;
#[cfg(all(feature = "CTFont", feature = "objc2-core-graphics"))]
pub use self::__CTFont::CTFontGetLigatureCaretPositions;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontGetMatrix;
#[cfg(all(feature = "CTFont", feature = "objc2-core-graphics"))]
pub use self::__CTFont::CTFontGetOpticalBoundsForGlyphs;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontGetSize;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontGetSlantAngle;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontGetStringEncoding;
#[cfg(all(feature = "CTFont", feature = "CTFontTraits"))]
pub use self::__CTFont::CTFontGetSymbolicTraits;
#[cfg(all(feature = "CTFont", feature = "CTRunDelegate", feature = "objc2"))]
pub use self::__CTFont::CTFontGetTypographicBoundsForAdaptiveImageProvider;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontGetUnderlinePosition;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontGetUnderlineThickness;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontGetUnitsPerEm;
#[cfg(all(feature = "CTFont", feature = "objc2-core-graphics"))]
pub use self::__CTFont::CTFontGetVerticalTranslationsForGlyphs;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontGetXHeight;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontHasTable;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontOptions;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontTableOptions;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontTableTag;
#[cfg(feature = "CTFont")]
pub use self::__CTFont::CTFontUIFontType;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::kCTFontCollectionDisallowAutoActivationOption;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::kCTFontCollectionIncludeDisabledFontsOption;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::kCTFontCollectionRemoveDuplicatesOption;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollection;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollectionCopyExclusionDescriptors;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollectionCopyFontAttribute;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollectionCopyFontAttributes;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollectionCopyOptions;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollectionCopyQueryDescriptors;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollectionCreateCopyWithFontDescriptors;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollectionCreateFromAvailableFonts;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollectionCreateMatchingFontDescriptors;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollectionCreateMatchingFontDescriptorsForFamily;
#[cfg(all(feature = "CTFontCollection", feature = "CTFontDescriptor"))]
pub use self::__CTFontCollection::CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollectionCreateMatchingFontDescriptorsWithOptions;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollectionCreateMutableCopy;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollectionCreateWithFontDescriptors;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollectionSetExclusionDescriptors;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTFontCollectionSetQueryDescriptors;
#[cfg(all(feature = "CTFontCollection", feature = "CTFontDescriptor"))]
pub use self::__CTFontCollection::CTFontCollectionSortDescriptorsCallback;
#[cfg(feature = "CTFontCollection")]
pub use self::__CTFontCollection::CTMutableFontCollection;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontBaselineAdjustAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontCascadeListAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontCharacterSetAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontDescriptorMatchingCurrentAssetSize;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontDescriptorMatchingDescriptors;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontDescriptorMatchingError;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontDescriptorMatchingPercentage;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontDescriptorMatchingResult;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontDescriptorMatchingSourceDescriptor;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontDescriptorMatchingTotalAssetSize;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontDescriptorMatchingTotalDownloadedSize;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontDisplayNameAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontDownloadableAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontDownloadedAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontEnabledAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontFamilyNameAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontFeatureSettingsAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontFeaturesAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontFixedAdvanceAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontFormatAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontLanguagesAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontMacintoshEncodingsAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontMatrixAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontNameAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontOpticalSizeAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontOrientationAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontPriorityAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontPriorityComputer;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontPriorityDynamic;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontPriorityNetwork;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontPriorityProcess;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontPrioritySystem;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontPriorityUser;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontRegistrationScopeAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontSizeAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontStyleNameAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontTraitsAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontURLAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontVariationAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::kCTFontVariationAxesAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontDescriptor;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontDescriptorCopyAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontDescriptorCopyAttributes;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontDescriptorCopyLocalizedAttribute;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontDescriptorCreateCopyWithAttributes;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontDescriptorCreateCopyWithFamily;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontDescriptorCreateCopyWithFeature;
#[cfg(all(feature = "CTFontDescriptor", feature = "CTFontTraits"))]
pub use self::__CTFontDescriptor::CTFontDescriptorCreateCopyWithSymbolicTraits;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontDescriptorCreateCopyWithVariation;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontDescriptorCreateMatchingFontDescriptor;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontDescriptorCreateMatchingFontDescriptors;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontDescriptorCreateWithAttributes;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontDescriptorCreateWithNameAndSize;
#[cfg(all(feature = "CTFontDescriptor", feature = "block2"))]
pub use self::__CTFontDescriptor::CTFontDescriptorMatchFontDescriptorsWithProgressHandler;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontDescriptorMatchingState;
#[cfg(all(feature = "CTFontDescriptor", feature = "block2"))]
pub use self::__CTFontDescriptor::CTFontDescriptorProgressHandler;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontFormat;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontOrientation;
#[cfg(feature = "CTFontDescriptor")]
pub use self::__CTFontDescriptor::CTFontPriority;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::kCTFontManagerBundleIdentifier;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::kCTFontManagerRegisteredFontsChangedNotification;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::kCTFontRegistrationUserInfoAttribute;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerAutoActivationSetting;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerCompareFontFamilyNames;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerCopyAvailableFontFamilyNames;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerCopyAvailableFontURLs;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerCopyAvailablePostScriptNames;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerCopyRegisteredFontDescriptors;
#[cfg(all(feature = "CTFontDescriptor", feature = "CTFontManager"))]
pub use self::__CTFontManager::CTFontManagerCreateFontDescriptorFromData;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerCreateFontDescriptorsFromData;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerCreateFontDescriptorsFromURL;
#[cfg(all(feature = "CTFontManager", feature = "block2", feature = "libc"))]
pub use self::__CTFontManager::CTFontManagerCreateFontRequestRunLoopSource;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerEnableFontDescriptors;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerGetAutoActivationSetting;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerGetScopeForURL;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerIsSupportedFont;
#[cfg(all(feature = "CTFontManager", feature = "block2"))]
pub use self::__CTFontManager::CTFontManagerRegisterFontDescriptors;
#[cfg(all(feature = "CTFontManager", feature = "block2"))]
pub use self::__CTFontManager::CTFontManagerRegisterFontURLs;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerRegisterFontsForURL;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerRegisterFontsForURLs;
#[cfg(all(feature = "CTFontManager", feature = "block2"))]
pub use self::__CTFontManager::CTFontManagerRegisterFontsWithAssetNames;
#[cfg(all(feature = "CTFontManager", feature = "objc2-core-graphics"))]
pub use self::__CTFontManager::CTFontManagerRegisterGraphicsFont;
#[cfg(all(feature = "CTFontManager", feature = "block2"))]
pub use self::__CTFontManager::CTFontManagerRequestFonts;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerScope;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerSetAutoActivationSetting;
#[cfg(all(feature = "CTFontManager", feature = "block2"))]
pub use self::__CTFontManager::CTFontManagerUnregisterFontDescriptors;
#[cfg(all(feature = "CTFontManager", feature = "block2"))]
pub use self::__CTFontManager::CTFontManagerUnregisterFontURLs;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerUnregisterFontsForURL;
#[cfg(feature = "CTFontManager")]
pub use self::__CTFontManager::CTFontManagerUnregisterFontsForURLs;
#[cfg(all(feature = "CTFontManager", feature = "objc2-core-graphics"))]
pub use self::__CTFontManager::CTFontManagerUnregisterGraphicsFont;
#[cfg(feature = "CTFontManagerErrors")]
pub use self::__CTFontManagerErrors::kCTFontManagerErrorDomain;
#[cfg(feature = "CTFontManagerErrors")]
pub use self::__CTFontManagerErrors::kCTFontManagerErrorFontAssetNameKey;
#[cfg(feature = "CTFontManagerErrors")]
pub use self::__CTFontManagerErrors::kCTFontManagerErrorFontDescriptorsKey;
#[cfg(feature = "CTFontManagerErrors")]
pub use self::__CTFontManagerErrors::kCTFontManagerErrorFontURLsKey;
#[cfg(feature = "CTFontManagerErrors")]
pub use self::__CTFontManagerErrors::CTFontManagerError;
#[cfg(feature = "CTFontTraits")]
pub use self::__CTFontTraits::kCTFontClassMaskShift;
#[cfg(feature = "CTFontTraits")]
pub use self::__CTFontTraits::kCTFontSlantTrait;
#[cfg(feature = "CTFontTraits")]
pub use self::__CTFontTraits::kCTFontSymbolicTrait;
#[cfg(feature = "CTFontTraits")]
pub use self::__CTFontTraits::kCTFontWeightTrait;
#[cfg(feature = "CTFontTraits")]
pub use self::__CTFontTraits::kCTFontWidthTrait;
#[cfg(feature = "CTFontTraits")]
pub use self::__CTFontTraits::CTFontStylisticClass;
#[cfg(feature = "CTFontTraits")]
pub use self::__CTFontTraits::CTFontSymbolicTraits;
#[cfg(feature = "CTFrame")]
pub use self::__CTFrame::kCTFrameClippingPathsAttributeName;
#[cfg(feature = "CTFrame")]
pub use self::__CTFrame::kCTFramePathClippingPathAttributeName;
#[cfg(feature = "CTFrame")]
pub use self::__CTFrame::kCTFramePathFillRuleAttributeName;
#[cfg(feature = "CTFrame")]
pub use self::__CTFrame::kCTFramePathWidthAttributeName;
#[cfg(feature = "CTFrame")]
pub use self::__CTFrame::kCTFrameProgressionAttributeName;
#[cfg(feature = "CTFrame")]
pub use self::__CTFrame::CTFrame;
#[cfg(all(feature = "CTFrame", feature = "objc2-core-graphics"))]
pub use self::__CTFrame::CTFrameDraw;
#[cfg(feature = "CTFrame")]
pub use self::__CTFrame::CTFrameGetFrameAttributes;
#[cfg(feature = "CTFrame")]
pub use self::__CTFrame::CTFrameGetLineOrigins;
#[cfg(feature = "CTFrame")]
pub use self::__CTFrame::CTFrameGetLines;
#[cfg(all(feature = "CTFrame", feature = "objc2-core-graphics"))]
pub use self::__CTFrame::CTFrameGetPath;
#[cfg(feature = "CTFrame")]
pub use self::__CTFrame::CTFrameGetStringRange;
#[cfg(feature = "CTFrame")]
pub use self::__CTFrame::CTFrameGetVisibleStringRange;
#[cfg(feature = "CTFrame")]
pub use self::__CTFrame::CTFramePathFillRule;
#[cfg(feature = "CTFrame")]
pub use self::__CTFrame::CTFrameProgression;
#[cfg(feature = "CTFramesetter")]
pub use self::__CTFramesetter::CTFramesetter;
#[cfg(all(
    feature = "CTFrame",
    feature = "CTFramesetter",
    feature = "objc2-core-graphics"
))]
pub use self::__CTFramesetter::CTFramesetterCreateFrame;
#[cfg(feature = "CTFramesetter")]
pub use self::__CTFramesetter::CTFramesetterCreateWithAttributedString;
#[cfg(all(feature = "CTFramesetter", feature = "CTTypesetter"))]
pub use self::__CTFramesetter::CTFramesetterCreateWithTypesetter;
#[cfg(all(feature = "CTFramesetter", feature = "CTTypesetter"))]
pub use self::__CTFramesetter::CTFramesetterGetTypesetter;
#[cfg(feature = "CTFramesetter")]
pub use self::__CTFramesetter::CTFramesetterSuggestFrameSizeWithConstraints;
#[cfg(feature = "CTGlyphInfo")]
pub use self::__CTGlyphInfo::CTCharacterCollection;
#[cfg(feature = "CTGlyphInfo")]
pub use self::__CTGlyphInfo::CTGlyphInfo;
#[cfg(all(feature = "CTGlyphInfo", feature = "objc2-core-graphics"))]
pub use self::__CTGlyphInfo::CTGlyphInfoCreateWithCharacterIdentifier;
#[cfg(all(
    feature = "CTFont",
    feature = "CTGlyphInfo",
    feature = "objc2-core-graphics"
))]
pub use self::__CTGlyphInfo::CTGlyphInfoCreateWithGlyph;
#[cfg(all(feature = "CTFont", feature = "CTGlyphInfo"))]
pub use self::__CTGlyphInfo::CTGlyphInfoCreateWithGlyphName;
#[cfg(feature = "CTGlyphInfo")]
pub use self::__CTGlyphInfo::CTGlyphInfoGetCharacterCollection;
#[cfg(all(feature = "CTGlyphInfo", feature = "objc2-core-graphics"))]
pub use self::__CTGlyphInfo::CTGlyphInfoGetCharacterIdentifier;
#[cfg(all(feature = "CTGlyphInfo", feature = "objc2-core-graphics"))]
pub use self::__CTGlyphInfo::CTGlyphInfoGetGlyph;
#[cfg(feature = "CTGlyphInfo")]
pub use self::__CTGlyphInfo::CTGlyphInfoGetGlyphName;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLine;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLineBoundsOptions;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLineCreateJustifiedLine;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLineCreateTruncatedLine;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLineCreateWithAttributedString;
#[cfg(all(feature = "CTLine", feature = "objc2-core-graphics"))]
pub use self::__CTLine::CTLineDraw;
#[cfg(all(feature = "CTLine", feature = "block2"))]
pub use self::__CTLine::CTLineEnumerateCaretOffsets;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLineGetBoundsWithOptions;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLineGetGlyphCount;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLineGetGlyphRuns;
#[cfg(all(feature = "CTLine", feature = "objc2-core-graphics"))]
pub use self::__CTLine::CTLineGetImageBounds;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLineGetOffsetForStringIndex;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLineGetPenOffsetForFlush;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLineGetStringIndexForPosition;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLineGetStringRange;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLineGetTrailingWhitespaceWidth;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLineGetTypographicBounds;
#[cfg(feature = "CTLine")]
pub use self::__CTLine::CTLineTruncationType;
#[cfg(feature = "CTParagraphStyle")]
pub use self::__CTParagraphStyle::CTLineBreakMode;
#[cfg(feature = "CTParagraphStyle")]
pub use self::__CTParagraphStyle::CTParagraphStyle;
#[cfg(feature = "CTParagraphStyle")]
pub use self::__CTParagraphStyle::CTParagraphStyleCreate;
#[cfg(feature = "CTParagraphStyle")]
pub use self::__CTParagraphStyle::CTParagraphStyleCreateCopy;
#[cfg(feature = "CTParagraphStyle")]
pub use self::__CTParagraphStyle::CTParagraphStyleGetValueForSpecifier;
#[cfg(feature = "CTParagraphStyle")]
pub use self::__CTParagraphStyle::CTParagraphStyleSetting;
#[cfg(feature = "CTParagraphStyle")]
pub use self::__CTParagraphStyle::CTParagraphStyleSpecifier;
#[cfg(feature = "CTParagraphStyle")]
pub use self::__CTParagraphStyle::CTTextAlignment;
#[cfg(feature = "CTParagraphStyle")]
pub use self::__CTParagraphStyle::CTWritingDirection;
#[cfg(feature = "CTRubyAnnotation")]
pub use self::__CTRubyAnnotation::kCTRubyAnnotationScaleToFitAttributeName;
#[cfg(feature = "CTRubyAnnotation")]
pub use self::__CTRubyAnnotation::kCTRubyAnnotationSizeFactorAttributeName;
#[cfg(feature = "CTRubyAnnotation")]
pub use self::__CTRubyAnnotation::CTRubyAlignment;
#[cfg(feature = "CTRubyAnnotation")]
pub use self::__CTRubyAnnotation::CTRubyAnnotation;
#[cfg(feature = "CTRubyAnnotation")]
pub use self::__CTRubyAnnotation::CTRubyAnnotationCreateCopy;
#[cfg(feature = "CTRubyAnnotation")]
pub use self::__CTRubyAnnotation::CTRubyAnnotationCreateWithAttributes;
#[cfg(feature = "CTRubyAnnotation")]
pub use self::__CTRubyAnnotation::CTRubyAnnotationGetAlignment;
#[cfg(feature = "CTRubyAnnotation")]
pub use self::__CTRubyAnnotation::CTRubyAnnotationGetOverhang;
#[cfg(feature = "CTRubyAnnotation")]
pub use self::__CTRubyAnnotation::CTRubyAnnotationGetSizeFactor;
#[cfg(feature = "CTRubyAnnotation")]
pub use self::__CTRubyAnnotation::CTRubyAnnotationGetTextForPosition;
#[cfg(feature = "CTRubyAnnotation")]
pub use self::__CTRubyAnnotation::CTRubyOverhang;
#[cfg(feature = "CTRubyAnnotation")]
pub use self::__CTRubyAnnotation::CTRubyPosition;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRun;
#[cfg(all(feature = "CTRun", feature = "objc2-core-graphics"))]
pub use self::__CTRun::CTRunDraw;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRunGetAdvances;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRunGetAdvancesPtr;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRunGetAttributes;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRunGetBaseAdvancesAndOrigins;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRunGetGlyphCount;
#[cfg(all(feature = "CTRun", feature = "objc2-core-graphics"))]
pub use self::__CTRun::CTRunGetGlyphs;
#[cfg(all(feature = "CTRun", feature = "objc2-core-graphics"))]
pub use self::__CTRun::CTRunGetGlyphsPtr;
#[cfg(all(feature = "CTRun", feature = "objc2-core-graphics"))]
pub use self::__CTRun::CTRunGetImageBounds;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRunGetPositions;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRunGetPositionsPtr;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRunGetStatus;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRunGetStringIndices;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRunGetStringIndicesPtr;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRunGetStringRange;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRunGetTextMatrix;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRunGetTypographicBounds;
#[cfg(feature = "CTRun")]
pub use self::__CTRun::CTRunStatus;
#[cfg(feature = "CTRunDelegate")]
pub use self::__CTRunDelegate::kCTRunDelegateCurrentVersion;
#[cfg(feature = "CTRunDelegate")]
pub use self::__CTRunDelegate::kCTRunDelegateVersion1;
#[cfg(all(feature = "CTRunDelegate", feature = "objc2"))]
pub use self::__CTRunDelegate::CTAdaptiveImageProviding;
#[cfg(feature = "CTRunDelegate")]
pub use self::__CTRunDelegate::CTRunDelegate;
#[cfg(feature = "CTRunDelegate")]
pub use self::__CTRunDelegate::CTRunDelegateCallbacks;
#[cfg(feature = "CTRunDelegate")]
pub use self::__CTRunDelegate::CTRunDelegateCreate;
#[cfg(feature = "CTRunDelegate")]
pub use self::__CTRunDelegate::CTRunDelegateDeallocateCallback;
#[cfg(feature = "CTRunDelegate")]
pub use self::__CTRunDelegate::CTRunDelegateGetAscentCallback;
#[cfg(feature = "CTRunDelegate")]
pub use self::__CTRunDelegate::CTRunDelegateGetDescentCallback;
#[cfg(feature = "CTRunDelegate")]
pub use self::__CTRunDelegate::CTRunDelegateGetRefCon;
#[cfg(feature = "CTRunDelegate")]
pub use self::__CTRunDelegate::CTRunDelegateGetWidthCallback;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTAdaptiveImageProviderAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTBackgroundColorAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTBaselineClassAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTBaselineInfoAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTBaselineOffsetAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTBaselineReferenceInfoAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTCharacterShapeAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTFontAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTForegroundColorAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTForegroundColorFromContextAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTGlyphInfoAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTHorizontalInVerticalFormsAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTKernAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTLanguageAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTLigatureAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTParagraphStyleAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTRubyAnnotationAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTRunDelegateAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTStrokeColorAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTStrokeWidthAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTSuperscriptAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTTrackingAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTUnderlineColorAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTUnderlineStyleAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTVerticalFormsAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTWritingDirectionAttributeName;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTWritingDirectionEmbedding;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::kCTWritingDirectionOverride;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::CTUnderlineStyle;
#[cfg(feature = "CTStringAttributes")]
pub use self::__CTStringAttributes::CTUnderlineStyleModifiers;
#[cfg(feature = "CTTextTab")]
pub use self::__CTTextTab::kCTTabColumnTerminatorsAttributeName;
#[cfg(feature = "CTTextTab")]
pub use self::__CTTextTab::CTTextTab;
#[cfg(all(feature = "CTParagraphStyle", feature = "CTTextTab"))]
pub use self::__CTTextTab::CTTextTabCreate;
#[cfg(all(feature = "CTParagraphStyle", feature = "CTTextTab"))]
pub use self::__CTTextTab::CTTextTabGetAlignment;
#[cfg(feature = "CTTextTab")]
pub use self::__CTTextTab::CTTextTabGetLocation;
#[cfg(feature = "CTTextTab")]
pub use self::__CTTextTab::CTTextTabGetOptions;
#[cfg(feature = "CTTypesetter")]
pub use self::__CTTypesetter::kCTTypesetterOptionAllowUnboundedLayout;
#[cfg(feature = "CTTypesetter")]
pub use self::__CTTypesetter::kCTTypesetterOptionDisableBidiProcessing;
#[cfg(feature = "CTTypesetter")]
pub use self::__CTTypesetter::kCTTypesetterOptionForcedEmbeddingLevel;
#[cfg(feature = "CTTypesetter")]
pub use self::__CTTypesetter::CTTypesetter;
#[cfg(all(feature = "CTLine", feature = "CTTypesetter"))]
pub use self::__CTTypesetter::CTTypesetterCreateLine;
#[cfg(all(feature = "CTLine", feature = "CTTypesetter"))]
pub use self::__CTTypesetter::CTTypesetterCreateLineWithOffset;
#[cfg(feature = "CTTypesetter")]
pub use self::__CTTypesetter::CTTypesetterCreateWithAttributedString;
#[cfg(feature = "CTTypesetter")]
pub use self::__CTTypesetter::CTTypesetterCreateWithAttributedStringAndOptions;
#[cfg(feature = "CTTypesetter")]
pub use self::__CTTypesetter::CTTypesetterSuggestClusterBreak;
#[cfg(feature = "CTTypesetter")]
pub use self::__CTTypesetter::CTTypesetterSuggestClusterBreakWithOffset;
#[cfg(feature = "CTTypesetter")]
pub use self::__CTTypesetter::CTTypesetterSuggestLineBreak;
#[cfg(feature = "CTTypesetter")]
pub use self::__CTTypesetter::CTTypesetterSuggestLineBreakWithOffset;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kANKRCurrentVersion;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAbbrevSquaredLigaturesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAbbrevSquaredLigaturesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAllCapsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAllLowerCaseSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAllTypeFeaturesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAllTypeFeaturesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAllTypographicFeaturesType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAltHalfWidthTextSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAltProportionalTextSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAlternateHorizKanaOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAlternateHorizKanaOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAlternateKanaType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAlternateVertKanaOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAlternateVertKanaOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAnnotationType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAsteriskToMultiplyOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kAsteriskToMultiplyOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNControlPointFormatNoMap;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNControlPointFormatWithMap;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNCurrentVersion;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNDistanceFormatNoMap;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNDistanceFormatWithMap;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNHangingBaseline;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNIdeographicCenterBaseline;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNIdeographicHighBaseline;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNIdeographicLowBaseline;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNLastBaseline;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNMathBaseline;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNNoBaseline;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNNoBaselineOverride;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNNumBaselineClasses;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNRomanBaseline;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBSLNTag;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kBoxAnnotationSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCJKItalicRomanOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCJKItalicRomanOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCJKItalicRomanSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCJKRomanSpacingType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCJKSymbolAltFiveSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCJKSymbolAltFourSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCJKSymbolAltOneSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCJKSymbolAltThreeSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCJKSymbolAltTwoSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCJKSymbolAlternativesType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCJKVerticalRomanCenteredSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCJKVerticalRomanHBaselineSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCJKVerticalRomanPlacementType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCanonicalCompositionOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCanonicalCompositionOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCaseSensitiveLayoutOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCaseSensitiveLayoutOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCaseSensitiveLayoutType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCaseSensitiveSpacingOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCaseSensitiveSpacingOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCharacterAlternativesType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCharacterShapeType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCircleAnnotationSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCommonLigaturesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCommonLigaturesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCompatibilityCompositionOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCompatibilityCompositionOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kContextualAlternatesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kContextualAlternatesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kContextualAlternatesType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kContextualLigaturesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kContextualLigaturesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kContextualSwashAlternatesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kContextualSwashAlternatesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCursiveConnectionType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kCursiveSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDecomposeDiacriticsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDecorativeBordersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDefaultCJKRomanSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDefaultLowerCaseSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDefaultUpperCaseSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDesignComplexityType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDesignLevel1Selector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDesignLevel2Selector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDesignLevel3Selector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDesignLevel4Selector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDesignLevel5Selector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDiacriticsType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDiagonalFractionsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDiamondAnnotationSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDingbatsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDiphthongLigaturesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDiphthongLigaturesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kDisplayTextSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kEngravedTextSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kExpertCharactersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kExponentsOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kExponentsOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kFleuronsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kFormInterrobangOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kFormInterrobangOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kFractionsType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kFullWidthCJKRomanSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kFullWidthIdeographsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kFullWidthKanaSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHalfWidthCJKRomanSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHalfWidthIdeographsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHalfWidthTextSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHanjaToHangulAltOneSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHanjaToHangulAltThreeSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHanjaToHangulAltTwoSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHanjaToHangulSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHideDiacriticsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHiraganaToKatakanaSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHistoricalLigaturesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHistoricalLigaturesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHojoCharactersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHyphenToEnDashOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHyphenToEnDashOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHyphenToMinusOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHyphenToMinusOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHyphensToEmDashOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kHyphensToEmDashOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kIdeographicAltFiveSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kIdeographicAltFourSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kIdeographicAltOneSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kIdeographicAltThreeSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kIdeographicAltTwoSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kIdeographicAlternativesType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kIdeographicSpacingType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kIlluminatedCapsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kInequalityLigaturesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kInequalityLigaturesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kInferiorsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kInitialCapsAndSmallCapsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kInitialCapsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kInternationalSymbolsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kInvertedBoxAnnotationSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kInvertedCircleAnnotationSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kInvertedRoundedBoxAnnotationSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kItalicCJKRomanType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJIS1978CharactersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJIS1983CharactersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJIS1990CharactersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJIS2004CharactersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTCurrentVersion;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTKashidaPriority;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTLetterPriority;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTNullPriority;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTOverrideLimits;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTOverridePriority;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTOverrideUnlimited;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTPriorityCount;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTPriorityMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTSpacePriority;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTStandardFormat;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTTag;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTUnlimited;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTnoGlyphcode;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTpcConditionalAddAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTpcDecompositionAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTpcDuctilityAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTpcGlyphRepeatAddAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTpcGlyphStretchAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kJUSTpcUnconditionalAddAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNCrossStream;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNCrossStreamResetNote;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNCurrentVersion;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNFormatMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNIndexArray;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNLineEndKerning;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNLineStart;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNNoCrossKerning;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNNoStakeNote;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNNotApplied;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNNotesRequested;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNOrderedList;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNResetCrossStream;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNSimpleArray;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNStateTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNTag;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNUnusedBits;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNVariation;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERNVertical;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXActionOffsetMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXActionTypeAnchorPoints;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXActionTypeControlPoints;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXActionTypeCoordinates;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXActionTypeMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXControlPoint;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXCrossStream;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXCrossStreamResetNote;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXCurrentVersion;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXDescending;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXFormatMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXIndexArray;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXLineEndKerning;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXLineStart;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXNoCrossKerning;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXNoStakeNote;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXNotApplied;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXNotesRequested;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXOrderedList;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXResetCrossStream;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXSimpleArray;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXStateTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXTag;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXUnusedBits;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXUnusedFlags;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXValuesAreLong;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXVariation;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKERXVertical;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKanaSpacingType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKanaToRomanizationSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kKatakanaToHiraganaSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLCARCtlPointFormat;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLCARCurrentVersion;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLCARLinearFormat;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLCARTag;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLTAGCurrentVersion;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLanguageTagType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLastFeatureType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLetterCaseType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLigaturesType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLineFinalSwashesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLineFinalSwashesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLineInitialSwashesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLineInitialSwashesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLinguisticRearrangementOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLinguisticRearrangementOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLinguisticRearrangementType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLogosOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLogosOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLowerCaseNumbersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLowerCasePetiteCapsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLowerCaseSmallCapsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kLowerCaseType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTContextualType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTCoverDescending;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTCoverIgnoreVertical;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTCoverTypeMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTCoverVertical;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTCurrInsertBefore;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTCurrInsertCountMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTCurrInsertCountShift;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTCurrInsertKashidaLike;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTCurrJustTableCountMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTCurrJustTableCountShift;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTCurrentVersion;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTDoInsertionsBefore;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTInsertionType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTInsertionsCountMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTIsSplitVowelPiece;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTLigFormOffsetMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTLigFormOffsetShift;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTLigLastAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTLigStoreLigature;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTLigatureType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTMarkInsertBefore;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTMarkInsertCountMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTMarkInsertCountShift;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTMarkInsertKashidaLike;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTMarkJustTableCountMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTMarkJustTableCountShift;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTRearrangementType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTSwashType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTTag;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraCDx;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraCDxA;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraCDxAB;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraCDxBA;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraDCx;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraDCxA;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraDCxAB;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraDCxBA;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraDx;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraDxA;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraDxAB;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraDxBA;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraNoAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraxA;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraxAB;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORTraxBA;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORXCoverDescending;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORXCoverIgnoreVertical;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORXCoverLogicalOrder;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORXCoverTypeMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORXCoverVertical;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORXCurrentVersion;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMORXTag;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMathSymbolsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMathematicalExtrasType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMathematicalGreekOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMathematicalGreekOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMonospacedNumbersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kMonospacedTextSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNLCCharactersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNoAlternatesSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNoAnnotationSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNoCJKItalicRomanSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNoCJKSymbolAlternativesSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNoFractionsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNoIdeographicAlternativesSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNoOrnamentsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNoRubyKanaSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNoStyleOptionsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNoStylisticAlternatesSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNoTransliterationSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNonFinalSwashesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNonFinalSwashesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNormalPositionSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNumberCaseType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kNumberSpacingType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kOPBDControlPointFormat;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kOPBDCurrentVersion;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kOPBDDistanceFormat;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kOPBDTag;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kOrdinalsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kOrnamentSetsType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kOverlappingCharactersType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPALDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPANDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPBNDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPCSDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPCanHangLTMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPCanHangRBMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPCurrentVersion;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPDirectionMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPENDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPESDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPETDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPIsFloaterMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPLDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPLREDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPLRODirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPNSMDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPNumDirectionClasses;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPONDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPPDFDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPPSDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPPairOffsetMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPPairOffsetShift;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPPairOffsetSign;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPRDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPRLEDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPRLODirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPRightConnectMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPSDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPSENDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPTag;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPUseRLPairMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPWSDirectionClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPROPZeroReserved;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kParenthesisAnnotationSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPartiallyConnectedSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPeriodAnnotationSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPeriodsToEllipsisOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPeriodsToEllipsisOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPiCharactersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPreventOverlapOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kPreventOverlapOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kProportionalCJKRomanSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kProportionalIdeographsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kProportionalKanaSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kProportionalNumbersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kProportionalTextSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kQuarterWidthNumbersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kQuarterWidthTextSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kRareLigaturesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kRareLigaturesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kRebusPicturesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kRebusPicturesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kRequiredLigaturesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kRequiredLigaturesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kRomanNumeralAnnotationSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kRomanizationToHiraganaSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kRomanizationToKatakanaSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kRoundedBoxAnnotationSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kRubyKanaOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kRubyKanaOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kRubyKanaSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kRubyKanaType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSFNTLookupSegmentArray;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSFNTLookupSegmentSingle;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSFNTLookupSimpleArray;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSFNTLookupSingleTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSFNTLookupTrimmedArray;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSFNTLookupVector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSTClassDeletedGlyph;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSTClassEndOfLine;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSTClassEndOfText;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSTClassOutOfBounds;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSTKCrossStreamReset;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSTLigActionMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSTMarkEnd;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSTNoAdvance;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSTRearrVerbMask;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSTSetMark;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSTXHasLigAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kScientificInferiorsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kShowDiacriticsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSimplifiedCharactersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSlashToDivideOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSlashToDivideOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSlashedZeroOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSlashedZeroOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSmallCapsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSmartQuotesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSmartQuotesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSmartSwashType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSquaredLigaturesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSquaredLigaturesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStyleOptionsType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltEightOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltEightOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltEighteenOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltEighteenOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltElevenOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltElevenOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltFifteenOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltFifteenOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltFiveOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltFiveOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltFourOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltFourOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltFourteenOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltFourteenOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltNineOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltNineOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltNineteenOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltNineteenOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltOneOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltOneOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltSevenOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltSevenOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltSeventeenOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltSeventeenOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltSixOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltSixOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltSixteenOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltSixteenOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltTenOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltTenOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltThirteenOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltThirteenOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltThreeOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltThreeOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltTwelveOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltTwelveOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltTwentyOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltTwentyOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltTwoOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAltTwoOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kStylisticAlternativesType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSubstituteVerticalFormsOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSubstituteVerticalFormsOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSuperiorsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSwashAlternatesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSwashAlternatesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSymbolLigaturesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kSymbolLigaturesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTRAKCurrentVersion;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTRAKTag;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTRAKUniformFormat;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTallCapsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTextSpacingType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kThirdWidthNumbersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kThirdWidthTextSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTitlingCapsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTraditionalAltFiveSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTraditionalAltFourSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTraditionalAltOneSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTraditionalAltThreeSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTraditionalAltTwoSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTraditionalCharactersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTraditionalNamesCharactersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTranscodingCompositionOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTranscodingCompositionOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTransliterationType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kTypographicExtrasType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kUnconnectedSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kUnicodeDecompositionType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kUpperAndLowerCaseSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kUpperCaseNumbersSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kUpperCasePetiteCapsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kUpperCaseSmallCapsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kUpperCaseType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kVerticalFractionsSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kVerticalPositionType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kVerticalSubstitutionType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kWordFinalSwashesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kWordFinalSwashesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kWordInitialSwashesOffSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::kWordInitialSwashesOnSelector;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::ALMXGlyphEntry;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::ALMXHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::AnchorPoint;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::AnchorPointTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::AnkrTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::BslnBaselineClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::BslnFormat0Part;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::BslnFormat1Part;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::BslnFormat2Part;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::BslnFormat3Part;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::BslnFormatUnion;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::BslnTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::BslnTableFormat;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::BslnTablePtr;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::JustDirectionTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::JustPCAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::JustPCActionSubrecord;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::JustPCActionType;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::JustPCConditionalAddAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::JustPCDecompositionAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::JustPCDuctilityAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::JustPCGlyphRepeatAddAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::JustPCUnconditionalAddAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::JustPostcompTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::JustTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::JustWidthDeltaEntry;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::JustWidthDeltaGroup;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::JustificationFlags;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernArrayOffset;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernFormatSpecificHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernIndexArrayHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernKerningPair;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernKerningValue;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernOffsetTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernOffsetTablePtr;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernOrderedListEntry;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernOrderedListEntryPtr;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernOrderedListHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernSimpleArrayHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernStateEntry;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernStateHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernSubtableHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernSubtableHeaderPtr;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernSubtableInfo;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernTableFormat;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernTableHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernTableHeaderHandle;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernTableHeaderPtr;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernVersion0Header;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KernVersion0SubtableHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxAnchorPointAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxArrayOffset;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxControlPointAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxControlPointEntry;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxControlPointHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxCoordinateAction;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxFormatSpecificHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxIndexArrayHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxKerningPair;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxOrderedListEntry;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxOrderedListEntryPtr;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxOrderedListHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxSimpleArrayHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxStateEntry;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxStateHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxSubtableCoverage;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxSubtableHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxSubtableHeaderPtr;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxTableHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxTableHeaderHandle;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::KerxTableHeaderPtr;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::LcarCaretClassEntry;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::LcarCaretTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::LcarCaretTablePtr;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::LtagStringRange;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::LtagTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MortChain;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MortContextualSubtable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MortFeatureEntry;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MortInsertionSubtable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MortLigatureActionEntry;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MortLigatureSubtable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MortRearrangementSubtable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MortSpecificSubtable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MortSubtable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MortSubtableMaskFlags;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MortSwashSubtable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MortTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MorxChain;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MorxContextualSubtable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MorxInsertionSubtable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MorxLigatureSubtable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MorxRearrangementSubtable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MorxSpecificSubtable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MorxSubtable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::MorxTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::OpbdSideValues;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::OpbdTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::OpbdTableFormat;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::PropCharProperties;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::PropLookupSegment;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::PropLookupSingle;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::PropTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::ROTAGlyphEntry;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::ROTAHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupArrayHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupBinarySearchHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupFormatSpecificHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupKind;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupOffset;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupSegment;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupSegmentHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupSingle;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupSingleHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupTableFormat;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupTableHandle;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupTablePtr;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupTrimmedArrayHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupValue;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::SFNTLookupVectorHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STClassTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STEntryIndex;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STEntryOne;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STEntryTwo;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STEntryZero;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STXClass;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STXClassTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STXEntryIndex;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STXEntryOne;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STXEntryTwo;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STXEntryZero;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STXHeader;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::STXStateIndex;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::TrakTable;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::TrakTableData;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::TrakTableEntry;
#[cfg(feature = "SFNTLayoutTypes")]
pub use self::__SFNTLayoutTypes::TrakValue;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::cmapFontTableTag;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::descriptorFontTableTag;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::featureFontTableTag;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontAlbanianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontAmharicLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontAmharicScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontArabicLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontArabicScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontArmenianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontArmenianScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontAssameseLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontAymaraLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontAzerbaijanArLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontAzerbaijaniLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontBasqueLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontBengaliLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontBengaliScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontBulgarianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontBurmeseLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontBurmeseScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontByelorussianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontCatalanLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontChewaLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontChineseScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontCopyrightName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontCroatianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontCustom16BitScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontCustom816BitScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontCustom8BitScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontCustomPlatform;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontCyrillicScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontCzechLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontDanishLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontDescriptionName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontDesignerName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontDesignerURLName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontDevanagariScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontDutchLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontDzongkhaLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontEastEuropeanRomanScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontEnglishLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontEsperantoLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontEstonianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontEthiopicScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontExtendedArabicScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontFaeroeseLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontFamilyName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontFarsiLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontFinnishLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontFlemishLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontFrenchLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontFullName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontGallaLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontGeezScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontGeorgianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontGeorgianScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontGermanLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontGreekLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontGreekScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontGuaraniLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontGujaratiLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontGujaratiScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontGurmukhiScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontHebrewLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontHebrewScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontHindiLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontHungarianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontISO10646_1993Semantics;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontIcelandicLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontIndonesianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontIrishLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontItalianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontJapaneseLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontJapaneseScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontJavaneseRomLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontKannadaLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontKannadaScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontKashmiriLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontKazakhLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontKhmerLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontKhmerScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontKirghizLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontKoreanLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontKoreanScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontKurdishLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontLaoLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontLaotianScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontLappishLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontLastReservedName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontLatinLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontLatvianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontLettishLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontLicenseDescriptionName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontLicenseInfoURLName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontLithuanianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMacCompatibleFullName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMacedonianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMacintoshPlatform;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMalagasyLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMalayArabicLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMalayRomanLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMalayalamLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMalayalamScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMalteseLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontManufacturerName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMarathiLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMicrosoftPlatform;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMicrosoftStandardScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMicrosoftSymbolScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMicrosoftUCS4Script;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMoldavianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMongolianCyrLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMongolianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontMongolianScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontNepaliLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontNoLanguageCode;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontNoNameCode;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontNoPlatformCode;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontNoScriptCode;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontNorwegianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontOriyaLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontOriyaScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontOromoLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontPashtoLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontPersianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontPolishLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontPortugueseLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontPostScriptCIDName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontPostscriptName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontPreferredFamilyName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontPreferredSubfamilyName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontPunjabiLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontQuechuaLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontRSymbolScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontReservedPlatform;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontRomanScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontRomanianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontRuandaLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontRundiLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontRussian;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontRussianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSaamiskLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSampleTextName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSanskritLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSerbianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSimpChineseLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSimpleChineseScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSindhiLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSindhiScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSinhaleseLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSinhaleseScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSlavicScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSlovakLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSlovenianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSomaliLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSpanishLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontStyleName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSundaneseRomLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSwahiliLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontSwedishLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTagalogLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTajikiLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTamilLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTamilScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTatarLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTeluguLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTeluguScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontThaiLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontThaiScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTibetanLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTibetanScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTigrinyaLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTradChineseLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTrademarkName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTraditionalChineseScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTurkishLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontTurkmenLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontUighurLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontUkrainianLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontUnicodeDefaultSemantics;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontUnicodePlatform;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontUnicodeV1_1Semantics;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontUnicodeV2_0BMPOnlySemantics;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontUnicodeV2_0FullCoverageSemantics;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontUnicodeV4_0VariationSequenceSemantics;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontUnicode_FullRepertoire;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontUninterpretedScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontUniqueName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontUrduLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontUzbekLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontVendorURLName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontVersionName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontVietnameseLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontVietnameseScript;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontWelshLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::kFontYiddishLanguage;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::nameFontTableTag;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::nonGlyphID;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::os2FontTableTag;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntCMapEncoding;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntCMapExtendedSubHeader;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntCMapHeader;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntCMapSubHeader;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntDescriptorHeader;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntDirectory;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntDirectoryEntry;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntFeatureHeader;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntFeatureName;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntFontDescriptor;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntFontFeatureSetting;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntFontRunFeature;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntInstance;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntNameHeader;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntNameRecord;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntVariationAxis;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sfntVariationHeader;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sizeof_sfntCMapEncoding;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sizeof_sfntCMapExtendedSubHeader;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sizeof_sfntCMapHeader;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sizeof_sfntCMapSubHeader;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sizeof_sfntDescriptorHeader;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sizeof_sfntDirectory;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sizeof_sfntInstance;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sizeof_sfntNameHeader;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sizeof_sfntNameRecord;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sizeof_sfntVariationAxis;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::sizeof_sfntVariationHeader;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::variationFontTableTag;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::FontLanguageCode;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::FontNameCode;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::FontPlatformCode;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::FontScriptCode;
#[cfg(feature = "SFNTTypes")]
pub use self::__SFNTTypes::FontVariation;
use core::ffi::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber10_5?language=objc)
pub const kCTVersionNumber10_5: c_uint = 0x00020000;
/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber10_5_2?language=objc)
pub const kCTVersionNumber10_5_2: c_uint = 0x00020001;
/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber10_5_3?language=objc)
pub const kCTVersionNumber10_5_3: c_uint = 0x00020002;
/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber10_5_5?language=objc)
pub const kCTVersionNumber10_5_5: c_uint = 0x00020003;
/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber10_6?language=objc)
pub const kCTVersionNumber10_6: c_uint = 0x00030000;
/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber10_7?language=objc)
pub const kCTVersionNumber10_7: c_uint = 0x00040000;
/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber10_8?language=objc)
pub const kCTVersionNumber10_8: c_uint = 0x00050000;
/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber10_9?language=objc)
pub const kCTVersionNumber10_9: c_uint = 0x00060000;
/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber10_10?language=objc)
pub const kCTVersionNumber10_10: c_uint = 0x00070000;
/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber10_11?language=objc)
pub const kCTVersionNumber10_11: c_uint = 0x00080000;
/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber10_12?language=objc)
pub const kCTVersionNumber10_12: c_uint = 0x00090000;
/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber10_13?language=objc)
pub const kCTVersionNumber10_13: c_uint = 0x000A0000;
/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber10_14?language=objc)
pub const kCTVersionNumber10_14: c_uint = 0x000B0000;
/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber10_15?language=objc)
pub const kCTVersionNumber10_15: c_uint = 0x000C0000;
/// [Apple's documentation](https://developer.apple.com/documentation/coretext/kctversionnumber11_0?language=objc)
pub const kCTVersionNumber11_0: c_uint = 0x000D0000;
extern "C-unwind" {
    /// Returns the version of the CoreText framework.
    ///
    ///
    /// This function returns a number indicating the version of the
    /// CoreText framework. Note that framework version is not always
    /// an accurate indicator of feature availability. The recommended
    /// way to use this function is first to check that the function
    /// pointer is non-NULL, followed by calling it and comparing its
    /// result to a defined constant (or constants). For example, to
    /// determine whether the CoreText API is available:
    /// if (
    /// &CTGetCoreTextVersion
    /// != NULL
    /// &
    /// &
    /// CTGetCoreTextVersion() >= kCTVersionNumber10_5) {
    /// // CoreText API is available
    /// }
    ///
    ///
    /// Returns: The version number. This value is for comparison with the
    /// constants beginning with kCTVersionNumber and will not exceed
    /// kCTVersionNumber11_0.
    #[deprecated = "Use -[NSProcessInfo operatingSystemVersion]"]
    pub fn CTGetCoreTextVersion() -> u32;
}
