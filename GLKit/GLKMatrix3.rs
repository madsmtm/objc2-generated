//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT

use crate::*;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/glkit/glkmatrix3identity?language=objc)
    #[cfg(feature = "GLKMathTypes")]
    pub static GLKMatrix3Identity: GLKMatrix3;
}

// TODO: pub fn GLKMatrix3Make(m00: c_float,m01: c_float,m02: c_float,m10: c_float,m11: c_float,m12: c_float,m20: c_float,m21: c_float,m22: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeAndTranspose(m00: c_float,m01: c_float,m02: c_float,m10: c_float,m11: c_float,m12: c_float,m20: c_float,m21: c_float,m22: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeWithArray(values: Option<&mut [c_float; 9]>,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeWithArrayAndTranspose(values: Option<&mut [c_float; 9]>,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeWithRows(row0: GLKVector3,row1: GLKVector3,row2: GLKVector3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeWithColumns(column0: GLKVector3,column1: GLKVector3,column2: GLKVector3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeWithQuaternion(quaternion: GLKQuaternion,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeScale(sx: c_float,sy: c_float,sz: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeRotation(radians: c_float,x: c_float,y: c_float,z: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeXRotation(radians: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeYRotation(radians: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeZRotation(radians: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3GetMatrix2(matrix: GLKMatrix3,) -> GLKMatrix2;

// TODO: pub fn GLKMatrix3GetRow(matrix: GLKMatrix3,row: c_int,) -> GLKVector3;

// TODO: pub fn GLKMatrix3GetColumn(matrix: GLKMatrix3,column: c_int,) -> GLKVector3;

// TODO: pub fn GLKMatrix3SetRow(matrix: GLKMatrix3,row: c_int,vector: GLKVector3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3SetColumn(matrix: GLKMatrix3,column: c_int,vector: GLKVector3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3Transpose(matrix: GLKMatrix3,) -> GLKMatrix3;

extern "C-unwind" {
    /// # Safety
    ///
    /// `is_invertible` must be a valid pointer.
    #[cfg(feature = "GLKMathTypes")]
    pub fn GLKMatrix3Invert(matrix: GLKMatrix3, is_invertible: *mut bool) -> GLKMatrix3;
}

extern "C-unwind" {
    /// # Safety
    ///
    /// `is_invertible` must be a valid pointer.
    #[cfg(feature = "GLKMathTypes")]
    pub fn GLKMatrix3InvertAndTranspose(matrix: GLKMatrix3, is_invertible: *mut bool)
        -> GLKMatrix3;
}

// TODO: pub fn GLKMatrix3Multiply(matrix_left: GLKMatrix3,matrix_right: GLKMatrix3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3Add(matrix_left: GLKMatrix3,matrix_right: GLKMatrix3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3Subtract(matrix_left: GLKMatrix3,matrix_right: GLKMatrix3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3Scale(matrix: GLKMatrix3,sx: c_float,sy: c_float,sz: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3ScaleWithVector3(matrix: GLKMatrix3,scale_vector: GLKVector3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3ScaleWithVector4(matrix: GLKMatrix3,scale_vector: GLKVector4,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3Rotate(matrix: GLKMatrix3,radians: c_float,x: c_float,y: c_float,z: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3RotateWithVector3(matrix: GLKMatrix3,radians: c_float,axis_vector: GLKVector3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3RotateWithVector4(matrix: GLKMatrix3,radians: c_float,axis_vector: GLKVector4,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3RotateX(matrix: GLKMatrix3,radians: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3RotateY(matrix: GLKMatrix3,radians: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3RotateZ(matrix: GLKMatrix3,radians: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MultiplyVector3(matrix_left: GLKMatrix3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKMatrix3MultiplyVector3Array(matrix: GLKMatrix3,vectors: NonNull<GLKVector3>,vector_count: usize,);

// TODO: pub fn GLKMatrix3Make(m00: c_float,m01: c_float,m02: c_float,m10: c_float,m11: c_float,m12: c_float,m20: c_float,m21: c_float,m22: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeAndTranspose(m00: c_float,m01: c_float,m02: c_float,m10: c_float,m11: c_float,m12: c_float,m20: c_float,m21: c_float,m22: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeWithArray(values: Option<&mut [c_float; 9]>,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeWithArrayAndTranspose(values: Option<&mut [c_float; 9]>,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeWithRows(row0: GLKVector3,row1: GLKVector3,row2: GLKVector3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeWithColumns(column0: GLKVector3,column1: GLKVector3,column2: GLKVector3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeWithQuaternion(quaternion: GLKQuaternion,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeScale(sx: c_float,sy: c_float,sz: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeRotation(radians: c_float,x: c_float,y: c_float,z: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeXRotation(radians: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeYRotation(radians: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MakeZRotation(radians: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3GetMatrix2(matrix: GLKMatrix3,) -> GLKMatrix2;

// TODO: pub fn GLKMatrix3GetRow(matrix: GLKMatrix3,row: c_int,) -> GLKVector3;

// TODO: pub fn GLKMatrix3GetColumn(matrix: GLKMatrix3,column: c_int,) -> GLKVector3;

// TODO: pub fn GLKMatrix3SetRow(matrix: GLKMatrix3,row: c_int,vector: GLKVector3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3SetColumn(matrix: GLKMatrix3,column: c_int,vector: GLKVector3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3Transpose(matrix: GLKMatrix3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3Multiply(matrix_left: GLKMatrix3,matrix_right: GLKMatrix3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3Add(matrix_left: GLKMatrix3,matrix_right: GLKMatrix3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3Subtract(matrix_left: GLKMatrix3,matrix_right: GLKMatrix3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3Scale(matrix: GLKMatrix3,sx: c_float,sy: c_float,sz: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3ScaleWithVector3(matrix: GLKMatrix3,scale_vector: GLKVector3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3ScaleWithVector4(matrix: GLKMatrix3,scale_vector: GLKVector4,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3Rotate(matrix: GLKMatrix3,radians: c_float,x: c_float,y: c_float,z: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3RotateWithVector3(matrix: GLKMatrix3,radians: c_float,axis_vector: GLKVector3,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3RotateWithVector4(matrix: GLKMatrix3,radians: c_float,axis_vector: GLKVector4,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3RotateX(matrix: GLKMatrix3,radians: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3RotateY(matrix: GLKMatrix3,radians: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3RotateZ(matrix: GLKMatrix3,radians: c_float,) -> GLKMatrix3;

// TODO: pub fn GLKMatrix3MultiplyVector3(matrix_left: GLKMatrix3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKMatrix3MultiplyVector3Array(matrix: GLKMatrix3,vectors: NonNull<GLKVector3>,vector_count: usize,);
