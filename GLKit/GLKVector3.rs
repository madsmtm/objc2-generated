//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT

use crate::*;

// TODO: pub fn GLKVector3Make(x: c_float,y: c_float,z: c_float,) -> GLKVector3;

// TODO: pub fn GLKVector3MakeWithArray(values: Option<&mut [c_float; 3]>,) -> GLKVector3;

// TODO: pub fn GLKVector3Negate(vector: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3Add(vector_left: GLKVector3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3Subtract(vector_left: GLKVector3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3Multiply(vector_left: GLKVector3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3Divide(vector_left: GLKVector3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3AddScalar(vector: GLKVector3,value: c_float,) -> GLKVector3;

// TODO: pub fn GLKVector3SubtractScalar(vector: GLKVector3,value: c_float,) -> GLKVector3;

// TODO: pub fn GLKVector3MultiplyScalar(vector: GLKVector3,value: c_float,) -> GLKVector3;

// TODO: pub fn GLKVector3DivideScalar(vector: GLKVector3,value: c_float,) -> GLKVector3;

// TODO: pub fn GLKVector3Maximum(vector_left: GLKVector3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3Minimum(vector_left: GLKVector3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3AllEqualToVector3(vector_left: GLKVector3,vector_right: GLKVector3,) -> bool;

// TODO: pub fn GLKVector3AllEqualToScalar(vector: GLKVector3,value: c_float,) -> bool;

// TODO: pub fn GLKVector3AllGreaterThanVector3(vector_left: GLKVector3,vector_right: GLKVector3,) -> bool;

// TODO: pub fn GLKVector3AllGreaterThanScalar(vector: GLKVector3,value: c_float,) -> bool;

// TODO: pub fn GLKVector3AllGreaterThanOrEqualToVector3(vector_left: GLKVector3,vector_right: GLKVector3,) -> bool;

// TODO: pub fn GLKVector3AllGreaterThanOrEqualToScalar(vector: GLKVector3,value: c_float,) -> bool;

// TODO: pub fn GLKVector3Normalize(vector: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3DotProduct(vector_left: GLKVector3,vector_right: GLKVector3,) -> c_float;

// TODO: pub fn GLKVector3Length(vector: GLKVector3,) -> c_float;

// TODO: pub fn GLKVector3Distance(vector_start: GLKVector3,vector_end: GLKVector3,) -> c_float;

// TODO: pub fn GLKVector3Lerp(vector_start: GLKVector3,vector_end: GLKVector3,t: c_float,) -> GLKVector3;

// TODO: pub fn GLKVector3CrossProduct(vector_left: GLKVector3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3Project(vector_to_project: GLKVector3,projection_vector: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3Make(x: c_float,y: c_float,z: c_float,) -> GLKVector3;

// TODO: pub fn GLKVector3MakeWithArray(values: Option<&mut [c_float; 3]>,) -> GLKVector3;

// TODO: pub fn GLKVector3Negate(vector: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3Add(vector_left: GLKVector3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3Subtract(vector_left: GLKVector3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3Multiply(vector_left: GLKVector3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3Divide(vector_left: GLKVector3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3AddScalar(vector: GLKVector3,value: c_float,) -> GLKVector3;

// TODO: pub fn GLKVector3SubtractScalar(vector: GLKVector3,value: c_float,) -> GLKVector3;

// TODO: pub fn GLKVector3MultiplyScalar(vector: GLKVector3,value: c_float,) -> GLKVector3;

// TODO: pub fn GLKVector3DivideScalar(vector: GLKVector3,value: c_float,) -> GLKVector3;

// TODO: pub fn GLKVector3Maximum(vector_left: GLKVector3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3Minimum(vector_left: GLKVector3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3AllEqualToVector3(vector_left: GLKVector3,vector_right: GLKVector3,) -> bool;

// TODO: pub fn GLKVector3AllEqualToScalar(vector: GLKVector3,value: c_float,) -> bool;

// TODO: pub fn GLKVector3AllGreaterThanVector3(vector_left: GLKVector3,vector_right: GLKVector3,) -> bool;

// TODO: pub fn GLKVector3AllGreaterThanScalar(vector: GLKVector3,value: c_float,) -> bool;

// TODO: pub fn GLKVector3AllGreaterThanOrEqualToVector3(vector_left: GLKVector3,vector_right: GLKVector3,) -> bool;

// TODO: pub fn GLKVector3AllGreaterThanOrEqualToScalar(vector: GLKVector3,value: c_float,) -> bool;

// TODO: pub fn GLKVector3Normalize(vector: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3DotProduct(vector_left: GLKVector3,vector_right: GLKVector3,) -> c_float;

// TODO: pub fn GLKVector3Length(vector: GLKVector3,) -> c_float;

// TODO: pub fn GLKVector3Distance(vector_start: GLKVector3,vector_end: GLKVector3,) -> c_float;

// TODO: pub fn GLKVector3Lerp(vector_start: GLKVector3,vector_end: GLKVector3,t: c_float,) -> GLKVector3;

// TODO: pub fn GLKVector3CrossProduct(vector_left: GLKVector3,vector_right: GLKVector3,) -> GLKVector3;

// TODO: pub fn GLKVector3Project(vector_to_project: GLKVector3,projection_vector: GLKVector3,) -> GLKVector3;
