//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// A template for customizing the display of relevant shortcuts.
    ///
    /// See also: INRelevantShortcut
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/intents/indefaultcardtemplate?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct INDefaultCardTemplate;
);

extern_conformance!(
    unsafe impl NSCoding for INDefaultCardTemplate {}
);

extern_conformance!(
    unsafe impl NSCopying for INDefaultCardTemplate {}
);

unsafe impl CopyingHelper for INDefaultCardTemplate {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for INDefaultCardTemplate {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for INDefaultCardTemplate {}
);

impl INDefaultCardTemplate {
    extern_methods!(
        /// The title used when displaying the relevant shortcut.
        #[unsafe(method(title))]
        #[unsafe(method_family = none)]
        pub unsafe fn title(&self) -> Retained<NSString>;

        /// Setter for [`title`][Self::title].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setTitle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTitle(&self, title: &NSString);

        /// The subtitle used when displaying the relevant shortcut.
        #[unsafe(method(subtitle))]
        #[unsafe(method_family = none)]
        pub unsafe fn subtitle(&self) -> Option<Retained<NSString>>;

        /// Setter for [`subtitle`][Self::subtitle].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setSubtitle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSubtitle(&self, subtitle: Option<&NSString>);

        #[cfg(feature = "INImage")]
        /// The image used when displaying the relevant shortcut.
        #[unsafe(method(image))]
        #[unsafe(method_family = none)]
        pub unsafe fn image(&self) -> Option<Retained<INImage>>;

        #[cfg(feature = "INImage")]
        /// Setter for [`image`][Self::image].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setImage:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setImage(&self, image: Option<&INImage>);

        /// Initializes a default card template with the provided title.
        #[unsafe(method(initWithTitle:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithTitle(this: Allocated<Self>, title: &NSString) -> Retained<Self>;

        /// Note: Must be initilaized with a title, using those initializers.
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
impl INDefaultCardTemplate {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
