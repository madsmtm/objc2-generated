//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// DOMCSS2Properties.
#[deprecated]
#[cfg(all(
    feature = "DOMCSSStyleDeclaration",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
impl DOMCSSStyleDeclaration {
    extern_methods!(
        #[unsafe(method(azimuth))]
        #[unsafe(method_family = none)]
        pub unsafe fn azimuth(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `azimuth` might not allow `None`.
        #[unsafe(method(setAzimuth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAzimuth(&self, azimuth: Option<&NSString>);

        #[unsafe(method(background))]
        #[unsafe(method_family = none)]
        pub unsafe fn background(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `background` might not allow `None`.
        #[unsafe(method(setBackground:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBackground(&self, background: Option<&NSString>);

        #[unsafe(method(backgroundAttachment))]
        #[unsafe(method_family = none)]
        pub unsafe fn backgroundAttachment(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `background_attachment` might not allow `None`.
        #[unsafe(method(setBackgroundAttachment:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBackgroundAttachment(&self, background_attachment: Option<&NSString>);

        #[unsafe(method(backgroundColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn backgroundColor(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `background_color` might not allow `None`.
        #[unsafe(method(setBackgroundColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBackgroundColor(&self, background_color: Option<&NSString>);

        #[unsafe(method(backgroundImage))]
        #[unsafe(method_family = none)]
        pub unsafe fn backgroundImage(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `background_image` might not allow `None`.
        #[unsafe(method(setBackgroundImage:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBackgroundImage(&self, background_image: Option<&NSString>);

        #[unsafe(method(backgroundPosition))]
        #[unsafe(method_family = none)]
        pub unsafe fn backgroundPosition(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `background_position` might not allow `None`.
        #[unsafe(method(setBackgroundPosition:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBackgroundPosition(&self, background_position: Option<&NSString>);

        #[unsafe(method(backgroundRepeat))]
        #[unsafe(method_family = none)]
        pub unsafe fn backgroundRepeat(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `background_repeat` might not allow `None`.
        #[unsafe(method(setBackgroundRepeat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBackgroundRepeat(&self, background_repeat: Option<&NSString>);

        #[unsafe(method(border))]
        #[unsafe(method_family = none)]
        pub unsafe fn border(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border` might not allow `None`.
        #[unsafe(method(setBorder:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorder(&self, border: Option<&NSString>);

        #[unsafe(method(borderCollapse))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderCollapse(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_collapse` might not allow `None`.
        #[unsafe(method(setBorderCollapse:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderCollapse(&self, border_collapse: Option<&NSString>);

        #[unsafe(method(borderColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderColor(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_color` might not allow `None`.
        #[unsafe(method(setBorderColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderColor(&self, border_color: Option<&NSString>);

        #[unsafe(method(borderSpacing))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderSpacing(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_spacing` might not allow `None`.
        #[unsafe(method(setBorderSpacing:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderSpacing(&self, border_spacing: Option<&NSString>);

        #[unsafe(method(borderStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderStyle(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_style` might not allow `None`.
        #[unsafe(method(setBorderStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderStyle(&self, border_style: Option<&NSString>);

        #[unsafe(method(borderTop))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderTop(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_top` might not allow `None`.
        #[unsafe(method(setBorderTop:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderTop(&self, border_top: Option<&NSString>);

        #[unsafe(method(borderRight))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderRight(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_right` might not allow `None`.
        #[unsafe(method(setBorderRight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderRight(&self, border_right: Option<&NSString>);

        #[unsafe(method(borderBottom))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderBottom(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_bottom` might not allow `None`.
        #[unsafe(method(setBorderBottom:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderBottom(&self, border_bottom: Option<&NSString>);

        #[unsafe(method(borderLeft))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderLeft(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_left` might not allow `None`.
        #[unsafe(method(setBorderLeft:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderLeft(&self, border_left: Option<&NSString>);

        #[unsafe(method(borderTopColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderTopColor(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_top_color` might not allow `None`.
        #[unsafe(method(setBorderTopColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderTopColor(&self, border_top_color: Option<&NSString>);

        #[unsafe(method(borderRightColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderRightColor(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_right_color` might not allow `None`.
        #[unsafe(method(setBorderRightColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderRightColor(&self, border_right_color: Option<&NSString>);

        #[unsafe(method(borderBottomColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderBottomColor(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_bottom_color` might not allow `None`.
        #[unsafe(method(setBorderBottomColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderBottomColor(&self, border_bottom_color: Option<&NSString>);

        #[unsafe(method(borderLeftColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderLeftColor(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_left_color` might not allow `None`.
        #[unsafe(method(setBorderLeftColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderLeftColor(&self, border_left_color: Option<&NSString>);

        #[unsafe(method(borderTopStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderTopStyle(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_top_style` might not allow `None`.
        #[unsafe(method(setBorderTopStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderTopStyle(&self, border_top_style: Option<&NSString>);

        #[unsafe(method(borderRightStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderRightStyle(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_right_style` might not allow `None`.
        #[unsafe(method(setBorderRightStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderRightStyle(&self, border_right_style: Option<&NSString>);

        #[unsafe(method(borderBottomStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderBottomStyle(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_bottom_style` might not allow `None`.
        #[unsafe(method(setBorderBottomStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderBottomStyle(&self, border_bottom_style: Option<&NSString>);

        #[unsafe(method(borderLeftStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderLeftStyle(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_left_style` might not allow `None`.
        #[unsafe(method(setBorderLeftStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderLeftStyle(&self, border_left_style: Option<&NSString>);

        #[unsafe(method(borderTopWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderTopWidth(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_top_width` might not allow `None`.
        #[unsafe(method(setBorderTopWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderTopWidth(&self, border_top_width: Option<&NSString>);

        #[unsafe(method(borderRightWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderRightWidth(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_right_width` might not allow `None`.
        #[unsafe(method(setBorderRightWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderRightWidth(&self, border_right_width: Option<&NSString>);

        #[unsafe(method(borderBottomWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderBottomWidth(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_bottom_width` might not allow `None`.
        #[unsafe(method(setBorderBottomWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderBottomWidth(&self, border_bottom_width: Option<&NSString>);

        #[unsafe(method(borderLeftWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderLeftWidth(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_left_width` might not allow `None`.
        #[unsafe(method(setBorderLeftWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderLeftWidth(&self, border_left_width: Option<&NSString>);

        #[unsafe(method(borderWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn borderWidth(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `border_width` might not allow `None`.
        #[unsafe(method(setBorderWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBorderWidth(&self, border_width: Option<&NSString>);

        #[unsafe(method(bottom))]
        #[unsafe(method_family = none)]
        pub unsafe fn bottom(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `bottom` might not allow `None`.
        #[unsafe(method(setBottom:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBottom(&self, bottom: Option<&NSString>);

        #[unsafe(method(captionSide))]
        #[unsafe(method_family = none)]
        pub unsafe fn captionSide(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `caption_side` might not allow `None`.
        #[unsafe(method(setCaptionSide:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCaptionSide(&self, caption_side: Option<&NSString>);

        #[unsafe(method(clear))]
        #[unsafe(method_family = none)]
        pub unsafe fn clear(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `clear` might not allow `None`.
        #[unsafe(method(setClear:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setClear(&self, clear: Option<&NSString>);

        #[unsafe(method(clip))]
        #[unsafe(method_family = none)]
        pub unsafe fn clip(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `clip` might not allow `None`.
        #[unsafe(method(setClip:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setClip(&self, clip: Option<&NSString>);

        #[unsafe(method(color))]
        #[unsafe(method_family = none)]
        pub unsafe fn color(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `color` might not allow `None`.
        #[unsafe(method(setColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setColor(&self, color: Option<&NSString>);

        #[unsafe(method(content))]
        #[unsafe(method_family = none)]
        pub unsafe fn content(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `content` might not allow `None`.
        #[unsafe(method(setContent:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setContent(&self, content: Option<&NSString>);

        #[unsafe(method(counterIncrement))]
        #[unsafe(method_family = none)]
        pub unsafe fn counterIncrement(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `counter_increment` might not allow `None`.
        #[unsafe(method(setCounterIncrement:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCounterIncrement(&self, counter_increment: Option<&NSString>);

        #[unsafe(method(counterReset))]
        #[unsafe(method_family = none)]
        pub unsafe fn counterReset(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `counter_reset` might not allow `None`.
        #[unsafe(method(setCounterReset:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCounterReset(&self, counter_reset: Option<&NSString>);

        #[unsafe(method(cue))]
        #[unsafe(method_family = none)]
        pub unsafe fn cue(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `cue` might not allow `None`.
        #[unsafe(method(setCue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCue(&self, cue: Option<&NSString>);

        #[unsafe(method(cueAfter))]
        #[unsafe(method_family = none)]
        pub unsafe fn cueAfter(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `cue_after` might not allow `None`.
        #[unsafe(method(setCueAfter:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCueAfter(&self, cue_after: Option<&NSString>);

        #[unsafe(method(cueBefore))]
        #[unsafe(method_family = none)]
        pub unsafe fn cueBefore(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `cue_before` might not allow `None`.
        #[unsafe(method(setCueBefore:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCueBefore(&self, cue_before: Option<&NSString>);

        #[unsafe(method(cursor))]
        #[unsafe(method_family = none)]
        pub unsafe fn cursor(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `cursor` might not allow `None`.
        #[unsafe(method(setCursor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCursor(&self, cursor: Option<&NSString>);

        #[unsafe(method(direction))]
        #[unsafe(method_family = none)]
        pub unsafe fn direction(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `direction` might not allow `None`.
        #[unsafe(method(setDirection:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDirection(&self, direction: Option<&NSString>);

        #[unsafe(method(display))]
        #[unsafe(method_family = none)]
        pub unsafe fn display(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `display` might not allow `None`.
        #[unsafe(method(setDisplay:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDisplay(&self, display: Option<&NSString>);

        #[unsafe(method(elevation))]
        #[unsafe(method_family = none)]
        pub unsafe fn elevation(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `elevation` might not allow `None`.
        #[unsafe(method(setElevation:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setElevation(&self, elevation: Option<&NSString>);

        #[unsafe(method(emptyCells))]
        #[unsafe(method_family = none)]
        pub unsafe fn emptyCells(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `empty_cells` might not allow `None`.
        #[unsafe(method(setEmptyCells:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEmptyCells(&self, empty_cells: Option<&NSString>);

        #[unsafe(method(cssFloat))]
        #[unsafe(method_family = none)]
        pub unsafe fn cssFloat(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `css_float` might not allow `None`.
        #[unsafe(method(setCssFloat:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCssFloat(&self, css_float: Option<&NSString>);

        #[unsafe(method(font))]
        #[unsafe(method_family = none)]
        pub unsafe fn font(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `font` might not allow `None`.
        #[unsafe(method(setFont:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFont(&self, font: Option<&NSString>);

        #[unsafe(method(fontFamily))]
        #[unsafe(method_family = none)]
        pub unsafe fn fontFamily(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `font_family` might not allow `None`.
        #[unsafe(method(setFontFamily:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFontFamily(&self, font_family: Option<&NSString>);

        #[unsafe(method(fontSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn fontSize(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `font_size` might not allow `None`.
        #[unsafe(method(setFontSize:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFontSize(&self, font_size: Option<&NSString>);

        #[unsafe(method(fontSizeAdjust))]
        #[unsafe(method_family = none)]
        pub unsafe fn fontSizeAdjust(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `font_size_adjust` might not allow `None`.
        #[unsafe(method(setFontSizeAdjust:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFontSizeAdjust(&self, font_size_adjust: Option<&NSString>);

        #[unsafe(method(fontStretch))]
        #[unsafe(method_family = none)]
        pub unsafe fn fontStretch(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `font_stretch` might not allow `None`.
        #[unsafe(method(setFontStretch:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFontStretch(&self, font_stretch: Option<&NSString>);

        #[unsafe(method(fontStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn fontStyle(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `font_style` might not allow `None`.
        #[unsafe(method(setFontStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFontStyle(&self, font_style: Option<&NSString>);

        #[unsafe(method(fontVariant))]
        #[unsafe(method_family = none)]
        pub unsafe fn fontVariant(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `font_variant` might not allow `None`.
        #[unsafe(method(setFontVariant:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFontVariant(&self, font_variant: Option<&NSString>);

        #[unsafe(method(fontWeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn fontWeight(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `font_weight` might not allow `None`.
        #[unsafe(method(setFontWeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFontWeight(&self, font_weight: Option<&NSString>);

        #[unsafe(method(height))]
        #[unsafe(method_family = none)]
        pub unsafe fn height(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `height` might not allow `None`.
        #[unsafe(method(setHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setHeight(&self, height: Option<&NSString>);

        #[unsafe(method(left))]
        #[unsafe(method_family = none)]
        pub unsafe fn left(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `left` might not allow `None`.
        #[unsafe(method(setLeft:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setLeft(&self, left: Option<&NSString>);

        #[unsafe(method(letterSpacing))]
        #[unsafe(method_family = none)]
        pub unsafe fn letterSpacing(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `letter_spacing` might not allow `None`.
        #[unsafe(method(setLetterSpacing:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setLetterSpacing(&self, letter_spacing: Option<&NSString>);

        #[unsafe(method(lineHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn lineHeight(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `line_height` might not allow `None`.
        #[unsafe(method(setLineHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setLineHeight(&self, line_height: Option<&NSString>);

        #[unsafe(method(listStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn listStyle(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `list_style` might not allow `None`.
        #[unsafe(method(setListStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setListStyle(&self, list_style: Option<&NSString>);

        #[unsafe(method(listStyleImage))]
        #[unsafe(method_family = none)]
        pub unsafe fn listStyleImage(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `list_style_image` might not allow `None`.
        #[unsafe(method(setListStyleImage:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setListStyleImage(&self, list_style_image: Option<&NSString>);

        #[unsafe(method(listStylePosition))]
        #[unsafe(method_family = none)]
        pub unsafe fn listStylePosition(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `list_style_position` might not allow `None`.
        #[unsafe(method(setListStylePosition:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setListStylePosition(&self, list_style_position: Option<&NSString>);

        #[unsafe(method(listStyleType))]
        #[unsafe(method_family = none)]
        pub unsafe fn listStyleType(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `list_style_type` might not allow `None`.
        #[unsafe(method(setListStyleType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setListStyleType(&self, list_style_type: Option<&NSString>);

        #[unsafe(method(margin))]
        #[unsafe(method_family = none)]
        pub unsafe fn margin(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `margin` might not allow `None`.
        #[unsafe(method(setMargin:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMargin(&self, margin: Option<&NSString>);

        #[unsafe(method(marginTop))]
        #[unsafe(method_family = none)]
        pub unsafe fn marginTop(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `margin_top` might not allow `None`.
        #[unsafe(method(setMarginTop:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMarginTop(&self, margin_top: Option<&NSString>);

        #[unsafe(method(marginRight))]
        #[unsafe(method_family = none)]
        pub unsafe fn marginRight(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `margin_right` might not allow `None`.
        #[unsafe(method(setMarginRight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMarginRight(&self, margin_right: Option<&NSString>);

        #[unsafe(method(marginBottom))]
        #[unsafe(method_family = none)]
        pub unsafe fn marginBottom(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `margin_bottom` might not allow `None`.
        #[unsafe(method(setMarginBottom:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMarginBottom(&self, margin_bottom: Option<&NSString>);

        #[unsafe(method(marginLeft))]
        #[unsafe(method_family = none)]
        pub unsafe fn marginLeft(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `margin_left` might not allow `None`.
        #[unsafe(method(setMarginLeft:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMarginLeft(&self, margin_left: Option<&NSString>);

        #[unsafe(method(markerOffset))]
        #[unsafe(method_family = none)]
        pub unsafe fn markerOffset(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `marker_offset` might not allow `None`.
        #[unsafe(method(setMarkerOffset:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMarkerOffset(&self, marker_offset: Option<&NSString>);

        #[unsafe(method(marks))]
        #[unsafe(method_family = none)]
        pub unsafe fn marks(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `marks` might not allow `None`.
        #[unsafe(method(setMarks:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMarks(&self, marks: Option<&NSString>);

        #[unsafe(method(maxHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxHeight(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `max_height` might not allow `None`.
        #[unsafe(method(setMaxHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMaxHeight(&self, max_height: Option<&NSString>);

        #[unsafe(method(maxWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn maxWidth(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `max_width` might not allow `None`.
        #[unsafe(method(setMaxWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMaxWidth(&self, max_width: Option<&NSString>);

        #[unsafe(method(minHeight))]
        #[unsafe(method_family = none)]
        pub unsafe fn minHeight(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `min_height` might not allow `None`.
        #[unsafe(method(setMinHeight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMinHeight(&self, min_height: Option<&NSString>);

        #[unsafe(method(minWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn minWidth(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `min_width` might not allow `None`.
        #[unsafe(method(setMinWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMinWidth(&self, min_width: Option<&NSString>);

        #[unsafe(method(orphans))]
        #[unsafe(method_family = none)]
        pub unsafe fn orphans(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `orphans` might not allow `None`.
        #[unsafe(method(setOrphans:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOrphans(&self, orphans: Option<&NSString>);

        #[unsafe(method(outline))]
        #[unsafe(method_family = none)]
        pub unsafe fn outline(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `outline` might not allow `None`.
        #[unsafe(method(setOutline:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutline(&self, outline: Option<&NSString>);

        #[unsafe(method(outlineColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn outlineColor(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `outline_color` might not allow `None`.
        #[unsafe(method(setOutlineColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutlineColor(&self, outline_color: Option<&NSString>);

        #[unsafe(method(outlineStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn outlineStyle(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `outline_style` might not allow `None`.
        #[unsafe(method(setOutlineStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutlineStyle(&self, outline_style: Option<&NSString>);

        #[unsafe(method(outlineWidth))]
        #[unsafe(method_family = none)]
        pub unsafe fn outlineWidth(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `outline_width` might not allow `None`.
        #[unsafe(method(setOutlineWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOutlineWidth(&self, outline_width: Option<&NSString>);

        #[unsafe(method(overflow))]
        #[unsafe(method_family = none)]
        pub unsafe fn overflow(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `overflow` might not allow `None`.
        #[unsafe(method(setOverflow:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOverflow(&self, overflow: Option<&NSString>);

        #[unsafe(method(padding))]
        #[unsafe(method_family = none)]
        pub unsafe fn padding(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `padding` might not allow `None`.
        #[unsafe(method(setPadding:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPadding(&self, padding: Option<&NSString>);

        #[unsafe(method(paddingTop))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingTop(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `padding_top` might not allow `None`.
        #[unsafe(method(setPaddingTop:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingTop(&self, padding_top: Option<&NSString>);

        #[unsafe(method(paddingRight))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingRight(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `padding_right` might not allow `None`.
        #[unsafe(method(setPaddingRight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingRight(&self, padding_right: Option<&NSString>);

        #[unsafe(method(paddingBottom))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingBottom(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `padding_bottom` might not allow `None`.
        #[unsafe(method(setPaddingBottom:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingBottom(&self, padding_bottom: Option<&NSString>);

        #[unsafe(method(paddingLeft))]
        #[unsafe(method_family = none)]
        pub unsafe fn paddingLeft(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `padding_left` might not allow `None`.
        #[unsafe(method(setPaddingLeft:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPaddingLeft(&self, padding_left: Option<&NSString>);

        #[unsafe(method(page))]
        #[unsafe(method_family = none)]
        pub unsafe fn page(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `page` might not allow `None`.
        #[unsafe(method(setPage:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPage(&self, page: Option<&NSString>);

        #[unsafe(method(pageBreakAfter))]
        #[unsafe(method_family = none)]
        pub unsafe fn pageBreakAfter(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `page_break_after` might not allow `None`.
        #[unsafe(method(setPageBreakAfter:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPageBreakAfter(&self, page_break_after: Option<&NSString>);

        #[unsafe(method(pageBreakBefore))]
        #[unsafe(method_family = none)]
        pub unsafe fn pageBreakBefore(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `page_break_before` might not allow `None`.
        #[unsafe(method(setPageBreakBefore:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPageBreakBefore(&self, page_break_before: Option<&NSString>);

        #[unsafe(method(pageBreakInside))]
        #[unsafe(method_family = none)]
        pub unsafe fn pageBreakInside(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `page_break_inside` might not allow `None`.
        #[unsafe(method(setPageBreakInside:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPageBreakInside(&self, page_break_inside: Option<&NSString>);

        #[unsafe(method(pause))]
        #[unsafe(method_family = none)]
        pub unsafe fn pause(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `pause` might not allow `None`.
        #[unsafe(method(setPause:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPause(&self, pause: Option<&NSString>);

        #[unsafe(method(pauseAfter))]
        #[unsafe(method_family = none)]
        pub unsafe fn pauseAfter(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `pause_after` might not allow `None`.
        #[unsafe(method(setPauseAfter:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPauseAfter(&self, pause_after: Option<&NSString>);

        #[unsafe(method(pauseBefore))]
        #[unsafe(method_family = none)]
        pub unsafe fn pauseBefore(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `pause_before` might not allow `None`.
        #[unsafe(method(setPauseBefore:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPauseBefore(&self, pause_before: Option<&NSString>);

        #[unsafe(method(pitch))]
        #[unsafe(method_family = none)]
        pub unsafe fn pitch(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `pitch` might not allow `None`.
        #[unsafe(method(setPitch:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPitch(&self, pitch: Option<&NSString>);

        #[unsafe(method(pitchRange))]
        #[unsafe(method_family = none)]
        pub unsafe fn pitchRange(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `pitch_range` might not allow `None`.
        #[unsafe(method(setPitchRange:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPitchRange(&self, pitch_range: Option<&NSString>);

        #[unsafe(method(playDuring))]
        #[unsafe(method_family = none)]
        pub unsafe fn playDuring(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `play_during` might not allow `None`.
        #[unsafe(method(setPlayDuring:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPlayDuring(&self, play_during: Option<&NSString>);

        #[unsafe(method(position))]
        #[unsafe(method_family = none)]
        pub unsafe fn position(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `position` might not allow `None`.
        #[unsafe(method(setPosition:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPosition(&self, position: Option<&NSString>);

        #[unsafe(method(quotes))]
        #[unsafe(method_family = none)]
        pub unsafe fn quotes(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `quotes` might not allow `None`.
        #[unsafe(method(setQuotes:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setQuotes(&self, quotes: Option<&NSString>);

        #[unsafe(method(richness))]
        #[unsafe(method_family = none)]
        pub unsafe fn richness(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `richness` might not allow `None`.
        #[unsafe(method(setRichness:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRichness(&self, richness: Option<&NSString>);

        #[unsafe(method(right))]
        #[unsafe(method_family = none)]
        pub unsafe fn right(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `right` might not allow `None`.
        #[unsafe(method(setRight:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setRight(&self, right: Option<&NSString>);

        #[unsafe(method(size))]
        #[unsafe(method_family = none)]
        pub unsafe fn size(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `size` might not allow `None`.
        #[unsafe(method(setSize:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSize(&self, size: Option<&NSString>);

        #[unsafe(method(speak))]
        #[unsafe(method_family = none)]
        pub unsafe fn speak(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `speak` might not allow `None`.
        #[unsafe(method(setSpeak:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSpeak(&self, speak: Option<&NSString>);

        #[unsafe(method(speakHeader))]
        #[unsafe(method_family = none)]
        pub unsafe fn speakHeader(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `speak_header` might not allow `None`.
        #[unsafe(method(setSpeakHeader:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSpeakHeader(&self, speak_header: Option<&NSString>);

        #[unsafe(method(speakNumeral))]
        #[unsafe(method_family = none)]
        pub unsafe fn speakNumeral(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `speak_numeral` might not allow `None`.
        #[unsafe(method(setSpeakNumeral:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSpeakNumeral(&self, speak_numeral: Option<&NSString>);

        #[unsafe(method(speakPunctuation))]
        #[unsafe(method_family = none)]
        pub unsafe fn speakPunctuation(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `speak_punctuation` might not allow `None`.
        #[unsafe(method(setSpeakPunctuation:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSpeakPunctuation(&self, speak_punctuation: Option<&NSString>);

        #[unsafe(method(speechRate))]
        #[unsafe(method_family = none)]
        pub unsafe fn speechRate(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `speech_rate` might not allow `None`.
        #[unsafe(method(setSpeechRate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSpeechRate(&self, speech_rate: Option<&NSString>);

        #[unsafe(method(stress))]
        #[unsafe(method_family = none)]
        pub unsafe fn stress(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `stress` might not allow `None`.
        #[unsafe(method(setStress:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setStress(&self, stress: Option<&NSString>);

        #[unsafe(method(tableLayout))]
        #[unsafe(method_family = none)]
        pub unsafe fn tableLayout(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `table_layout` might not allow `None`.
        #[unsafe(method(setTableLayout:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTableLayout(&self, table_layout: Option<&NSString>);

        #[unsafe(method(textAlign))]
        #[unsafe(method_family = none)]
        pub unsafe fn textAlign(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `text_align` might not allow `None`.
        #[unsafe(method(setTextAlign:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTextAlign(&self, text_align: Option<&NSString>);

        #[unsafe(method(textDecoration))]
        #[unsafe(method_family = none)]
        pub unsafe fn textDecoration(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `text_decoration` might not allow `None`.
        #[unsafe(method(setTextDecoration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTextDecoration(&self, text_decoration: Option<&NSString>);

        #[unsafe(method(textIndent))]
        #[unsafe(method_family = none)]
        pub unsafe fn textIndent(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `text_indent` might not allow `None`.
        #[unsafe(method(setTextIndent:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTextIndent(&self, text_indent: Option<&NSString>);

        #[unsafe(method(textShadow))]
        #[unsafe(method_family = none)]
        pub unsafe fn textShadow(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `text_shadow` might not allow `None`.
        #[unsafe(method(setTextShadow:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTextShadow(&self, text_shadow: Option<&NSString>);

        #[unsafe(method(textTransform))]
        #[unsafe(method_family = none)]
        pub unsafe fn textTransform(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `text_transform` might not allow `None`.
        #[unsafe(method(setTextTransform:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTextTransform(&self, text_transform: Option<&NSString>);

        #[unsafe(method(top))]
        #[unsafe(method_family = none)]
        pub unsafe fn top(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `top` might not allow `None`.
        #[unsafe(method(setTop:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTop(&self, top: Option<&NSString>);

        #[unsafe(method(unicodeBidi))]
        #[unsafe(method_family = none)]
        pub unsafe fn unicodeBidi(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `unicode_bidi` might not allow `None`.
        #[unsafe(method(setUnicodeBidi:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setUnicodeBidi(&self, unicode_bidi: Option<&NSString>);

        #[unsafe(method(verticalAlign))]
        #[unsafe(method_family = none)]
        pub unsafe fn verticalAlign(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `vertical_align` might not allow `None`.
        #[unsafe(method(setVerticalAlign:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setVerticalAlign(&self, vertical_align: Option<&NSString>);

        #[unsafe(method(visibility))]
        #[unsafe(method_family = none)]
        pub unsafe fn visibility(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `visibility` might not allow `None`.
        #[unsafe(method(setVisibility:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setVisibility(&self, visibility: Option<&NSString>);

        #[unsafe(method(voiceFamily))]
        #[unsafe(method_family = none)]
        pub unsafe fn voiceFamily(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `voice_family` might not allow `None`.
        #[unsafe(method(setVoiceFamily:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setVoiceFamily(&self, voice_family: Option<&NSString>);

        #[unsafe(method(volume))]
        #[unsafe(method_family = none)]
        pub unsafe fn volume(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `volume` might not allow `None`.
        #[unsafe(method(setVolume:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setVolume(&self, volume: Option<&NSString>);

        #[unsafe(method(whiteSpace))]
        #[unsafe(method_family = none)]
        pub unsafe fn whiteSpace(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `white_space` might not allow `None`.
        #[unsafe(method(setWhiteSpace:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWhiteSpace(&self, white_space: Option<&NSString>);

        #[unsafe(method(widows))]
        #[unsafe(method_family = none)]
        pub unsafe fn widows(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `widows` might not allow `None`.
        #[unsafe(method(setWidows:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWidows(&self, widows: Option<&NSString>);

        #[unsafe(method(width))]
        #[unsafe(method_family = none)]
        pub unsafe fn width(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `width` might not allow `None`.
        #[unsafe(method(setWidth:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWidth(&self, width: Option<&NSString>);

        #[unsafe(method(wordSpacing))]
        #[unsafe(method_family = none)]
        pub unsafe fn wordSpacing(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `word_spacing` might not allow `None`.
        #[unsafe(method(setWordSpacing:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setWordSpacing(&self, word_spacing: Option<&NSString>);

        #[unsafe(method(zIndex))]
        #[unsafe(method_family = none)]
        pub unsafe fn zIndex(&self) -> Option<Retained<NSString>>;

        /// # Safety
        ///
        /// `z_index` might not allow `None`.
        #[unsafe(method(setZIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setZIndex(&self, z_index: Option<&NSString>);
    );
}
