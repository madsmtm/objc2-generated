//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;

use crate::*;

extern "C" {
    /// the plug-in's view.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/webkit/webpluginbaseurlkey?language=objc)
    #[deprecated]
    pub static WebPlugInBaseURLKey: Option<&'static NSString>;
}

extern "C" {
    /// and values of all attributes of the HTML element associated with the plug-in AND
    /// the names and values of all parameters to be passed to the plug-in (e.g. PARAM
    /// elements within an APPLET element). In the case of a conflict between names,
    /// the attributes of an element take precedence over any PARAMs.  All of the keys
    /// and values in this NSDictionary must be NSStrings.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/webkit/webpluginattributeskey?language=objc)
    #[deprecated]
    pub static WebPlugInAttributesKey: Option<&'static NSString>;
}

extern "C" {
    /// WebPlugInContainer informal protocol. This object is used for
    /// callbacks from the plug-in to the app. if this argument is nil, no callbacks will
    /// occur.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/webkit/webplugincontainerkey?language=objc)
    #[deprecated]
    pub static WebPlugInContainerKey: Option<&'static NSString>;
}

extern "C" {
    /// the plug-in.  May be nil.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/webkit/webplugincontainingelementkey?language=objc)
    #[deprecated]
    pub static WebPlugInContainingElementKey: Option<&'static NSString>;
}

extern "C" {
    /// own main resource (the "src" URL, in most cases). If YES, the plug-in should load its own main resource. If NO, the
    /// plug-in should use the data provided by WebKit. See -webPlugInMainResourceReceivedData: in WebPluginPrivate.h.
    /// For compatibility with older versions of WebKit, the plug-in should assume that the value for
    /// WebPlugInShouldLoadMainResourceKey is NO if it is absent from the arguments dictionary.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/webkit/webpluginshouldloadmainresourcekey?language=objc)
    #[deprecated]
    pub static WebPlugInShouldLoadMainResourceKey: Option<&'static NSString>;
}

extern_protocol!(
    /// WebPlugInViewFactory are used to create the NSView for a plug-in.
    /// The principal class of the plug-in bundle must implement this protocol.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/webkit/webpluginviewfactory?language=objc)
    #[deprecated]
    pub unsafe trait WebPlugInViewFactory: NSObjectProtocol {
        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Parameter `arguments`: The arguments dictionary with the mentioned keys and objects. This method is required to implement.
        ///
        /// Returns: Returns an NSView object that conforms to the WebPlugIn informal protocol.
        ///
        /// # Safety
        ///
        /// - `arguments` generic should be of the correct type.
        /// - `arguments` might not allow `None`.
        #[deprecated]
        #[unsafe(method(plugInViewWithArguments:))]
        #[unsafe(method_family = none)]
        unsafe fn plugInViewWithArguments(
            arguments: Option<&NSDictionary>,
            mtm: MainThreadMarker,
        ) -> Option<Retained<NSView>>;
    }
);
