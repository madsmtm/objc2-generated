//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// WebDOMNodeOperations.
#[deprecated]
#[cfg(all(
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
impl DOMNode {
    extern_methods!(
        #[cfg(feature = "WebArchive")]
        /// A WebArchive representing the node and the children of the node.
        #[deprecated]
        #[unsafe(method(webArchive))]
        #[unsafe(method_family = none)]
        pub unsafe fn webArchive(&self) -> Option<Retained<WebArchive>>;
    );
}

/// WebDOMDocumentOperations.
#[deprecated]
#[cfg(all(
    feature = "DOMDocument",
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
impl DOMDocument {
    extern_methods!(
        #[cfg(feature = "WebFrame")]
        /// The frame of the DOM document.
        #[deprecated]
        #[unsafe(method(webFrame))]
        #[unsafe(method_family = none)]
        pub unsafe fn webFrame(&self) -> Option<Retained<WebFrame>>;

        /// Constructs a URL given an attribute string.
        ///
        /// This method constructs a URL given an attribute string just as WebKit does.
        /// An attribute string is the value of an attribute of an element such as the href attribute on
        /// the DOMHTMLAnchorElement class. This method is only applicable to attributes that refer to URLs.
        ///
        /// # Safety
        ///
        /// `string` might not allow `None`.
        #[deprecated]
        #[unsafe(method(URLWithAttributeString:))]
        #[unsafe(method_family = none)]
        pub unsafe fn URLWithAttributeString(
            &self,
            string: Option<&NSString>,
        ) -> Option<Retained<NSURL>>;
    );
}

/// WebDOMRangeOperations.
#[deprecated]
#[cfg(all(
    feature = "DOMObject",
    feature = "DOMRange",
    feature = "WebScriptObject"
))]
impl DOMRange {
    extern_methods!(
        #[cfg(feature = "WebArchive")]
        /// A WebArchive representing the range.
        #[deprecated]
        #[unsafe(method(webArchive))]
        #[unsafe(method_family = none)]
        pub unsafe fn webArchive(&self) -> Option<Retained<WebArchive>>;

        /// A markup string representing the range.
        #[deprecated]
        #[unsafe(method(markupString))]
        #[unsafe(method_family = none)]
        pub unsafe fn markupString(&self) -> Retained<NSString>;
    );
}

/// WebDOMHTMLFrameElementOperations.
#[deprecated]
#[cfg(all(
    feature = "DOMElement",
    feature = "DOMHTMLElement",
    feature = "DOMHTMLFrameElement",
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
impl DOMHTMLFrameElement {
    extern_methods!(
        #[cfg(feature = "WebFrame")]
        /// The content frame of the element.
        #[deprecated]
        #[unsafe(method(contentFrame))]
        #[unsafe(method_family = none)]
        pub unsafe fn contentFrame(&self) -> Option<Retained<WebFrame>>;
    );
}

/// WebDOMHTMLIFrameElementOperations.
#[deprecated]
#[cfg(all(
    feature = "DOMElement",
    feature = "DOMHTMLElement",
    feature = "DOMHTMLIFrameElement",
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
impl DOMHTMLIFrameElement {
    extern_methods!(
        #[cfg(feature = "WebFrame")]
        /// Returns the content frame of the element.
        #[deprecated]
        #[unsafe(method(contentFrame))]
        #[unsafe(method_family = none)]
        pub unsafe fn contentFrame(&self) -> Option<Retained<WebFrame>>;
    );
}

/// WebDOMHTMLObjectElementOperations.
#[deprecated]
#[cfg(all(
    feature = "DOMElement",
    feature = "DOMHTMLElement",
    feature = "DOMHTMLObjectElement",
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
impl DOMHTMLObjectElement {
    extern_methods!(
        #[cfg(feature = "WebFrame")]
        /// The content frame of the element.
        ///
        /// Returns non-nil only if the object represents a child frame
        /// such as if the data of the object is HTML content.
        #[deprecated]
        #[unsafe(method(contentFrame))]
        #[unsafe(method_family = none)]
        pub unsafe fn contentFrame(&self) -> Option<Retained<WebFrame>>;
    );
}
