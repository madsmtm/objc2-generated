//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/webkit/domdocument?language=objc)
    #[unsafe(super(DOMNode, DOMObject, WebScriptObject, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(
        feature = "DOMNode",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    #[deprecated]
    pub struct DOMDocument;
);

#[cfg(all(
    feature = "DOMEventTarget",
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
extern_conformance!(
    unsafe impl DOMEventTarget for DOMDocument {}
);

#[cfg(all(
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
extern_conformance!(
    unsafe impl NSCopying for DOMDocument {}
);

#[cfg(all(
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
unsafe impl CopyingHelper for DOMDocument {
    type Result = Self;
}

#[cfg(all(
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
extern_conformance!(
    unsafe impl NSObjectProtocol for DOMDocument {}
);

#[cfg(all(
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
impl DOMDocument {
    extern_methods!(
        #[cfg(feature = "DOMDocumentType")]
        #[deprecated]
        #[unsafe(method(doctype))]
        #[unsafe(method_family = none)]
        pub unsafe fn doctype(&self) -> Option<Retained<DOMDocumentType>>;

        #[cfg(feature = "DOMImplementation")]
        #[deprecated]
        #[unsafe(method(implementation))]
        #[unsafe(method_family = none)]
        pub unsafe fn implementation(&self) -> Option<Retained<DOMImplementation>>;

        #[cfg(feature = "DOMElement")]
        #[deprecated]
        #[unsafe(method(documentElement))]
        #[unsafe(method_family = none)]
        pub unsafe fn documentElement(&self) -> Option<Retained<DOMElement>>;

        #[unsafe(method(inputEncoding))]
        #[unsafe(method_family = none)]
        pub unsafe fn inputEncoding(&self) -> Retained<NSString>;

        #[unsafe(method(xmlEncoding))]
        #[unsafe(method_family = none)]
        pub unsafe fn xmlEncoding(&self) -> Retained<NSString>;

        #[unsafe(method(xmlVersion))]
        #[unsafe(method_family = none)]
        pub unsafe fn xmlVersion(&self) -> Retained<NSString>;

        /// Setter for [`xmlVersion`][Self::xmlVersion].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setXmlVersion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setXmlVersion(&self, xml_version: Option<&NSString>);

        #[unsafe(method(xmlStandalone))]
        #[unsafe(method_family = none)]
        pub unsafe fn xmlStandalone(&self) -> bool;

        /// Setter for [`xmlStandalone`][Self::xmlStandalone].
        #[unsafe(method(setXmlStandalone:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setXmlStandalone(&self, xml_standalone: bool);

        #[unsafe(method(documentURI))]
        #[unsafe(method_family = none)]
        pub unsafe fn documentURI(&self) -> Retained<NSString>;

        /// Setter for [`documentURI`][Self::documentURI].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setDocumentURI:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDocumentURI(&self, document_uri: Option<&NSString>);

        #[cfg(feature = "DOMAbstractView")]
        #[deprecated]
        #[unsafe(method(defaultView))]
        #[unsafe(method_family = none)]
        pub unsafe fn defaultView(&self) -> Option<Retained<DOMAbstractView>>;

        #[cfg(feature = "DOMStyleSheetList")]
        #[deprecated]
        #[unsafe(method(styleSheets))]
        #[unsafe(method_family = none)]
        pub unsafe fn styleSheets(&self) -> Option<Retained<DOMStyleSheetList>>;

        #[deprecated]
        #[unsafe(method(title))]
        #[unsafe(method_family = none)]
        pub unsafe fn title(&self) -> Retained<NSString>;

        /// Setter for [`title`][Self::title].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[deprecated]
        #[unsafe(method(setTitle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTitle(&self, title: Option<&NSString>);

        #[deprecated]
        #[unsafe(method(referrer))]
        #[unsafe(method_family = none)]
        pub unsafe fn referrer(&self) -> Retained<NSString>;

        #[deprecated]
        #[unsafe(method(domain))]
        #[unsafe(method_family = none)]
        pub unsafe fn domain(&self) -> Retained<NSString>;

        #[deprecated]
        #[unsafe(method(URL))]
        #[unsafe(method_family = none)]
        pub unsafe fn URL(&self) -> Retained<NSString>;

        #[deprecated]
        #[unsafe(method(cookie))]
        #[unsafe(method_family = none)]
        pub unsafe fn cookie(&self) -> Retained<NSString>;

        /// Setter for [`cookie`][Self::cookie].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[deprecated]
        #[unsafe(method(setCookie:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCookie(&self, cookie: Option<&NSString>);

        #[cfg(all(feature = "DOMElement", feature = "DOMHTMLElement"))]
        #[deprecated]
        #[unsafe(method(body))]
        #[unsafe(method_family = none)]
        pub unsafe fn body(&self) -> Option<Retained<DOMHTMLElement>>;

        #[cfg(all(feature = "DOMElement", feature = "DOMHTMLElement"))]
        /// Setter for [`body`][Self::body].
        #[deprecated]
        #[unsafe(method(setBody:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setBody(&self, body: Option<&DOMHTMLElement>);

        #[cfg(feature = "DOMHTMLCollection")]
        #[deprecated]
        #[unsafe(method(images))]
        #[unsafe(method_family = none)]
        pub unsafe fn images(&self) -> Option<Retained<DOMHTMLCollection>>;

        #[cfg(feature = "DOMHTMLCollection")]
        #[deprecated]
        #[unsafe(method(applets))]
        #[unsafe(method_family = none)]
        pub unsafe fn applets(&self) -> Option<Retained<DOMHTMLCollection>>;

        #[cfg(feature = "DOMHTMLCollection")]
        #[deprecated]
        #[unsafe(method(links))]
        #[unsafe(method_family = none)]
        pub unsafe fn links(&self) -> Option<Retained<DOMHTMLCollection>>;

        #[cfg(feature = "DOMHTMLCollection")]
        #[deprecated]
        #[unsafe(method(forms))]
        #[unsafe(method_family = none)]
        pub unsafe fn forms(&self) -> Option<Retained<DOMHTMLCollection>>;

        #[cfg(feature = "DOMHTMLCollection")]
        #[deprecated]
        #[unsafe(method(anchors))]
        #[unsafe(method_family = none)]
        pub unsafe fn anchors(&self) -> Option<Retained<DOMHTMLCollection>>;

        #[unsafe(method(lastModified))]
        #[unsafe(method_family = none)]
        pub unsafe fn lastModified(&self) -> Retained<NSString>;

        #[unsafe(method(charset))]
        #[unsafe(method_family = none)]
        pub unsafe fn charset(&self) -> Retained<NSString>;

        /// Setter for [`charset`][Self::charset].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setCharset:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCharset(&self, charset: Option<&NSString>);

        #[unsafe(method(defaultCharset))]
        #[unsafe(method_family = none)]
        pub unsafe fn defaultCharset(&self) -> Retained<NSString>;

        #[unsafe(method(readyState))]
        #[unsafe(method_family = none)]
        pub unsafe fn readyState(&self) -> Retained<NSString>;

        #[unsafe(method(characterSet))]
        #[unsafe(method_family = none)]
        pub unsafe fn characterSet(&self) -> Retained<NSString>;

        #[unsafe(method(preferredStylesheetSet))]
        #[unsafe(method_family = none)]
        pub unsafe fn preferredStylesheetSet(&self) -> Retained<NSString>;

        #[unsafe(method(selectedStylesheetSet))]
        #[unsafe(method_family = none)]
        pub unsafe fn selectedStylesheetSet(&self) -> Retained<NSString>;

        /// Setter for [`selectedStylesheetSet`][Self::selectedStylesheetSet].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setSelectedStylesheetSet:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSelectedStylesheetSet(&self, selected_stylesheet_set: Option<&NSString>);

        #[cfg(feature = "DOMElement")]
        #[unsafe(method(activeElement))]
        #[unsafe(method_family = none)]
        pub unsafe fn activeElement(&self) -> Option<Retained<DOMElement>>;

        #[cfg(feature = "DOMElement")]
        #[deprecated]
        #[unsafe(method(createElement:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createElement(
            &self,
            tag_name: Option<&NSString>,
        ) -> Option<Retained<DOMElement>>;

        #[cfg(feature = "DOMDocumentFragment")]
        #[deprecated]
        #[unsafe(method(createDocumentFragment))]
        #[unsafe(method_family = none)]
        pub unsafe fn createDocumentFragment(&self) -> Option<Retained<DOMDocumentFragment>>;

        #[cfg(all(feature = "DOMCharacterData", feature = "DOMText"))]
        #[deprecated]
        #[unsafe(method(createTextNode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createTextNode(&self, data: Option<&NSString>) -> Option<Retained<DOMText>>;

        #[cfg(all(feature = "DOMCharacterData", feature = "DOMComment"))]
        #[deprecated]
        #[unsafe(method(createComment:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createComment(&self, data: Option<&NSString>)
            -> Option<Retained<DOMComment>>;

        #[cfg(all(
            feature = "DOMCDATASection",
            feature = "DOMCharacterData",
            feature = "DOMText"
        ))]
        #[deprecated]
        #[unsafe(method(createCDATASection:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createCDATASection(
            &self,
            data: Option<&NSString>,
        ) -> Option<Retained<DOMCDATASection>>;

        #[cfg(all(feature = "DOMCharacterData", feature = "DOMProcessingInstruction"))]
        #[unsafe(method(createProcessingInstruction:data:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createProcessingInstruction_data(
            &self,
            target: Option<&NSString>,
            data: Option<&NSString>,
        ) -> Option<Retained<DOMProcessingInstruction>>;

        #[cfg(feature = "DOMAttr")]
        #[deprecated]
        #[unsafe(method(createAttribute:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createAttribute(&self, name: Option<&NSString>) -> Option<Retained<DOMAttr>>;

        #[cfg(feature = "DOMEntityReference")]
        #[deprecated]
        #[unsafe(method(createEntityReference:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createEntityReference(
            &self,
            name: Option<&NSString>,
        ) -> Option<Retained<DOMEntityReference>>;

        #[cfg(feature = "DOMNodeList")]
        #[deprecated]
        #[unsafe(method(getElementsByTagName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getElementsByTagName(
            &self,
            tagname: Option<&NSString>,
        ) -> Option<Retained<DOMNodeList>>;

        #[unsafe(method(importNode:deep:))]
        #[unsafe(method_family = none)]
        pub unsafe fn importNode_deep(
            &self,
            imported_node: Option<&DOMNode>,
            deep: bool,
        ) -> Option<Retained<DOMNode>>;

        #[cfg(feature = "DOMElement")]
        #[unsafe(method(createElementNS:qualifiedName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createElementNS_qualifiedName(
            &self,
            namespace_uri: Option<&NSString>,
            qualified_name: Option<&NSString>,
        ) -> Option<Retained<DOMElement>>;

        #[cfg(feature = "DOMAttr")]
        #[unsafe(method(createAttributeNS:qualifiedName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createAttributeNS_qualifiedName(
            &self,
            namespace_uri: Option<&NSString>,
            qualified_name: Option<&NSString>,
        ) -> Option<Retained<DOMAttr>>;

        #[cfg(feature = "DOMNodeList")]
        #[unsafe(method(getElementsByTagNameNS:localName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getElementsByTagNameNS_localName(
            &self,
            namespace_uri: Option<&NSString>,
            local_name: Option<&NSString>,
        ) -> Option<Retained<DOMNodeList>>;

        #[unsafe(method(adoptNode:))]
        #[unsafe(method_family = none)]
        pub unsafe fn adoptNode(&self, source: Option<&DOMNode>) -> Option<Retained<DOMNode>>;

        #[cfg(feature = "DOMEvent")]
        #[deprecated]
        #[unsafe(method(createEvent:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createEvent(
            &self,
            event_type: Option<&NSString>,
        ) -> Option<Retained<DOMEvent>>;

        #[cfg(feature = "DOMRange")]
        #[deprecated]
        #[unsafe(method(createRange))]
        #[unsafe(method_family = none)]
        pub unsafe fn createRange(&self) -> Option<Retained<DOMRange>>;

        #[cfg(all(feature = "DOMNodeFilter", feature = "DOMNodeIterator"))]
        #[unsafe(method(createNodeIterator:whatToShow:filter:expandEntityReferences:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createNodeIterator_whatToShow_filter_expandEntityReferences(
            &self,
            root: Option<&DOMNode>,
            what_to_show: c_uint,
            filter: Option<&ProtocolObject<dyn DOMNodeFilter>>,
            expand_entity_references: bool,
        ) -> Option<Retained<DOMNodeIterator>>;

        #[cfg(all(feature = "DOMNodeFilter", feature = "DOMTreeWalker"))]
        #[unsafe(method(createTreeWalker:whatToShow:filter:expandEntityReferences:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createTreeWalker_whatToShow_filter_expandEntityReferences(
            &self,
            root: Option<&DOMNode>,
            what_to_show: c_uint,
            filter: Option<&ProtocolObject<dyn DOMNodeFilter>>,
            expand_entity_references: bool,
        ) -> Option<Retained<DOMTreeWalker>>;

        #[cfg(all(feature = "DOMCSSStyleDeclaration", feature = "DOMElement"))]
        #[unsafe(method(getOverrideStyle:pseudoElement:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getOverrideStyle_pseudoElement(
            &self,
            element: Option<&DOMElement>,
            pseudo_element: Option<&NSString>,
        ) -> Option<Retained<DOMCSSStyleDeclaration>>;

        #[cfg(all(feature = "DOMXPathExpression", feature = "DOMXPathNSResolver"))]
        #[unsafe(method(createExpression:resolver:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createExpression_resolver(
            &self,
            expression: Option<&NSString>,
            resolver: Option<&ProtocolObject<dyn DOMXPathNSResolver>>,
        ) -> Option<Retained<DOMXPathExpression>>;

        #[cfg(feature = "DOMXPathNSResolver")]
        #[unsafe(method(createNSResolver:))]
        #[unsafe(method_family = none)]
        pub unsafe fn createNSResolver(
            &self,
            node_resolver: Option<&DOMNode>,
        ) -> Option<Retained<ProtocolObject<dyn DOMXPathNSResolver>>>;

        #[cfg(all(feature = "DOMXPathNSResolver", feature = "DOMXPathResult"))]
        #[unsafe(method(evaluate:contextNode:resolver:type:inResult:))]
        #[unsafe(method_family = none)]
        pub unsafe fn evaluate_contextNode_resolver_type_inResult(
            &self,
            expression: Option<&NSString>,
            context_node: Option<&DOMNode>,
            resolver: Option<&ProtocolObject<dyn DOMXPathNSResolver>>,
            r#type: c_ushort,
            in_result: Option<&DOMXPathResult>,
        ) -> Option<Retained<DOMXPathResult>>;

        #[unsafe(method(execCommand:userInterface:value:))]
        #[unsafe(method_family = none)]
        pub unsafe fn execCommand_userInterface_value(
            &self,
            command: Option<&NSString>,
            user_interface: bool,
            value: Option<&NSString>,
        ) -> bool;

        #[unsafe(method(execCommand:userInterface:))]
        #[unsafe(method_family = none)]
        pub unsafe fn execCommand_userInterface(
            &self,
            command: Option<&NSString>,
            user_interface: bool,
        ) -> bool;

        #[unsafe(method(execCommand:))]
        #[unsafe(method_family = none)]
        pub unsafe fn execCommand(&self, command: Option<&NSString>) -> bool;

        #[unsafe(method(queryCommandEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn queryCommandEnabled(&self, command: Option<&NSString>) -> bool;

        #[unsafe(method(queryCommandIndeterm:))]
        #[unsafe(method_family = none)]
        pub unsafe fn queryCommandIndeterm(&self, command: Option<&NSString>) -> bool;

        #[unsafe(method(queryCommandState:))]
        #[unsafe(method_family = none)]
        pub unsafe fn queryCommandState(&self, command: Option<&NSString>) -> bool;

        #[unsafe(method(queryCommandSupported:))]
        #[unsafe(method_family = none)]
        pub unsafe fn queryCommandSupported(&self, command: Option<&NSString>) -> bool;

        #[unsafe(method(queryCommandValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn queryCommandValue(
            &self,
            command: Option<&NSString>,
        ) -> Option<Retained<NSString>>;

        #[cfg(feature = "DOMNodeList")]
        #[deprecated]
        #[unsafe(method(getElementsByName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getElementsByName(
            &self,
            element_name: Option<&NSString>,
        ) -> Option<Retained<DOMNodeList>>;

        #[cfg(feature = "DOMElement")]
        #[unsafe(method(elementFromPoint:y:))]
        #[unsafe(method_family = none)]
        pub unsafe fn elementFromPoint_y(&self, x: c_int, y: c_int)
            -> Option<Retained<DOMElement>>;

        #[cfg(feature = "DOMCSSStyleDeclaration")]
        #[unsafe(method(createCSSStyleDeclaration))]
        #[unsafe(method_family = none)]
        pub unsafe fn createCSSStyleDeclaration(&self) -> Option<Retained<DOMCSSStyleDeclaration>>;

        #[cfg(all(feature = "DOMCSSStyleDeclaration", feature = "DOMElement"))]
        #[unsafe(method(getComputedStyle:pseudoElement:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getComputedStyle_pseudoElement(
            &self,
            element: Option<&DOMElement>,
            pseudo_element: Option<&NSString>,
        ) -> Option<Retained<DOMCSSStyleDeclaration>>;

        #[cfg(all(feature = "DOMCSSRuleList", feature = "DOMElement"))]
        #[unsafe(method(getMatchedCSSRules:pseudoElement:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getMatchedCSSRules_pseudoElement(
            &self,
            element: Option<&DOMElement>,
            pseudo_element: Option<&NSString>,
        ) -> Option<Retained<DOMCSSRuleList>>;

        #[cfg(all(feature = "DOMCSSRuleList", feature = "DOMElement"))]
        #[unsafe(method(getMatchedCSSRules:pseudoElement:authorOnly:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getMatchedCSSRules_pseudoElement_authorOnly(
            &self,
            element: Option<&DOMElement>,
            pseudo_element: Option<&NSString>,
            author_only: bool,
        ) -> Option<Retained<DOMCSSRuleList>>;

        #[cfg(feature = "DOMNodeList")]
        #[unsafe(method(getElementsByClassName:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getElementsByClassName(
            &self,
            class_names: Option<&NSString>,
        ) -> Option<Retained<DOMNodeList>>;

        #[unsafe(method(hasFocus))]
        #[unsafe(method_family = none)]
        pub unsafe fn hasFocus(&self) -> bool;

        #[unsafe(method(webkitCancelFullScreen))]
        #[unsafe(method_family = none)]
        pub unsafe fn webkitCancelFullScreen(&self);

        #[cfg(feature = "DOMElement")]
        #[deprecated]
        #[unsafe(method(getElementById:))]
        #[unsafe(method_family = none)]
        pub unsafe fn getElementById(
            &self,
            element_id: Option<&NSString>,
        ) -> Option<Retained<DOMElement>>;

        #[cfg(feature = "DOMElement")]
        #[unsafe(method(querySelector:))]
        #[unsafe(method_family = none)]
        pub unsafe fn querySelector(
            &self,
            selectors: Option<&NSString>,
        ) -> Option<Retained<DOMElement>>;

        #[cfg(feature = "DOMNodeList")]
        #[unsafe(method(querySelectorAll:))]
        #[unsafe(method_family = none)]
        pub unsafe fn querySelectorAll(
            &self,
            selectors: Option<&NSString>,
        ) -> Option<Retained<DOMNodeList>>;
    );
}

/// Methods declared on superclass `DOMObject`.
#[cfg(all(
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
impl DOMDocument {
    extern_methods!(
        #[deprecated]
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(all(
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
impl DOMDocument {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

/// DOMDocumentDeprecated.
#[deprecated]
#[cfg(all(
    feature = "DOMNode",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
impl DOMDocument {
    extern_methods!(
        #[cfg(all(feature = "DOMCharacterData", feature = "DOMProcessingInstruction"))]
        #[deprecated]
        #[unsafe(method(createProcessingInstruction::))]
        #[unsafe(method_family = none)]
        pub unsafe fn createProcessingInstruction(
            &self,
            target: Option<&NSString>,
            data: Option<&NSString>,
        ) -> Option<Retained<DOMProcessingInstruction>>;

        #[deprecated]
        #[unsafe(method(importNode::))]
        #[unsafe(method_family = none)]
        pub unsafe fn importNode(
            &self,
            imported_node: Option<&DOMNode>,
            deep: bool,
        ) -> Option<Retained<DOMNode>>;

        #[cfg(feature = "DOMElement")]
        #[deprecated]
        #[unsafe(method(createElementNS::))]
        #[unsafe(method_family = none)]
        pub unsafe fn createElementNS(
            &self,
            namespace_uri: Option<&NSString>,
            qualified_name: Option<&NSString>,
        ) -> Option<Retained<DOMElement>>;

        #[cfg(feature = "DOMAttr")]
        #[deprecated]
        #[unsafe(method(createAttributeNS::))]
        #[unsafe(method_family = none)]
        pub unsafe fn createAttributeNS(
            &self,
            namespace_uri: Option<&NSString>,
            qualified_name: Option<&NSString>,
        ) -> Option<Retained<DOMAttr>>;

        #[cfg(feature = "DOMNodeList")]
        #[deprecated]
        #[unsafe(method(getElementsByTagNameNS::))]
        #[unsafe(method_family = none)]
        pub unsafe fn getElementsByTagNameNS(
            &self,
            namespace_uri: Option<&NSString>,
            local_name: Option<&NSString>,
        ) -> Option<Retained<DOMNodeList>>;

        #[cfg(all(feature = "DOMNodeFilter", feature = "DOMNodeIterator"))]
        #[deprecated]
        #[unsafe(method(createNodeIterator::::))]
        #[unsafe(method_family = none)]
        pub unsafe fn createNodeIterator(
            &self,
            root: Option<&DOMNode>,
            what_to_show: c_uint,
            filter: Option<&ProtocolObject<dyn DOMNodeFilter>>,
            expand_entity_references: bool,
        ) -> Option<Retained<DOMNodeIterator>>;

        #[cfg(all(feature = "DOMNodeFilter", feature = "DOMTreeWalker"))]
        #[deprecated]
        #[unsafe(method(createTreeWalker::::))]
        #[unsafe(method_family = none)]
        pub unsafe fn createTreeWalker(
            &self,
            root: Option<&DOMNode>,
            what_to_show: c_uint,
            filter: Option<&ProtocolObject<dyn DOMNodeFilter>>,
            expand_entity_references: bool,
        ) -> Option<Retained<DOMTreeWalker>>;

        #[cfg(all(feature = "DOMCSSStyleDeclaration", feature = "DOMElement"))]
        #[deprecated]
        #[unsafe(method(getOverrideStyle::))]
        #[unsafe(method_family = none)]
        pub unsafe fn getOverrideStyle(
            &self,
            element: Option<&DOMElement>,
            pseudo_element: Option<&NSString>,
        ) -> Option<Retained<DOMCSSStyleDeclaration>>;

        #[cfg(all(feature = "DOMXPathExpression", feature = "DOMXPathNSResolver"))]
        #[deprecated]
        #[unsafe(method(createExpression::))]
        #[unsafe(method_family = none)]
        pub unsafe fn createExpression(
            &self,
            expression: Option<&NSString>,
            resolver: Option<&ProtocolObject<dyn DOMXPathNSResolver>>,
        ) -> Option<Retained<DOMXPathExpression>>;

        #[cfg(all(feature = "DOMXPathNSResolver", feature = "DOMXPathResult"))]
        #[deprecated]
        #[unsafe(method(evaluate:::::))]
        #[unsafe(method_family = none)]
        pub unsafe fn evaluate(
            &self,
            expression: Option<&NSString>,
            context_node: Option<&DOMNode>,
            resolver: Option<&ProtocolObject<dyn DOMXPathNSResolver>>,
            r#type: c_ushort,
            in_result: Option<&DOMXPathResult>,
        ) -> Option<Retained<DOMXPathResult>>;

        #[cfg(all(feature = "DOMCSSStyleDeclaration", feature = "DOMElement"))]
        #[deprecated]
        #[unsafe(method(getComputedStyle::))]
        #[unsafe(method_family = none)]
        pub unsafe fn getComputedStyle(
            &self,
            element: Option<&DOMElement>,
            pseudo_element: Option<&NSString>,
        ) -> Option<Retained<DOMCSSStyleDeclaration>>;
    );
}
