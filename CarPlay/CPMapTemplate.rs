//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-ui-kit")]
use objc2_ui_kit::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/carplay/cppandirection?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CPPanDirection(pub NSInteger);
bitflags::bitflags! {
    impl CPPanDirection: NSInteger {
        #[doc(alias = "CPPanDirectionNone")]
        const None = 0;
        #[doc(alias = "CPPanDirectionLeft")]
        const Left = 1<<0;
        #[doc(alias = "CPPanDirectionRight")]
        const Right = 1<<1;
        #[doc(alias = "CPPanDirectionUp")]
        const Up = 1<<2;
        #[doc(alias = "CPPanDirectionDown")]
        const Down = 1<<3;
    }
}

unsafe impl Encode for CPPanDirection {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CPPanDirection {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/carplay/cpmaneuverdisplaystyle?language=objc)
// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CPManeuverDisplayStyle(pub NSInteger);
bitflags::bitflags! {
    impl CPManeuverDisplayStyle: NSInteger {
        #[doc(alias = "CPManeuverDisplayStyleDefault")]
        const Default = 0;
        #[doc(alias = "CPManeuverDisplayStyleLeadingSymbol")]
        const LeadingSymbol = 1;
        #[doc(alias = "CPManeuverDisplayStyleTrailingSymbol")]
        const TrailingSymbol = 2;
        #[doc(alias = "CPManeuverDisplayStyleSymbolOnly")]
        const SymbolOnly = 3;
        #[doc(alias = "CPManeuverDisplayStyleInstructionOnly")]
        const InstructionOnly = 4;
    }
}

unsafe impl Encode for CPManeuverDisplayStyle {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CPManeuverDisplayStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/carplay/cptimeremainingcolor?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CPTimeRemainingColor(pub NSUInteger);
impl CPTimeRemainingColor {
    #[doc(alias = "CPTimeRemainingColorDefault")]
    pub const Default: Self = Self(0);
    #[doc(alias = "CPTimeRemainingColorGreen")]
    pub const Green: Self = Self(1);
    #[doc(alias = "CPTimeRemainingColorOrange")]
    pub const Orange: Self = Self(2);
    #[doc(alias = "CPTimeRemainingColorRed")]
    pub const Red: Self = Self(3);
}

unsafe impl Encode for CPTimeRemainingColor {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for CPTimeRemainingColor {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/carplay/cptripestimatestyle?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CPTripEstimateStyle(pub NSUInteger);
impl CPTripEstimateStyle {
    #[doc(alias = "CPTripEstimateStyleLight")]
    pub const Light: Self = Self(0);
    #[doc(alias = "CPTripEstimateStyleDark")]
    pub const Dark: Self = Self(1);
}

unsafe impl Encode for CPTripEstimateStyle {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for CPTripEstimateStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/carplay/cpmaptemplate?language=objc)
    #[unsafe(super(CPTemplate, NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CPTemplate")]
    pub struct CPMapTemplate;
);

#[cfg(all(feature = "CPBarButtonProviding", feature = "CPTemplate"))]
extern_conformance!(
    unsafe impl CPBarButtonProviding for CPMapTemplate {}
);

#[cfg(feature = "CPTemplate")]
extern_conformance!(
    unsafe impl NSCoding for CPMapTemplate {}
);

#[cfg(feature = "CPTemplate")]
extern_conformance!(
    unsafe impl NSObjectProtocol for CPMapTemplate {}
);

#[cfg(feature = "CPTemplate")]
extern_conformance!(
    unsafe impl NSSecureCoding for CPMapTemplate {}
);

#[cfg(feature = "CPTemplate")]
impl CPMapTemplate {
    extern_methods!(
        #[cfg(feature = "objc2-ui-kit")]
        /// Background color to use when displaying guidance. The system will automatically determine if the provided
        /// color meets contrast requirements. If the provided color does not meet contrast requirements, the system
        /// default will be used. Font color will automatically be adjusted by the system to correspond with this color.
        /// Alpha values will be ignored.
        #[unsafe(method(guidanceBackgroundColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn guidanceBackgroundColor(&self) -> Retained<UIColor>;

        #[cfg(feature = "objc2-ui-kit")]
        /// Setter for [`guidanceBackgroundColor`][Self::guidanceBackgroundColor].
        #[unsafe(method(setGuidanceBackgroundColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setGuidanceBackgroundColor(&self, guidance_background_color: &UIColor);

        /// The style used to display trip estimates during active navigation. If not set, will update automatically with changes to UIUserInterfaceStyle.
        #[unsafe(method(tripEstimateStyle))]
        #[unsafe(method_family = none)]
        pub unsafe fn tripEstimateStyle(&self) -> CPTripEstimateStyle;

        /// Setter for [`tripEstimateStyle`][Self::tripEstimateStyle].
        #[unsafe(method(setTripEstimateStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTripEstimateStyle(&self, trip_estimate_style: CPTripEstimateStyle);

        #[cfg(feature = "CPMapButton")]
        /// An array of bar buttons to be displayed on the trailing bottom corner of the map template.
        ///
        /// Note: The map template may display a maximum of 4 buttons. Setting more than 4 buttons to this
        /// property will only display the first 4 buttons.
        #[unsafe(method(mapButtons))]
        #[unsafe(method_family = none)]
        pub unsafe fn mapButtons(&self) -> Retained<NSArray<CPMapButton>>;

        #[cfg(feature = "CPMapButton")]
        /// Setter for [`mapButtons`][Self::mapButtons].
        #[unsafe(method(setMapButtons:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMapButtons(&self, map_buttons: &NSArray<CPMapButton>);

        #[cfg(all(feature = "CPTrip", feature = "CPTripPreviewTextConfiguration"))]
        /// Display a preview for a trip. Used to provide an overview for the upcoming trip or can show multiple trip options,
        /// such as for search results. Trip previews can appear over an active navigation session. Number of trips will be
        /// limited to 12.
        #[unsafe(method(showTripPreviews:textConfiguration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn showTripPreviews_textConfiguration(
            &self,
            trip_previews: &NSArray<CPTrip>,
            text_configuration: Option<&CPTripPreviewTextConfiguration>,
        );

        #[cfg(all(feature = "CPTrip", feature = "CPTripPreviewTextConfiguration"))]
        /// Display a preview for a trip. Used to provide an overview for the upcoming trip or can show multiple trip options,
        /// such as for search results. Trip previews can appear over an active navigation session. Number of trips will be
        /// limited to 12. Optionally provide a CPTrip object from the list of trips to be selected when initially presented.
        #[unsafe(method(showTripPreviews:selectedTrip:textConfiguration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn showTripPreviews_selectedTrip_textConfiguration(
            &self,
            trip_previews: &NSArray<CPTrip>,
            selected_trip: Option<&CPTrip>,
            text_configuration: Option<&CPTripPreviewTextConfiguration>,
        );

        #[cfg(all(feature = "CPTrip", feature = "CPTripPreviewTextConfiguration"))]
        /// Display the route choices for a single trip. Trip previews can appear over an active navigation session.
        #[unsafe(method(showRouteChoicesPreviewForTrip:textConfiguration:))]
        #[unsafe(method_family = none)]
        pub unsafe fn showRouteChoicesPreviewForTrip_textConfiguration(
            &self,
            trip_preview: &CPTrip,
            text_configuration: Option<&CPTripPreviewTextConfiguration>,
        );

        /// Stop displaying any currently shown trip previews.
        #[unsafe(method(hideTripPreviews))]
        #[unsafe(method_family = none)]
        pub unsafe fn hideTripPreviews(&self);

        #[cfg(all(feature = "CPTravelEstimates", feature = "CPTrip"))]
        /// Updates the arrival time, time remaining and distance remaining estimates for a trip preview or actively navigating trip with the default color for time remaining.
        #[unsafe(method(updateTravelEstimates:forTrip:))]
        #[unsafe(method_family = none)]
        pub unsafe fn updateTravelEstimates_forTrip(
            &self,
            estimates: &CPTravelEstimates,
            trip: &CPTrip,
        );

        #[cfg(all(feature = "CPTravelEstimates", feature = "CPTrip"))]
        /// Updates the arrival time, time remaining and distance remaining estimates for a trip preview or actively navigating trip with a specified color for time remaining.
        #[unsafe(method(updateTravelEstimates:forTrip:withTimeRemainingColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn updateTravelEstimates_forTrip_withTimeRemainingColor(
            &self,
            estimates: &CPTravelEstimates,
            trip: &CPTrip,
            time_remaining_color: CPTimeRemainingColor,
        );

        #[cfg(all(feature = "CPNavigationSession", feature = "CPTrip"))]
        /// Begins guidance for a trip.
        ///
        /// Returns: CPNavigationSession maintain a reference to the navigation session to perform guidance updates
        #[unsafe(method(startNavigationSessionForTrip:))]
        #[unsafe(method_family = none)]
        pub unsafe fn startNavigationSessionForTrip(
            &self,
            trip: &CPTrip,
        ) -> Retained<CPNavigationSession>;

        /// Automatically shows and hides the navigation bar. Defaults to YES.
        #[unsafe(method(automaticallyHidesNavigationBar))]
        #[unsafe(method_family = none)]
        pub unsafe fn automaticallyHidesNavigationBar(&self) -> bool;

        /// Setter for [`automaticallyHidesNavigationBar`][Self::automaticallyHidesNavigationBar].
        #[unsafe(method(setAutomaticallyHidesNavigationBar:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAutomaticallyHidesNavigationBar(
            &self,
            automatically_hides_navigation_bar: bool,
        );

        /// Hides the map buttons when hiding the navigation bar. Defaults to YES.
        #[unsafe(method(hidesButtonsWithNavigationBar))]
        #[unsafe(method_family = none)]
        pub unsafe fn hidesButtonsWithNavigationBar(&self) -> bool;

        /// Setter for [`hidesButtonsWithNavigationBar`][Self::hidesButtonsWithNavigationBar].
        #[unsafe(method(setHidesButtonsWithNavigationBar:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setHidesButtonsWithNavigationBar(
            &self,
            hides_buttons_with_navigation_bar: bool,
        );

        #[unsafe(method(mapDelegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn mapDelegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn CPMapTemplateDelegate>>>;

        /// This is a [weak property][objc2::topics::weak_property].
        /// Setter for [`mapDelegate`][Self::mapDelegate].
        #[unsafe(method(setMapDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMapDelegate(
            &self,
            map_delegate: Option<&ProtocolObject<dyn CPMapTemplateDelegate>>,
        );

        /// Shows the panning interface on the map interface if not already visible.
        ///
        /// When showing the panning interface, a maximum of two mapButtons will be visible.
        /// If more than two mapButtons are visible when the template transitions to panning mode,
        /// the system will hide one or more map buttons beginning from the end of the mapButtons array.
        ///
        ///
        /// Note: The system will not provide a button to dismiss the UI. You are required to provide
        /// a button in the map template navigation bar that will dismiss the panning interface.
        #[unsafe(method(showPanningInterfaceAnimated:))]
        #[unsafe(method_family = none)]
        pub unsafe fn showPanningInterfaceAnimated(&self, animated: bool);

        /// Dismisses the panning interface on the map interface if it is visible.
        ///
        /// Note: When dismissing the panning interface, mapButtons previously hidden by the system will no longer be hidden.
        #[unsafe(method(dismissPanningInterfaceAnimated:))]
        #[unsafe(method_family = none)]
        pub unsafe fn dismissPanningInterfaceAnimated(&self, animated: bool);

        /// Returns YES when the panning interface is visible.
        #[unsafe(method(isPanningInterfaceVisible))]
        #[unsafe(method_family = none)]
        pub unsafe fn isPanningInterfaceVisible(&self) -> bool;

        #[cfg(feature = "CPNavigationAlert")]
        /// The currently-visible navigation alert, if any.
        #[unsafe(method(currentNavigationAlert))]
        #[unsafe(method_family = none)]
        pub unsafe fn currentNavigationAlert(&self) -> Option<Retained<CPNavigationAlert>>;

        #[cfg(feature = "CPNavigationAlert")]
        /// Display a navigation alert on this map template. Your
        /// `CPMapTemplateDelegate`will be notified
        /// of navigation alert lifecycle events.
        ///
        ///
        /// Parameter `navigationAlert`: The navigation alert to display.
        ///
        /// Parameter `animated`: YES to animate the presentation of this alert, or NO to display it immediately.
        ///
        ///
        /// Warning: If a navigation alert is already visible, this method has no effect.
        /// You must dismiss the currently-visible navigation alert before presenting a new alert.
        #[unsafe(method(presentNavigationAlert:animated:))]
        #[unsafe(method_family = none)]
        pub unsafe fn presentNavigationAlert_animated(
            &self,
            navigation_alert: &CPNavigationAlert,
            animated: bool,
        );

        #[cfg(feature = "block2")]
        /// Dismiss the currently-visible navigation alert on this map template.
        ///
        ///
        /// Parameter `animated`: Whether the dismissal should be animated (YES) or not (NO).
        ///
        /// Parameter `completion`: A block invoked after the alert has been dismissed. The BOOL argument
        /// in the completion block indicates whether any visible alert was dismissed (YES) or
        /// if no action was taken because there was no alert to dismiss (NO).
        #[unsafe(method(dismissNavigationAlertAnimated:completion:))]
        #[unsafe(method_family = none)]
        pub unsafe fn dismissNavigationAlertAnimated_completion(
            &self,
            animated: bool,
            completion: &block2::DynBlock<dyn Fn(Bool)>,
        );
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "CPTemplate")]
impl CPMapTemplate {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate?language=objc)
    pub unsafe trait CPMapTemplateDelegate: NSObjectProtocol + MainThreadOnly {
        #[cfg(feature = "CPTemplate")]
        /// Determines if the template should provide navigation metadata.
        ///
        /// Returns: YES if the template should provide navigation metadata, otherwise NO
        #[optional]
        #[unsafe(method(mapTemplateShouldProvideNavigationMetadata:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplateShouldProvideNavigationMetadata(
            &self,
            map_template: &CPMapTemplate,
        ) -> bool;

        #[cfg(all(feature = "CPManeuver", feature = "CPTemplate"))]
        /// Determines if the maneuver should be presented as a notification when the app is in the background.
        ///
        /// Returns: YES if the maneuver should appear as a notification, otherwise NO
        #[optional]
        #[unsafe(method(mapTemplate:shouldShowNotificationForManeuver:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_shouldShowNotificationForManeuver(
            &self,
            map_template: &CPMapTemplate,
            maneuver: &CPManeuver,
        ) -> bool;

        #[cfg(all(
            feature = "CPManeuver",
            feature = "CPTemplate",
            feature = "CPTravelEstimates"
        ))]
        /// Determines if the updated distance remaining for the maneuver should be presented as a notification when the app is in the background.
        ///
        /// Returns: YES if the updated estimates should appear in the notification, otherwise NO
        #[optional]
        #[unsafe(method(mapTemplate:shouldUpdateNotificationForManeuver:withTravelEstimates:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_shouldUpdateNotificationForManeuver_withTravelEstimates(
            &self,
            map_template: &CPMapTemplate,
            maneuver: &CPManeuver,
            travel_estimates: &CPTravelEstimates,
        ) -> bool;

        #[cfg(all(feature = "CPNavigationAlert", feature = "CPTemplate"))]
        /// Determines if the navigation alert should be presented as a notification when the app is in the background.
        ///
        /// Returns: YES if the alert should appear as a notification, otherwise NO
        #[optional]
        #[unsafe(method(mapTemplate:shouldShowNotificationForNavigationAlert:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_shouldShowNotificationForNavigationAlert(
            &self,
            map_template: &CPMapTemplate,
            navigation_alert: &CPNavigationAlert,
        ) -> bool;

        #[cfg(feature = "CPTemplate")]
        /// This will be called when the pan interface appears on the map interface.
        #[optional]
        #[unsafe(method(mapTemplateDidShowPanningInterface:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplateDidShowPanningInterface(&self, map_template: &CPMapTemplate);

        #[cfg(feature = "CPTemplate")]
        /// This will be called when the pan interface will disappear on the map interface.
        #[optional]
        #[unsafe(method(mapTemplateWillDismissPanningInterface:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplateWillDismissPanningInterface(&self, map_template: &CPMapTemplate);

        #[cfg(feature = "CPTemplate")]
        /// This will be called when the pan interface disappears on the map interface.
        #[optional]
        #[unsafe(method(mapTemplateDidDismissPanningInterface:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplateDidDismissPanningInterface(&self, map_template: &CPMapTemplate);

        #[cfg(feature = "CPTemplate")]
        /// Called when a pan button is pressed/selected for an extended duration.
        #[optional]
        #[unsafe(method(mapTemplate:panBeganWithDirection:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_panBeganWithDirection(
            &self,
            map_template: &CPMapTemplate,
            direction: CPPanDirection,
        );

        #[cfg(feature = "CPTemplate")]
        /// Called when a pan button is released after an extended duration.
        #[optional]
        #[unsafe(method(mapTemplate:panEndedWithDirection:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_panEndedWithDirection(
            &self,
            map_template: &CPMapTemplate,
            direction: CPPanDirection,
        );

        #[cfg(feature = "CPTemplate")]
        /// Called when a pan button is pressed/selected momentarily.
        #[optional]
        #[unsafe(method(mapTemplate:panWithDirection:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_panWithDirection(
            &self,
            map_template: &CPMapTemplate,
            direction: CPPanDirection,
        );

        #[cfg(feature = "CPTemplate")]
        /// Called when a pan gesture begins. May not be called when connected to some CarPlay systems.
        #[optional]
        #[unsafe(method(mapTemplateDidBeginPanGesture:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplateDidBeginPanGesture(&self, map_template: &CPMapTemplate);

        #[cfg(all(feature = "CPTemplate", feature = "objc2-core-foundation"))]
        /// Called when a pan gesture changes. May not be called when connected to some CarPlay systems.
        #[optional]
        #[unsafe(method(mapTemplate:didUpdatePanGestureWithTranslation:velocity:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_didUpdatePanGestureWithTranslation_velocity(
            &self,
            map_template: &CPMapTemplate,
            translation: CGPoint,
            velocity: CGPoint,
        );

        #[cfg(all(feature = "CPTemplate", feature = "objc2-core-foundation"))]
        /// Called when a pan gesture ends. May not be called when connected to some CarPlay systems.
        #[optional]
        #[unsafe(method(mapTemplate:didEndPanGestureWithVelocity:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_didEndPanGestureWithVelocity(
            &self,
            map_template: &CPMapTemplate,
            velocity: CGPoint,
        );

        #[cfg(feature = "CPTemplate")]
        /// Tells the delegate that the zoom gesture started.
        ///
        /// - Parameters:
        /// - mapTemplate: The ``CPMapTemplate`` the gesture applies to.
        #[optional]
        #[unsafe(method(mapTemplateDidBeginZoomGesture:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplateDidBeginZoomGesture(&self, map_template: &CPMapTemplate);

        #[cfg(all(feature = "CPTemplate", feature = "objc2-core-foundation"))]
        /// Tells the delegate that a person is zooming on the map.
        ///
        /// - Parameters:
        /// - mapTemplate: The ``CPMapTemplate`` the gesture applies to.
        /// - center: A ``CGPoint`` that indicates the center point of the zoom.
        /// - scale: A ``CGFloat`` that indicates the scale factor relative to the zoom gesture in screen coordinates.
        /// - velocity: The velocity of the zoom gesture in scale factor per second.
        #[optional]
        #[unsafe(method(mapTemplate:didUpdateZoomGestureWithCenter:scale:velocity:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_didUpdateZoomGestureWithCenter_scale_velocity(
            &self,
            map_template: &CPMapTemplate,
            center: CGPoint,
            scale: CGFloat,
            velocity: CGFloat,
        );

        #[cfg(all(feature = "CPTemplate", feature = "objc2-core-foundation"))]
        /// Tells the delegate that a person stopped zooming the map.
        ///
        /// - Parameters:
        /// - mapTemplate: The ``CPMapTemplate`` the gesture applies to.
        /// - velocity: The velocity of the zoom gesture in scale factor per second.
        #[optional]
        #[unsafe(method(mapTemplate:didEndZoomGestureWithVelocity:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_didEndZoomGestureWithVelocity(
            &self,
            map_template: &CPMapTemplate,
            velocity: CGFloat,
        );

        #[cfg(feature = "CPTemplate")]
        /// Tells the delegate that the rotation gesture started.
        ///
        /// - Parameters:
        /// - mapTemplate: The ``CPMapTemplate`` the gesture applies to.
        #[optional]
        #[unsafe(method(mapTemplateDidBeginRotationGesture:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplateDidBeginRotationGesture(&self, map_template: &CPMapTemplate);

        #[cfg(all(feature = "CPTemplate", feature = "objc2-core-foundation"))]
        /// Tells the delegate that a person is rotating the map.
        ///
        /// - Parameters:
        /// - mapTemplate: The ``CPMapTemplate`` the gesture applies to.
        /// - center: A ``CGPoint`` that indicates the center between two fingers performing the rotation gesture.
        /// - rotation: A ``CGFloat`` that indicates the rotation of the gesture in radians.
        /// - velocity: The velocity of the rotation gesture in radians per second.
        #[optional]
        #[unsafe(method(mapTemplate:didRotateWithCenter:rotation:velocity:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_didRotateWithCenter_rotation_velocity(
            &self,
            map_template: &CPMapTemplate,
            center: CGPoint,
            rotation: CGFloat,
            velocity: CGFloat,
        );

        #[cfg(all(feature = "CPTemplate", feature = "objc2-core-foundation"))]
        /// Tells the delegate that a person stopped rotating the map.
        ///
        /// - Parameters:
        /// - mapTemplate: The ``CPMapTemplate`` the gesture applies to.
        /// - velocity: The velocity of the rotation gesture in radians per second.
        #[optional]
        #[unsafe(method(mapTemplate:rotationDidEndWithVelocity:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_rotationDidEndWithVelocity(
            &self,
            map_template: &CPMapTemplate,
            velocity: CGFloat,
        );

        #[cfg(feature = "CPTemplate")]
        /// Tells the delegate that the pitch gesture started.
        ///
        /// - Parameters:
        /// - mapTemplate: The ``CPMapTemplate`` the gesture applies to.
        #[optional]
        #[unsafe(method(mapTemplateDidBeginPitchGesture:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplateDidBeginPitchGesture(&self, map_template: &CPMapTemplate);

        #[cfg(all(feature = "CPTemplate", feature = "objc2-core-foundation"))]
        /// Called when a pitch gesture changes. May not be called when connected to some CarPlay systems
        ///
        /// Tells the delegate that a person is pitching the map.
        ///
        /// - Parameters:
        /// - mapTemplate: The ``CPMapTemplate`` the gesture applies to.
        /// - center: A ``CGPoint`` that indicates the center between two fingers performing the pitch gesture.
        #[optional]
        #[unsafe(method(mapTemplate:pitchWithCenter:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_pitchWithCenter(&self, map_template: &CPMapTemplate, center: CGPoint);

        #[cfg(all(feature = "CPTemplate", feature = "objc2-core-foundation"))]
        /// Tells the delegate that a person stopped pitching the map.
        ///
        /// - Parameters:
        /// - mapTemplate: The ``CPMapTemplate`` the gesture applies to.
        /// - center: A ``CGPoint`` that indicates the center between two fingers performing the pitch gesture.
        #[optional]
        #[unsafe(method(mapTemplate:pitchEndedWithCenter:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_pitchEndedWithCenter(
            &self,
            map_template: &CPMapTemplate,
            center: CGPoint,
        );

        #[cfg(all(feature = "CPNavigationAlert", feature = "CPTemplate"))]
        /// Called when the map interface is about to display a navigation alert.
        #[optional]
        #[unsafe(method(mapTemplate:willShowNavigationAlert:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_willShowNavigationAlert(
            &self,
            map_template: &CPMapTemplate,
            navigation_alert: &CPNavigationAlert,
        );

        #[cfg(all(feature = "CPNavigationAlert", feature = "CPTemplate"))]
        /// Called when the map interface has displayed a navigation alert.
        ///
        /// To take action in response to button presses on the navigation alert, see -[CPAlertAction handler].
        #[optional]
        #[unsafe(method(mapTemplate:didShowNavigationAlert:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_didShowNavigationAlert(
            &self,
            map_template: &CPMapTemplate,
            navigation_alert: &CPNavigationAlert,
        );

        #[cfg(all(feature = "CPNavigationAlert", feature = "CPTemplate"))]
        /// Called when the map interface is preparing to dismiss a navigation alert.
        #[optional]
        #[unsafe(method(mapTemplate:willDismissNavigationAlert:dismissalContext:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_willDismissNavigationAlert_dismissalContext(
            &self,
            map_template: &CPMapTemplate,
            navigation_alert: &CPNavigationAlert,
            dismissal_context: CPNavigationAlertDismissalContext,
        );

        #[cfg(all(feature = "CPNavigationAlert", feature = "CPTemplate"))]
        /// Called when the map interface has completed dismissal of a navigation alert.
        #[optional]
        #[unsafe(method(mapTemplate:didDismissNavigationAlert:dismissalContext:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_didDismissNavigationAlert_dismissalContext(
            &self,
            map_template: &CPMapTemplate,
            navigation_alert: &CPNavigationAlert,
            dismissal_context: CPNavigationAlertDismissalContext,
        );

        #[cfg(all(feature = "CPTemplate", feature = "CPTrip"))]
        /// Called when the user has selected a route choice to preview.
        #[optional]
        #[unsafe(method(mapTemplate:selectedPreviewForTrip:usingRouteChoice:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_selectedPreviewForTrip_usingRouteChoice(
            &self,
            map_template: &CPMapTemplate,
            trip: &CPTrip,
            route_choice: &CPRouteChoice,
        );

        #[cfg(all(feature = "CPTemplate", feature = "CPTrip"))]
        /// Called when the user has selected a route choice to navigate.
        #[optional]
        #[unsafe(method(mapTemplate:startedTrip:usingRouteChoice:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_startedTrip_usingRouteChoice(
            &self,
            map_template: &CPMapTemplate,
            trip: &CPTrip,
            route_choice: &CPRouteChoice,
        );

        #[cfg(feature = "CPTemplate")]
        /// Called when navigation has been canceled by the system.
        ///
        ///
        /// Note: In CarPlay systems that have native navigation, it is expected that only either the native navigation or the iPhone
        /// can be actively navigating. When navigation begins in the native system, all CarPlay supported navigation
        /// apps that are actively navigating will need to end their navigation session.
        #[optional]
        #[unsafe(method(mapTemplateDidCancelNavigation:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplateDidCancelNavigation(&self, map_template: &CPMapTemplate);

        #[cfg(all(feature = "CPManeuver", feature = "CPTemplate"))]
        /// Changes the visual layout of the maneuver.
        ///
        /// Returns: a CPManeuverDisplayStyle value representing the style to be used for displaying the maneuver
        #[optional]
        #[unsafe(method(mapTemplate:displayStyleForManeuver:))]
        #[unsafe(method_family = none)]
        unsafe fn mapTemplate_displayStyleForManeuver(
            &self,
            map_template: &CPMapTemplate,
            maneuver: &CPManeuver,
        ) -> CPManeuverDisplayStyle;
    }
);
