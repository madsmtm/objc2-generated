//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
#[cfg(feature = "dispatch2")]
use dispatch2::*;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-ui-kit")]
use objc2_ui_kit::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/carplay/cplistitemaccessorytype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CPListItemAccessoryType(pub NSInteger);
impl CPListItemAccessoryType {
    #[doc(alias = "CPListItemAccessoryTypeNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "CPListItemAccessoryTypeDisclosureIndicator")]
    pub const DisclosureIndicator: Self = Self(1);
    #[doc(alias = "CPListItemAccessoryTypeCloud")]
    pub const Cloud: Self = Self(2);
}

unsafe impl Encode for CPListItemAccessoryType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CPListItemAccessoryType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

/// [Apple's documentation](https://developer.apple.com/documentation/carplay/cplistitemplayingindicatorlocation?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct CPListItemPlayingIndicatorLocation(pub NSInteger);
impl CPListItemPlayingIndicatorLocation {
    #[doc(alias = "CPListItemPlayingIndicatorLocationLeading")]
    pub const Leading: Self = Self(0);
    #[doc(alias = "CPListItemPlayingIndicatorLocationTrailing")]
    pub const Trailing: Self = Self(1);
}

unsafe impl Encode for CPListItemPlayingIndicatorLocation {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for CPListItemPlayingIndicatorLocation {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// `CPListItem`describes a single object appearing in a list template.
    /// Each
    /// `CPListItem`is displayed as a single cell in the list.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/carplay/cplistitem?language=objc)
    #[unsafe(super(NSObject))]
    #[thread_kind = MainThreadOnly]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CPListItem;
);

#[cfg(feature = "CPListItemTypes")]
extern_conformance!(
    unsafe impl CPListTemplateItem for CPListItem {}
);

#[cfg(feature = "CPListItemTypes")]
extern_conformance!(
    unsafe impl CPSelectableListItem for CPListItem {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for CPListItem {}
);

impl CPListItem {
    extern_methods!(
        #[cfg(feature = "objc2-ui-kit")]
        /// Initialize a list item with text, detailtext, an image, an accessory type, and an accessory image.
        ///
        ///
        /// Note: The maximum size of the image is given by +[CPListItem maximumImageSize].
        ///
        /// When providing an image, your app should provide a
        /// `UIImage`that is display-ready. If necessary for the image, provide
        /// light and dark styles by using an asset from your asset catalog, prepared with light and dark styles
        /// or by using
        /// `UIImageAsset`to combine two
        /// `UIImage`instances into a single image with
        /// both styles.
        ///
        /// UIImageAsset is used to combine multiple UIImages with different trait collections into a single UIImage.
        ///
        /// If you specify an
        /// `accessoryImage,`your
        /// `accessoryType`will be set to
        /// `CPListItemAccessoryTypeNone.`
        /// To properly size your list images, your app should consider the display scale of the car screen.
        /// See -[CPInterfaceController carTraitCollection].
        #[unsafe(method(initWithText:detailText:image:accessoryImage:accessoryType:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithText_detailText_image_accessoryImage_accessoryType(
            this: Allocated<Self>,
            text: Option<&NSString>,
            detail_text: Option<&NSString>,
            image: Option<&UIImage>,
            accessory_image: Option<&UIImage>,
            accessory_type: CPListItemAccessoryType,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-ui-kit")]
        /// Initialize a list item with text, detail text, and an image.
        ///
        /// Your app should provide a
        /// `UIImage`that is display-ready, containing
        /// two
        /// `UIImageAssets,`corresponding to night and day mode.
        ///
        ///
        /// Note: The maximum size of the image is given by +[CPListItem maximumImageSize].
        ///
        /// When providing an image, your app should provide a
        /// `UIImage`that is display-ready. If necessary for the image, provide
        /// light and dark styles by using an asset from your asset catalog, prepared with light and dark styles
        /// or by using
        /// `UIImageAsset`to combine two
        /// `UIImage`instances into a single image with
        /// both styles.
        ///
        /// UIImageAsset is used to combine multiple UIImages with different trait collections into a single UIImage.
        ///
        ///
        /// To properly size your list images, your app should size them to the display scale of the car screen.
        /// See -[CPInterfaceController carTraitCollection].
        #[unsafe(method(initWithText:detailText:image:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithText_detailText_image(
            this: Allocated<Self>,
            text: Option<&NSString>,
            detail_text: Option<&NSString>,
            image: Option<&UIImage>,
        ) -> Retained<Self>;

        /// Initialize a list item with text and detail text.
        #[unsafe(method(initWithText:detailText:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithText_detailText(
            this: Allocated<Self>,
            text: Option<&NSString>,
            detail_text: Option<&NSString>,
        ) -> Retained<Self>;

        /// A Boolean value indicating whether the list item is enabled.
        ///
        ///
        /// Set the value of this property to
        /// `YES`to enable the list item or
        /// `NO`to disable it. The default value of this property is
        /// `YES.`
        #[unsafe(method(isEnabled))]
        #[unsafe(method_family = none)]
        pub unsafe fn isEnabled(&self) -> bool;

        /// Setter for [`isEnabled`][Self::isEnabled].
        #[unsafe(method(setEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEnabled(&self, enabled: bool);

        /// An accessory image type to display in the trailing portion of this list item.
        ///
        ///
        /// Note: If you specify a custom accessoryImage, it will take priority over one of the
        /// built-in accessory types specified here.
        #[unsafe(method(accessoryType))]
        #[unsafe(method_family = none)]
        pub unsafe fn accessoryType(&self) -> CPListItemAccessoryType;

        /// Setter for [`accessoryType`][Self::accessoryType].
        #[unsafe(method(setAccessoryType:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAccessoryType(&self, accessory_type: CPListItemAccessoryType);

        /// If YES, a cell displaying this list item will render with an explicit indicator to the trailing edge of the text
        ///
        /// Defaults to NO.
        #[unsafe(method(isExplicitContent))]
        #[unsafe(method_family = none)]
        pub unsafe fn isExplicitContent(&self) -> bool;

        /// Setter for [`isExplicitContent`][Self::isExplicitContent].
        #[unsafe(method(setExplicitContent:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setExplicitContent(&self, explicit_content: bool);

        #[cfg(feature = "objc2-core-foundation")]
        /// Set a fractional value between 0 and 1 to display a progress bar on this list item.
        #[unsafe(method(playbackProgress))]
        #[unsafe(method_family = none)]
        pub unsafe fn playbackProgress(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`playbackProgress`][Self::playbackProgress].
        #[unsafe(method(setPlaybackProgress:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPlaybackProgress(&self, playback_progress: CGFloat);

        /// Indicate that this list item represents content that is currently playing. This list item
        /// will render with an icon indicating that this item is playing.
        #[unsafe(method(isPlaying))]
        #[unsafe(method_family = none)]
        pub unsafe fn isPlaying(&self) -> bool;

        /// Setter for [`isPlaying`][Self::isPlaying].
        #[unsafe(method(setPlaying:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPlaying(&self, playing: bool);

        /// Specify the location in the list item for the now playing indicator.
        ///
        /// Defaults to CPListItemPlayingIndicatorLocationLeading.
        #[unsafe(method(playingIndicatorLocation))]
        #[unsafe(method_family = none)]
        pub unsafe fn playingIndicatorLocation(&self) -> CPListItemPlayingIndicatorLocation;

        /// Setter for [`playingIndicatorLocation`][Self::playingIndicatorLocation].
        #[unsafe(method(setPlayingIndicatorLocation:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPlayingIndicatorLocation(
            &self,
            playing_indicator_location: CPListItemPlayingIndicatorLocation,
        );

        #[cfg(feature = "objc2-core-foundation")]
        /// The expected image size for your
        /// `CPListItem.`To properly size your list images, your app should size them to the display scale of the car screen.
        /// See -[CPInterfaceController carTraitCollection].
        #[unsafe(method(maximumImageSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumImageSize(mtm: MainThreadMarker) -> CGSize;

        /// Update the detail text in this list item, reloading this item in the table if needed.
        #[unsafe(method(setDetailText:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDetailText(&self, detail_text: Option<&NSString>);

        #[cfg(feature = "objc2-ui-kit")]
        /// Update the image in this list item, reloading this item in the table if needed.
        ///
        /// When providing an image, your app should provide a
        /// `UIImage`that is display-ready. If necessary for the image, provide
        /// light and dark styles by using an asset from your asset catalog, prepared with light and dark styles
        /// or by using
        /// `UIImageAsset`to combine two
        /// `UIImage`instances into a single image with
        /// both styles.
        ///
        /// UIImageAsset is used to combine multiple UIImages with different trait collections into a single UIImage.
        #[unsafe(method(setImage:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setImage(&self, image: Option<&UIImage>);

        #[cfg(feature = "objc2-ui-kit")]
        /// Update the accessory image in this list item, reloading this item in the table if needed.
        ///
        /// When providing an image, your app should provide a
        /// `UIImage`that is display-ready. If necessary for the image, provide
        /// light and dark styles by using an asset from your asset catalog, prepared with light and dark styles
        /// or by using
        /// `UIImageAsset`to combine two
        /// `UIImage`instances into a single image with
        /// both styles.
        ///
        /// UIImageAsset is used to combine multiple UIImages with different trait collections into a single UIImage.
        #[unsafe(method(setAccessoryImage:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setAccessoryImage(&self, accessory_image: Option<&UIImage>);

        /// Assign a new text label to this list item, automatically reloading this item in its list template.
        #[unsafe(method(setText:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setText(&self, text: &NSString);

        #[cfg(all(feature = "CPListItemTypes", feature = "block2", feature = "dispatch2"))]
        /// An optional action block, fired when the user selects this item in a list template.
        ///
        /// You must call the completion block after processing the user's selection.
        #[unsafe(method(handler))]
        #[unsafe(method_family = none)]
        pub unsafe fn handler(
            &self,
        ) -> *mut block2::DynBlock<
            dyn Fn(NonNull<ProtocolObject<dyn CPSelectableListItem>>, dispatch_block_t),
        >;

        #[cfg(all(feature = "CPListItemTypes", feature = "block2", feature = "dispatch2"))]
        /// Setter for [`handler`][Self::handler].
        #[unsafe(method(setHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setHandler(
            &self,
            handler: Option<
                &block2::DynBlock<
                    dyn Fn(NonNull<ProtocolObject<dyn CPSelectableListItem>>, dispatch_block_t),
                >,
            >,
        );

        /// The primary text shown in a cell displaying this list item.
        #[unsafe(method(text))]
        #[unsafe(method_family = none)]
        pub unsafe fn text(&self) -> Option<Retained<NSString>>;

        /// Any custom user info related to this item.
        #[unsafe(method(userInfo))]
        #[unsafe(method_family = none)]
        pub unsafe fn userInfo(&self) -> Option<Retained<AnyObject>>;

        /// Setter for [`userInfo`][Self::userInfo].
        #[unsafe(method(setUserInfo:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setUserInfo(&self, user_info: Option<&AnyObject>);

        /// Any extra text displayed below the primary text in a cell displaying this list item.
        #[unsafe(method(detailText))]
        #[unsafe(method_family = none)]
        pub unsafe fn detailText(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "objc2-ui-kit")]
        /// An image displayed on the leading side of a cell displaying this list item.
        ///
        /// When providing an image, your app should provide a
        /// `UIImage`that is display-ready. If necessary for the image, provide
        /// light and dark styles by using an asset from your asset catalog, prepared with light and dark styles
        /// or by using
        /// `UIImageAsset`to combine two
        /// `UIImage`instances into a single image with
        /// both styles.
        ///
        /// UIImageAsset is used to combine multiple UIImages with different trait collections into a single UIImage.
        ///
        ///
        /// Animated images are not supported. If an animated image is assigned, only the first image will be used.
        /// To properly size your list images, your app should size them to the display scale of the car screen.
        /// See -[CPInterfaceController carTraitCollection].
        #[unsafe(method(image))]
        #[unsafe(method_family = none)]
        pub unsafe fn image(&self) -> Option<Retained<UIImage>>;

        #[cfg(feature = "objc2-ui-kit")]
        /// An image displayed on the trailing side of a cell displaying this list item.
        ///
        /// When providing an image, your app should provide a
        /// `UIImage`that is display-ready. If necessary for the image, provide
        /// light and dark styles by using an asset from your asset catalog, prepared with light and dark styles
        /// or by using
        /// `UIImageAsset`to combine two
        /// `UIImage`instances into a single image with
        /// both styles.
        ///
        /// UIImageAsset is used to combine multiple UIImages with different trait collections into a single UIImage.
        ///
        ///
        /// Animated images are not supported. If an animated image is assigned, only the first image will be used.
        ///
        ///
        /// Note: If set, this property takes precedence over the
        /// `accessoryType.`
        #[unsafe(method(accessoryImage))]
        #[unsafe(method_family = none)]
        pub unsafe fn accessoryImage(&self) -> Option<Retained<UIImage>>;

        /// If YES, a cell displaying this list item will render with a disclosure indicator
        /// in the trailing side of the cell.
        ///
        ///
        /// Note: If set, this property takes precedence over showsCloudLabel.
        ///
        /// Defaults to NO.
        #[deprecated]
        #[unsafe(method(showsDisclosureIndicator))]
        #[unsafe(method_family = none)]
        pub unsafe fn showsDisclosureIndicator(&self) -> bool;

        /// If YES, a cell displaying this list item will render with an explicit label to the trailing edge of the text
        ///
        /// Defaults to NO.
        #[deprecated]
        #[unsafe(method(showsExplicitLabel))]
        #[unsafe(method_family = none)]
        pub unsafe fn showsExplicitLabel(&self) -> bool;

        /// Setter for [`showsExplicitLabel`][Self::showsExplicitLabel].
        #[deprecated]
        #[unsafe(method(setShowsExplicitLabel:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setShowsExplicitLabel(&self, shows_explicit_label: bool);
    );
}

/// Methods declared on superclass `NSObject`.
impl CPListItem {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}

/// Deprecated.
impl CPListItem {
    extern_methods!(
        #[cfg(feature = "objc2-ui-kit")]
        /// Initialize a list item with text, detailtext, an image, and a disclosure indicator.
        ///
        ///
        /// Note: The maximum size of the image is given by +[CPListItem maximumImageSize].
        ///
        ///
        /// To properly size your list images, your app should size them to the display scale of the car screen.
        /// See -[CPInterfaceController carTraitCollection].
        #[deprecated]
        #[unsafe(method(initWithText:detailText:image:showsDisclosureIndicator:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithText_detailText_image_showsDisclosureIndicator(
            this: Allocated<Self>,
            text: Option<&NSString>,
            detail_text: Option<&NSString>,
            image: Option<&UIImage>,
            shows_disclosure_indicator: bool,
        ) -> Retained<Self>;
    );
}
