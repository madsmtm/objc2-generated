//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-video")]
use objc2_core_video::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-io-surface")]
use objc2_io_surface::*;
#[cfg(feature = "objc2-metal")]
use objc2_metal::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciimageprocessorkernel?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CIImageProcessorKernel;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for CIImageProcessorKernel {}
);

impl CIImageProcessorKernel {
    extern_methods!(
        /// # Safety
        ///
        /// `arguments` generic should be of the correct type.
        #[unsafe(method(processWithInputs:arguments:output:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn processWithInputs_arguments_output_error(
            inputs: Option<&NSArray<ProtocolObject<dyn CIImageProcessorInput>>>,
            arguments: Option<&NSDictionary<NSString, AnyObject>>,
            output: &ProtocolObject<dyn CIImageProcessorOutput>,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "objc2-core-foundation")]
        /// # Safety
        ///
        /// `arguments` generic should be of the correct type.
        #[unsafe(method(roiForInput:arguments:outputRect:))]
        #[unsafe(method_family = none)]
        pub unsafe fn roiForInput_arguments_outputRect(
            input: c_int,
            arguments: Option<&NSDictionary<NSString, AnyObject>>,
            output_rect: CGRect,
        ) -> CGRect;

        #[cfg(all(feature = "CIVector", feature = "objc2-core-foundation"))]
        /// # Safety
        ///
        /// `arguments` generic should be of the correct type.
        #[unsafe(method(roiTileArrayForInput:arguments:outputRect:))]
        #[unsafe(method_family = none)]
        pub unsafe fn roiTileArrayForInput_arguments_outputRect(
            input: c_int,
            arguments: Option<&NSDictionary<NSString, AnyObject>>,
            output_rect: CGRect,
        ) -> Retained<NSArray<CIVector>>;

        #[cfg(feature = "CIImage")]
        #[unsafe(method(formatForInputAtIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn formatForInputAtIndex(input: c_int) -> CIFormat;

        #[cfg(feature = "CIImage")]
        #[unsafe(method(outputFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputFormat() -> CIFormat;

        #[unsafe(method(outputIsOpaque))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputIsOpaque() -> bool;

        #[unsafe(method(synchronizeInputs))]
        #[unsafe(method_family = none)]
        pub unsafe fn synchronizeInputs() -> bool;

        #[cfg(all(feature = "CIImage", feature = "objc2-core-foundation"))]
        /// # Safety
        ///
        /// `args` generic should be of the correct type.
        #[unsafe(method(applyWithExtent:inputs:arguments:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn applyWithExtent_inputs_arguments_error(
            extent: CGRect,
            inputs: Option<&NSArray<CIImage>>,
            args: Option<&NSDictionary<NSString, AnyObject>>,
        ) -> Result<Retained<CIImage>, Retained<NSError>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl CIImageProcessorKernel {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciimageprocessorinput?language=objc)
    pub unsafe trait CIImageProcessorInput {
        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(region))]
        #[unsafe(method_family = none)]
        unsafe fn region(&self) -> CGRect;

        #[unsafe(method(bytesPerRow))]
        #[unsafe(method_family = none)]
        unsafe fn bytesPerRow(&self) -> usize;

        #[cfg(feature = "CIImage")]
        #[unsafe(method(format))]
        #[unsafe(method_family = none)]
        unsafe fn format(&self) -> CIFormat;

        #[unsafe(method(baseAddress))]
        #[unsafe(method_family = none)]
        unsafe fn baseAddress(&self) -> NonNull<c_void>;

        #[cfg(feature = "objc2-io-surface")]
        #[unsafe(method(surface))]
        #[unsafe(method_family = none)]
        unsafe fn surface(&self) -> Retained<IOSurfaceRef>;

        #[cfg(feature = "objc2-core-video")]
        #[unsafe(method(pixelBuffer))]
        #[unsafe(method_family = none)]
        unsafe fn pixelBuffer(&self) -> Option<Retained<CVPixelBuffer>>;

        #[cfg(feature = "objc2-metal")]
        #[unsafe(method(metalTexture))]
        #[unsafe(method_family = none)]
        unsafe fn metalTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        #[unsafe(method(digest))]
        #[unsafe(method_family = none)]
        unsafe fn digest(&self) -> u64;

        #[unsafe(method(roiTileIndex))]
        #[unsafe(method_family = none)]
        unsafe fn roiTileIndex(&self) -> NSUInteger;

        #[unsafe(method(roiTileCount))]
        #[unsafe(method_family = none)]
        unsafe fn roiTileCount(&self) -> NSUInteger;
    }
);

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciimageprocessoroutput?language=objc)
    pub unsafe trait CIImageProcessorOutput {
        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(region))]
        #[unsafe(method_family = none)]
        unsafe fn region(&self) -> CGRect;

        #[unsafe(method(bytesPerRow))]
        #[unsafe(method_family = none)]
        unsafe fn bytesPerRow(&self) -> usize;

        #[cfg(feature = "CIImage")]
        #[unsafe(method(format))]
        #[unsafe(method_family = none)]
        unsafe fn format(&self) -> CIFormat;

        #[unsafe(method(baseAddress))]
        #[unsafe(method_family = none)]
        unsafe fn baseAddress(&self) -> NonNull<c_void>;

        #[cfg(feature = "objc2-io-surface")]
        #[unsafe(method(surface))]
        #[unsafe(method_family = none)]
        unsafe fn surface(&self) -> Retained<IOSurfaceRef>;

        #[cfg(feature = "objc2-core-video")]
        #[unsafe(method(pixelBuffer))]
        #[unsafe(method_family = none)]
        unsafe fn pixelBuffer(&self) -> Option<Retained<CVPixelBuffer>>;

        #[cfg(feature = "objc2-metal")]
        #[unsafe(method(metalTexture))]
        #[unsafe(method_family = none)]
        unsafe fn metalTexture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        #[cfg(feature = "objc2-metal")]
        #[unsafe(method(metalCommandBuffer))]
        #[unsafe(method_family = none)]
        unsafe fn metalCommandBuffer(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn MTLCommandBuffer>>>;

        #[unsafe(method(digest))]
        #[unsafe(method_family = none)]
        unsafe fn digest(&self) -> u64;
    }
);
