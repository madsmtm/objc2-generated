//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;
#[cfg(feature = "objc2-core-video")]
use objc2_core_video::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-image-io")]
use objc2_image_io::*;
#[cfg(feature = "objc2-io-surface")]
use objc2_io_surface::*;
#[cfg(feature = "objc2-metal")]
use objc2_metal::*;
#[cfg(feature = "objc2-open-gl")]
#[cfg(target_os = "macos")]
use objc2_open_gl::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicontextoption?language=objc)
// NS_TYPED_ENUM
pub type CIContextOption = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcicontextoutputcolorspace?language=objc)
    pub static kCIContextOutputColorSpace: &'static CIContextOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcicontextworkingcolorspace?language=objc)
    pub static kCIContextWorkingColorSpace: &'static CIContextOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcicontextworkingformat?language=objc)
    pub static kCIContextWorkingFormat: &'static CIContextOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcicontexthighqualitydownsample?language=objc)
    pub static kCIContextHighQualityDownsample: &'static CIContextOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcicontextoutputpremultiplied?language=objc)
    pub static kCIContextOutputPremultiplied: &'static CIContextOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcicontextcacheintermediates?language=objc)
    pub static kCIContextCacheIntermediates: &'static CIContextOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcicontextusesoftwarerenderer?language=objc)
    pub static kCIContextUseSoftwareRenderer: &'static CIContextOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcicontextpriorityrequestlow?language=objc)
    pub static kCIContextPriorityRequestLow: &'static CIContextOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcicontextallowlowpower?language=objc)
    pub static kCIContextAllowLowPower: &'static CIContextOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcicontextname?language=objc)
    pub static kCIContextName: &'static CIContextOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcicontextmemorylimit?language=objc)
    pub static kCIContextMemoryLimit: &'static CIContextOption;
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicontext?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CIContext;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for CIContext {}
);

impl CIContext {
    extern_methods!(
        #[cfg(all(feature = "objc2-core-graphics", feature = "objc2-open-gl"))]
        #[cfg(target_os = "macos")]
        /// # Safety
        ///
        /// - `cglctx` must be a valid pointer.
        /// - `pixel_format` must be a valid pointer or null.
        /// - `options` generic should be of the correct type.
        #[deprecated = "Core Image OpenGL API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)"]
        #[unsafe(method(contextWithCGLContext:pixelFormat:colorSpace:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn contextWithCGLContext_pixelFormat_colorSpace_options(
            cglctx: CGLContextObj,
            pixel_format: CGLPixelFormatObj,
            color_space: Option<&CGColorSpace>,
            options: Option<&NSDictionary<CIContextOption, AnyObject>>,
        ) -> Retained<CIContext>;

        #[cfg(feature = "objc2-open-gl")]
        #[cfg(target_os = "macos")]
        /// # Safety
        ///
        /// - `cglctx` must be a valid pointer.
        /// - `pixel_format` must be a valid pointer or null.
        /// - `options` generic should be of the correct type.
        #[deprecated = "Core Image OpenGL API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)"]
        #[unsafe(method(contextWithCGLContext:pixelFormat:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn contextWithCGLContext_pixelFormat_options(
            cglctx: CGLContextObj,
            pixel_format: CGLPixelFormatObj,
            options: Option<&NSDictionary<CIContextOption, AnyObject>>,
        ) -> Retained<CIContext>;

        #[cfg(feature = "objc2-core-graphics")]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(contextWithCGContext:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn contextWithCGContext_options(
            cgctx: &CGContext,
            options: Option<&NSDictionary<CIContextOption, AnyObject>>,
        ) -> Retained<CIContext>;

        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(contextWithOptions:))]
        #[unsafe(method_family = none)]
        pub unsafe fn contextWithOptions(
            options: Option<&NSDictionary<CIContextOption, AnyObject>>,
        ) -> Retained<CIContext>;

        #[unsafe(method(context))]
        #[unsafe(method_family = none)]
        pub unsafe fn context() -> Retained<CIContext>;

        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(initWithOptions:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithOptions(
            this: Allocated<Self>,
            options: Option<&NSDictionary<CIContextOption, AnyObject>>,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "objc2-metal")]
        #[unsafe(method(contextWithMTLDevice:))]
        #[unsafe(method_family = none)]
        pub unsafe fn contextWithMTLDevice(
            device: &ProtocolObject<dyn MTLDevice>,
        ) -> Retained<CIContext>;

        #[cfg(feature = "objc2-metal")]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(contextWithMTLDevice:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn contextWithMTLDevice_options(
            device: &ProtocolObject<dyn MTLDevice>,
            options: Option<&NSDictionary<CIContextOption, AnyObject>>,
        ) -> Retained<CIContext>;

        #[cfg(feature = "objc2-metal")]
        #[unsafe(method(contextWithMTLCommandQueue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn contextWithMTLCommandQueue(
            command_queue: &ProtocolObject<dyn MTLCommandQueue>,
        ) -> Retained<CIContext>;

        #[cfg(feature = "objc2-metal")]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(contextWithMTLCommandQueue:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn contextWithMTLCommandQueue_options(
            command_queue: &ProtocolObject<dyn MTLCommandQueue>,
            options: Option<&NSDictionary<CIContextOption, AnyObject>>,
        ) -> Retained<CIContext>;

        #[cfg(feature = "objc2-core-graphics")]
        #[unsafe(method(workingColorSpace))]
        #[unsafe(method_family = none)]
        pub unsafe fn workingColorSpace(&self) -> Option<Retained<CGColorSpace>>;

        #[cfg(feature = "CIImage")]
        #[unsafe(method(workingFormat))]
        #[unsafe(method_family = none)]
        pub unsafe fn workingFormat(&self) -> CIFormat;

        #[cfg(all(feature = "CIImage", feature = "objc2-core-foundation"))]
        #[deprecated]
        #[unsafe(method(drawImage:atPoint:fromRect:))]
        #[unsafe(method_family = none)]
        pub unsafe fn drawImage_atPoint_fromRect(
            &self,
            image: &CIImage,
            at_point: CGPoint,
            from_rect: CGRect,
        );

        #[cfg(all(feature = "CIImage", feature = "objc2-core-foundation"))]
        #[unsafe(method(drawImage:inRect:fromRect:))]
        #[unsafe(method_family = none)]
        pub unsafe fn drawImage_inRect_fromRect(
            &self,
            image: &CIImage,
            in_rect: CGRect,
            from_rect: CGRect,
        );

        #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-graphics"))]
        /// # Safety
        ///
        /// `info` generics must be of the correct type.
        #[deprecated]
        #[unsafe(method(createCGLayerWithSize:info:))]
        // required for soundness, method has `returns_retained` attribute.
        #[unsafe(method_family = copy)]
        pub unsafe fn createCGLayerWithSize_info(
            &self,
            size: CGSize,
            info: Option<&CFDictionary>,
        ) -> Option<Retained<CGLayer>>;

        #[cfg(all(
            feature = "CIImage",
            feature = "objc2-core-foundation",
            feature = "objc2-core-graphics"
        ))]
        /// # Safety
        ///
        /// `data` must be a valid pointer.
        #[unsafe(method(render:toBitmap:rowBytes:bounds:format:colorSpace:))]
        #[unsafe(method_family = none)]
        pub unsafe fn render_toBitmap_rowBytes_bounds_format_colorSpace(
            &self,
            image: &CIImage,
            data: NonNull<c_void>,
            row_bytes: isize,
            bounds: CGRect,
            format: CIFormat,
            color_space: Option<&CGColorSpace>,
        );

        #[cfg(all(
            feature = "CIImage",
            feature = "objc2-core-foundation",
            feature = "objc2-core-graphics",
            feature = "objc2-io-surface"
        ))]
        #[unsafe(method(render:toIOSurface:bounds:colorSpace:))]
        #[unsafe(method_family = none)]
        pub unsafe fn render_toIOSurface_bounds_colorSpace(
            &self,
            image: &CIImage,
            surface: &IOSurfaceRef,
            bounds: CGRect,
            color_space: Option<&CGColorSpace>,
        );

        #[cfg(all(feature = "CIImage", feature = "objc2-core-video"))]
        #[unsafe(method(render:toCVPixelBuffer:))]
        #[unsafe(method_family = none)]
        pub unsafe fn render_toCVPixelBuffer(&self, image: &CIImage, buffer: &CVPixelBuffer);

        #[cfg(all(
            feature = "CIImage",
            feature = "objc2-core-foundation",
            feature = "objc2-core-graphics",
            feature = "objc2-core-video"
        ))]
        #[unsafe(method(render:toCVPixelBuffer:bounds:colorSpace:))]
        #[unsafe(method_family = none)]
        pub unsafe fn render_toCVPixelBuffer_bounds_colorSpace(
            &self,
            image: &CIImage,
            buffer: &CVPixelBuffer,
            bounds: CGRect,
            color_space: Option<&CGColorSpace>,
        );

        #[cfg(all(
            feature = "CIImage",
            feature = "objc2-core-foundation",
            feature = "objc2-core-graphics",
            feature = "objc2-metal"
        ))]
        #[unsafe(method(render:toMTLTexture:commandBuffer:bounds:colorSpace:))]
        #[unsafe(method_family = none)]
        pub unsafe fn render_toMTLTexture_commandBuffer_bounds_colorSpace(
            &self,
            image: &CIImage,
            texture: &ProtocolObject<dyn MTLTexture>,
            command_buffer: Option<&ProtocolObject<dyn MTLCommandBuffer>>,
            bounds: CGRect,
            color_space: &CGColorSpace,
        );

        #[unsafe(method(reclaimResources))]
        #[unsafe(method_family = none)]
        pub unsafe fn reclaimResources(&self);

        #[unsafe(method(clearCaches))]
        #[unsafe(method_family = none)]
        pub unsafe fn clearCaches(&self);

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(inputImageMaximumSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn inputImageMaximumSize(&self) -> CGSize;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(outputImageMaximumSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn outputImageMaximumSize(&self) -> CGSize;
    );
}

/// Methods declared on superclass `NSObject`.
impl CIContext {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

/// createCGImage.
impl CIContext {
    extern_methods!(
        #[cfg(all(
            feature = "CIImage",
            feature = "objc2-core-foundation",
            feature = "objc2-core-graphics"
        ))]
        #[unsafe(method(createCGImage:fromRect:))]
        // required for soundness, method has `returns_retained` attribute.
        #[unsafe(method_family = copy)]
        pub unsafe fn createCGImage_fromRect(
            &self,
            image: &CIImage,
            from_rect: CGRect,
        ) -> Option<Retained<CGImage>>;

        #[cfg(all(
            feature = "CIImage",
            feature = "objc2-core-foundation",
            feature = "objc2-core-graphics"
        ))]
        #[unsafe(method(createCGImage:fromRect:format:colorSpace:))]
        // required for soundness, method has `returns_retained` attribute.
        #[unsafe(method_family = copy)]
        pub unsafe fn createCGImage_fromRect_format_colorSpace(
            &self,
            image: &CIImage,
            from_rect: CGRect,
            format: CIFormat,
            color_space: Option<&CGColorSpace>,
        ) -> Option<Retained<CGImage>>;

        #[cfg(all(
            feature = "CIImage",
            feature = "objc2-core-foundation",
            feature = "objc2-core-graphics"
        ))]
        #[unsafe(method(createCGImage:fromRect:format:colorSpace:deferred:))]
        // required for soundness, method has `returns_retained` attribute.
        #[unsafe(method_family = copy)]
        pub unsafe fn createCGImage_fromRect_format_colorSpace_deferred(
            &self,
            image: &CIImage,
            from_rect: CGRect,
            format: CIFormat,
            color_space: Option<&CGColorSpace>,
            deferred: bool,
        ) -> Option<Retained<CGImage>>;
    );
}

/// OfflineGPUSupport.
impl CIContext {
    extern_methods!(
        #[unsafe(method(offlineGPUCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn offlineGPUCount() -> c_uint;

        #[deprecated = "Core Image OpenGL API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)"]
        #[unsafe(method(contextForOfflineGPUAtIndex:))]
        #[unsafe(method_family = none)]
        pub unsafe fn contextForOfflineGPUAtIndex(index: c_uint) -> Option<Retained<CIContext>>;

        #[cfg(all(feature = "objc2-core-graphics", feature = "objc2-open-gl"))]
        #[cfg(target_os = "macos")]
        /// # Safety
        ///
        /// `shared_context` must be a valid pointer or null.
        #[deprecated = "Core Image OpenGL API deprecated. (Define CI_SILENCE_GL_DEPRECATION to silence these warnings)"]
        #[unsafe(method(contextForOfflineGPUAtIndex:colorSpace:options:sharedContext:))]
        #[unsafe(method_family = none)]
        pub unsafe fn contextForOfflineGPUAtIndex_colorSpace_options_sharedContext(
            index: c_uint,
            color_space: Option<&CGColorSpace>,
            options: Option<&NSDictionary<CIContextOption, AnyObject>>,
            shared_context: CGLContextObj,
        ) -> Option<Retained<CIContext>>;
    );
}

/// [Apple's documentation](https://developer.apple.com/documentation/coreimage/ciimagerepresentationoption?language=objc)
// NS_TYPED_ENUM
pub type CIImageRepresentationOption = NSString;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kciimagerepresentationavdepthdata?language=objc)
    pub static kCIImageRepresentationAVDepthData: &'static CIImageRepresentationOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kciimagerepresentationdepthimage?language=objc)
    pub static kCIImageRepresentationDepthImage: &'static CIImageRepresentationOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kciimagerepresentationdisparityimage?language=objc)
    pub static kCIImageRepresentationDisparityImage: &'static CIImageRepresentationOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kciimagerepresentationavportraiteffectsmatte?language=objc)
    pub static kCIImageRepresentationAVPortraitEffectsMatte: &'static CIImageRepresentationOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kciimagerepresentationportraiteffectsmatteimage?language=objc)
    pub static kCIImageRepresentationPortraitEffectsMatteImage:
        &'static CIImageRepresentationOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kciimagerepresentationavsemanticsegmentationmattes?language=objc)
    pub static kCIImageRepresentationAVSemanticSegmentationMattes:
        &'static CIImageRepresentationOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kciimagerepresentationsemanticsegmentationskinmatteimage?language=objc)
    pub static kCIImageRepresentationSemanticSegmentationSkinMatteImage:
        &'static CIImageRepresentationOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kciimagerepresentationsemanticsegmentationhairmatteimage?language=objc)
    pub static kCIImageRepresentationSemanticSegmentationHairMatteImage:
        &'static CIImageRepresentationOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kciimagerepresentationsemanticsegmentationteethmatteimage?language=objc)
    pub static kCIImageRepresentationSemanticSegmentationTeethMatteImage:
        &'static CIImageRepresentationOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kciimagerepresentationsemanticsegmentationglassesmatteimage?language=objc)
    pub static kCIImageRepresentationSemanticSegmentationGlassesMatteImage:
        &'static CIImageRepresentationOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kciimagerepresentationsemanticsegmentationskymatteimage?language=objc)
    pub static kCIImageRepresentationSemanticSegmentationSkyMatteImage:
        &'static CIImageRepresentationOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kciimagerepresentationhdrimage?language=objc)
    pub static kCIImageRepresentationHDRImage: &'static CIImageRepresentationOption;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kciimagerepresentationhdrgainmapimage?language=objc)
    pub static kCIImageRepresentationHDRGainMapImage: &'static CIImageRepresentationOption;
}

/// ImageRepresentation.
impl CIContext {
    extern_methods!(
        #[cfg(all(feature = "CIImage", feature = "objc2-core-graphics"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(TIFFRepresentationOfImage:format:colorSpace:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn TIFFRepresentationOfImage_format_colorSpace_options(
            &self,
            image: &CIImage,
            format: CIFormat,
            color_space: &CGColorSpace,
            options: &NSDictionary<CIImageRepresentationOption, AnyObject>,
        ) -> Option<Retained<NSData>>;

        #[cfg(all(feature = "CIImage", feature = "objc2-core-graphics"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(JPEGRepresentationOfImage:colorSpace:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn JPEGRepresentationOfImage_colorSpace_options(
            &self,
            image: &CIImage,
            color_space: &CGColorSpace,
            options: &NSDictionary<CIImageRepresentationOption, AnyObject>,
        ) -> Option<Retained<NSData>>;

        #[cfg(all(feature = "CIImage", feature = "objc2-core-graphics"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(HEIFRepresentationOfImage:format:colorSpace:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn HEIFRepresentationOfImage_format_colorSpace_options(
            &self,
            image: &CIImage,
            format: CIFormat,
            color_space: &CGColorSpace,
            options: &NSDictionary<CIImageRepresentationOption, AnyObject>,
        ) -> Option<Retained<NSData>>;

        #[cfg(all(feature = "CIImage", feature = "objc2-core-graphics"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(HEIF10RepresentationOfImage:colorSpace:options:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn HEIF10RepresentationOfImage_colorSpace_options_error(
            &self,
            image: &CIImage,
            color_space: &CGColorSpace,
            options: &NSDictionary<CIImageRepresentationOption, AnyObject>,
        ) -> Result<Retained<NSData>, Retained<NSError>>;

        #[cfg(all(feature = "CIImage", feature = "objc2-core-graphics"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(PNGRepresentationOfImage:format:colorSpace:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn PNGRepresentationOfImage_format_colorSpace_options(
            &self,
            image: &CIImage,
            format: CIFormat,
            color_space: &CGColorSpace,
            options: &NSDictionary<CIImageRepresentationOption, AnyObject>,
        ) -> Option<Retained<NSData>>;

        #[cfg(feature = "CIImage")]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(OpenEXRRepresentationOfImage:options:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn OpenEXRRepresentationOfImage_options_error(
            &self,
            image: &CIImage,
            options: &NSDictionary<CIImageRepresentationOption, AnyObject>,
        ) -> Result<Retained<NSData>, Retained<NSError>>;

        #[cfg(all(feature = "CIImage", feature = "objc2-core-graphics"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(writeTIFFRepresentationOfImage:toURL:format:colorSpace:options:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn writeTIFFRepresentationOfImage_toURL_format_colorSpace_options_error(
            &self,
            image: &CIImage,
            url: &NSURL,
            format: CIFormat,
            color_space: &CGColorSpace,
            options: &NSDictionary<CIImageRepresentationOption, AnyObject>,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(all(feature = "CIImage", feature = "objc2-core-graphics"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(writePNGRepresentationOfImage:toURL:format:colorSpace:options:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn writePNGRepresentationOfImage_toURL_format_colorSpace_options_error(
            &self,
            image: &CIImage,
            url: &NSURL,
            format: CIFormat,
            color_space: &CGColorSpace,
            options: &NSDictionary<CIImageRepresentationOption, AnyObject>,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(all(feature = "CIImage", feature = "objc2-core-graphics"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(writeJPEGRepresentationOfImage:toURL:colorSpace:options:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn writeJPEGRepresentationOfImage_toURL_colorSpace_options_error(
            &self,
            image: &CIImage,
            url: &NSURL,
            color_space: &CGColorSpace,
            options: &NSDictionary<CIImageRepresentationOption, AnyObject>,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(all(feature = "CIImage", feature = "objc2-core-graphics"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(writeHEIFRepresentationOfImage:toURL:format:colorSpace:options:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn writeHEIFRepresentationOfImage_toURL_format_colorSpace_options_error(
            &self,
            image: &CIImage,
            url: &NSURL,
            format: CIFormat,
            color_space: &CGColorSpace,
            options: &NSDictionary<CIImageRepresentationOption, AnyObject>,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(all(feature = "CIImage", feature = "objc2-core-graphics"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(writeHEIF10RepresentationOfImage:toURL:colorSpace:options:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn writeHEIF10RepresentationOfImage_toURL_colorSpace_options_error(
            &self,
            image: &CIImage,
            url: &NSURL,
            color_space: &CGColorSpace,
            options: &NSDictionary<CIImageRepresentationOption, AnyObject>,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "CIImage")]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(writeOpenEXRRepresentationOfImage:toURL:options:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn writeOpenEXRRepresentationOfImage_toURL_options_error(
            &self,
            image: &CIImage,
            url: &NSURL,
            options: &NSDictionary<CIImageRepresentationOption, AnyObject>,
        ) -> Result<(), Retained<NSError>>;
    );
}

/// CIDepthBlurEffect.
impl CIContext {
    extern_methods!(
        #[cfg(feature = "CIFilter")]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(depthBlurEffectFilterForImageURL:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn depthBlurEffectFilterForImageURL_options(
            &self,
            url: &NSURL,
            options: Option<&NSDictionary>,
        ) -> Option<Retained<CIFilter>>;

        #[cfg(feature = "CIFilter")]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(depthBlurEffectFilterForImageData:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn depthBlurEffectFilterForImageData_options(
            &self,
            data: &NSData,
            options: Option<&NSDictionary>,
        ) -> Option<Retained<CIFilter>>;

        #[cfg(all(feature = "CIFilter", feature = "CIImage", feature = "objc2-image-io"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:orientation:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn depthBlurEffectFilterForImage_disparityImage_portraitEffectsMatte_orientation_options(
            &self,
            image: &CIImage,
            disparity_image: &CIImage,
            portrait_effects_matte: Option<&CIImage>,
            orientation: CGImagePropertyOrientation,
            options: Option<&NSDictionary>,
        ) -> Option<Retained<CIFilter>>;

        #[cfg(all(feature = "CIFilter", feature = "CIImage", feature = "objc2-image-io"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:hairSemanticSegmentation:orientation:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn depthBlurEffectFilterForImage_disparityImage_portraitEffectsMatte_hairSemanticSegmentation_orientation_options(
            &self,
            image: &CIImage,
            disparity_image: &CIImage,
            portrait_effects_matte: Option<&CIImage>,
            hair_semantic_segmentation: Option<&CIImage>,
            orientation: CGImagePropertyOrientation,
            options: Option<&NSDictionary>,
        ) -> Option<Retained<CIFilter>>;

        #[cfg(all(feature = "CIFilter", feature = "CIImage", feature = "objc2-image-io"))]
        /// # Safety
        ///
        /// `options` generic should be of the correct type.
        #[unsafe(method(depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:hairSemanticSegmentation:glassesMatte:gainMap:orientation:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn depthBlurEffectFilterForImage_disparityImage_portraitEffectsMatte_hairSemanticSegmentation_glassesMatte_gainMap_orientation_options(
            &self,
            image: &CIImage,
            disparity_image: &CIImage,
            portrait_effects_matte: Option<&CIImage>,
            hair_semantic_segmentation: Option<&CIImage>,
            glasses_matte: Option<&CIImage>,
            gain_map: Option<&CIImage>,
            orientation: CGImagePropertyOrientation,
            options: Option<&NSDictionary>,
        ) -> Option<Retained<CIFilter>>;
    );
}
