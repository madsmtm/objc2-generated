//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cisampler?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CISampler;
);

extern_conformance!(
    unsafe impl NSCopying for CISampler {}
);

unsafe impl CopyingHelper for CISampler {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for CISampler {}
);

impl CISampler {
    extern_methods!(
        #[cfg(feature = "CIImage")]
        #[unsafe(method(samplerWithImage:))]
        #[unsafe(method_family = none)]
        pub unsafe fn samplerWithImage(im: &CIImage) -> Retained<Self>;

        #[cfg(feature = "CIImage")]
        /// # Safety
        ///
        /// `dict` generic should be of the correct type.
        #[unsafe(method(samplerWithImage:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn samplerWithImage_options(
            im: &CIImage,
            dict: Option<&NSDictionary>,
        ) -> Retained<Self>;

        #[cfg(feature = "CIImage")]
        #[unsafe(method(initWithImage:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithImage(this: Allocated<Self>, im: &CIImage) -> Retained<Self>;

        #[cfg(feature = "CIImage")]
        /// # Safety
        ///
        /// `dict` generic should be of the correct type.
        #[unsafe(method(initWithImage:options:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithImage_options(
            this: Allocated<Self>,
            im: &CIImage,
            dict: Option<&NSDictionary>,
        ) -> Retained<Self>;

        #[cfg(feature = "CIFilterShape")]
        #[unsafe(method(definition))]
        #[unsafe(method_family = none)]
        pub unsafe fn definition(&self) -> Retained<CIFilterShape>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(extent))]
        #[unsafe(method_family = none)]
        pub unsafe fn extent(&self) -> CGRect;
    );
}

/// Methods declared on superclass `NSObject`.
impl CISampler {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcisampleraffinematrix?language=objc)
    pub static kCISamplerAffineMatrix: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcisamplerwrapmode?language=objc)
    pub static kCISamplerWrapMode: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcisamplerfiltermode?language=objc)
    pub static kCISamplerFilterMode: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcisamplerwrapblack?language=objc)
    pub static kCISamplerWrapBlack: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcisamplerwrapclamp?language=objc)
    pub static kCISamplerWrapClamp: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcisamplerfilternearest?language=objc)
    pub static kCISamplerFilterNearest: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcisamplerfilterlinear?language=objc)
    pub static kCISamplerFilterLinear: &'static NSString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/kcisamplercolorspace?language=objc)
    pub static kCISamplerColorSpace: &'static NSString;
}
