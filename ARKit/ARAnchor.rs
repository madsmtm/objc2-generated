//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-foundation")]
use objc2_foundation::*;

use crate::*;

#[cfg(feature = "objc2")]
extern_protocol!(
    /// An anchor object that can be copied from values of an existing anchor.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/arkit/aranchorcopying?language=objc)
    #[cfg(all(feature = "objc2", feature = "objc2-foundation"))]
    pub unsafe trait ARAnchorCopying: NSCopying {
        /// Initializes a new anchor object copying values from an existing anchor.
        ///
        /// This initializer will be called any time copy is called on anchor of this class.
        /// This method must be implemented for any ARAnchor subclasses that adds properties.
        ///
        /// Parameter `anchor`: The anchor from which to copy values.
        #[unsafe(method(initWithAnchor:))]
        #[unsafe(method_family = init)]
        unsafe fn initWithAnchor(this: Allocated<Self>, anchor: &ARAnchor) -> Retained<Self>;
    }
);

#[cfg(feature = "objc2")]
extern_protocol!(
    /// A real world object or location in the scene that is being tracked.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/arkit/artrackable?language=objc)
    #[cfg(feature = "objc2")]
    pub unsafe trait ARTrackable: NSObjectProtocol {
        /// Tracking state of the anchor
        ///
        /// The isTracked value is used to determine the anchor transformâ€™s validity. When the object being tracked is no longer detected in the
        /// camera image, its anchor will return NO for isTracked.
        #[unsafe(method(isTracked))]
        #[unsafe(method_family = none)]
        unsafe fn isTracked(&self) -> bool;
    }
);

#[cfg(feature = "objc2")]
extern_class!(
    /// Object representing a physical location and orientation in 3D space.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/arkit/aranchor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct ARAnchor;
);

#[cfg(feature = "objc2")]
unsafe impl Send for ARAnchor {}

#[cfg(feature = "objc2")]
unsafe impl Sync for ARAnchor {}

#[cfg(all(feature = "objc2", feature = "objc2-foundation"))]
extern_conformance!(
    unsafe impl ARAnchorCopying for ARAnchor {}
);

#[cfg(all(feature = "objc2", feature = "objc2-foundation"))]
extern_conformance!(
    unsafe impl NSCoding for ARAnchor {}
);

#[cfg(all(feature = "objc2", feature = "objc2-foundation"))]
extern_conformance!(
    unsafe impl NSCopying for ARAnchor {}
);

#[cfg(all(feature = "objc2", feature = "objc2-foundation"))]
unsafe impl CopyingHelper for ARAnchor {
    type Result = Self;
}

#[cfg(feature = "objc2")]
extern_conformance!(
    unsafe impl NSObjectProtocol for ARAnchor {}
);

#[cfg(all(feature = "objc2", feature = "objc2-foundation"))]
extern_conformance!(
    unsafe impl NSSecureCoding for ARAnchor {}
);

#[cfg(feature = "objc2")]
impl ARAnchor {
    extern_methods!(
        #[cfg(feature = "objc2-foundation")]
        /// Unique identifier of the anchor.
        ///
        /// This property is not atomic.
        #[unsafe(method(identifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn identifier(&self) -> Retained<NSUUID>;

        #[cfg(feature = "objc2-foundation")]
        /// An optional name used to associate with the anchor.
        ///
        /// This property is not atomic.
        #[unsafe(method(name))]
        #[unsafe(method_family = none)]
        pub unsafe fn name(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "objc2-foundation")]
        /// Identifier of the session that owns the anchor.
        ///
        ///
        /// The session identifier will be assigned to anchor when added to the session.
        ///
        /// This property is not atomic.
        #[unsafe(method(sessionIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn sessionIdentifier(&self) -> Option<Retained<NSUUID>>;

        /// Unavailable
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
