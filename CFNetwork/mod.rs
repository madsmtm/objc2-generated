// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "CFNetwork", kind = "framework")]
extern "C" {}

#[cfg(feature = "CFFTPStream")]
#[path = "CFFTPStream.rs"]
mod __CFFTPStream;
#[cfg(feature = "CFHTTPAuthentication")]
#[path = "CFHTTPAuthentication.rs"]
mod __CFHTTPAuthentication;
#[cfg(feature = "CFHTTPMessage")]
#[path = "CFHTTPMessage.rs"]
mod __CFHTTPMessage;
#[cfg(feature = "CFHTTPStream")]
#[path = "CFHTTPStream.rs"]
mod __CFHTTPStream;
#[cfg(feature = "CFHost")]
#[path = "CFHost.rs"]
mod __CFHost;
#[cfg(feature = "CFNetDiagnostics")]
#[path = "CFNetDiagnostics.rs"]
mod __CFNetDiagnostics;
#[cfg(feature = "CFNetServices")]
#[path = "CFNetServices.rs"]
mod __CFNetServices;
#[cfg(feature = "CFNetworkDefs")]
#[path = "CFNetworkDefs.rs"]
mod __CFNetworkDefs;
#[cfg(feature = "CFNetworkErrors")]
#[path = "CFNetworkErrors.rs"]
mod __CFNetworkErrors;
#[cfg(feature = "CFProxySupport")]
#[path = "CFProxySupport.rs"]
mod __CFProxySupport;
#[cfg(feature = "CFSocketStream")]
#[path = "CFSocketStream.rs"]
mod __CFSocketStream;

#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFFTPResourceGroup;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFFTPResourceLink;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFFTPResourceModDate;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFFTPResourceMode;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFFTPResourceName;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFFTPResourceOwner;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFFTPResourceSize;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFFTPResourceType;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFStreamErrorDomainFTP;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFStreamPropertyFTPAttemptPersistentConnection;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFStreamPropertyFTPFetchResourceInfo;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFStreamPropertyFTPFileTransferOffset;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFStreamPropertyFTPPassword;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFStreamPropertyFTPProxy;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFStreamPropertyFTPProxyHost;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFStreamPropertyFTPProxyPassword;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFStreamPropertyFTPProxyPort;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFStreamPropertyFTPProxyUser;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFStreamPropertyFTPResourceSize;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFStreamPropertyFTPUsePassiveMode;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::kCFStreamPropertyFTPUserName;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::CFFTPCreateParsedResourceListing;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::CFReadStreamCreateWithFTPURL;
#[cfg(feature = "CFFTPStream")]
pub use self::__CFFTPStream::CFWriteStreamCreateWithFTPURL;
#[cfg(feature = "CFHTTPAuthentication")]
pub use self::__CFHTTPAuthentication::kCFHTTPAuthenticationAccountDomain;
#[cfg(feature = "CFHTTPAuthentication")]
pub use self::__CFHTTPAuthentication::kCFHTTPAuthenticationPassword;
#[cfg(feature = "CFHTTPAuthentication")]
pub use self::__CFHTTPAuthentication::kCFHTTPAuthenticationUsername;
#[cfg(feature = "CFHTTPAuthentication")]
pub use self::__CFHTTPAuthentication::CFHTTPAuthentication;
#[cfg(all(feature = "CFHTTPAuthentication", feature = "CFHTTPMessage"))]
pub use self::__CFHTTPAuthentication::CFHTTPAuthenticationAppliesToRequest;
#[cfg(feature = "CFHTTPAuthentication")]
pub use self::__CFHTTPAuthentication::CFHTTPAuthenticationCopyDomains;
#[cfg(feature = "CFHTTPAuthentication")]
pub use self::__CFHTTPAuthentication::CFHTTPAuthenticationCopyMethod;
#[cfg(feature = "CFHTTPAuthentication")]
pub use self::__CFHTTPAuthentication::CFHTTPAuthenticationCopyRealm;
#[cfg(all(feature = "CFHTTPAuthentication", feature = "CFHTTPMessage"))]
pub use self::__CFHTTPAuthentication::CFHTTPAuthenticationCreateFromResponse;
#[cfg(feature = "CFHTTPAuthentication")]
pub use self::__CFHTTPAuthentication::CFHTTPAuthenticationIsValid;
#[cfg(feature = "CFHTTPAuthentication")]
pub use self::__CFHTTPAuthentication::CFHTTPAuthenticationRequiresAccountDomain;
#[cfg(feature = "CFHTTPAuthentication")]
pub use self::__CFHTTPAuthentication::CFHTTPAuthenticationRequiresOrderedRequests;
#[cfg(feature = "CFHTTPAuthentication")]
pub use self::__CFHTTPAuthentication::CFHTTPAuthenticationRequiresUserNameAndPassword;
#[cfg(all(feature = "CFHTTPAuthentication", feature = "CFHTTPMessage"))]
pub use self::__CFHTTPAuthentication::CFHTTPMessageApplyCredentialDictionary;
#[cfg(all(feature = "CFHTTPAuthentication", feature = "CFHTTPMessage"))]
pub use self::__CFHTTPAuthentication::CFHTTPMessageApplyCredentials;
#[cfg(feature = "CFHTTPAuthentication")]
pub use self::__CFHTTPAuthentication::CFStreamErrorHTTPAuthentication;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::kCFHTTPAuthenticationSchemeBasic;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::kCFHTTPAuthenticationSchemeDigest;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::kCFHTTPAuthenticationSchemeKerberos;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::kCFHTTPAuthenticationSchemeNTLM;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::kCFHTTPAuthenticationSchemeNegotiate;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::kCFHTTPAuthenticationSchemeNegotiate2;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::kCFHTTPAuthenticationSchemeXMobileMeAuthToken;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::kCFHTTPVersion1_0;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::kCFHTTPVersion1_1;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::kCFHTTPVersion2_0;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::kCFHTTPVersion3_0;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessage;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageAddAuthentication;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageAppendBytes;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageCopyAllHeaderFields;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageCopyBody;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageCopyHeaderFieldValue;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageCopyRequestMethod;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageCopyRequestURL;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageCopyResponseStatusLine;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageCopySerializedMessage;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageCopyVersion;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageCreateCopy;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageCreateEmpty;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageCreateRequest;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageCreateResponse;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageGetResponseStatusCode;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageIsHeaderComplete;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageIsRequest;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageSetBody;
#[cfg(feature = "CFHTTPMessage")]
pub use self::__CFHTTPMessage::CFHTTPMessageSetHeaderFieldValue;
#[cfg(feature = "CFHTTPStream")]
pub use self::__CFHTTPStream::kCFStreamErrorDomainHTTP;
#[cfg(feature = "CFHTTPStream")]
pub use self::__CFHTTPStream::kCFStreamPropertyHTTPAttemptPersistentConnection;
#[cfg(feature = "CFHTTPStream")]
pub use self::__CFHTTPStream::kCFStreamPropertyHTTPFinalRequest;
#[cfg(feature = "CFHTTPStream")]
pub use self::__CFHTTPStream::kCFStreamPropertyHTTPFinalURL;
#[cfg(feature = "CFHTTPStream")]
pub use self::__CFHTTPStream::kCFStreamPropertyHTTPProxy;
#[cfg(feature = "CFHTTPStream")]
pub use self::__CFHTTPStream::kCFStreamPropertyHTTPProxyHost;
#[cfg(feature = "CFHTTPStream")]
pub use self::__CFHTTPStream::kCFStreamPropertyHTTPProxyPort;
#[cfg(feature = "CFHTTPStream")]
pub use self::__CFHTTPStream::kCFStreamPropertyHTTPRequestBytesWrittenCount;
#[cfg(feature = "CFHTTPStream")]
pub use self::__CFHTTPStream::kCFStreamPropertyHTTPResponseHeader;
#[cfg(feature = "CFHTTPStream")]
pub use self::__CFHTTPStream::kCFStreamPropertyHTTPSProxyHost;
#[cfg(feature = "CFHTTPStream")]
pub use self::__CFHTTPStream::kCFStreamPropertyHTTPSProxyPort;
#[cfg(feature = "CFHTTPStream")]
pub use self::__CFHTTPStream::kCFStreamPropertyHTTPShouldAutoredirect;
#[cfg(all(feature = "CFHTTPMessage", feature = "CFHTTPStream"))]
pub use self::__CFHTTPStream::CFReadStreamCreateForHTTPRequest;
#[cfg(all(feature = "CFHTTPMessage", feature = "CFHTTPStream"))]
pub use self::__CFHTTPStream::CFReadStreamCreateForStreamedHTTPRequest;
#[cfg(feature = "CFHTTPStream")]
pub use self::__CFHTTPStream::CFStreamErrorHTTP;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::kCFStreamErrorDomainNetDB;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::kCFStreamErrorDomainSystemConfiguration;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHost;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHostCancelInfoResolution;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHostClientCallBack;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHostClientContext;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHostCreateCopy;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHostCreateWithAddress;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHostCreateWithName;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHostGetAddressing;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHostGetNames;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHostGetReachability;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHostInfoType;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHostScheduleWithRunLoop;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHostSetClient;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHostStartInfoResolution;
#[cfg(feature = "CFHost")]
pub use self::__CFHost::CFHostUnscheduleFromRunLoop;
#[cfg(feature = "CFNetDiagnostics")]
pub use self::__CFNetDiagnostics::CFNetDiagnostic;
#[cfg(feature = "CFNetDiagnostics")]
pub use self::__CFNetDiagnostics::CFNetDiagnosticCopyNetworkStatusPassively;
#[cfg(feature = "CFNetDiagnostics")]
pub use self::__CFNetDiagnostics::CFNetDiagnosticCreateWithStreams;
#[cfg(feature = "CFNetDiagnostics")]
pub use self::__CFNetDiagnostics::CFNetDiagnosticCreateWithURL;
#[cfg(feature = "CFNetDiagnostics")]
pub use self::__CFNetDiagnostics::CFNetDiagnosticDiagnoseProblemInteractively;
#[cfg(feature = "CFNetDiagnostics")]
pub use self::__CFNetDiagnostics::CFNetDiagnosticSetName;
#[cfg(feature = "CFNetDiagnostics")]
pub use self::__CFNetDiagnostics::CFNetDiagnosticStatus;
#[cfg(feature = "CFNetDiagnostics")]
pub use self::__CFNetDiagnostics::CFNetDiagnosticStatusValues;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::kCFStreamErrorDomainMach;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::kCFStreamErrorDomainNetServices;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetService;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceBrowser;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceBrowserClientCallBack;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceBrowserCreate;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceBrowserFlags;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceBrowserInvalidate;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceBrowserScheduleWithRunLoop;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceBrowserSearchForDomains;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceBrowserSearchForServices;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceBrowserStopSearch;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceBrowserUnscheduleFromRunLoop;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceCancel;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceClientCallBack;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceClientContext;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceCreate;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceCreateCopy;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceCreateDictionaryWithTXTData;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceCreateTXTDataWithDictionary;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceGetAddressing;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceGetDomain;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceGetName;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceGetPortNumber;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceGetTXTData;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceGetTargetHost;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceGetType;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceMonitor;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceMonitorClientCallBack;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceMonitorCreate;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceMonitorInvalidate;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceMonitorScheduleWithRunLoop;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceMonitorStart;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceMonitorStop;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceMonitorType;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceMonitorUnscheduleFromRunLoop;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceRegister;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceRegisterFlags;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceRegisterWithOptions;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceResolve;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceResolveWithTimeout;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceScheduleWithRunLoop;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceSetClient;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceSetTXTData;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServiceUnscheduleFromRunLoop;
#[cfg(feature = "CFNetServices")]
pub use self::__CFNetServices::CFNetServicesError;
#[cfg(feature = "CFNetworkErrors")]
pub use self::__CFNetworkErrors::kCFDNSServiceFailureKey;
#[cfg(feature = "CFNetworkErrors")]
pub use self::__CFNetworkErrors::kCFErrorDomainCFNetwork;
#[cfg(feature = "CFNetworkErrors")]
pub use self::__CFNetworkErrors::kCFErrorDomainWinSock;
#[cfg(feature = "CFNetworkErrors")]
pub use self::__CFNetworkErrors::kCFFTPStatusCodeKey;
#[cfg(feature = "CFNetworkErrors")]
pub use self::__CFNetworkErrors::kCFGetAddrInfoFailureKey;
#[cfg(feature = "CFNetworkErrors")]
pub use self::__CFNetworkErrors::kCFSOCKSNegotiationMethodKey;
#[cfg(feature = "CFNetworkErrors")]
pub use self::__CFNetworkErrors::kCFSOCKSStatusCodeKey;
#[cfg(feature = "CFNetworkErrors")]
pub use self::__CFNetworkErrors::kCFSOCKSVersionKey;
#[cfg(feature = "CFNetworkErrors")]
pub use self::__CFNetworkErrors::kCFURLErrorFailingURLErrorKey;
#[cfg(feature = "CFNetworkErrors")]
pub use self::__CFNetworkErrors::kCFURLErrorFailingURLStringErrorKey;
#[cfg(feature = "CFNetworkErrors")]
pub use self::__CFNetworkErrors::CFNetworkErrors;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesExceptionsList;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesExcludeSimpleHostnames;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesFTPEnable;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesFTPPassive;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesFTPPort;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesFTPProxy;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesGopherEnable;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesGopherPort;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesGopherProxy;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesHTTPEnable;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesHTTPPort;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesHTTPProxy;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesHTTPSEnable;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesHTTPSPort;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesHTTPSProxy;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesProxyAutoConfigEnable;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesProxyAutoConfigJavaScript;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesProxyAutoConfigURLString;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesProxyAutoDiscoveryEnable;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesRTSPEnable;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesRTSPPort;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesRTSPProxy;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesSOCKSEnable;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesSOCKSPort;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFNetworkProxiesSOCKSProxy;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyAutoConfigurationHTTPResponseKey;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyAutoConfigurationJavaScriptKey;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyAutoConfigurationURLKey;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyHostNameKey;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyPasswordKey;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyPortNumberKey;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyTypeAutoConfigurationJavaScript;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyTypeAutoConfigurationURL;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyTypeFTP;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyTypeHTTP;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyTypeHTTPS;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyTypeKey;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyTypeNone;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyTypeSOCKS;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::kCFProxyUsernameKey;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::CFNetworkCopyProxiesForAutoConfigurationScript;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::CFNetworkCopyProxiesForURL;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::CFNetworkCopySystemProxySettings;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::CFNetworkExecuteProxyAutoConfigurationScript;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::CFNetworkExecuteProxyAutoConfigurationURL;
#[cfg(feature = "CFProxySupport")]
pub use self::__CFProxySupport::CFProxyAutoConfigurationResultCallback;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamErrorDomainWinSock;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamErrorSOCKS4IdConflict;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamErrorSOCKS4IdentdFailed;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamErrorSOCKS4RequestFailed;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamErrorSOCKS4SubDomainResponse;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamErrorSOCKS5BadResponseAddr;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamErrorSOCKS5BadState;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamErrorSOCKS5SubDomainMethod;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamErrorSOCKS5SubDomainResponse;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamErrorSOCKS5SubDomainUserPass;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamErrorSOCKSSubDomainNone;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamErrorSOCKSSubDomainVersionCode;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamErrorSOCKSUnknownClientVersion;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamNetworkServiceType;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamNetworkServiceTypeAVStreaming;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamNetworkServiceTypeBackground;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamNetworkServiceTypeCallSignaling;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamNetworkServiceTypeResponsiveAV;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamNetworkServiceTypeResponsiveData;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamNetworkServiceTypeVideo;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamNetworkServiceTypeVoIP;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamNetworkServiceTypeVoice;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamPropertyAllowConstrainedNetworkAccess;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamPropertyAllowExpensiveNetworkAccess;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamPropertyConnectionIsCellular;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamPropertyConnectionIsExpensive;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamPropertyNoCellular;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamPropertyProxyLocalBypass;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamPropertySSLContext;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamPropertySSLPeerCertificates;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamPropertySSLPeerTrust;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamPropertySSLSettings;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamPropertySocketExtendedBackgroundIdleMode;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamPropertySocketRemoteHost;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamPropertySocketRemoteNetService;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamSSLAllowsAnyRoot;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamSSLAllowsExpiredCertificates;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamSSLAllowsExpiredRoots;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamSSLCertificates;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamSSLIsServer;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamSSLLevel;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamSSLPeerName;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kCFStreamSSLValidatesCertificateChain;
#[cfg(feature = "CFSocketStream")]
pub use self::__CFSocketStream::kSOCKS5NoAcceptableMethod;
#[cfg(all(feature = "CFHost", feature = "CFSocketStream"))]
pub use self::__CFSocketStream::CFStreamCreatePairWithSocketToCFHost;
#[cfg(all(feature = "CFNetServices", feature = "CFSocketStream"))]
pub use self::__CFSocketStream::CFStreamCreatePairWithSocketToNetService;
