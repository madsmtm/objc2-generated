//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// Represents a globally unique identifier for a single collaboration item.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/sharedwithyoucore/swcollaborationidentifier?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
pub type SWCollaborationIdentifier = NSString;

/// Represents a locally unique identifier for a collaboration item
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/sharedwithyoucore/swlocalcollaborationidentifier?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
pub type SWLocalCollaborationIdentifier = NSString;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/sharedwithyoucore/swcollaborationmetadata?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SWCollaborationMetadata;
);

extern_conformance!(
    unsafe impl NSCoding for SWCollaborationMetadata {}
);

extern_conformance!(
    unsafe impl NSCopying for SWCollaborationMetadata {}
);

unsafe impl CopyingHelper for SWCollaborationMetadata {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for SWCollaborationMetadata {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SWCollaborationMetadata {}
);

impl SWCollaborationMetadata {
    extern_methods!(
        /// Globally unique identifier for the item represented by this metadata.
        ///
        /// This identifier is unique across platforms and shares of the same item.
        #[unsafe(method(collaborationIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn collaborationIdentifier(&self) -> Retained<SWCollaborationIdentifier>;

        /// Locally unique identifier for the item represented by this metadata.
        ///
        /// Use this identifier to uniquely identify this metadata before a collaborationIdentifier can be created
        #[unsafe(method(localIdentifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn localIdentifier(&self) -> Retained<SWLocalCollaborationIdentifier>;

        /// Title of the content.
        ///
        /// Title of the collaboration if provided by the app which owns the collaboration item.
        #[unsafe(method(title))]
        #[unsafe(method_family = none)]
        pub unsafe fn title(&self) -> Option<Retained<NSString>>;

        /// Setter for [`title`][Self::title].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setTitle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTitle(&self, title: Option<&NSString>);

        #[cfg(feature = "SWCollaborationShareOptions")]
        /// The collaboration options that this content supports (updated).
        #[unsafe(method(defaultShareOptions))]
        #[unsafe(method_family = none)]
        pub unsafe fn defaultShareOptions(&self) -> Option<Retained<SWCollaborationShareOptions>>;

        #[cfg(feature = "SWCollaborationShareOptions")]
        /// Setter for [`defaultShareOptions`][Self::defaultShareOptions].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setDefaultShareOptions:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDefaultShareOptions(
            &self,
            default_share_options: Option<&SWCollaborationShareOptions>,
        );

        #[cfg(feature = "SWCollaborationShareOptions")]
        /// The collaboration options that the user selected when sending the invite (updated).
        #[unsafe(method(userSelectedShareOptions))]
        #[unsafe(method_family = none)]
        pub unsafe fn userSelectedShareOptions(
            &self,
        ) -> Option<Retained<SWCollaborationShareOptions>>;

        #[cfg(feature = "SWCollaborationShareOptions")]
        /// Setter for [`userSelectedShareOptions`][Self::userSelectedShareOptions].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setUserSelectedShareOptions:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setUserSelectedShareOptions(
            &self,
            user_selected_share_options: Option<&SWCollaborationShareOptions>,
        );

        /// The handle of the person initiating the collaboration, e.g. an email address or phone number.
        ///
        /// Set by the initiating application to allow the user to confirm the handle being used before beginning collaboration. Value will not be transmitted to recipients, and will be nil when not initiating collaboration.
        #[unsafe(method(initiatorHandle))]
        #[unsafe(method_family = none)]
        pub unsafe fn initiatorHandle(&self) -> Option<Retained<NSString>>;

        /// Setter for [`initiatorHandle`][Self::initiatorHandle].
        ///
        /// This is [copied][objc2_foundation::NSCopying::copy] when set.
        #[unsafe(method(setInitiatorHandle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInitiatorHandle(&self, initiator_handle: Option<&NSString>);

        /// The name of the person initiating the collaboration.
        ///
        /// Set by the initiating application to allow the user to confirm the name being used before beginning collaboration. Value will not be transmitted to recipients, and will be nil when not initiating collaboration.
        #[unsafe(method(initiatorNameComponents))]
        #[unsafe(method_family = none)]
        pub unsafe fn initiatorNameComponents(&self) -> Option<Retained<NSPersonNameComponents>>;

        /// Setter for [`initiatorNameComponents`][Self::initiatorNameComponents].
        #[unsafe(method(setInitiatorNameComponents:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setInitiatorNameComponents(
            &self,
            initiator_name_components: Option<&NSPersonNameComponents>,
        );

        #[unsafe(method(initWithLocalIdentifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithLocalIdentifier(
            this: Allocated<Self>,
            local_identifier: &SWLocalCollaborationIdentifier,
        ) -> Retained<Self>;

        #[unsafe(method(initWithCollaborationIdentifier:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCollaborationIdentifier(
            this: Allocated<Self>,
            collaboration_identifier: &SWCollaborationIdentifier,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
