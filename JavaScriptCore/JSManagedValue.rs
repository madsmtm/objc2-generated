//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;

use crate::*;

#[cfg(feature = "objc2")]
extern_class!(
    /// JSManagedValue represents a "conditionally retained" JSValue.
    /// "Conditionally retained" means that as long as the JSManagedValue's
    /// JSValue is reachable through the JavaScript object graph,
    /// or through the Objective-C object graph reported to the JSVirtualMachine using
    /// addManagedReference:withOwner:, the corresponding JSValue will
    /// be retained. However, if neither graph reaches the JSManagedValue, the
    /// corresponding JSValue will be released and set to nil.
    ///
    /// The primary use for a JSManagedValue is to store a JSValue in an Objective-C
    /// or Swift object that is exported to JavaScript. It is incorrect to store a JSValue
    /// in an object that is exported to JavaScript, since doing so creates a retain cycle.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/javascriptcore/jsmanagedvalue?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2")]
    pub struct JSManagedValue;
);

#[cfg(feature = "objc2")]
extern_conformance!(
    unsafe impl NSObjectProtocol for JSManagedValue {}
);

#[cfg(feature = "objc2")]
impl JSManagedValue {
    extern_methods!(
        #[cfg(feature = "JSValue")]
        /// Create a JSManagedValue from a JSValue.
        ///
        /// Returns: The new JSManagedValue.
        ///
        /// # Safety
        ///
        /// `value` might not allow `None`.
        #[unsafe(method(managedValueWithValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn managedValueWithValue(
            value: Option<&JSValue>,
        ) -> Option<Retained<JSManagedValue>>;

        #[cfg(feature = "JSValue")]
        /// # Safety
        ///
        /// - `value` might not allow `None`.
        /// - `owner` should be of the correct type.
        /// - `owner` might not allow `None`.
        #[unsafe(method(managedValueWithValue:andOwner:))]
        #[unsafe(method_family = none)]
        pub unsafe fn managedValueWithValue_andOwner(
            value: Option<&JSValue>,
            owner: Option<&AnyObject>,
        ) -> Option<Retained<JSManagedValue>>;

        #[cfg(feature = "JSValue")]
        /// Create a JSManagedValue.
        ///
        /// Returns: The new JSManagedValue.
        ///
        /// # Safety
        ///
        /// `value` might not allow `None`.
        #[unsafe(method(initWithValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithValue(
            this: Allocated<Self>,
            value: Option<&JSValue>,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "JSValue")]
        /// Get the JSValue from the JSManagedValue.
        ///
        /// Returns: The corresponding JSValue for this JSManagedValue or
        /// nil if the JSValue has been collected.
        #[unsafe(method(value))]
        #[unsafe(method_family = none)]
        pub unsafe fn value(&self) -> Option<Retained<JSValue>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "objc2")]
impl JSManagedValue {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
