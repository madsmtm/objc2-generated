//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;

use crate::*;

extern "C-unwind" {
    /// Creates a JavaScript Typed Array object with the given number of elements.
    ///
    /// Parameter `ctx`: The execution context to use.
    ///
    /// Parameter `arrayType`: A value identifying the type of array to create. If arrayType is kJSTypedArrayTypeNone or kJSTypedArrayTypeArrayBuffer then NULL will be returned.
    ///
    /// Parameter `length`: The number of elements to be in the new Typed Array.
    ///
    /// Parameter `exception`: A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
    ///
    /// Returns: A JSObjectRef that is a Typed Array with all elements set to zero or NULL if there was an error.
    ///
    /// # Safety
    ///
    /// - `ctx` must be a valid pointer.
    /// - `exception` must be a valid pointer.
    #[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
    pub fn JSObjectMakeTypedArray(
        ctx: JSContextRef,
        array_type: JSTypedArrayType,
        length: usize,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}

extern "C-unwind" {
    /// Creates a JavaScript Typed Array object from an existing pointer.
    ///
    /// Parameter `ctx`: The execution context to use.
    ///
    /// Parameter `arrayType`: A value identifying the type of array to create. If arrayType is kJSTypedArrayTypeNone or kJSTypedArrayTypeArrayBuffer then NULL will be returned.
    ///
    /// Parameter `bytes`: A pointer to the byte buffer to be used as the backing store of the Typed Array object.
    ///
    /// Parameter `byteLength`: The number of bytes pointed to by the parameter bytes.
    ///
    /// Parameter `bytesDeallocator`: The allocator to use to deallocate the external buffer when the JSTypedArrayData object is deallocated.
    ///
    /// Parameter `deallocatorContext`: A pointer to pass back to the deallocator.
    ///
    /// Parameter `exception`: A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
    ///
    /// Returns: A JSObjectRef Typed Array whose backing store is the same as the one pointed to by bytes or NULL if there was an error.
    ///
    /// If an exception is thrown during this function the bytesDeallocator will always be called.
    ///
    /// # Safety
    ///
    /// - `ctx` must be a valid pointer.
    /// - `bytes` must be a valid pointer.
    /// - `bytes_deallocator` must be implemented correctly.
    /// - `deallocator_context` must be a valid pointer.
    /// - `exception` must be a valid pointer.
    #[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
    pub fn JSObjectMakeTypedArrayWithBytesNoCopy(
        ctx: JSContextRef,
        array_type: JSTypedArrayType,
        bytes: *mut c_void,
        byte_length: usize,
        bytes_deallocator: JSTypedArrayBytesDeallocator,
        deallocator_context: *mut c_void,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}

extern "C-unwind" {
    /// Creates a JavaScript Typed Array object from an existing JavaScript Array Buffer object.
    ///
    /// Parameter `ctx`: The execution context to use.
    ///
    /// Parameter `arrayType`: A value identifying the type of array to create. If arrayType is kJSTypedArrayTypeNone or kJSTypedArrayTypeArrayBuffer then NULL will be returned.
    ///
    /// Parameter `buffer`: An Array Buffer object that should be used as the backing store for the created JavaScript Typed Array object.
    ///
    /// Parameter `exception`: A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
    ///
    /// Returns: A JSObjectRef that is a Typed Array or NULL if there was an error. The backing store of the Typed Array will be buffer.
    ///
    /// # Safety
    ///
    /// - `ctx` must be a valid pointer.
    /// - `buffer` must be a valid pointer.
    /// - `exception` must be a valid pointer.
    #[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
    pub fn JSObjectMakeTypedArrayWithArrayBuffer(
        ctx: JSContextRef,
        array_type: JSTypedArrayType,
        buffer: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}

extern "C-unwind" {
    /// Creates a JavaScript Typed Array object from an existing JavaScript Array Buffer object with the given offset and length.
    ///
    /// Parameter `ctx`: The execution context to use.
    ///
    /// Parameter `arrayType`: A value identifying the type of array to create. If arrayType is kJSTypedArrayTypeNone or kJSTypedArrayTypeArrayBuffer then NULL will be returned.
    ///
    /// Parameter `buffer`: An Array Buffer object that should be used as the backing store for the created JavaScript Typed Array object.
    ///
    /// Parameter `byteOffset`: The byte offset for the created Typed Array. byteOffset should aligned with the element size of arrayType.
    ///
    /// Parameter `length`: The number of elements to include in the Typed Array.
    ///
    /// Parameter `exception`: A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
    ///
    /// Returns: A JSObjectRef that is a Typed Array or NULL if there was an error. The backing store of the Typed Array will be buffer.
    ///
    /// # Safety
    ///
    /// - `ctx` must be a valid pointer.
    /// - `buffer` must be a valid pointer.
    /// - `exception` must be a valid pointer.
    #[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
    pub fn JSObjectMakeTypedArrayWithArrayBufferAndOffset(
        ctx: JSContextRef,
        array_type: JSTypedArrayType,
        buffer: JSObjectRef,
        byte_offset: usize,
        length: usize,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}

extern "C-unwind" {
    /// Returns a temporary pointer to the backing store of a JavaScript Typed Array object.
    ///
    /// Parameter `ctx`: The execution context to use.
    ///
    /// Parameter `object`: The Typed Array object whose backing store pointer to return.
    ///
    /// Parameter `exception`: A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
    ///
    /// Returns: A pointer to the raw data buffer that serves as object's backing store or NULL if object is not a Typed Array object.
    ///
    /// The pointer returned by this function is temporary and is not guaranteed to remain valid across JavaScriptCore API calls.
    ///
    /// # Safety
    ///
    /// - `ctx` must be a valid pointer.
    /// - `object` must be a valid pointer.
    /// - `exception` must be a valid pointer.
    #[cfg(feature = "JSBase")]
    pub fn JSObjectGetTypedArrayBytesPtr(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> *mut c_void;
}

extern "C-unwind" {
    /// Returns the length of a JavaScript Typed Array object.
    ///
    /// Parameter `ctx`: The execution context to use.
    ///
    /// Parameter `object`: The Typed Array object whose length to return.
    ///
    /// Parameter `exception`: A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
    ///
    /// Returns: The length of the Typed Array object or 0 if the object is not a Typed Array object.
    ///
    /// # Safety
    ///
    /// - `ctx` must be a valid pointer.
    /// - `object` must be a valid pointer.
    /// - `exception` must be a valid pointer.
    #[cfg(feature = "JSBase")]
    pub fn JSObjectGetTypedArrayLength(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> usize;
}

extern "C-unwind" {
    /// Returns the byte length of a JavaScript Typed Array object.
    ///
    /// Parameter `ctx`: The execution context to use.
    ///
    /// Parameter `object`: The Typed Array object whose byte length to return.
    ///
    /// Parameter `exception`: A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
    ///
    /// Returns: The byte length of the Typed Array object or 0 if the object is not a Typed Array object.
    ///
    /// # Safety
    ///
    /// - `ctx` must be a valid pointer.
    /// - `object` must be a valid pointer.
    /// - `exception` must be a valid pointer.
    #[cfg(feature = "JSBase")]
    pub fn JSObjectGetTypedArrayByteLength(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> usize;
}

extern "C-unwind" {
    /// Returns the byte offset of a JavaScript Typed Array object.
    ///
    /// Parameter `ctx`: The execution context to use.
    ///
    /// Parameter `object`: The Typed Array object whose byte offset to return.
    ///
    /// Parameter `exception`: A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
    ///
    /// Returns: The byte offset of the Typed Array object or 0 if the object is not a Typed Array object.
    ///
    /// # Safety
    ///
    /// - `ctx` must be a valid pointer.
    /// - `object` must be a valid pointer.
    /// - `exception` must be a valid pointer.
    #[cfg(feature = "JSBase")]
    pub fn JSObjectGetTypedArrayByteOffset(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> usize;
}

extern "C-unwind" {
    /// Returns the JavaScript Array Buffer object that is used as the backing of a JavaScript Typed Array object.
    ///
    /// Parameter `ctx`: The execution context to use.
    ///
    /// Parameter `object`: The JSObjectRef whose Typed Array type data pointer to obtain.
    ///
    /// Parameter `exception`: A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
    ///
    /// Returns: A JSObjectRef with a JSTypedArrayType of kJSTypedArrayTypeArrayBuffer or NULL if object is not a Typed Array.
    ///
    /// # Safety
    ///
    /// - `ctx` must be a valid pointer.
    /// - `object` must be a valid pointer.
    /// - `exception` must be a valid pointer.
    #[cfg(feature = "JSBase")]
    pub fn JSObjectGetTypedArrayBuffer(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}

extern "C-unwind" {
    /// Creates a JavaScript Array Buffer object from an existing pointer.
    ///
    /// Parameter `ctx`: The execution context to use.
    ///
    /// Parameter `bytes`: A pointer to the byte buffer to be used as the backing store of the Typed Array object.
    ///
    /// Parameter `byteLength`: The number of bytes pointed to by the parameter bytes.
    ///
    /// Parameter `bytesDeallocator`: The allocator to use to deallocate the external buffer when the Typed Array data object is deallocated.
    ///
    /// Parameter `deallocatorContext`: A pointer to pass back to the deallocator.
    ///
    /// Parameter `exception`: A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
    ///
    /// Returns: A JSObjectRef Array Buffer whose backing store is the same as the one pointed to by bytes or NULL if there was an error.
    ///
    /// If an exception is thrown during this function the bytesDeallocator will always be called.
    ///
    /// # Safety
    ///
    /// - `ctx` must be a valid pointer.
    /// - `bytes` must be a valid pointer.
    /// - `bytes_deallocator` must be implemented correctly.
    /// - `deallocator_context` must be a valid pointer.
    /// - `exception` must be a valid pointer.
    #[cfg(feature = "JSBase")]
    pub fn JSObjectMakeArrayBufferWithBytesNoCopy(
        ctx: JSContextRef,
        bytes: *mut c_void,
        byte_length: usize,
        bytes_deallocator: JSTypedArrayBytesDeallocator,
        deallocator_context: *mut c_void,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}

extern "C-unwind" {
    /// Returns a pointer to the data buffer that serves as the backing store for a JavaScript Typed Array object.
    ///
    /// Parameter `object`: The Array Buffer object whose internal backing store pointer to return.
    ///
    /// Parameter `exception`: A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
    ///
    /// Returns: A pointer to the raw data buffer that serves as object's backing store or NULL if object is not an Array Buffer object.
    ///
    /// The pointer returned by this function is temporary and is not guaranteed to remain valid across JavaScriptCore API calls.
    ///
    /// # Safety
    ///
    /// - `ctx` must be a valid pointer.
    /// - `object` must be a valid pointer.
    /// - `exception` must be a valid pointer.
    #[cfg(feature = "JSBase")]
    pub fn JSObjectGetArrayBufferBytesPtr(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> *mut c_void;
}

extern "C-unwind" {
    /// Returns the number of bytes in a JavaScript data object.
    ///
    /// Parameter `ctx`: The execution context to use.
    ///
    /// Parameter `object`: The JS Arary Buffer object whose length in bytes to return.
    ///
    /// Parameter `exception`: A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
    ///
    /// Returns: The number of bytes stored in the data object.
    ///
    /// # Safety
    ///
    /// - `ctx` must be a valid pointer.
    /// - `object` must be a valid pointer.
    /// - `exception` must be a valid pointer.
    #[cfg(feature = "JSBase")]
    pub fn JSObjectGetArrayBufferByteLength(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> usize;
}
