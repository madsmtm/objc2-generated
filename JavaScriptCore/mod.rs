// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "JavaScriptCore", kind = "framework")]
extern "C" {}

#[cfg(feature = "JSBase")]
#[path = "JSBase.rs"]
mod __JSBase;
#[cfg(feature = "JSContext")]
#[path = "JSContext.rs"]
mod __JSContext;
#[cfg(feature = "JSContextRef")]
#[path = "JSContextRef.rs"]
mod __JSContextRef;
#[cfg(feature = "JSExport")]
#[path = "JSExport.rs"]
mod __JSExport;
#[cfg(feature = "JSManagedValue")]
#[path = "JSManagedValue.rs"]
mod __JSManagedValue;
#[cfg(feature = "JSObjectRef")]
#[path = "JSObjectRef.rs"]
mod __JSObjectRef;
#[cfg(feature = "JSStringRef")]
#[path = "JSStringRef.rs"]
mod __JSStringRef;
#[cfg(feature = "JSStringRefCF")]
#[path = "JSStringRefCF.rs"]
mod __JSStringRefCF;
#[cfg(feature = "JSTypedArray")]
#[path = "JSTypedArray.rs"]
mod __JSTypedArray;
#[cfg(feature = "JSValue")]
#[path = "JSValue.rs"]
mod __JSValue;
#[cfg(feature = "JSValueRef")]
#[path = "JSValueRef.rs"]
mod __JSValueRef;
#[cfg(feature = "JSVirtualMachine")]
#[path = "JSVirtualMachine.rs"]
mod __JSVirtualMachine;
#[cfg(feature = "JavaScript")]
#[path = "JavaScript.rs"]
mod __JavaScript;
#[cfg(feature = "WebKitAvailability")]
#[path = "WebKitAvailability.rs"]
mod __WebKitAvailability;

#[cfg(feature = "JSBase")]
pub use self::__JSBase::JSCheckScriptSyntax;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::JSClassRef;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::JSContextGroupRef;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::JSContextRef;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::JSEvaluateScript;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::JSGarbageCollect;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::JSPropertyNameAccumulatorRef;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::JSPropertyNameArrayRef;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::JSStringRef;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::JSTypedArrayBytesDeallocator;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::JSValueRef;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::OpaqueJSClass;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::OpaqueJSContext;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::OpaqueJSContextGroup;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::OpaqueJSPropertyNameAccumulator;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::OpaqueJSPropertyNameArray;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::OpaqueJSString;
#[cfg(feature = "JSBase")]
pub use self::__JSBase::OpaqueJSValue;
#[cfg(all(feature = "JSContext", feature = "objc2"))]
pub use self::__JSContext::JSContext;
#[cfg(all(feature = "JSBase", feature = "JSContextRef"))]
pub use self::__JSContextRef::JSContextGetGlobalContext;
#[cfg(all(feature = "JSBase", feature = "JSContextRef"))]
pub use self::__JSContextRef::JSContextGetGlobalObject;
#[cfg(all(feature = "JSBase", feature = "JSContextRef"))]
pub use self::__JSContextRef::JSContextGetGroup;
#[cfg(all(feature = "JSBase", feature = "JSContextRef"))]
pub use self::__JSContextRef::JSContextGroupCreate;
#[cfg(all(feature = "JSBase", feature = "JSContextRef"))]
pub use self::__JSContextRef::JSContextGroupRelease;
#[cfg(all(feature = "JSBase", feature = "JSContextRef"))]
pub use self::__JSContextRef::JSContextGroupRetain;
#[cfg(all(feature = "JSBase", feature = "JSContextRef"))]
pub use self::__JSContextRef::JSGlobalContextCopyName;
#[cfg(all(feature = "JSBase", feature = "JSContextRef"))]
pub use self::__JSContextRef::JSGlobalContextCreate;
#[cfg(all(feature = "JSBase", feature = "JSContextRef"))]
pub use self::__JSContextRef::JSGlobalContextCreateInGroup;
#[cfg(all(feature = "JSBase", feature = "JSContextRef"))]
pub use self::__JSContextRef::JSGlobalContextIsInspectable;
#[cfg(all(feature = "JSBase", feature = "JSContextRef"))]
pub use self::__JSContextRef::JSGlobalContextRelease;
#[cfg(all(feature = "JSBase", feature = "JSContextRef"))]
pub use self::__JSContextRef::JSGlobalContextRetain;
#[cfg(all(feature = "JSBase", feature = "JSContextRef"))]
pub use self::__JSContextRef::JSGlobalContextSetInspectable;
#[cfg(all(feature = "JSBase", feature = "JSContextRef"))]
pub use self::__JSContextRef::JSGlobalContextSetName;
#[cfg(all(feature = "JSExport", feature = "objc2"))]
pub use self::__JSExport::JSExport;
#[cfg(all(feature = "JSManagedValue", feature = "objc2"))]
pub use self::__JSManagedValue::JSManagedValue;
#[cfg(feature = "JSObjectRef")]
pub use self::__JSObjectRef::kJSClassAttributeNoAutomaticPrototype;
#[cfg(feature = "JSObjectRef")]
pub use self::__JSObjectRef::kJSClassAttributeNone;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef", feature = "JSValueRef"))]
pub use self::__JSObjectRef::kJSClassDefinitionEmpty;
#[cfg(feature = "JSObjectRef")]
pub use self::__JSObjectRef::kJSPropertyAttributeDontDelete;
#[cfg(feature = "JSObjectRef")]
pub use self::__JSObjectRef::kJSPropertyAttributeDontEnum;
#[cfg(feature = "JSObjectRef")]
pub use self::__JSObjectRef::kJSPropertyAttributeNone;
#[cfg(feature = "JSObjectRef")]
pub use self::__JSObjectRef::kJSPropertyAttributeReadOnly;
#[cfg(feature = "JSObjectRef")]
pub use self::__JSObjectRef::JSClassAttributes;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef", feature = "JSValueRef"))]
pub use self::__JSObjectRef::JSClassCreate;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef", feature = "JSValueRef"))]
pub use self::__JSObjectRef::JSClassDefinition;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSClassRelease;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSClassRetain;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectCallAsConstructor;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectCallAsConstructorCallback;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectCallAsFunction;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectCallAsFunctionCallback;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef", feature = "JSValueRef"))]
pub use self::__JSObjectRef::JSObjectConvertToTypeCallback;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectCopyPropertyNames;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectDeleteProperty;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectDeletePropertyCallback;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectDeletePropertyForKey;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectFinalizeCallback;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectGetPrivate;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectGetProperty;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectGetPropertyAtIndex;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectGetPropertyCallback;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectGetPropertyForKey;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectGetPropertyNamesCallback;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectGetPrototype;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectHasInstanceCallback;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectHasProperty;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectHasPropertyCallback;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectHasPropertyForKey;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectInitializeCallback;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectIsConstructor;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectIsFunction;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectMake;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectMakeArray;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectMakeConstructor;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectMakeDate;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectMakeDeferredPromise;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectMakeError;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectMakeFunction;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectMakeFunctionWithCallback;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectMakeRegExp;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectSetPrivate;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectSetProperty;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectSetPropertyAtIndex;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectSetPropertyCallback;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectSetPropertyForKey;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSObjectSetPrototype;
#[cfg(feature = "JSObjectRef")]
pub use self::__JSObjectRef::JSPropertyAttributes;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSPropertyNameAccumulatorAddName;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSPropertyNameArrayGetCount;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSPropertyNameArrayGetNameAtIndex;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSPropertyNameArrayRelease;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSPropertyNameArrayRetain;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSStaticFunction;
#[cfg(all(feature = "JSBase", feature = "JSObjectRef"))]
pub use self::__JSObjectRef::JSStaticValue;
#[cfg(feature = "JSStringRef")]
pub use self::__JSStringRef::JSChar;
#[cfg(all(feature = "JSBase", feature = "JSStringRef"))]
pub use self::__JSStringRef::JSStringCreateWithCharacters;
#[cfg(all(feature = "JSBase", feature = "JSStringRef"))]
pub use self::__JSStringRef::JSStringCreateWithUTF8CString;
#[cfg(all(feature = "JSBase", feature = "JSStringRef"))]
pub use self::__JSStringRef::JSStringGetCharactersPtr;
#[cfg(all(feature = "JSBase", feature = "JSStringRef"))]
pub use self::__JSStringRef::JSStringGetLength;
#[cfg(all(feature = "JSBase", feature = "JSStringRef"))]
pub use self::__JSStringRef::JSStringGetMaximumUTF8CStringSize;
#[cfg(all(feature = "JSBase", feature = "JSStringRef"))]
pub use self::__JSStringRef::JSStringGetUTF8CString;
#[cfg(all(feature = "JSBase", feature = "JSStringRef"))]
pub use self::__JSStringRef::JSStringIsEqual;
#[cfg(all(feature = "JSBase", feature = "JSStringRef"))]
pub use self::__JSStringRef::JSStringIsEqualToUTF8CString;
#[cfg(all(feature = "JSBase", feature = "JSStringRef"))]
pub use self::__JSStringRef::JSStringRelease;
#[cfg(all(feature = "JSBase", feature = "JSStringRef"))]
pub use self::__JSStringRef::JSStringRetain;
#[cfg(all(
    feature = "JSBase",
    feature = "JSStringRefCF",
    feature = "objc2-core-foundation"
))]
pub use self::__JSStringRefCF::JSStringCopyCFString;
#[cfg(all(
    feature = "JSBase",
    feature = "JSStringRefCF",
    feature = "objc2-core-foundation"
))]
pub use self::__JSStringRefCF::JSStringCreateWithCFString;
#[cfg(all(feature = "JSBase", feature = "JSTypedArray"))]
pub use self::__JSTypedArray::JSObjectGetArrayBufferByteLength;
#[cfg(all(feature = "JSBase", feature = "JSTypedArray"))]
pub use self::__JSTypedArray::JSObjectGetArrayBufferBytesPtr;
#[cfg(all(feature = "JSBase", feature = "JSTypedArray"))]
pub use self::__JSTypedArray::JSObjectGetTypedArrayBuffer;
#[cfg(all(feature = "JSBase", feature = "JSTypedArray"))]
pub use self::__JSTypedArray::JSObjectGetTypedArrayByteLength;
#[cfg(all(feature = "JSBase", feature = "JSTypedArray"))]
pub use self::__JSTypedArray::JSObjectGetTypedArrayByteOffset;
#[cfg(all(feature = "JSBase", feature = "JSTypedArray"))]
pub use self::__JSTypedArray::JSObjectGetTypedArrayBytesPtr;
#[cfg(all(feature = "JSBase", feature = "JSTypedArray"))]
pub use self::__JSTypedArray::JSObjectGetTypedArrayLength;
#[cfg(all(feature = "JSBase", feature = "JSTypedArray"))]
pub use self::__JSTypedArray::JSObjectMakeArrayBufferWithBytesNoCopy;
#[cfg(all(feature = "JSBase", feature = "JSTypedArray", feature = "JSValueRef"))]
pub use self::__JSTypedArray::JSObjectMakeTypedArray;
#[cfg(all(feature = "JSBase", feature = "JSTypedArray", feature = "JSValueRef"))]
pub use self::__JSTypedArray::JSObjectMakeTypedArrayWithArrayBuffer;
#[cfg(all(feature = "JSBase", feature = "JSTypedArray", feature = "JSValueRef"))]
pub use self::__JSTypedArray::JSObjectMakeTypedArrayWithArrayBufferAndOffset;
#[cfg(all(feature = "JSBase", feature = "JSTypedArray", feature = "JSValueRef"))]
pub use self::__JSTypedArray::JSObjectMakeTypedArrayWithBytesNoCopy;
#[cfg(all(feature = "JSValue", feature = "objc2-foundation"))]
pub use self::__JSValue::JSPropertyDescriptorConfigurableKey;
#[cfg(all(feature = "JSValue", feature = "objc2-foundation"))]
pub use self::__JSValue::JSPropertyDescriptorEnumerableKey;
#[cfg(all(feature = "JSValue", feature = "objc2-foundation"))]
pub use self::__JSValue::JSPropertyDescriptorGetKey;
#[cfg(all(feature = "JSValue", feature = "objc2-foundation"))]
pub use self::__JSValue::JSPropertyDescriptorSetKey;
#[cfg(all(feature = "JSValue", feature = "objc2-foundation"))]
pub use self::__JSValue::JSPropertyDescriptorValueKey;
#[cfg(all(feature = "JSValue", feature = "objc2-foundation"))]
pub use self::__JSValue::JSPropertyDescriptorWritableKey;
#[cfg(all(feature = "JSValue", feature = "objc2"))]
pub use self::__JSValue::JSValue;
#[cfg(all(feature = "JSValue", feature = "objc2-foundation"))]
pub use self::__JSValue::JSValueProperty;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSBigIntCreateWithDouble;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSBigIntCreateWithInt64;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSBigIntCreateWithString;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSBigIntCreateWithUInt64;
#[cfg(feature = "JSValueRef")]
pub use self::__JSValueRef::JSRelationCondition;
#[cfg(feature = "JSValueRef")]
pub use self::__JSValueRef::JSType;
#[cfg(feature = "JSValueRef")]
pub use self::__JSValueRef::JSTypedArrayType;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueCompare;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueCompareDouble;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueCompareInt64;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueCompareUInt64;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueCreateJSONString;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueGetType;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueGetTypedArrayType;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueIsArray;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueIsBigInt;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueIsBoolean;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueIsDate;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueIsEqual;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueIsInstanceOfConstructor;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueIsNull;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueIsNumber;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueIsObject;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueIsObjectOfClass;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueIsStrictEqual;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueIsString;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueIsSymbol;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueIsUndefined;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueMakeBoolean;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueMakeFromJSONString;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueMakeNull;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueMakeNumber;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueMakeString;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueMakeSymbol;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueMakeUndefined;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueProtect;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueToBoolean;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueToInt32;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueToInt64;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueToNumber;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueToObject;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueToStringCopy;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueToUInt32;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueToUInt64;
#[cfg(all(feature = "JSBase", feature = "JSValueRef"))]
pub use self::__JSValueRef::JSValueUnprotect;
#[cfg(all(feature = "JSVirtualMachine", feature = "objc2"))]
pub use self::__JSVirtualMachine::JSVirtualMachine;
