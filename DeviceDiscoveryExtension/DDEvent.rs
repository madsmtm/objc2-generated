//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// Type of event.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/devicediscoveryextension/ddeventtype?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct DDEventType(pub NSInteger);
impl DDEventType {
    #[doc(alias = "DDEventTypeUnknown")]
    pub const Unknown: Self = Self(0);
    /// Unknown event. Placeholder for initializing event types.
    #[doc(alias = "DDEventTypeDeviceFound")]
    pub const DeviceFound: Self = Self(40);
    /// [DDDeviceEvent] Device found.
    #[doc(alias = "DDEventTypeDeviceLost")]
    pub const DeviceLost: Self = Self(41);
    /// [DDDeviceEvent] Device lost.
    #[doc(alias = "DDEventTypeDeviceChanged")]
    pub const DeviceChanged: Self = Self(42);
}

unsafe impl Encode for DDEventType {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for DDEventType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

impl DDEventType {
    /// Converts an event to a string for logging, etc.
    #[doc(alias = "DDEventTypeToString")]
    #[inline]
    pub unsafe fn to_string(self) -> Retained<NSString> {
        extern "C-unwind" {
            fn DDEventTypeToString(in_value: DDEventType) -> *mut NSString;
        }
        let ret = unsafe { DDEventTypeToString(self) };
        unsafe { Retained::retain_autoreleased(ret) }
            .expect("function was marked as returning non-null, but actually returned NULL")
    }
}

/// Invoked when an event occurs.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/devicediscoveryextension/ddeventhandler?language=objc)
#[cfg(feature = "block2")]
pub type DDEventHandler = *mut block2::DynBlock<dyn Fn(NonNull<DDDeviceEvent>)>;

extern_class!(
    /// Device-related event (e.g. found, lost).
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/devicediscoveryextension/dddeviceevent?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct DDDeviceEvent;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for DDDeviceEvent {}
);

impl DDDeviceEvent {
    extern_methods!(
        #[cfg(feature = "DDDevice")]
        /// Initializes a device event.
        #[unsafe(method(initWithEventType:device:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithEventType_device(
            this: Allocated<Self>,
            r#type: DDEventType,
            device: &DDDevice,
        ) -> Retained<Self>;

        #[cfg(feature = "DDDevice")]
        /// Device found or lost.
        #[unsafe(method(device))]
        #[unsafe(method_family = none)]
        pub unsafe fn device(&self) -> Retained<DDDevice>;

        /// Type of event.
        #[unsafe(method(eventType))]
        #[unsafe(method_family = none)]
        pub unsafe fn eventType(&self) -> DDEventType;
    );
}

/// Methods declared on superclass `NSObject`.
impl DDDeviceEvent {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

#[deprecated = "renamed to `DDEventType::to_string`"]
#[inline]
pub unsafe extern "C-unwind" fn DDEventTypeToString(in_value: DDEventType) -> Retained<NSString> {
    extern "C-unwind" {
        fn DDEventTypeToString(in_value: DDEventType) -> *mut NSString;
    }
    let ret = unsafe { DDEventTypeToString(in_value) };
    unsafe { Retained::retain_autoreleased(ret) }
        .expect("function was marked as returning non-null, but actually returned NULL")
}
