//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_app_kit::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-io-bluetooth")]
use objc2_io_bluetooth::*;

use crate::*;

extern_class!(
    /// A NSWindowController subclass to display a window to search for and perform SDP queries on bluetooth
    /// devices within range.
    ///
    /// This NSWindowController subclass will bring up a generic Bluetooth search and SDP browsing window
    /// allowing the user to find devices within range, perform SDP queries on a particular device, and
    /// select a SDP service to connect to.  The client application can provide NSArrays of valid service
    /// UUIDs to allow, and an NSArray of valid device types to allow.  The device type filter is not
    /// yet implemented.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/iobluetoothui/iobluetoothservicebrowsercontroller?language=objc)
    #[unsafe(super(NSWindowController, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct IOBluetoothServiceBrowserController;
);

extern_conformance!(
    unsafe impl NSCoding for IOBluetoothServiceBrowserController {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for IOBluetoothServiceBrowserController {}
);

extern_conformance!(
    unsafe impl NSSeguePerforming for IOBluetoothServiceBrowserController {}
);

impl IOBluetoothServiceBrowserController {
    extern_methods!(
        #[cfg(feature = "IOBluetoothUIUserLib")]
        /// Allocator work Bluetooth Service Browser window controller.
        ///
        /// Parameter `inOptions`: Bit field for options to set in the newly allocated controller.  Currently no options are available.
        ///
        /// Returns: a new instance of the IOBluetoothServiceBrowserController Controller, nil if unsuccessful.
        #[unsafe(method(serviceBrowserController:))]
        #[unsafe(method_family = none)]
        pub unsafe fn serviceBrowserController(
            in_options: IOBluetoothServiceBrowserControllerOptions,
            mtm: MainThreadMarker,
        ) -> Option<Retained<IOBluetoothServiceBrowserController>>;

        #[cfg(all(feature = "IOBluetoothUIUserLib", feature = "objc2-io-bluetooth"))]
        /// ***WARNING*** This method has been deprecated in favor of -setOptions:, -runModal and -getResults.
        ///
        /// Parameter `outRecord`: Pointer to a (IOBluetoothSDPServiceRecord *) object.  This will get allocated and returned to the client if the user selects a service.
        ///
        /// Parameter `inOptions`: For future expansion.  Currently no options defined.
        ///
        /// Returns: IOReturn -
        ///
        /// kIOReturnSuccess  - on successful completion.
        ///
        /// kCanceledErr - User canceled.
        ///
        ///
        /// This method allocates and runs the browser window as a modal window waiting for the user to either select a
        /// service, or cancel the browser window.
        ///
        /// # Safety
        ///
        /// `out_record` might not allow `None`.
        #[deprecated]
        #[unsafe(method(browseDevices:options:))]
        #[unsafe(method_family = none)]
        pub unsafe fn browseDevices_options(
            out_record: Option<&mut Option<Retained<IOBluetoothSDPServiceRecord>>>,
            in_options: IOBluetoothServiceBrowserControllerOptions,
            mtm: MainThreadMarker,
        ) -> IOReturn;

        #[cfg(all(feature = "IOBluetoothUIUserLib", feature = "objc2-io-bluetooth"))]
        /// ***WARNING*** This method has been deprecated in favor of - beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:.
        ///
        /// Parameter `outRecord`: Pointer to a (IOBluetoothSDPServiceRecord *) object.  This will get allocated and returned to the client if the user selects a service.
        ///
        /// Parameter `inOptions`: For future expansion.  Currently no options defined.
        ///
        /// Parameter `inWindow`: The window to be used as the anchor of the sheet.
        ///
        /// Returns: IOReturn -
        /// kIOReturnSuccess  - on successful completion.
        /// kCanceledErr - User canceled.
        ///
        /// This method will allocate and run the IOBluetoothServiceBrowserController browser window as a sheet for a window.
        ///
        /// # Safety
        ///
        /// - `out_record` might not allow `None`.
        /// - `in_window` might not allow `None`.
        #[deprecated]
        #[unsafe(method(browseDevicesAsSheetForWindow:options:window:))]
        #[unsafe(method_family = none)]
        pub unsafe fn browseDevicesAsSheetForWindow_options_window(
            out_record: Option<&mut Option<Retained<IOBluetoothSDPServiceRecord>>>,
            in_options: IOBluetoothServiceBrowserControllerOptions,
            in_window: Option<&NSWindow>,
            mtm: MainThreadMarker,
        ) -> IOReturn;

        #[cfg(feature = "IOBluetoothUIUserLib")]
        /// Method call to convert an IOBluetoothServiceBrowserControllerRef into an IOBluetoothServiceBrowserController *.
        ///
        /// Parameter `serviceBrowserControllerRef`: IOBluetoothServiceBrowserControllerRef for which an IOBluetoothServiceBrowserController * is desired.
        ///
        /// Returns: Returns the IOBluetoothServiceBrowserController * for the given IOBluetoothServiceBrowserControllerRef.
        ///
        /// # Safety
        ///
        /// `service_browser_controller_ref` might not allow `None`.
        #[unsafe(method(withServiceBrowserControllerRef:))]
        #[unsafe(method_family = none)]
        pub unsafe fn withServiceBrowserControllerRef(
            service_browser_controller_ref: Option<&IOBluetoothServiceBrowserControllerRef>,
            mtm: MainThreadMarker,
        ) -> Option<Retained<IOBluetoothServiceBrowserController>>;

        #[cfg(feature = "IOBluetoothUIUserLib")]
        /// Returns an IOBluetoothServiceBrowserControllerRef representation of the target IOBluetoothServiceBrowserController object.
        ///
        /// Returns: Returns an IOBluetoothServiceBrowserControllerRef representation of the target IOBluetoothServiceBrowserController object.
        #[unsafe(method(getServiceBrowserControllerRef))]
        #[unsafe(method_family = none)]
        pub unsafe fn getServiceBrowserControllerRef(
            &self,
        ) -> Option<Retained<IOBluetoothServiceBrowserControllerRef>>;

        #[cfg(feature = "objc2-io-bluetooth")]
        /// Invoke an already created window controller to display, and run the modal dialog.
        ///
        /// ***WARNING*** This method has been deprecated in favor of -runModal and -getResults.
        ///
        /// Parameter `outRecord`: Pointer to a (IOBluetoothSDPServiceRecord *) object.  This will get allocated and returned to the client if the user selects a service.
        ///
        /// Returns: IOReturn -
        /// kIOReturnSuccess  - on successful completion.
        /// kCanceledErr - User canceled.
        ///
        /// This method will run the IOBluetoothServiceBrowserController browser window modally.
        ///
        /// # Safety
        ///
        /// `out_record` might not allow `None`.
        #[deprecated]
        #[unsafe(method(discover:))]
        #[unsafe(method_family = none)]
        pub unsafe fn discover(
            &self,
            out_record: Option<&mut Option<Retained<IOBluetoothSDPServiceRecord>>>,
        ) -> IOReturn;

        #[cfg(feature = "objc2-io-bluetooth")]
        /// Invoke an already created window controller to display, and run the modal dialog.
        ///
        /// ***WARNING*** This method has been deprecated in favor of -beginSheetModalForWindow:... and -getResults.
        ///
        /// Parameter `sheetWindow`: The window to use for the anchor of the sheet..
        ///
        /// Parameter `outRecord`: Pointer to a (IOBluetoothSDPServiceRecord *) object.  This will get allocated and returned to the client if the user selects a service.
        ///
        /// Returns: IOReturn -
        /// kIOReturnSuccess  - on successful completion.
        /// kCanceledErr - User canceled.
        ///
        /// This method will run the IOBluetoothServiceBrowserController browser window as a sheet for the window passed to it in sheetWindow.
        ///
        /// # Safety
        ///
        /// - `sheet_window` might not allow `None`.
        /// - `out_record` might not allow `None`.
        #[deprecated]
        #[unsafe(method(discoverAsSheetForWindow:withRecord:))]
        #[unsafe(method_family = none)]
        pub unsafe fn discoverAsSheetForWindow_withRecord(
            &self,
            sheet_window: Option<&NSWindow>,
            out_record: Option<&mut Option<Retained<IOBluetoothSDPServiceRecord>>>,
        ) -> IOReturn;

        #[cfg(feature = "objc2-io-bluetooth")]
        /// Invoke an already created window controller to display, and run the modal dialog.
        ///
        /// ***WARNING*** This method has been deprecated in favor of -setSearchAttributes:, -addAllowedUUID:, -runModal and -getResults.
        ///
        /// Parameter `deviceArray`: A NSArray of valid device type objects to allow.  Not implemented yet.
        ///
        /// Parameter `serviceArray`: A NSArray of valid UUIDs to allow. The array should contain NSData objects
        /// specifying the UUID to allow.  We currently only support 16-bit short UUID forms, but
        /// will allow for any of the 16, 32 or full 128-bit UUID forms.
        ///
        /// Parameter `outRecord`: Pointer to a (IOBluetoothSDPServiceRecord *) object.  This will get allocated
        /// and returned to the client if the user selects a service.
        ///
        /// Returns: IOReturn -
        /// kIOReturnSuccess  - on successful completion.
        /// kCanceledErr - User canceled.
        ///
        /// This method will run the IOBluetoothServiceBrowserController browser window as a sheet for the window passed to it in sheetWindow.
        ///
        /// # Safety
        ///
        /// - `device_attributes` must be a valid pointer.
        /// - `service_array` generic should be of the correct type.
        /// - `service_array` might not allow `None`.
        /// - `out_record` might not allow `None`.
        #[deprecated]
        #[unsafe(method(discoverWithDeviceAttributes:serviceList:serviceRecord:))]
        #[unsafe(method_family = none)]
        pub unsafe fn discoverWithDeviceAttributes_serviceList_serviceRecord(
            &self,
            device_attributes: *mut IOBluetoothDeviceSearchAttributes,
            service_array: Option<&NSArray>,
            out_record: Option<&mut Option<Retained<IOBluetoothSDPServiceRecord>>>,
        ) -> IOReturn;

        #[cfg(feature = "IOBluetoothUIUserLib")]
        /// Modify the options for the window controller.
        ///
        /// Parameter `inOptions`: Bit field to set the options to.
        ///
        /// Returns: None.
        ///
        /// This method will set the options for the browser to new values.
        #[unsafe(method(setOptions:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setOptions(&self, in_options: IOBluetoothServiceBrowserControllerOptions);

        /// Runs the service browser panel in a modal session to allow the user to select a service on a Bluetooth device.
        ///
        /// The controller will use the panel attributes to filter what devices the user sees.  The allowed UUIDs
        /// will be used to validate the selection the user makes.  The user will only be able to select services
        /// that match the allowed UUIDs.  Only when a selection has been validated (or
        /// the panel cancelled), will this method return.
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        ///
        /// Returns: Returns kIOBluetoothUISuccess if a successful, validated service selection was made by the user.
        /// Returns kIOBluetoothUIUserCanceledErr if the user cancelled the panel.  These return values are the
        /// same as NSRunStoppedResponse and NSRunAbortedResponse respectively.  They are the standard values
        /// used in a modal session.
        #[unsafe(method(runModal))]
        #[unsafe(method_family = none)]
        pub unsafe fn runModal(&self) -> c_int;

        /// Runs the service browser panel as a sheet on the target window.
        ///
        /// This function works the same way as -[NSApplication beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:].
        /// The didEndSelector has a similar prototype as in NSApplication except that the first argument is the
        /// IOBluetoothServiceBrowserController object instead of the window:
        /// -(void)sheetDidEnd:(IOBluetoothServiceBrowserController *)controller returnCode:(int)returnCode contextInfo:(void *)contextInfo.
        /// The returnCode parameter will either be kIOBluetoothUISuccess or kIOBluetoothUIUserCancelledErr as described in
        /// -runModal.
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        ///
        /// Parameter `sheetWindow`: NSWindow to attach the service browser panel to as a sheet.
        ///
        /// Parameter `modalDelegate`: Delegate object that gets sent the didEndSelector when the sheet modal session is finished.
        ///
        /// Parameter `didEndSelector`: Selector sent to the modalDelegate when the sheet modal session is finished.
        ///
        /// Parameter `contextInfo`: User-definied value passed to the modalDelegate in the didEndSelector.
        ///
        /// Returns: Returns kIOReturnSuccess if the sheet modal session was started.
        ///
        /// # Safety
        ///
        /// - `sheet_window` might not allow `None`.
        /// - `modal_delegate` should be of the correct type.
        /// - `modal_delegate` might not allow `None`.
        /// - `did_end_selector` must be a valid selector.
        /// - `context_info` must be a valid pointer.
        #[unsafe(method(beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:))]
        #[unsafe(method_family = none)]
        pub unsafe fn beginSheetModalForWindow_modalDelegate_didEndSelector_contextInfo(
            &self,
            sheet_window: Option<&NSWindow>,
            modal_delegate: Option<&AnyObject>,
            did_end_selector: Option<Sel>,
            context_info: *mut c_void,
        ) -> IOReturn;

        /// Returns the result of the user's selection.
        ///
        /// There will only be results if the panel has been run, the user has successfully made a selection and that
        /// selection has been validated.  If kIOBluetoothUISuccess was returned for the session, there should be valid
        /// results.  Currently only a single device is allowed to be selected, so the results array will only contain
        /// one object.  However in the future multiple selection will be supported.
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        ///
        /// Returns: Returns an NSArray of IOBluetoothSDPServiceRecord objects corresponding to the user's selection.  If the user cancelled
        /// the panel, nil will be returned.
        #[unsafe(method(getResults))]
        #[unsafe(method_family = none)]
        pub unsafe fn getResults(&self) -> Option<Retained<NSArray>>;

        #[cfg(feature = "IOBluetoothUIUserLib")]
        /// Returns the option bits that control the panel's behavior.
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        ///
        /// Returns: Returns the option bits set by setOptions:
        #[unsafe(method(getOptions))]
        #[unsafe(method_family = none)]
        pub unsafe fn getOptions(&self) -> IOBluetoothServiceBrowserControllerOptions;

        #[cfg(feature = "objc2-io-bluetooth")]
        /// Sets the search attributes that control the panel's search/inquiry behavior.
        ///
        /// The device search attributes control the inquiry behavior of the panel.  They allow only devices
        /// that match the specified attributes (i.e. class of device) to be displayed to the user.  Note that
        /// this only covers attributes returned in an inquiry result and not actual SDP services on the device.
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        ///
        /// Parameter `searchAttributes`: Attributes to control the panel's inquiry behavior.
        ///
        /// # Safety
        ///
        /// `search_attributes` must be a valid pointer.
        #[unsafe(method(setSearchAttributes:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSearchAttributes(
            &self,
            search_attributes: *const IOBluetoothDeviceSearchAttributes,
        );

        #[cfg(feature = "objc2-io-bluetooth")]
        /// Returns the search attributes that control the panel's search/inquiry behavior.
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        ///
        /// Returns: Returns the search attributes set by setSearchAttributes:
        ///
        /// # Safety
        ///
        /// The returned struct field 4 struct field 2 Array TODO.
        #[unsafe(method(getSearchAttributes))]
        #[unsafe(method_family = none)]
        pub unsafe fn getSearchAttributes(&self) -> *const IOBluetoothDeviceSearchAttributes;

        #[cfg(feature = "objc2-io-bluetooth")]
        /// Adds a UUID to the list of UUIDs that are used to validate the user's selection.
        ///
        /// The user's device selection gets validated against the UUIDs passed to -addAllowedUUID:
        /// addAllowedUUIDArray:.  Each call to those methods essentially adds a filter that the
        /// selected device gets validated with.  If any of the filters match, the device is considered
        /// valid.  If they all fail, the device is not valid and the user is presented with an
        /// error code that the device does not support the required services.  The UUID passed to
        /// -addAllowedUUID: is the only UUID that must be present in the device's SDP service records.
        /// Alternatively, all of the UUIDs in the UUID array passed to -addAllowedUUIDArray must be
        /// present.
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        ///
        /// Parameter `allowedUUID`: UUID that a device may contain to be selected
        ///
        /// # Safety
        ///
        /// `allowed_uuid` might not allow `None`.
        #[unsafe(method(addAllowedUUID:))]
        #[unsafe(method_family = none)]
        pub unsafe fn addAllowedUUID(&self, allowed_uuid: Option<&IOBluetoothSDPUUID>);

        /// Adds an array of UUIDs to the list of UUIDs that are used to validate the user's selection.
        ///
        /// The user's device selection gets validated against the UUIDs passed to -addAllowedUUID:
        /// addAllowedUUIDArray:.  Each call to those methods essentially adds a filter that the
        /// selected device gets validated with.  If any of the filters match, the device is considered
        /// valid.  If they all fail, the device is not valid and the user is presented with an
        /// error code that the device does not support the required services.  The UUID passed to
        /// -addAllowedUUID: is the only UUID that must be present in the device's SDP service records.
        /// Alternatively, all of the UUIDs in the UUID array passed to -addAllowedUUIDArray must be
        /// present.
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        ///
        /// Parameter `allowedUUIDArray`: An NSArray of UUIDs that all must be present in a device for it to be selectable.
        ///
        /// # Safety
        ///
        /// - `allowed_uuid_array` generic should be of the correct type.
        /// - `allowed_uuid_array` might not allow `None`.
        #[unsafe(method(addAllowedUUIDArray:))]
        #[unsafe(method_family = none)]
        pub unsafe fn addAllowedUUIDArray(&self, allowed_uuid_array: Option<&NSArray>);

        /// Resets the controller back to the default state where it will accept any device the user selects.
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        #[unsafe(method(clearAllowedUUIDs))]
        #[unsafe(method_family = none)]
        pub unsafe fn clearAllowedUUIDs(&self);

        /// Sets the title of the panel when not run as a sheet.
        ///
        /// The panel title should be localized for best user experience.
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        ///
        /// Parameter `windowTitle`: Title of the device selector panel.
        ///
        /// # Safety
        ///
        /// `window_title` might not allow `None`.
        #[unsafe(method(setTitle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTitle(&self, window_title: Option<&NSString>);

        /// Returns the title of the device selector panel (i.e. what was set in -setTitle:).
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        ///
        /// Returns: Returns the title of the device selector panel.
        #[unsafe(method(getTitle))]
        #[unsafe(method_family = none)]
        pub unsafe fn getTitle(&self) -> Option<Retained<NSString>>;

        /// Sets the description text that appears in the device selector panel.
        ///
        /// The description text should be localized for best user experience.
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        ///
        /// Parameter `descriptionText`: String that appears in the description section of the device selector panel.
        ///
        /// # Safety
        ///
        /// `description_text` might not allow `None`.
        #[unsafe(method(setDescriptionText:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDescriptionText(&self, description_text: Option<&NSString>);

        /// Returns the description text that appears in the device selector panel (i.e. what was set in -setDescriptionText:).
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        ///
        /// Returns: Returns the description text of the device selector panel.
        #[unsafe(method(getDescriptionText))]
        #[unsafe(method_family = none)]
        pub unsafe fn getDescriptionText(&self) -> Option<Retained<NSString>>;

        /// Sets the title of the default/select button in the device selector panel.
        ///
        /// The prompt text should be localized for best user experience.
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        ///
        /// Parameter `prompt`: String that appears in the default/select button in the device selector panel.
        ///
        /// # Safety
        ///
        /// `prompt` might not allow `None`.
        #[unsafe(method(setPrompt:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPrompt(&self, prompt: Option<&NSString>);

        /// Returns the title of the default/select button in the device selector panel (i.e. what was set in -setPrompt:).
        ///
        /// NOTE: This method is only available in Mac OS X 10.2.4 (Bluetooth v1.1) or later.
        ///
        /// Returns: Returns the default button title of the device selector panel.
        #[unsafe(method(getPrompt))]
        #[unsafe(method_family = none)]
        pub unsafe fn getPrompt(&self) -> Option<Retained<NSString>>;
    );
}

/// Methods declared on superclass `NSWindowController`.
impl IOBluetoothServiceBrowserController {
    extern_methods!(
        #[unsafe(method(initWithWindow:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithWindow(
            this: Allocated<Self>,
            window: Option<&NSWindow>,
        ) -> Retained<Self>;

        /// # Safety
        ///
        /// `coder` possibly has further requirements.
        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(initWithWindowNibName:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithWindowNibName(
            this: Allocated<Self>,
            window_nib_name: &NSNibName,
        ) -> Retained<Self>;

        /// # Safety
        ///
        /// `owner` should be of the correct type.
        #[unsafe(method(initWithWindowNibName:owner:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithWindowNibName_owner(
            this: Allocated<Self>,
            window_nib_name: &NSNibName,
            owner: &AnyObject,
        ) -> Retained<Self>;

        /// # Safety
        ///
        /// `owner` should be of the correct type.
        #[unsafe(method(initWithWindowNibPath:owner:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithWindowNibPath_owner(
            this: Allocated<Self>,
            window_nib_path: &NSString,
            owner: &AnyObject,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSResponder`.
impl IOBluetoothServiceBrowserController {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
impl IOBluetoothServiceBrowserController {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}
