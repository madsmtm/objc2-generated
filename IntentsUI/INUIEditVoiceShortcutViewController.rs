//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-intents")]
use objc2_intents::*;

use crate::*;

extern_class!(
    /// A view controller that shows the details of a voice shortcut, and lets the user edit the phrase.
    ///
    /// To have the user edit a voice shortcut, create an
    /// `INUIEditVoiceShortcutViewController`object with the
    /// `INVoiceShortcut`that they wish to edit, and set its delegate. Then, present the view controller modally from another view controller in your app. Your delegate must dismiss the view controller when the user finishes editing.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/intentsui/inuieditvoiceshortcutviewcontroller?language=objc)
    #[unsafe(super(NSViewController, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    pub struct INUIEditVoiceShortcutViewController;
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSCoding for INUIEditVoiceShortcutViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSEditor for INUIEditVoiceShortcutViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSObjectProtocol for INUIEditVoiceShortcutViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSSeguePerforming for INUIEditVoiceShortcutViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSUserInterfaceItemIdentification for INUIEditVoiceShortcutViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl INUIEditVoiceShortcutViewController {
    extern_methods!(
        #[unsafe(method(delegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn INUIEditVoiceShortcutViewControllerDelegate>>>;

        /// Setter for [`delegate`][Self::delegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        #[unsafe(method(setDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn INUIEditVoiceShortcutViewControllerDelegate>>,
        );

        #[cfg(feature = "objc2-intents")]
        /// Parameter `voiceShortcut`: The voice shortcut to be edited.
        #[unsafe(method(initWithVoiceShortcut:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithVoiceShortcut(
            this: Allocated<Self>,
            voice_shortcut: &INVoiceShortcut,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(initWithNibName:bundle:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithNibName_bundle(
            this: Allocated<Self>,
            nib_name_or_nil: Option<&NSString>,
            nib_bundle_or_nil: Option<&NSBundle>,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSViewController`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl INUIEditVoiceShortcutViewController {
    extern_methods!(
        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl INUIEditVoiceShortcutViewController {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/intentsui/inuieditvoiceshortcutviewcontrollerdelegate?language=objc)
    pub unsafe trait INUIEditVoiceShortcutViewControllerDelegate: NSObjectProtocol {
        #[cfg(all(feature = "objc2-app-kit", feature = "objc2-intents"))]
        #[cfg(target_os = "macos")]
        /// Called if the user updates the voice shortcut, with either the successfully-updated voice shortcut, or an error.
        ///
        /// Your implementation of this method should dismiss the view controller.
        #[unsafe(method(editVoiceShortcutViewController:didUpdateVoiceShortcut:error:))]
        #[unsafe(method_family = none)]
        unsafe fn editVoiceShortcutViewController_didUpdateVoiceShortcut_error(
            &self,
            controller: &INUIEditVoiceShortcutViewController,
            voice_shortcut: Option<&INVoiceShortcut>,
            error: Option<&NSError>,
        );

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Called if the user deletes the voice shortcut.
        ///
        /// Your implementation of this method should dismiss the view controller.
        #[unsafe(method(editVoiceShortcutViewController:didDeleteVoiceShortcutWithIdentifier:))]
        #[unsafe(method_family = none)]
        unsafe fn editVoiceShortcutViewController_didDeleteVoiceShortcutWithIdentifier(
            &self,
            controller: &INUIEditVoiceShortcutViewController,
            deleted_voice_shortcut_identifier: &NSUUID,
        );

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Called if the user cancelled; no changes were made to the voice shortcut.
        ///
        /// Your implementation of this method should dismiss the view controller.
        #[unsafe(method(editVoiceShortcutViewControllerDidCancel:))]
        #[unsafe(method_family = none)]
        unsafe fn editVoiceShortcutViewControllerDidCancel(
            &self,
            controller: &INUIEditVoiceShortcutViewController,
        );
    }
);
