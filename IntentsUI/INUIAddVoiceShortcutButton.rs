//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-intents")]
use objc2_intents::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/intentsui/inuiaddvoiceshortcutbuttonstyle?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct INUIAddVoiceShortcutButtonStyle(pub NSUInteger);
impl INUIAddVoiceShortcutButtonStyle {
    #[doc(alias = "INUIAddVoiceShortcutButtonStyleWhite")]
    pub const White: Self = Self(0);
    #[doc(alias = "INUIAddVoiceShortcutButtonStyleWhiteOutline")]
    pub const WhiteOutline: Self = Self(1);
    #[doc(alias = "INUIAddVoiceShortcutButtonStyleBlack")]
    pub const Black: Self = Self(2);
    #[doc(alias = "INUIAddVoiceShortcutButtonStyleBlackOutline")]
    pub const BlackOutline: Self = Self(3);
    #[doc(alias = "INUIAddVoiceShortcutButtonStyleAutomatic")]
    pub const Automatic: Self = Self(4);
    #[doc(alias = "INUIAddVoiceShortcutButtonStyleAutomaticOutline")]
    pub const AutomaticOutline: Self = Self(5);
}

unsafe impl Encode for INUIAddVoiceShortcutButtonStyle {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for INUIAddVoiceShortcutButtonStyle {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/intentsui/inuiaddvoiceshortcutbuttondelegate?language=objc)
    pub unsafe trait INUIAddVoiceShortcutButtonDelegate: NSObjectProtocol {
        #[cfg(all(
            feature = "INUIAddVoiceShortcutViewController",
            feature = "objc2-app-kit"
        ))]
        #[cfg(target_os = "macos")]
        #[unsafe(method(presentAddVoiceShortcutViewController:forAddVoiceShortcutButton:))]
        #[unsafe(method_family = none)]
        unsafe fn presentAddVoiceShortcutViewController_forAddVoiceShortcutButton(
            &self,
            add_voice_shortcut_view_controller: &INUIAddVoiceShortcutViewController,
            add_voice_shortcut_button: &INUIAddVoiceShortcutButton,
        );

        #[cfg(all(
            feature = "INUIEditVoiceShortcutViewController",
            feature = "objc2-app-kit"
        ))]
        #[cfg(target_os = "macos")]
        #[unsafe(method(presentEditVoiceShortcutViewController:forAddVoiceShortcutButton:))]
        #[unsafe(method_family = none)]
        unsafe fn presentEditVoiceShortcutViewController_forAddVoiceShortcutButton(
            &self,
            edit_voice_shortcut_view_controller: &INUIEditVoiceShortcutViewController,
            add_voice_shortcut_button: &INUIAddVoiceShortcutButton,
        );
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/intentsui/inuiaddvoiceshortcutbutton?language=objc)
    #[unsafe(super(NSButton, NSControl, NSView, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    pub struct INUIAddVoiceShortcutButton;
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAccessibility for INUIAddVoiceShortcutButton {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAccessibilityButton for INUIAddVoiceShortcutButton {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAccessibilityElementProtocol for INUIAddVoiceShortcutButton {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAnimatablePropertyContainer for INUIAddVoiceShortcutButton {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSAppearanceCustomization for INUIAddVoiceShortcutButton {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSCoding for INUIAddVoiceShortcutButton {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSDraggingDestination for INUIAddVoiceShortcutButton {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSObjectProtocol for INUIAddVoiceShortcutButton {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSUserInterfaceCompression for INUIAddVoiceShortcutButton {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSUserInterfaceItemIdentification for INUIAddVoiceShortcutButton {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSUserInterfaceValidations for INUIAddVoiceShortcutButton {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl INUIAddVoiceShortcutButton {
    extern_methods!(
        #[unsafe(method(initWithStyle:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithStyle(
            this: Allocated<Self>,
            style: INUIAddVoiceShortcutButtonStyle,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(initWithFrame:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame: CGRect) -> Retained<Self>;

        #[unsafe(method(style))]
        #[unsafe(method_family = none)]
        pub unsafe fn style(&self) -> INUIAddVoiceShortcutButtonStyle;

        /// Setter for [`style`][Self::style].
        #[unsafe(method(setStyle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setStyle(&self, style: INUIAddVoiceShortcutButtonStyle);

        #[unsafe(method(delegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn INUIAddVoiceShortcutButtonDelegate>>>;

        /// Setter for [`delegate`][Self::delegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        #[unsafe(method(setDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn INUIAddVoiceShortcutButtonDelegate>>,
        );

        #[cfg(feature = "objc2-intents")]
        #[unsafe(method(shortcut))]
        #[unsafe(method_family = none)]
        pub unsafe fn shortcut(&self) -> Option<Retained<INShortcut>>;

        #[cfg(feature = "objc2-intents")]
        /// Setter for [`shortcut`][Self::shortcut].
        #[unsafe(method(setShortcut:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setShortcut(&self, shortcut: Option<&INShortcut>);

        #[cfg(feature = "objc2-core-foundation")]
        /// A custom corner radius for the
        /// `INUIAddVoiceShortcutButton.`
        /// If the provided corner radius is greater than half of the button’s height, it will be capped at half of the button’s height.
        #[unsafe(method(cornerRadius))]
        #[unsafe(method_family = none)]
        pub unsafe fn cornerRadius(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`cornerRadius`][Self::cornerRadius].
        #[unsafe(method(setCornerRadius:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCornerRadius(&self, corner_radius: CGFloat);
    );
}

/// Methods declared on superclass `NSButton`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl INUIAddVoiceShortcutButton {
    extern_methods!(
        /// Creates a standard push button with a title and image.
        ///
        /// Parameter `title`: The localized title string that is displayed on the button.
        ///
        /// Parameter `image`: The image that is displayed alongside the title. In left-to-right localizations, the image is displayed to the left of the title. In right-to-left localizations, it is displayed to the right.
        ///
        /// Parameter `target`: The target object that receives action messages from the control.
        ///
        /// Parameter `action`: The action message sent by the control.
        ///
        /// Returns: An initialized button object.
        ///
        /// # Safety
        ///
        /// `action` must be a valid selector.
        #[unsafe(method(buttonWithTitle:image:target:action:))]
        #[unsafe(method_family = none)]
        pub unsafe fn buttonWithTitle_image_target_action(
            title: &NSString,
            image: &NSImage,
            target: Option<&AnyObject>,
            action: Option<Sel>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        /// Creates a standard push button with the provided title.
        ///
        /// Parameter `title`: The localized title string that is displayed on the button.
        ///
        /// Parameter `target`: The target object that receives action messages from the control.
        ///
        /// Parameter `action`: The action message sent by the control.
        ///
        /// Returns: An initialized button object.
        ///
        /// # Safety
        ///
        /// `action` must be a valid selector.
        #[unsafe(method(buttonWithTitle:target:action:))]
        #[unsafe(method_family = none)]
        pub unsafe fn buttonWithTitle_target_action(
            title: &NSString,
            target: Option<&AnyObject>,
            action: Option<Sel>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        /// Creates a standard push button with the provided image. Set the image's accessibilityDescription property to ensure accessibility for this control.
        ///
        /// Parameter `image`: The image to display in the body of the button.
        ///
        /// Parameter `target`: The target object that receives action messages from the control.
        ///
        /// Parameter `action`: The action message sent by the control.
        ///
        /// Returns: An initialized button object.
        ///
        /// # Safety
        ///
        /// `action` must be a valid selector.
        #[unsafe(method(buttonWithImage:target:action:))]
        #[unsafe(method_family = none)]
        pub unsafe fn buttonWithImage_target_action(
            image: &NSImage,
            target: Option<&AnyObject>,
            action: Option<Sel>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        /// Creates a standard checkbox with the provided title.
        ///
        /// Parameter `title`: The localized title string that is displayed alongside the checkbox.
        ///
        /// Parameter `target`: The target object that receives action messages from the control.
        ///
        /// Parameter `action`: The action message sent by the control.
        ///
        /// Returns: An initialized button object.
        ///
        /// # Safety
        ///
        /// `action` must be a valid selector.
        #[unsafe(method(checkboxWithTitle:target:action:))]
        #[unsafe(method_family = none)]
        pub unsafe fn checkboxWithTitle_target_action(
            title: &NSString,
            target: Option<&AnyObject>,
            action: Option<Sel>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        /// Creates a standard radio button with the provided title.
        ///
        /// Parameter `title`: The localized title string that is displayed alongside the radio button.
        ///
        /// Parameter `target`: The target object that receives action messages from the control.
        ///
        /// Parameter `action`: The action message sent by the control.
        ///
        /// Returns: An initialized button object.
        ///
        /// # Safety
        ///
        /// `action` must be a valid selector.
        #[unsafe(method(radioButtonWithTitle:target:action:))]
        #[unsafe(method_family = none)]
        pub unsafe fn radioButtonWithTitle_target_action(
            title: &NSString,
            target: Option<&AnyObject>,
            action: Option<Sel>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSControl`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl INUIAddVoiceShortcutButton {
    extern_methods!(
        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl INUIAddVoiceShortcutButton {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}
