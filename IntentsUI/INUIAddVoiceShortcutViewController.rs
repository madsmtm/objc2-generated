//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
use objc2_app_kit::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-intents")]
use objc2_intents::*;

use crate::*;

extern_class!(
    /// A view controller that will take the user through the setup flow to add a shortcut to Siri.
    ///
    /// First create the
    /// `INShortcut`object that represents the shortcut the user wants to perform. Then create an
    /// `INUIAddVoiceShortcutViewController`object and set its delegate. Then, present the view controller modally from another view controller in your app. The delegate must dismiss the view controller when the user completes the set up.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/intentsui/inuiaddvoiceshortcutviewcontroller?language=objc)
    #[unsafe(super(NSViewController, NSResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "objc2-app-kit")]
    #[cfg(target_os = "macos")]
    pub struct INUIAddVoiceShortcutViewController;
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSCoding for INUIAddVoiceShortcutViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSEditor for INUIAddVoiceShortcutViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSObjectProtocol for INUIAddVoiceShortcutViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSSeguePerforming for INUIAddVoiceShortcutViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
extern_conformance!(
    unsafe impl NSUserInterfaceItemIdentification for INUIAddVoiceShortcutViewController {}
);

#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl INUIAddVoiceShortcutViewController {
    extern_methods!(
        #[unsafe(method(delegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn INUIAddVoiceShortcutViewControllerDelegate>>>;

        /// Setter for [`delegate`][Self::delegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        #[unsafe(method(setDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn INUIAddVoiceShortcutViewControllerDelegate>>,
        );

        #[cfg(feature = "objc2-intents")]
        /// Parameter `shortcut`: The shortcut is what will be run when the resulting voice shortcut is invoked. It also provides the suggested invocation phrase, via the
        /// `suggestedInvocationPhrase`property on the intent or user activity.
        #[unsafe(method(initWithShortcut:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithShortcut(
            this: Allocated<Self>,
            shortcut: &INShortcut,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(initWithNibName:bundle:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithNibName_bundle(
            this: Allocated<Self>,
            nib_name_or_nil: Option<&NSString>,
            nib_bundle_or_nil: Option<&NSBundle>,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSViewController`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl INUIAddVoiceShortcutViewController {
    extern_methods!(
        /// # Safety
        ///
        /// `coder` possibly has further requirements.
        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "objc2-app-kit")]
#[cfg(target_os = "macos")]
impl INUIAddVoiceShortcutViewController {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/intentsui/inuiaddvoiceshortcutviewcontrollerdelegate?language=objc)
    pub unsafe trait INUIAddVoiceShortcutViewControllerDelegate: NSObjectProtocol {
        #[cfg(all(feature = "objc2-app-kit", feature = "objc2-intents"))]
        #[cfg(target_os = "macos")]
        /// Called after the user finishes the setup flow for the voice shortcut, with either the successfully-added voice shortcut, or an error.
        ///
        /// Your implementation of this method should dismiss the view controller.
        #[unsafe(method(addVoiceShortcutViewController:didFinishWithVoiceShortcut:error:))]
        #[unsafe(method_family = none)]
        unsafe fn addVoiceShortcutViewController_didFinishWithVoiceShortcut_error(
            &self,
            controller: &INUIAddVoiceShortcutViewController,
            voice_shortcut: Option<&INVoiceShortcut>,
            error: Option<&NSError>,
        );

        #[cfg(feature = "objc2-app-kit")]
        #[cfg(target_os = "macos")]
        /// Called if the user cancels the setup flow; the voice shortcut was not added.
        ///
        /// Your implementation of this method should dismiss the view controller.
        #[unsafe(method(addVoiceShortcutViewControllerDidCancel:))]
        #[unsafe(method_family = none)]
        unsafe fn addVoiceShortcutViewControllerDidCancel(
            &self,
            controller: &INUIAddVoiceShortcutViewController,
        );
    }
);
