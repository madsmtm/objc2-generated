//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-media")]
use objc2_core_media::*;
#[cfg(feature = "objc2-core-video")]
use objc2_core_video::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// Provides a stateless factory interface for creating new MERAWProcessor instances.
    ///
    /// The MERAWProcessorExtension protocol provides a factory method to create a new MERAWProcessor instance for a codecType implemented by the extension. A single MERAWProcessorExtension is instantiated by the Video Toolbox, and will be called to create individual MERAWProcessor instances as needed. If the codecType or FormatDescription passed to processorWithCodecType is not compatible with the MERAWProcessor implementation, the factory call should fail and return MEErrorUnsupportedFeature.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mediaextension/merawprocessorextension?language=objc)
    pub unsafe trait MERAWProcessorExtension: NSObjectProtocol {
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "objc2-core-media")]
        /// The factory method to create a new MERAWProcessor.
        ///
        /// Creates a new MERAWProcessor matching the given CMVideoFormatDescriptionRef.  If these parameters are not compatible with the MERAWProcessor, the call should fail, returning MEErrorUnsupportedFeature.
        ///
        /// Parameter `formatDescription`: A CMVideoFormatDescription describing the video data that was decoded to produce the RAW input for the RAW Processor.
        ///
        /// Parameter `extensionPixelBufferManager`: An MERAWProcessorPixelBufferManager instance that should be retained by the new MERAWProcessor instance and used for output pixelBuffer configuration and allocation.
        ///
        /// Parameter `error`: On return, if initialization of the MERAWProcessor fails, points to an NSError describing the nature of the failure.  Failures could be due to incompatible formatDescription or may be do to some other resource required by the processor not being found.  Errors should be  from the MediaExtensionErrorDomain domain.
        ///
        /// Returns: A newly created instance conforming to MERAWProcessor.
        #[unsafe(method(processorWithFormatDescription:extensionPixelBufferManager:error:_))]
        #[unsafe(method_family = none)]
        unsafe fn processorWithFormatDescription_extensionPixelBufferManager_error(
            &self,
            format_description: &CMVideoFormatDescription,
            extension_pixel_buffer_manager: &MERAWProcessorPixelBufferManager,
        ) -> Result<Retained<ProtocolObject<dyn MERAWProcessor>>, Retained<NSError>>;
    }
);

extern_class!(
    /// Describes pixel buffer requirements and creates new pixel buffers.
    ///
    /// Contains the interfaces that the App Extension RAW processor uses for two tasks. First, to declare its set of requirements for output CVPixelBuffers in the form of a pixelBufferAttributes dictionary. Second, to create pixelBuffers which match processor output requirements but also satisfy VideoToolbox and client requirements.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mediaextension/merawprocessorpixelbuffermanager?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MERAWProcessorPixelBufferManager;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for MERAWProcessorPixelBufferManager {}
);

impl MERAWProcessorPixelBufferManager {
    extern_methods!(
        /// VideoToolbox will use these attributes when creating a pixelBuffer for the RAW Processor.
        ///
        /// This can be updated by the processor before requesting a new pixelBuffer.
        #[unsafe(method(pixelBufferAttributes))]
        #[unsafe(method_family = none)]
        pub unsafe fn pixelBufferAttributes(&self) -> Retained<NSDictionary<NSString, AnyObject>>;

        /// Setter for [`pixelBufferAttributes`][Self::pixelBufferAttributes].
        #[unsafe(method(setPixelBufferAttributes:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setPixelBufferAttributes(
            &self,
            pixel_buffer_attributes: &NSDictionary<NSString, AnyObject>,
        );

        #[cfg(feature = "objc2-core-video")]
        /// Generates a pixel buffer using the session's pixel buffer pool.
        ///
        /// If implemented in Objective-C, the caller is responsible for releasing the returned CVPixelBuffer.
        ///
        /// Parameter `error`: If provided, returns error information in the event that the method fails.
        ///
        /// Returns: A pixel buffer compatible with the extension's most recently set pixelBufferAttributes
        #[unsafe(method(createPixelBufferAndReturnError:_))]
        // required for soundness, method has `returns_retained` attribute.
        #[unsafe(method_family = copy)]
        pub unsafe fn createPixelBufferAndReturnError(
            &self,
        ) -> Result<Retained<CVPixelBuffer>, Retained<NSError>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl MERAWProcessorPixelBufferManager {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// An object implementing this protocol is implemented by the RAW Processor to describe each processing parameter the Processor exposes.
    ///
    /// The MERAWProcessingParameter protocol provides an interface for the VideoToolbox to query descriptions of the different parameters that can be used to influence Processor operation.  A distinct MERAWProcessingParameter is created for each parameter supported by the Processor, and the set of supported parameters is returned by the MERAWProcessor's processingParameters interface.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mediaextension/merawprocessingparameter?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MERAWProcessingParameter;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for MERAWProcessingParameter {}
);

impl MERAWProcessingParameter {
    extern_methods!(
        /// A localized human-readable name for the parameter, suitable for displaying in application UI.
        #[unsafe(method(name))]
        #[unsafe(method_family = none)]
        pub unsafe fn name(&self) -> Retained<NSString>;

        /// A unique key string identifying this parameter.
        #[unsafe(method(key))]
        #[unsafe(method_family = none)]
        pub unsafe fn key(&self) -> Retained<NSString>;

        /// A localized description of the parameter, suitable for displaying in a tool tip or similar explanatory UI.
        #[unsafe(method(longDescription))]
        #[unsafe(method_family = none)]
        pub unsafe fn longDescription(&self) -> Retained<NSString>;

        /// Indicates whether the parameter is enabled or disabled by the extension.
        ///
        /// This parameter can only be modified by the extension.  From the application-facing interface, VTRAWProcessingSession, this is a read-only value which indicates whether the parameter should be greyed out and disabled in any UI being generated.
        #[unsafe(method(enabled))]
        #[unsafe(method_family = none)]
        pub unsafe fn enabled(&self) -> bool;

        /// Setter for [`enabled`][Self::enabled].
        #[unsafe(method(setEnabled:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setEnabled(&self, enabled: bool);
    );
}

/// Methods declared on superclass `NSObject`.
impl MERAWProcessingParameter {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// An object implementing this protocol is implemented by the RAW Processor to describe each processing parameter the Processor exposes.
    ///
    /// The MERAWProcessingListElementParameter protocol provides an interface for VideoToolbox to query descriptions of the different elements in a parameter list  for a List element in a MERAWProcessingParameter.  A distinct MERAWProcessingListElementParameter is created for each list element.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mediaextension/merawprocessinglistelementparameter?language=objc)
    #[unsafe(super(MERAWProcessingParameter, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MERAWProcessingListElementParameter;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for MERAWProcessingListElementParameter {}
);

impl MERAWProcessingListElementParameter {
    extern_methods!(
        #[unsafe(method(initWithName:description:elementID:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_description_elementID(
            this: Allocated<Self>,
            name: &NSString,
            description: &NSString,
            element_id: NSInteger,
        ) -> Retained<Self>;

        /// A unique number in this list which represents this list option.
        ///
        /// The set of elements in the list may change depending on other configuration parameters, so while the index of an element in this list may change, this ID never changes and is used to report list element selection
        #[unsafe(method(listElementID))]
        #[unsafe(method_family = none)]
        pub unsafe fn listElementID(&self) -> NSInteger;
    );
}

/// Methods declared on superclass `NSObject`.
impl MERAWProcessingListElementParameter {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaextension/merawprocessingbooleanparameter?language=objc)
    #[unsafe(super(MERAWProcessingParameter, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MERAWProcessingBooleanParameter;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for MERAWProcessingBooleanParameter {}
);

impl MERAWProcessingBooleanParameter {
    extern_methods!(
        #[unsafe(method(initWithName:key:description:initialValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_initialValue(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            initial_value: bool,
        ) -> Retained<Self>;

        #[unsafe(method(initWithName:key:description:initialValue:neutralValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_initialValue_neutralValue(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            initial_value: bool,
            neutral_value: bool,
        ) -> Retained<Self>;

        #[unsafe(method(initWithName:key:description:initialValue:cameraValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_initialValue_cameraValue(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            initial_value: bool,
            camera_value: bool,
        ) -> Retained<Self>;

        #[unsafe(method(initWithName:key:description:initialValue:neutralValue:cameraValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_initialValue_neutralValue_cameraValue(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            initial_value: bool,
            neutral_value: bool,
            camera_value: bool,
        ) -> Retained<Self>;

        /// The initial value for this parameter as defined in the sequence metadata.
        #[unsafe(method(initialValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn initialValue(&self) -> bool;

        /// Get or set the current value for this parameter.
        ///
        /// This property can be observed if appropriate in order to react to changes which would result in changes to the set of MERAWProcessingParameters vended by the extension.
        #[unsafe(method(currentValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn currentValue(&self) -> bool;

        /// Setter for [`currentValue`][Self::currentValue].
        #[unsafe(method(setCurrentValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCurrentValue(&self, current_value: bool);

        /// Return value indicates whether the MERAWProcessingBooleanParameter has an optional declared Neutral value.
        ///
        /// If the return value is YES and outNeutralValue is not nil, the value held by outNeutralValue will be set to the neutral value.
        /// If the return value is NO and outNeutralValue is not nil, the value held by outNeutralValue will be set to NO.
        #[unsafe(method(hasNeutralValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn hasNeutralValue(&self, out_neutral_value: *mut Bool) -> bool;

        /// Return value indicates whether the MERAWProcessingBooleanParameter has an optional declared Camera value.
        ///
        /// If the return value is YES and outCameraValue is not nil, the value held by outCameraValue will be set to the camera value.
        /// If the return value is NO and outCameraValue is not nil, the value held by outCameraValue will be set to NO.
        #[unsafe(method(hasCameraValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn hasCameraValue(&self, out_camera_value: *mut Bool) -> bool;
    );
}

/// Methods declared on superclass `NSObject`.
impl MERAWProcessingBooleanParameter {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaextension/merawprocessingintegerparameter?language=objc)
    #[unsafe(super(MERAWProcessingParameter, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MERAWProcessingIntegerParameter;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for MERAWProcessingIntegerParameter {}
);

impl MERAWProcessingIntegerParameter {
    extern_methods!(
        #[unsafe(method(initWithName:key:description:initialValue:maximum:minimum:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_initialValue_maximum_minimum(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            initial_value: NSInteger,
            maximum: NSInteger,
            minimum: NSInteger,
        ) -> Retained<Self>;

        #[unsafe(method(initWithName:key:description:initialValue:maximum:minimum:neutralValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_initialValue_maximum_minimum_neutralValue(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            initial_value: NSInteger,
            maximum: NSInteger,
            minimum: NSInteger,
            neutral_value: NSInteger,
        ) -> Retained<Self>;

        #[unsafe(method(initWithName:key:description:initialValue:maximum:minimum:cameraValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_initialValue_maximum_minimum_cameraValue(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            initial_value: NSInteger,
            maximum: NSInteger,
            minimum: NSInteger,
            camera_value: NSInteger,
        ) -> Retained<Self>;

        #[unsafe(method(initWithName:key:description:initialValue:maximum:minimum:neutralValue:cameraValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_initialValue_maximum_minimum_neutralValue_cameraValue(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            initial_value: NSInteger,
            maximum: NSInteger,
            minimum: NSInteger,
            neutral_value: NSInteger,
            camera_value: NSInteger,
        ) -> Retained<Self>;

        /// The maximum value for this parameter.
        #[unsafe(method(maximumValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumValue(&self) -> NSInteger;

        /// The minimum value for this parameter.
        #[unsafe(method(minimumValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn minimumValue(&self) -> NSInteger;

        /// The initial value for this parameter as defined in the sequence metadata.
        #[unsafe(method(initialValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn initialValue(&self) -> NSInteger;

        /// Get or set the current value for this parameter.
        ///
        /// This property can be observed if appropriate in order to react to changes which would result in changes to the set of MERAWProcessingParameters vended by the extension.
        #[unsafe(method(currentValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn currentValue(&self) -> NSInteger;

        /// Setter for [`currentValue`][Self::currentValue].
        #[unsafe(method(setCurrentValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCurrentValue(&self, current_value: NSInteger);

        /// Return value indicates whether the MERAWProcessingIntegerParameter has an optional declared Neutral value.
        ///
        /// If the return value is YES and outNeutralValue is not nil, the value held by outNeutralValue will be set to the neutral value.
        /// If the return value is NO and outNeutralValue is not nil, the value held by outNeutralValue will be set to 0.
        #[unsafe(method(hasNeutralValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn hasNeutralValue(&self, out_neutral_value: *mut NSInteger) -> bool;

        /// Return value indicates whether the MERAWProcessingIntegerParameter has an optional declared Camera value.
        /// If the return value is YES and outCameraValue is not nil, the value held by outCameraValue will be set to the camera value.
        /// If the return value is NO and outCameraValue is not nil, the value held by outCameraValue will be set to 0.
        #[unsafe(method(hasCameraValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn hasCameraValue(&self, out_camera_value: *mut NSInteger) -> bool;
    );
}

/// Methods declared on superclass `NSObject`.
impl MERAWProcessingIntegerParameter {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaextension/merawprocessingfloatparameter?language=objc)
    #[unsafe(super(MERAWProcessingParameter, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MERAWProcessingFloatParameter;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for MERAWProcessingFloatParameter {}
);

impl MERAWProcessingFloatParameter {
    extern_methods!(
        #[unsafe(method(initWithName:key:description:initialValue:maximum:minimum:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_initialValue_maximum_minimum(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            initial_value: c_float,
            maximum: c_float,
            minimum: c_float,
        ) -> Retained<Self>;

        #[unsafe(method(initWithName:key:description:initialValue:maximum:minimum:neutralValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_initialValue_maximum_minimum_neutralValue(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            initial_value: c_float,
            maximum: c_float,
            minimum: c_float,
            neutral_value: c_float,
        ) -> Retained<Self>;

        #[unsafe(method(initWithName:key:description:initialValue:maximum:minimum:cameraValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_initialValue_maximum_minimum_cameraValue(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            initial_value: c_float,
            maximum: c_float,
            minimum: c_float,
            camera_value: c_float,
        ) -> Retained<Self>;

        #[unsafe(method(initWithName:key:description:initialValue:maximum:minimum:neutralValue:cameraValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_initialValue_maximum_minimum_neutralValue_cameraValue(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            initial_value: c_float,
            maximum: c_float,
            minimum: c_float,
            neutral_value: c_float,
            camera_value: c_float,
        ) -> Retained<Self>;

        /// The maximum value for this parameter.
        #[unsafe(method(maximumValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn maximumValue(&self) -> c_float;

        /// The minimum value for this parameter.
        #[unsafe(method(minimumValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn minimumValue(&self) -> c_float;

        /// The initial value for this parameter as defined in the sequence metadata.
        #[unsafe(method(initialValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn initialValue(&self) -> c_float;

        /// Get or set the current value for this parameter.
        ///
        /// This property can be observed if appropriate in order to react to changes which would result in changes to the set of MERAWProcessingParameters vended by the extension.
        #[unsafe(method(currentValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn currentValue(&self) -> c_float;

        /// Setter for [`currentValue`][Self::currentValue].
        #[unsafe(method(setCurrentValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCurrentValue(&self, current_value: c_float);

        /// Return value indicates whether the MERAWProcessingFloatParameter has an optional declared Neutral value.
        ///
        /// If the return value is YES and outNeutralValue is not nil, the value held by outNeutralValue will be set to the neutral value.
        /// If the return value is NO and outNeutralValue is not nil, the value held by outNeutralValue will be set to 0.
        #[unsafe(method(hasNeutralValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn hasNeutralValue(&self, out_neutral_value: *mut c_float) -> bool;

        /// Return value indicates whether the MERAWProcessingFloatParameter has an optional declared Camera value.
        ///
        /// If the return value is YES and outCameraValue is not nil, the value held by outCameraValue will be set to the camera value.
        /// If the return value is NO and outCameraValue is not nil, the value held by outCameraValue will be set to 0.
        #[unsafe(method(hasCameraValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn hasCameraValue(&self, out_camera_value: *mut c_float) -> bool;
    );
}

/// Methods declared on superclass `NSObject`.
impl MERAWProcessingFloatParameter {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaextension/merawprocessinglistparameter?language=objc)
    #[unsafe(super(MERAWProcessingParameter, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MERAWProcessingListParameter;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for MERAWProcessingListParameter {}
);

impl MERAWProcessingListParameter {
    extern_methods!(
        #[unsafe(method(initWithName:key:description:list:initialValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_list_initialValue(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            list_elements: &NSArray<MERAWProcessingListElementParameter>,
            initial_value: NSInteger,
        ) -> Retained<Self>;

        #[unsafe(method(initWithName:key:description:list:initialValue:neutralValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_list_initialValue_neutralValue(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            list_elements: &NSArray<MERAWProcessingListElementParameter>,
            initial_value: NSInteger,
            neutral_value: NSInteger,
        ) -> Retained<Self>;

        #[unsafe(method(initWithName:key:description:list:initialValue:cameraValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_list_initialValue_cameraValue(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            list_elements: &NSArray<MERAWProcessingListElementParameter>,
            initial_value: NSInteger,
            camera_value: NSInteger,
        ) -> Retained<Self>;

        #[unsafe(method(initWithName:key:description:list:initialValue:neutralValue:cameraValue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_key_description_list_initialValue_neutralValue_cameraValue(
            this: Allocated<Self>,
            name: &NSString,
            key: &NSString,
            description: &NSString,
            list_elements: &NSArray<MERAWProcessingListElementParameter>,
            initial_value: NSInteger,
            neutral_value: NSInteger,
            camera_value: NSInteger,
        ) -> Retained<Self>;

        /// The ordered array of MERAWProcessingListElementParameter which make up this list.
        #[unsafe(method(listElements))]
        #[unsafe(method_family = none)]
        pub unsafe fn listElements(&self)
            -> Retained<NSArray<MERAWProcessingListElementParameter>>;

        /// The initial value for this parameter as defined in the sequence metadata.  The value is the listElementID value of the MERAWProcessingListElementParameter for initial settings.
        #[unsafe(method(initialValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn initialValue(&self) -> NSInteger;

        /// Get or set the current value for this parameter.
        ///
        /// The value is the listElementID value of the selected MERAWProcessingListElementParameter.   This property can be observed if appropriate in order to react to changes which would result in changes to the set of MERAWProcessingParameters vended by the extension.
        #[unsafe(method(currentValue))]
        #[unsafe(method_family = none)]
        pub unsafe fn currentValue(&self) -> NSInteger;

        /// Setter for [`currentValue`][Self::currentValue].
        #[unsafe(method(setCurrentValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setCurrentValue(&self, current_value: NSInteger);

        /// Return value indicates whether the MERAWProcessingListParameter has an optional declared Neutral value.
        ///
        /// If the return value is YES and outNeutralValue is not nil, the value held by outNeutralValue will be set to the neutral value.
        /// If the return value is NO and outNeutralValue is not nil, the value held by outNeutralValue will be set to 0.
        #[unsafe(method(hasNeutralValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn hasNeutralValue(&self, out_neutral_value: *mut NSInteger) -> bool;

        /// Return value indicates whether the MERAWProcessingListParameter has an optional declared Camera value.
        ///
        /// If the return value is YES and outCameraValue is not nil, the value held by outCameraValue will be set to the camera value.
        /// If the return value is NO and outCameraValue is not nil, the value held by outCameraValue will be set to 0.
        #[unsafe(method(hasCameraValue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn hasCameraValue(&self, out_camera_value: *mut NSInteger) -> bool;
    );
}

/// Methods declared on superclass `NSObject`.
impl MERAWProcessingListParameter {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaextension/merawprocessingsubgroupparameter?language=objc)
    #[unsafe(super(MERAWProcessingParameter, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MERAWProcessingSubGroupParameter;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for MERAWProcessingSubGroupParameter {}
);

impl MERAWProcessingSubGroupParameter {
    extern_methods!(
        #[unsafe(method(initWithName:description:parameters:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithName_description_parameters(
            this: Allocated<Self>,
            name: &NSString,
            description: &NSString,
            parameters: &NSArray<MERAWProcessingParameter>,
        ) -> Retained<Self>;

        #[unsafe(method(subGroupParameters))]
        #[unsafe(method_family = none)]
        pub unsafe fn subGroupParameters(&self) -> Retained<NSArray<MERAWProcessingParameter>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl MERAWProcessingSubGroupParameter {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaextension/merawprocessorvaluesdidchangenotification?language=objc)
    pub static MERAWProcessorValuesDidChangeNotification: &'static NSNotificationName;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/mediaextension/merawprocessorreadyformoremediadatadidchangenotification?language=objc)
    pub static MERAWProcessorReadyForMoreMediaDataDidChangeNotification:
        &'static NSNotificationName;
}

extern_protocol!(
    /// The primary object for a MediaExtension RAW Processor, providing an interface for VideoToolbox to talk to the processor.
    ///
    /// The MERAWProcessor protocol provides an interface for the VideoToolbox to interact with MediaExtension RAW Processors. MERAWProcessor objects are always instantiated by the VideoToolbox. To create an MERAWProcessor, the VideoToolbox first creates an MERAWProcessorExtension object and calls its processorWithFormatDescription: method. MERAWProcessors should expect to run in a sandboxed process without access to the file system, network, or other kernel resources.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/mediaextension/merawprocessor?language=objc)
    pub unsafe trait MERAWProcessor: NSObjectProtocol {
        /// Requests that processor use the provided MTLDevice for Metal based processing.
        ///
        /// This optional property requests that the RAWProcessor use the MTLDevice corresponding to this ID for any Metal-based processing.
        /// This is optional and does not need to be implemented If the processor does not use Metal.
        #[optional]
        #[unsafe(method(metalDeviceRegistryID))]
        #[unsafe(method_family = none)]
        unsafe fn metalDeviceRegistryID(&self) -> u64;

        /// Setter for [`metalDeviceRegistryID`][Self::metalDeviceRegistryID].
        #[optional]
        #[unsafe(method(setMetalDeviceRegistryID:))]
        #[unsafe(method_family = none)]
        unsafe fn setMetalDeviceRegistryID(&self, metal_device_registry_id: u64);

        /// Returns the color-related CVImageBuffer keys and values that will be attachments to the output pixel buffers.
        ///
        /// This is an optional property. Only color-related keys from CVImageBuffer.h are permitted in the returned dictionary.
        #[optional]
        #[unsafe(method(outputColorAttachments))]
        #[unsafe(method_family = none)]
        unsafe fn outputColorAttachments(&self) -> Retained<NSDictionary<NSString, AnyObject>>;

        /// The metadata returned is a pre-formatted NSData that represents a fully-formed sidecar file, and should be compatible with the MediaExtension FormatReader.
        ///
        /// The metadata will contain the initial processing parameters from the sidecar file, along with any adjustments made on the RAW processor.
        #[optional]
        #[unsafe(method(metadataForSidecarFile))]
        #[unsafe(method_family = none)]
        unsafe fn metadataForSidecarFile(&self) -> Retained<NSData>;

        /// Provides a list of processing parameters which can be changed by the client of the VideoToolbox session to influence processing behavior.
        ///
        /// This property value is an array of MERAWProcessingParameters each of which describes the parameter and provides an interface where the processing parameter value may be modified.
        #[unsafe(method(processingParameters))]
        #[unsafe(method_family = none)]
        unsafe fn processingParameters(&self) -> Retained<NSArray<MERAWProcessingParameter>>;

        /// Indicates the readiness of the RAW Processor to accept more sample buffers.
        ///
        /// RAW Processors which operate asynchronously often have a fixed capacity for buffers in flight in the processor. This property allows the processor to signal to the VideoToolbox that its internal buffers are full and it cannot accept more samples at this time. The processor must use MERAWProcessorReadyForMoreMediaDataDidChangeNotification to notify the VideoToolbox when this property changes.
        #[unsafe(method(isReadyForMoreMediaData))]
        #[unsafe(method_family = none)]
        unsafe fn isReadyForMoreMediaData(&self) -> bool;

        #[cfg(all(feature = "block2", feature = "objc2-core-video"))]
        /// Requests that the extension process a video frame.
        ///
        /// The completionHandler block must be called for every processFrameFromImageBuffer call when processing is complete. The completion handler block should return either a processed pixelBuffer or an error.
        ///
        /// Parameter `inputFrame`: A CVPixelBuffer containing a video frame to be processed.
        ///
        /// Parameter `completionHandler`: The handler that will be invoked when a frame is processed and ready to be sent back to caller. This block does not need to be called in the order that frames were submitted.
        /// 'imageBuffer'
        /// Contains the processed frame if processing was successful, otherwise NULL. The imageBuffer must be allocated using MERAWProcessorPixelBufferManager.
        /// 'error'
        /// An NSError object that will contain error information if the method fails, otherwise nil. Errors outside of MediaExtensionErrorDomain will be reported as kVTRAWProcessorUnknownErr to the VTRAWProcessingSession client.
        #[unsafe(method(processFrameFromImageBuffer:completionHandler:))]
        #[unsafe(method_family = none)]
        unsafe fn processFrameFromImageBuffer_completionHandler(
            &self,
            input_frame: &CVPixelBuffer,
            completion_handler: &block2::DynBlock<dyn Fn(*mut CVPixelBuffer, *mut NSError)>,
        );
    }
);
