//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// An MXMetric subclass that encapsulates app disk space usage Metrics.
    ///
    /// Disk space is a shared resource on-device, and overusage of available disk space can negatively impact the customer experience.
    ///
    /// This Metric subclass contains properties that describe disk space usage in various locations in the apps container. Some properties also describe the number of files in common locations, and the types of files.
    ///
    /// The data contained in this Metric is computed as a daily snapshot, and should be used as a guide to optimize app disk space usage.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/metrickit/mxdiskspaceusagemetric?language=objc)
    #[unsafe(super(MXMetric, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MXMetric")]
    pub struct MXDiskSpaceUsageMetric;
);

#[cfg(feature = "MXMetric")]
extern_conformance!(
    unsafe impl NSCoding for MXDiskSpaceUsageMetric {}
);

#[cfg(feature = "MXMetric")]
extern_conformance!(
    unsafe impl NSObjectProtocol for MXDiskSpaceUsageMetric {}
);

#[cfg(feature = "MXMetric")]
extern_conformance!(
    unsafe impl NSSecureCoding for MXDiskSpaceUsageMetric {}
);

#[cfg(feature = "MXMetric")]
impl MXDiskSpaceUsageMetric {
    extern_methods!(
        /// Total fixed size used by the app.
        ///
        /// Dimensioned as NSUnitInformationStorage, base unit is bytes.
        #[unsafe(method(totalBinaryFileSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn totalBinaryFileSize(
            &self,
        ) -> Retained<NSMeasurement<NSUnitInformationStorage>>;

        /// Total count of fixed files owned by the app.
        #[unsafe(method(totalBinaryFileCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn totalBinaryFileCount(&self) -> NSInteger;

        /// Total data file size used by the app.
        ///
        /// Dimensioned as NSUnitInformationStorage, base unit is bytes.
        #[unsafe(method(totalDataFileSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn totalDataFileSize(&self)
            -> Retained<NSMeasurement<NSUnitInformationStorage>>;

        /// Total count of data files owned by the app.
        #[unsafe(method(totalDataFileCount))]
        #[unsafe(method_family = none)]
        pub unsafe fn totalDataFileCount(&self) -> NSInteger;

        /// Total file size contained within the apps cache folder.
        ///
        /// Dimensioned as NSUnitInformationStorage, base unit is bytes.
        #[unsafe(method(totalCacheFolderSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn totalCacheFolderSize(
            &self,
        ) -> Retained<NSMeasurement<NSUnitInformationStorage>>;

        /// Total clone size used by the app.
        ///
        /// Dimensioned as NSUnitInformationStorage, base unit is bytes.
        #[unsafe(method(totalCloneSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn totalCloneSize(&self) -> Retained<NSMeasurement<NSUnitInformationStorage>>;

        /// Total disk space used by the app.
        ///
        /// Dimensioned as NSUnitInformationStorage, base unit is bytes.
        #[unsafe(method(totalDiskSpaceUsedSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn totalDiskSpaceUsedSize(
            &self,
        ) -> Retained<NSMeasurement<NSUnitInformationStorage>>;

        /// Total disk space capacity of the device
        ///
        /// Dimensioned as NSUnitInformationStorage, base unit is bytes.
        #[unsafe(method(totalDiskSpaceCapacity))]
        #[unsafe(method_family = none)]
        pub unsafe fn totalDiskSpaceCapacity(
            &self,
        ) -> Retained<NSMeasurement<NSUnitInformationStorage>>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "MXMetric")]
impl MXDiskSpaceUsageMetric {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
