//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/clockkit/clkcomplicationdescriptor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CLKComplicationDescriptor;
);

unsafe impl Send for CLKComplicationDescriptor {}

unsafe impl Sync for CLKComplicationDescriptor {}

extern_conformance!(
    unsafe impl NSObjectProtocol for CLKComplicationDescriptor {}
);

impl CLKComplicationDescriptor {
    extern_methods!(
        /// Identifies this complication.
        #[unsafe(method(identifier))]
        #[unsafe(method_family = none)]
        pub unsafe fn identifier(&self) -> Retained<NSString>;

        /// The display name for this complication.
        /// This will be displayed when editing complications of a watch face.
        #[unsafe(method(displayName))]
        #[unsafe(method_family = none)]
        pub unsafe fn displayName(&self) -> Retained<NSString>;

        /// An array of `CLKComplicationFamily`s that this complication supports.
        #[unsafe(method(supportedFamilies))]
        #[unsafe(method_family = none)]
        pub unsafe fn supportedFamilies(&self) -> Retained<NSArray<NSNumber>>;

        /// An optional dictionary that can be used to pass information back to your extension via CLKComplication.
        #[unsafe(method(userInfo))]
        #[unsafe(method_family = none)]
        pub unsafe fn userInfo(&self) -> Option<Retained<NSDictionary>>;

        /// An optional user activity that can be used to pass information back to your extension via CLKComplication.
        /// This activity will be used to launch your app when the complication is tapped on.
        #[unsafe(method(userActivity))]
        #[unsafe(method_family = none)]
        pub unsafe fn userActivity(&self) -> Option<Retained<NSUserActivity>>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
        #[unsafe(method(initWithIdentifier:displayName:supportedFamilies:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithIdentifier_displayName_supportedFamilies(
            this: Allocated<Self>,
            identifier: &NSString,
            display_name: &NSString,
            supported_families: &NSArray<NSNumber>,
        ) -> Retained<Self>;

        #[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
        #[unsafe(method(initWithIdentifier:displayName:supportedFamilies:userInfo:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithIdentifier_displayName_supportedFamilies_userInfo(
            this: Allocated<Self>,
            identifier: &NSString,
            display_name: &NSString,
            supported_families: &NSArray<NSNumber>,
            user_info: &NSDictionary,
        ) -> Retained<Self>;

        #[deprecated = "On watchOS 9.0 or later, use WidgetKit instead"]
        #[unsafe(method(initWithIdentifier:displayName:supportedFamilies:userActivity:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithIdentifier_displayName_supportedFamilies_userActivity(
            this: Allocated<Self>,
            identifier: &NSString,
            display_name: &NSString,
            supported_families: &NSArray<NSNumber>,
            user_activity: &NSUserActivity,
        ) -> Retained<Self>;
    );
}
