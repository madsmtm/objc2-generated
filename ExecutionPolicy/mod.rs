// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "ExecutionPolicy", kind = "framework")]
extern "C" {}

#[cfg(feature = "EPDeveloperTool")]
#[path = "EPDeveloperTool.rs"]
mod __EPDeveloperTool;
#[cfg(feature = "EPErrors")]
#[path = "EPErrors.rs"]
mod __EPErrors;

#[cfg(feature = "EPDeveloperTool")]
pub use self::__EPDeveloperTool::EPDeveloperTool;
#[cfg(feature = "EPDeveloperTool")]
pub use self::__EPDeveloperTool::EPDeveloperToolStatus;
#[cfg(feature = "EPErrors")]
pub use self::__EPErrors::EPError;
#[cfg(feature = "EPErrors")]
pub use self::__EPErrors::EPErrorDomain;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/executionpolicy/epexecutionpolicy?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct EPExecutionPolicy;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for EPExecutionPolicy {}
);

impl EPExecutionPolicy {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(addPolicyExceptionForURL:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn addPolicyExceptionForURL_error(
            &self,
            url: &NSURL,
        ) -> Result<(), Retained<NSError>>;
    );
}

/// Methods declared on superclass `NSObject`.
impl EPExecutionPolicy {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
