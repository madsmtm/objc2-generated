//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::cell::UnsafeCell;
use core::ffi::*;
use core::marker::{PhantomData, PhantomPinned};
use core::ptr::NonNull;
#[cfg(feature = "objc2")]
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-audio-types")]
use objc2_core_audio_types::*;
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-video")]
use objc2_core_video::*;

use crate::*;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionerror_invalidparameter?language=objc)
pub const kCMFormatDescriptionError_InvalidParameter: OSStatus = -12710;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionerror_allocationfailed?language=objc)
pub const kCMFormatDescriptionError_AllocationFailed: OSStatus = -12711;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionerror_valuenotavailable?language=objc)
pub const kCMFormatDescriptionError_ValueNotAvailable: OSStatus = -12718;

/// A reference to a CMFormatDescription, a CF object describing media of a particular type (audio, video, muxed, etc).
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmformatdescription?language=objc)
#[repr(C)]
pub struct CMFormatDescription {
    inner: [u8; 0],
    _p: UnsafeCell<PhantomData<(*const UnsafeCell<()>, PhantomPinned)>>,
}

cf_type!(
    unsafe impl CMFormatDescription {}
);
#[cfg(feature = "objc2")]
cf_objc2_type!(
    unsafe impl RefEncode<"opaqueCMFormatDescription"> for CMFormatDescription {}
);

/// The type of media described by a CMFormatDescription.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmmediatype?language=objc)
pub type CMMediaType = FourCharCode;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmediatype_video?language=objc)
pub const kCMMediaType_Video: CMMediaType = 0x76696465;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmediatype_audio?language=objc)
pub const kCMMediaType_Audio: CMMediaType = 0x736f756e;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmediatype_muxed?language=objc)
pub const kCMMediaType_Muxed: CMMediaType = 0x6d757878;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmediatype_text?language=objc)
pub const kCMMediaType_Text: CMMediaType = 0x74657874;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmediatype_closedcaption?language=objc)
pub const kCMMediaType_ClosedCaption: CMMediaType = 0x636c6370;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmediatype_subtitle?language=objc)
pub const kCMMediaType_Subtitle: CMMediaType = 0x7362746c;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmediatype_timecode?language=objc)
pub const kCMMediaType_TimeCode: CMMediaType = 0x746d6364;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmediatype_metadata?language=objc)
pub const kCMMediaType_Metadata: CMMediaType = 0x6d657461;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmediatype_taggedbuffergroup?language=objc)
pub const kCMMediaType_TaggedBufferGroup: CMMediaType = 0x74626772;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmediatype_auxiliarypicture?language=objc)
pub const kCMMediaType_AuxiliaryPicture: CMMediaType = 0x61757876;

impl CMFormatDescription {
    /// Creates a generic CMFormatDescription object.
    ///
    /// Use this call to create any CMFormatDescription that is composed solely of extensions, and for which
    /// CFEqual() of a the extensions dictionaries is a valid test for Format Description equality.  Note that
    /// for some media types using this routine may result in creating a format description that is not fully
    /// specified for the purpose of media processing. Whenever possible, use media-specific format description
    /// creations routines such as CMVideoFormatDescriptionCreate, CMAudioFormatDescriptionCreate, etc.
    ///
    /// Returns: A new CMFormatDescription object.
    #[doc(alias = "CMFormatDescriptionCreate")]
    #[inline]
    pub unsafe fn create(
        allocator: Option<&CFAllocator>,
        media_type: CMMediaType,
        media_sub_type: FourCharCode,
        extensions: Option<&CFDictionary>,
        format_description_out: NonNull<*const CMFormatDescription>,
    ) -> OSStatus {
        extern "C-unwind" {
            fn CMFormatDescriptionCreate(
                allocator: Option<&CFAllocator>,
                media_type: CMMediaType,
                media_sub_type: FourCharCode,
                extensions: Option<&CFDictionary>,
                format_description_out: NonNull<*const CMFormatDescription>,
            ) -> OSStatus;
        }
        unsafe {
            CMFormatDescriptionCreate(
                allocator,
                media_type,
                media_sub_type,
                extensions,
                format_description_out,
            )
        }
    }
}

unsafe impl ConcreteType for CMFormatDescription {
    /// Returns the CFTypeID of CMFormatDescription objects.
    ///
    /// You can check if a CFTypeRef object is actually a CMFormatDescription
    /// by comparing CFGetTypeID(object) with CMFormatDescriptionGetTypeID().
    #[doc(alias = "CMFormatDescriptionGetTypeID")]
    #[inline]
    fn type_id() -> CFTypeID {
        extern "C-unwind" {
            fn CMFormatDescriptionGetTypeID() -> CFTypeID;
        }
        unsafe { CMFormatDescriptionGetTypeID() }
    }
}

impl CMFormatDescription {
    /// Compares two CMFormatDescription objects for equality.
    ///
    /// This calls CFEqual on the provided CMFormatDescription objects.
    /// In contrast to the CF call it is NULL safe.
    #[doc(alias = "CMFormatDescriptionEqual")]
    #[inline]
    pub unsafe fn equal(
        format_description: Option<&CMFormatDescription>,
        other_format_description: Option<&CMFormatDescription>,
    ) -> bool {
        extern "C-unwind" {
            fn CMFormatDescriptionEqual(
                format_description: Option<&CMFormatDescription>,
                other_format_description: Option<&CMFormatDescription>,
            ) -> Boolean;
        }
        let ret = unsafe { CMFormatDescriptionEqual(format_description, other_format_description) };
        ret != 0
    }

    /// Compares two CMFormatDescription objects for equality, ignoring differences in specified lists of format description extension keys and sample description extension keys.
    ///
    /// This function is NULL safe.
    /// If any keys are passed, kCMFormatDescriptionExtension_VerbatimSampleDescription
    /// and kCMFormatDescriptionExtension_VerbatimISOSampleEntry will also be automatically
    /// ignored for the purpose of comparison.
    ///
    /// Parameter `formatDescriptionExtensionKeysToIgnore`: Either a single format description extension key (CFString)
    /// or a CFArray of such keys.
    ///
    /// Parameter `sampleDescriptionExtensionAtomKeysToIgnore`: Either a single sample description extension atom key (four-character CFString)
    /// or a CFArray of such keys.
    /// See kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms.
    #[doc(alias = "CMFormatDescriptionEqualIgnoringExtensionKeys")]
    #[inline]
    pub unsafe fn equal_ignoring_extension_keys(
        format_description: Option<&CMFormatDescription>,
        other_format_description: Option<&CMFormatDescription>,
        format_description_extension_keys_to_ignore: Option<&CFType>,
        sample_description_extension_atom_keys_to_ignore: Option<&CFType>,
    ) -> bool {
        extern "C-unwind" {
            fn CMFormatDescriptionEqualIgnoringExtensionKeys(
                format_description: Option<&CMFormatDescription>,
                other_format_description: Option<&CMFormatDescription>,
                format_description_extension_keys_to_ignore: Option<&CFType>,
                sample_description_extension_atom_keys_to_ignore: Option<&CFType>,
            ) -> Boolean;
        }
        let ret = unsafe {
            CMFormatDescriptionEqualIgnoringExtensionKeys(
                format_description,
                other_format_description,
                format_description_extension_keys_to_ignore,
                sample_description_extension_atom_keys_to_ignore,
            )
        };
        ret != 0
    }

    /// Returns the media type of a CMFormatDescription.
    ///
    /// For example, returns kCMMediaType_Audio for a description of an audio stream.
    ///
    /// Returns: The media type of the CMFormatDescription.
    #[doc(alias = "CMFormatDescriptionGetMediaType")]
    #[inline]
    pub unsafe fn media_type(self: &CMFormatDescription) -> CMMediaType {
        extern "C-unwind" {
            fn CMFormatDescriptionGetMediaType(desc: &CMFormatDescription) -> CMMediaType;
        }
        unsafe { CMFormatDescriptionGetMediaType(self) }
    }

    /// Returns the media subtype of a CMFormatDescription.
    ///
    /// The media subtype is defined in a media-specific way.
    /// For audio streams, the media subtype is the asbd.mFormatID.
    /// For video streams, the media subtype is the video codec type.
    /// For muxed streams, it is the format of the muxed stream.
    /// For example, 'aac ' is returned for a description of an AAC audio
    /// stream, 'avc1' is returned for a description of an H.264 video
    /// stream, and 'mp2t' is returned for a description of an MPEG-2
    /// transport (muxed) stream.  If a particular type of media stream
    /// does not have subtypes, this API may return 0.
    ///
    /// Returns: The media subtype of the CMFormatDescription.
    #[doc(alias = "CMFormatDescriptionGetMediaSubType")]
    #[inline]
    pub unsafe fn media_sub_type(self: &CMFormatDescription) -> FourCharCode {
        extern "C-unwind" {
            fn CMFormatDescriptionGetMediaSubType(desc: &CMFormatDescription) -> FourCharCode;
        }
        unsafe { CMFormatDescriptionGetMediaSubType(self) }
    }

    /// Returns an immutable dictionary containing all the extensions of a CMFormatDescription.
    ///
    /// If there are no extensions, NULL is returned. Extensions dictionaries are valid property list
    /// objects.  This means that dictionary keys are all CFStrings, and the values are all either
    /// CFNumber, CFString, CFBoolean, CFArray, CFDictionary, CFDate, or CFData. The returned
    /// dictionary is not retained by this call, so clients are required to retain it if they
    /// need to keep it longer.
    ///
    /// Returns: An immutable dictionary containing all the extensions of the CMFormatDescription.  May be NULL.
    #[doc(alias = "CMFormatDescriptionGetExtensions")]
    #[inline]
    pub unsafe fn extensions(self: &CMFormatDescription) -> Option<CFRetained<CFDictionary>> {
        extern "C-unwind" {
            fn CMFormatDescriptionGetExtensions(
                desc: &CMFormatDescription,
            ) -> Option<NonNull<CFDictionary>>;
        }
        let ret = unsafe { CMFormatDescriptionGetExtensions(self) };
        ret.map(|ret| unsafe { CFRetained::retain(ret) })
    }
}

extern "C" {
    /// kCMFormatDescriptionExtension_OriginalCompressionSettings
    ///
    /// This extension contains a media-type-specific dictionary of settings used to produce a compressed media buffer.
    ///
    /// This extension is valid for format descriptions of all media types, but the contents of the dictionary are defined
    /// in a media-specific way.  The dictionary and its contents are valid property list objects. This means that
    /// dictionary keys are all CFStrings, and the values are all either CFNumber, CFString, CFBoolean, CFArray,
    /// CFDictionary, CFDate, or CFData.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_originalcompressionsettings?language=objc)
    pub static kCMFormatDescriptionExtension_OriginalCompressionSettings: &'static CFString;
}

extern "C" {
    /// kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms
    ///
    /// Sample description extension atoms that were not translated into other entries in the extensions dictionary.
    ///
    /// This key is used by sample description bridges to hold sample description
    /// extension atoms that they do not recognize.
    /// The extension is a CFDictionary mapping CFStrings of the four-char-code atom types
    /// to either CFDatas containing the atom payload or (to represent multiple atoms of a
    /// specific type) to CFArrays of CFData containing those payloads.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_sampledescriptionextensionatoms?language=objc)
    pub static kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms: &'static CFString;
}

extern "C" {
    /// kCMFormatDescriptionExtension_VerbatimSampleDescription
    ///
    /// Preserves the original SampleDescription data.
    ///
    /// This extension is used to ensure that roundtrips from sample descriptions
    /// to CMFormatDescriptions back to sample descriptions preserve the exact original
    /// sample descriptions.
    /// IMPORTANT: If you make a modified clone of a CMFormatDescription, you must
    /// delete this extension from the clone, or your modifications could be lost.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_verbatimsampledescription?language=objc)
    pub static kCMFormatDescriptionExtension_VerbatimSampleDescription: &'static CFString;
}

extern "C" {
    /// kCMFormatDescriptionExtension_VerbatimISOSampleEntry
    ///
    /// Preserves the original ISOSampleEntry data.
    ///
    /// This extension is used to ensure that roundtrips from ISO Sample Entry (ie. AudioSampleEntry or VisualSampleEntry)
    /// to CMFormatDescriptions back to ISO Sample Entry preserve the exact original
    /// sample descriptions.
    /// IMPORTANT: If you make a modified clone of a CMFormatDescription, you must
    /// delete this extension from the clone, or your modifications could be lost.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_verbatimisosampleentry?language=objc)
    pub static kCMFormatDescriptionExtension_VerbatimISOSampleEntry: &'static CFString;
}

impl CMFormatDescription {
    /// Returns the specified extension of a CMFormatDescription.
    ///
    /// If the named extension does not exist, NULL is returned. The extension is always a valid
    /// property list object. This means that it will be either a CFNumber, CFString, CFBoolean,
    /// CFArray, CFDictionary, CFDate, or CFData. If it is a CFDictionary, the keys will all be
    /// CFStrings. The returned extension is not retained by this call, so it is only valid as
    /// long as the CMFormatDescription is valid. Clients are required to retain it if they
    /// need to keep it longer.
    ///
    /// Returns: The specified extension of the CMFormatDescription.  May be NULL.
    #[doc(alias = "CMFormatDescriptionGetExtension")]
    #[inline]
    pub unsafe fn extension(
        self: &CMFormatDescription,
        extension_key: &CFString,
    ) -> Option<CFRetained<CFPropertyList>> {
        extern "C-unwind" {
            fn CMFormatDescriptionGetExtension(
                desc: &CMFormatDescription,
                extension_key: &CFString,
            ) -> Option<NonNull<CFPropertyList>>;
        }
        let ret = unsafe { CMFormatDescriptionGetExtension(self, extension_key) };
        ret.map(|ret| unsafe { CFRetained::retain(ret) })
    }
}

/// Four-character codes identifying the code type. Certain codec types are also audio formats.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmaudiocodectype?language=objc)
pub type CMAudioCodecType = FourCharCode;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmaudiocodectype_aac_lcprotected?language=objc)
pub const kCMAudioCodecType_AAC_LCProtected: CMAudioCodecType = 0x70616163;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmaudiocodectype_aac_audibleprotected?language=objc)
pub const kCMAudioCodecType_AAC_AudibleProtected: CMAudioCodecType = 0x61616163;

/// SYnonym type used for manipulating audio CMFormatDescriptions
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmaudioformatdescription?language=objc)
pub type CMAudioFormatDescription = CMFormatDescription;

extern "C-unwind" {
    /// Creates a format description for an audio media stream.
    ///
    /// The ASBD is required, the channel layout is optional, and the magic cookie is required
    /// for some compression formats (and must be NULL for all others). The caller owns the
    /// returned CMFormatDescription, and must release it when done with it.  The ASBD,
    /// magic cookie, channel layout, and extensions are all copied (the extensions are
    /// deep-copied).  The caller can deallocate them or re-use them after making this call.
    #[cfg(feature = "objc2-core-audio-types")]
    pub fn CMAudioFormatDescriptionCreate(
        allocator: Option<&CFAllocator>,
        asbd: NonNull<AudioStreamBasicDescription>,
        layout_size: usize,
        layout: *const AudioChannelLayout,
        magic_cookie_size: usize,
        magic_cookie: *const c_void,
        extensions: Option<&CFDictionary>,
        format_description_out: NonNull<*const CMAudioFormatDescription>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Returns a read-only pointer to the AudioStreamBasicDescription inside an audio CMFormatDescription.
    ///
    /// See CoreAudioTypes.h for the definition of AudioStreamBasicDescription.
    /// This API is specific to audio format descriptions, and will return NULL if
    /// used with a non-audio format descriptions.
    #[cfg(feature = "objc2-core-audio-types")]
    pub fn CMAudioFormatDescriptionGetStreamBasicDescription(
        desc: &CMAudioFormatDescription,
    ) -> *const AudioStreamBasicDescription;
}

extern "C-unwind" {
    /// Returns a read-only pointer to (and size of) the magic cookie inside an audio CMFormatDescription.
    ///
    /// The magic cookie is a completely opaque piece of data, written and read only by
    /// the codec itself. A magic cookie is only present for codecs that require it;
    /// this API will return NULL if one does not exist. This API is specific to audio
    /// format descriptions, and will return NULL if called with a non-audio format
    /// description.
    ///
    /// Returns: A read-only pointer to the magic cookie inside the audio format description.
    pub fn CMAudioFormatDescriptionGetMagicCookie(
        desc: &CMAudioFormatDescription,
        size_out: *mut usize,
    ) -> *const c_void;
}

extern "C-unwind" {
    /// Returns a read-only pointer to (and size of) the AudioChannelLayout inside an audio CMFormatDescription.
    ///
    /// See CoreAudioTypes.h for the definition of AudioChannelLayout.
    /// AudioChannelLayouts are optional; this API will return NULL if
    /// one does not exist. This API is specific to audio format
    /// descriptions, and will return NULL if called with a non-audio
    /// format description.
    ///
    /// Returns: A read-only pointer to the AudioChannelLayout inside the audio format description.
    #[cfg(feature = "objc2-core-audio-types")]
    pub fn CMAudioFormatDescriptionGetChannelLayout(
        desc: &CMAudioFormatDescription,
        size_out: *mut usize,
    ) -> *const AudioChannelLayout;
}

extern "C-unwind" {
    /// Returns a read-only pointer to (and size of) the array of AudioFormatListItem structs inside an audio CMFormatDescription.
    ///
    /// This property is analogous to kAudioFormatProperty_FormatList (See AudioFormat.h) and follows
    /// its conventions.  Namely, formats are returned in order from the most to least 'rich', with
    /// channel count taking the highest precedence followed by sample rate.
    /// This API is specific to audio format descriptions, and will return NULL if called with a non-audio
    /// format description.
    ///
    /// Returns: A read-only pointer to the array of AudioFormatListItem structs inside the audio format description.
    #[cfg(feature = "objc2-core-audio-types")]
    pub fn CMAudioFormatDescriptionGetFormatList(
        desc: &CMAudioFormatDescription,
        size_out: *mut usize,
    ) -> *const AudioFormatListItem;
}

extern "C-unwind" {
    /// Returns a read-only pointer to the appropriate AudioFormatListItem inside an audio CMFormatDescription.
    ///
    /// This property performs validation on the formats represented by the audio in the description.  It
    /// finds the first AudioFormatListItem for which the current system has a valid decoder.
    /// This API is specific to audio format descriptions, and will return NULL if called with a non-audio
    /// format description.  It may also return NULL if there is no suitable decoder available on the
    /// current system for this audio format.
    ///
    /// Returns: A read-only pointer to the appropriate AudioFormatListItem inside the audio format description.
    #[cfg(feature = "objc2-core-audio-types")]
    pub fn CMAudioFormatDescriptionGetRichestDecodableFormat(
        desc: &CMAudioFormatDescription,
    ) -> *const AudioFormatListItem;
}

extern "C-unwind" {
    /// Returns a read-only pointer to the appropriate AudioFormatListItem inside an audio CMFormatDescription.
    ///
    /// This property returns a pointer to the last AudioFormatListItem in the kAudioFormatProperty_FormatList
    /// (see AudioFormat.h).  This API is specific to audio format descriptions, and will return NULL if called
    /// with a non-audio format description.
    ///
    /// Returns: A read-only pointer to the appropriate AudioFormatListItem inside the audio format description.
    #[cfg(feature = "objc2-core-audio-types")]
    pub fn CMAudioFormatDescriptionGetMostCompatibleFormat(
        desc: &CMAudioFormatDescription,
    ) -> *const AudioFormatListItem;
}

extern "C-unwind" {
    /// Creates a summary audio format description from an array of audio format descriptions.
    ///
    /// The summary format description will be canonical LPCM and deep enough in
    /// sample rate, channel layout and channel count to sensibly contain the result of decoding
    /// and mixing the constituent format descriptions.
    pub fn CMAudioFormatDescriptionCreateSummary(
        allocator: Option<&CFAllocator>,
        format_description_array: &CFArray,
        flags: u32,
        format_description_out: NonNull<*const CMAudioFormatDescription>,
    ) -> OSStatus;
}

/// Mask bits passed to (and returned from) CMAudioFormatDescriptionEqual,
/// representing various parts of an audio format description.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmaudioformatdescriptionmask?language=objc)
pub type CMAudioFormatDescriptionMask = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmaudioformatdescriptionmask_streambasicdescription?language=objc)
pub const kCMAudioFormatDescriptionMask_StreamBasicDescription: CMAudioFormatDescriptionMask =
    1 << 0;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmaudioformatdescriptionmask_magiccookie?language=objc)
pub const kCMAudioFormatDescriptionMask_MagicCookie: CMAudioFormatDescriptionMask = 1 << 1;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmaudioformatdescriptionmask_channellayout?language=objc)
pub const kCMAudioFormatDescriptionMask_ChannelLayout: CMAudioFormatDescriptionMask = 1 << 2;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmaudioformatdescriptionmask_extensions?language=objc)
pub const kCMAudioFormatDescriptionMask_Extensions: CMAudioFormatDescriptionMask = 1 << 3;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmaudioformatdescriptionmask_all?language=objc)
pub const kCMAudioFormatDescriptionMask_All: CMAudioFormatDescriptionMask =
    kCMAudioFormatDescriptionMask_StreamBasicDescription
        | kCMAudioFormatDescriptionMask_MagicCookie
        | kCMAudioFormatDescriptionMask_ChannelLayout
        | kCMAudioFormatDescriptionMask_Extensions;

/// Evaluates equality for the specified parts of two audio format descriptions.
///
/// Bits in equalityMask specify the caller's interest in the equality of various parts of the descriptions.
/// Bits set and returned in equalityMaskOut represent the subset of those parts that are equal.
/// If there is any sort of error that prevents the comparison from occurring, false will be returned, and
/// all bits in equalityMaskOut will be cleared. If you pass kCMAudioFormatDescriptionMask_All in equalityMask,
/// and NULL for equalityMaskOut, this API is equivalent to CFEqual(desc1, desc2).
///
/// On releases up to macOS 12, iOS 15, tvOS 15 and watchOS 8, the kCMAudioFormatDescriptionMask_Extensions
/// flag was ignored in equalityMask. So this API always treated two audio format descriptions as equal even
/// when they had different extensions.
///
/// Starting with macOS 13, iOS 16, tvOS 16 and watchOS 9, kCMAudioFormatDescriptionMask_Extensions is correctly
/// accounted for when determining equality of two audio format descriptions. This also affects CFEqual(desc1, desc2)
/// as it will return false when two audio format descriptions have different extensions.
///
///
/// Returns: The result of the comparison.  True if all parts in which the caller is interested are equal.
/// False if any of the parts in which the caller is interested are not equal.
#[inline]
pub unsafe extern "C-unwind" fn CMAudioFormatDescriptionEqual(
    format_description: &CMAudioFormatDescription,
    other_format_description: &CMAudioFormatDescription,
    equality_mask: CMAudioFormatDescriptionMask,
    equality_mask_out: *mut CMAudioFormatDescriptionMask,
) -> bool {
    extern "C-unwind" {
        fn CMAudioFormatDescriptionEqual(
            format_description: &CMAudioFormatDescription,
            other_format_description: &CMAudioFormatDescription,
            equality_mask: CMAudioFormatDescriptionMask,
            equality_mask_out: *mut CMAudioFormatDescriptionMask,
        ) -> Boolean;
    }
    let ret = unsafe {
        CMAudioFormatDescriptionEqual(
            format_description,
            other_format_description,
            equality_mask,
            equality_mask_out,
        )
    };
    ret != 0
}

/// Synonym type used for manipulating video CMFormatDescriptions
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmvideoformatdescription?language=objc)
pub type CMVideoFormatDescription = CMFormatDescription;

/// Four-character codes identifying the pixel format. Only some codec types are pixel formats.
/// In general, CoreVideo CVPixelFormatType constants may be used too.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmpixelformattype?language=objc)
pub type CMPixelFormatType = FourCharCode;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_32argb?language=objc)
pub const kCMPixelFormat_32ARGB: CMPixelFormatType = 32;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_32bgra?language=objc)
pub const kCMPixelFormat_32BGRA: CMPixelFormatType = 0x42475241;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_24rgb?language=objc)
pub const kCMPixelFormat_24RGB: CMPixelFormatType = 24;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_16be555?language=objc)
pub const kCMPixelFormat_16BE555: CMPixelFormatType = 16;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_16be565?language=objc)
pub const kCMPixelFormat_16BE565: CMPixelFormatType = 0x42353635;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_16le555?language=objc)
pub const kCMPixelFormat_16LE555: CMPixelFormatType = 0x4c353535;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_16le565?language=objc)
pub const kCMPixelFormat_16LE565: CMPixelFormatType = 0x4c353635;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_16le5551?language=objc)
pub const kCMPixelFormat_16LE5551: CMPixelFormatType = 0x35353531;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_422ypcbcr8?language=objc)
pub const kCMPixelFormat_422YpCbCr8: CMPixelFormatType = 0x32767579;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_422ypcbcr8_yuvs?language=objc)
pub const kCMPixelFormat_422YpCbCr8_yuvs: CMPixelFormatType = 0x79757673;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_444ypcbcr8?language=objc)
pub const kCMPixelFormat_444YpCbCr8: CMPixelFormatType = 0x76333038;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_4444ypcbcra8?language=objc)
pub const kCMPixelFormat_4444YpCbCrA8: CMPixelFormatType = 0x76343038;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_422ypcbcr16?language=objc)
pub const kCMPixelFormat_422YpCbCr16: CMPixelFormatType = 0x76323136;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_422ypcbcr10?language=objc)
pub const kCMPixelFormat_422YpCbCr10: CMPixelFormatType = 0x76323130;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_444ypcbcr10?language=objc)
pub const kCMPixelFormat_444YpCbCr10: CMPixelFormatType = 0x76343130;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmpixelformat_8indexedgray_whiteiszero?language=objc)
pub const kCMPixelFormat_8IndexedGray_WhiteIsZero: CMPixelFormatType = 0x00000028;

/// Four-character codes identifying the video codec. Certain codec types are also pixel formats.
/// Note: There is no kCMVideoCodecType_Raw -- use the appropriate pixel format type as the codec type.
///
///
///
///
///
///
///
///
///
///
///
///
/// IMPORTANT NOTE: this constant is used to select the appropriate encoder, but is NOT used on the encoded content,
/// which is backwards compatible and hence uses 'hvc1' as its codec type.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmvideocodectype?language=objc)
pub type CMVideoCodecType = FourCharCode;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_422ypcbcr8?language=objc)
pub const kCMVideoCodecType_422YpCbCr8: CMVideoCodecType = kCMPixelFormat_422YpCbCr8;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_animation?language=objc)
pub const kCMVideoCodecType_Animation: CMVideoCodecType = 0x726c6520;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_cinepak?language=objc)
pub const kCMVideoCodecType_Cinepak: CMVideoCodecType = 0x63766964;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_jpeg?language=objc)
pub const kCMVideoCodecType_JPEG: CMVideoCodecType = 0x6a706567;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_jpeg_opendml?language=objc)
pub const kCMVideoCodecType_JPEG_OpenDML: CMVideoCodecType = 0x646d6231;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_jpeg_xl?language=objc)
pub const kCMVideoCodecType_JPEG_XL: CMVideoCodecType = 0x6a786c63;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_sorensonvideo?language=objc)
pub const kCMVideoCodecType_SorensonVideo: CMVideoCodecType = 0x53565131;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_sorensonvideo3?language=objc)
pub const kCMVideoCodecType_SorensonVideo3: CMVideoCodecType = 0x53565133;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_h263?language=objc)
pub const kCMVideoCodecType_H263: CMVideoCodecType = 0x68323633;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_h264?language=objc)
pub const kCMVideoCodecType_H264: CMVideoCodecType = 0x61766331;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_hevc?language=objc)
pub const kCMVideoCodecType_HEVC: CMVideoCodecType = 0x68766331;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_hevcwithalpha?language=objc)
pub const kCMVideoCodecType_HEVCWithAlpha: CMVideoCodecType = 0x6d757861;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_dolbyvisionhevc?language=objc)
pub const kCMVideoCodecType_DolbyVisionHEVC: CMVideoCodecType = 0x64766831;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_mpeg4video?language=objc)
pub const kCMVideoCodecType_MPEG4Video: CMVideoCodecType = 0x6d703476;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_mpeg2video?language=objc)
pub const kCMVideoCodecType_MPEG2Video: CMVideoCodecType = 0x6d703276;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_mpeg1video?language=objc)
pub const kCMVideoCodecType_MPEG1Video: CMVideoCodecType = 0x6d703176;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_vp9?language=objc)
pub const kCMVideoCodecType_VP9: CMVideoCodecType = 0x76703039;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_dvcntsc?language=objc)
pub const kCMVideoCodecType_DVCNTSC: CMVideoCodecType = 0x64766320;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_dvcpal?language=objc)
pub const kCMVideoCodecType_DVCPAL: CMVideoCodecType = 0x64766370;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_dvcpropal?language=objc)
pub const kCMVideoCodecType_DVCProPAL: CMVideoCodecType = 0x64767070;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_dvcpro50ntsc?language=objc)
pub const kCMVideoCodecType_DVCPro50NTSC: CMVideoCodecType = 0x6476356e;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_dvcpro50pal?language=objc)
pub const kCMVideoCodecType_DVCPro50PAL: CMVideoCodecType = 0x64763570;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_dvcprohd720p60?language=objc)
pub const kCMVideoCodecType_DVCPROHD720p60: CMVideoCodecType = 0x64766870;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_dvcprohd720p50?language=objc)
pub const kCMVideoCodecType_DVCPROHD720p50: CMVideoCodecType = 0x64766871;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_dvcprohd1080i60?language=objc)
pub const kCMVideoCodecType_DVCPROHD1080i60: CMVideoCodecType = 0x64766836;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_dvcprohd1080i50?language=objc)
pub const kCMVideoCodecType_DVCPROHD1080i50: CMVideoCodecType = 0x64766835;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_dvcprohd1080p30?language=objc)
pub const kCMVideoCodecType_DVCPROHD1080p30: CMVideoCodecType = 0x64766833;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_dvcprohd1080p25?language=objc)
pub const kCMVideoCodecType_DVCPROHD1080p25: CMVideoCodecType = 0x64766832;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_appleprores4444xq?language=objc)
pub const kCMVideoCodecType_AppleProRes4444XQ: CMVideoCodecType = 0x61703478;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_appleprores4444?language=objc)
pub const kCMVideoCodecType_AppleProRes4444: CMVideoCodecType = 0x61703468;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_appleprores422hq?language=objc)
pub const kCMVideoCodecType_AppleProRes422HQ: CMVideoCodecType = 0x61706368;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_appleprores422?language=objc)
pub const kCMVideoCodecType_AppleProRes422: CMVideoCodecType = 0x6170636e;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_appleprores422lt?language=objc)
pub const kCMVideoCodecType_AppleProRes422LT: CMVideoCodecType = 0x61706373;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_appleprores422proxy?language=objc)
pub const kCMVideoCodecType_AppleProRes422Proxy: CMVideoCodecType = 0x6170636f;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_appleproresraw?language=objc)
pub const kCMVideoCodecType_AppleProResRAW: CMVideoCodecType = 0x6170726e;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_appleproresrawhq?language=objc)
pub const kCMVideoCodecType_AppleProResRAWHQ: CMVideoCodecType = 0x61707268;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_disparityhevc?language=objc)
pub const kCMVideoCodecType_DisparityHEVC: CMVideoCodecType = 0x64697368;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_depthhevc?language=objc)
pub const kCMVideoCodecType_DepthHEVC: CMVideoCodecType = 0x64657068;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmvideocodectype_av1?language=objc)
pub const kCMVideoCodecType_AV1: CMVideoCodecType = 0x61763031;

/// Type used for video dimensions, units are pixels
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmvideodimensions?language=objc)
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct CMVideoDimensions {
    pub width: i32,
    pub height: i32,
}

#[cfg(feature = "objc2")]
unsafe impl Encode for CMVideoDimensions {
    const ENCODING: Encoding = Encoding::Struct("?", &[<i32>::ENCODING, <i32>::ENCODING]);
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for CMVideoDimensions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_formatname?language=objc)
    pub static kCMFormatDescriptionExtension_FormatName: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_depth?language=objc)
    pub static kCMFormatDescriptionExtension_Depth: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_cleanaperture?language=objc)
    pub static kCMFormatDescriptionExtension_CleanAperture: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionkey_cleanaperturewidth?language=objc)
    pub static kCMFormatDescriptionKey_CleanApertureWidth: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionkey_cleanapertureheight?language=objc)
    pub static kCMFormatDescriptionKey_CleanApertureHeight: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionkey_cleanaperturehorizontaloffset?language=objc)
    pub static kCMFormatDescriptionKey_CleanApertureHorizontalOffset: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionkey_cleanapertureverticaloffset?language=objc)
    pub static kCMFormatDescriptionKey_CleanApertureVerticalOffset: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionkey_cleanaperturewidthrational?language=objc)
    pub static kCMFormatDescriptionKey_CleanApertureWidthRational: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionkey_cleanapertureheightrational?language=objc)
    pub static kCMFormatDescriptionKey_CleanApertureHeightRational: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionkey_cleanaperturehorizontaloffsetrational?language=objc)
    pub static kCMFormatDescriptionKey_CleanApertureHorizontalOffsetRational: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionkey_cleanapertureverticaloffsetrational?language=objc)
    pub static kCMFormatDescriptionKey_CleanApertureVerticalOffsetRational: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_fieldcount?language=objc)
    pub static kCMFormatDescriptionExtension_FieldCount: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_fielddetail?language=objc)
    pub static kCMFormatDescriptionExtension_FieldDetail: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionfielddetail_temporaltopfirst?language=objc)
    pub static kCMFormatDescriptionFieldDetail_TemporalTopFirst: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionfielddetail_temporalbottomfirst?language=objc)
    pub static kCMFormatDescriptionFieldDetail_TemporalBottomFirst: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionfielddetail_spatialfirstlineearly?language=objc)
    pub static kCMFormatDescriptionFieldDetail_SpatialFirstLineEarly: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionfielddetail_spatialfirstlinelate?language=objc)
    pub static kCMFormatDescriptionFieldDetail_SpatialFirstLineLate: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_pixelaspectratio?language=objc)
    pub static kCMFormatDescriptionExtension_PixelAspectRatio: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionkey_pixelaspectratiohorizontalspacing?language=objc)
    pub static kCMFormatDescriptionKey_PixelAspectRatioHorizontalSpacing: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionkey_pixelaspectratioverticalspacing?language=objc)
    pub static kCMFormatDescriptionKey_PixelAspectRatioVerticalSpacing: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_colorprimaries?language=objc)
    pub static kCMFormatDescriptionExtension_ColorPrimaries: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncolorprimaries_itu_r_709_2?language=objc)
    pub static kCMFormatDescriptionColorPrimaries_ITU_R_709_2: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncolorprimaries_ebu_3213?language=objc)
    pub static kCMFormatDescriptionColorPrimaries_EBU_3213: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncolorprimaries_smpte_c?language=objc)
    pub static kCMFormatDescriptionColorPrimaries_SMPTE_C: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncolorprimaries_dci_p3?language=objc)
    pub static kCMFormatDescriptionColorPrimaries_DCI_P3: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncolorprimaries_p3_d65?language=objc)
    pub static kCMFormatDescriptionColorPrimaries_P3_D65: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncolorprimaries_itu_r_2020?language=objc)
    pub static kCMFormatDescriptionColorPrimaries_ITU_R_2020: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncolorprimaries_p22?language=objc)
    pub static kCMFormatDescriptionColorPrimaries_P22: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_transferfunction?language=objc)
    pub static kCMFormatDescriptionExtension_TransferFunction: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptiontransferfunction_itu_r_709_2?language=objc)
    pub static kCMFormatDescriptionTransferFunction_ITU_R_709_2: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptiontransferfunction_smpte_240m_1995?language=objc)
    pub static kCMFormatDescriptionTransferFunction_SMPTE_240M_1995: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptiontransferfunction_usegamma?language=objc)
    pub static kCMFormatDescriptionTransferFunction_UseGamma: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptiontransferfunction_itu_r_2020?language=objc)
    pub static kCMFormatDescriptionTransferFunction_ITU_R_2020: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptiontransferfunction_smpte_st_428_1?language=objc)
    pub static kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptiontransferfunction_smpte_st_2084_pq?language=objc)
    pub static kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptiontransferfunction_itu_r_2100_hlg?language=objc)
    pub static kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptiontransferfunction_linear?language=objc)
    pub static kCMFormatDescriptionTransferFunction_Linear: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptiontransferfunction_srgb?language=objc)
    pub static kCMFormatDescriptionTransferFunction_sRGB: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_gammalevel?language=objc)
    pub static kCMFormatDescriptionExtension_GammaLevel: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_ycbcrmatrix?language=objc)
    pub static kCMFormatDescriptionExtension_YCbCrMatrix: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionycbcrmatrix_itu_r_709_2?language=objc)
    pub static kCMFormatDescriptionYCbCrMatrix_ITU_R_709_2: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionycbcrmatrix_itu_r_601_4?language=objc)
    pub static kCMFormatDescriptionYCbCrMatrix_ITU_R_601_4: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionycbcrmatrix_smpte_240m_1995?language=objc)
    pub static kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionycbcrmatrix_itu_r_2020?language=objc)
    pub static kCMFormatDescriptionYCbCrMatrix_ITU_R_2020: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_fullrangevideo?language=objc)
    pub static kCMFormatDescriptionExtension_FullRangeVideo: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_iccprofile?language=objc)
    pub static kCMFormatDescriptionExtension_ICCProfile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_bytesperrow?language=objc)
    pub static kCMFormatDescriptionExtension_BytesPerRow: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_chromalocationtopfield?language=objc)
    pub static kCMFormatDescriptionExtension_ChromaLocationTopField: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_chromalocationbottomfield?language=objc)
    pub static kCMFormatDescriptionExtension_ChromaLocationBottomField: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionchromalocation_left?language=objc)
    pub static kCMFormatDescriptionChromaLocation_Left: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionchromalocation_center?language=objc)
    pub static kCMFormatDescriptionChromaLocation_Center: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionchromalocation_topleft?language=objc)
    pub static kCMFormatDescriptionChromaLocation_TopLeft: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionchromalocation_top?language=objc)
    pub static kCMFormatDescriptionChromaLocation_Top: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionchromalocation_bottomleft?language=objc)
    pub static kCMFormatDescriptionChromaLocation_BottomLeft: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionchromalocation_bottom?language=objc)
    pub static kCMFormatDescriptionChromaLocation_Bottom: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionchromalocation_dv420?language=objc)
    pub static kCMFormatDescriptionChromaLocation_DV420: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionconformstompeg2videoprofile?language=objc)
    pub static kCMFormatDescriptionConformsToMPEG2VideoProfile: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_protectedcontentoriginalformat?language=objc)
    pub static kCMFormatDescriptionExtension_ProtectedContentOriginalFormat: &'static CFString;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_hdv_720p30?language=objc)
pub const kCMMPEG2VideoProfile_HDV_720p30: i32 = 0x68647631;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_hdv_1080i60?language=objc)
pub const kCMMPEG2VideoProfile_HDV_1080i60: i32 = 0x68647632;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_hdv_1080i50?language=objc)
pub const kCMMPEG2VideoProfile_HDV_1080i50: i32 = 0x68647633;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_hdv_720p24?language=objc)
pub const kCMMPEG2VideoProfile_HDV_720p24: i32 = 0x68647634;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_hdv_720p25?language=objc)
pub const kCMMPEG2VideoProfile_HDV_720p25: i32 = 0x68647635;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_hdv_1080p24?language=objc)
pub const kCMMPEG2VideoProfile_HDV_1080p24: i32 = 0x68647636;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_hdv_1080p25?language=objc)
pub const kCMMPEG2VideoProfile_HDV_1080p25: i32 = 0x68647637;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_hdv_1080p30?language=objc)
pub const kCMMPEG2VideoProfile_HDV_1080p30: i32 = 0x68647638;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_hdv_720p60?language=objc)
pub const kCMMPEG2VideoProfile_HDV_720p60: i32 = 0x68647639;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_hdv_720p50?language=objc)
pub const kCMMPEG2VideoProfile_HDV_720p50: i32 = 0x68647661;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd_1080i60_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD_1080i60_VBR35: i32 = 0x78647632;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd_1080i50_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD_1080i50_VBR35: i32 = 0x78647633;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd_1080p24_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD_1080p24_VBR35: i32 = 0x78647636;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd_1080p25_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD_1080p25_VBR35: i32 = 0x78647637;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd_1080p30_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD_1080p30_VBR35: i32 = 0x78647638;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_ex_720p24_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_EX_720p24_VBR35: i32 = 0x78647634;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_ex_720p25_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_EX_720p25_VBR35: i32 = 0x78647635;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_ex_720p30_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_EX_720p30_VBR35: i32 = 0x78647631;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_ex_720p50_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_EX_720p50_VBR35: i32 = 0x78647661;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_ex_720p60_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_EX_720p60_VBR35: i32 = 0x78647639;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_ex_1080i60_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_EX_1080i60_VBR35: i32 = 0x78647662;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_ex_1080i50_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_EX_1080i50_VBR35: i32 = 0x78647663;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_ex_1080p24_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_EX_1080p24_VBR35: i32 = 0x78647664;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_ex_1080p25_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_EX_1080p25_VBR35: i32 = 0x78647665;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_ex_1080p30_vbr35?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_EX_1080p30_VBR35: i32 = 0x78647666;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd422_720p50_cbr50?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD422_720p50_CBR50: i32 = 0x78643561;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd422_720p60_cbr50?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD422_720p60_CBR50: i32 = 0x78643539;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd422_1080i60_cbr50?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD422_1080i60_CBR50: i32 = 0x78643562;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd422_1080i50_cbr50?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD422_1080i50_CBR50: i32 = 0x78643563;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd422_1080p24_cbr50?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD422_1080p24_CBR50: i32 = 0x78643564;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd422_1080p25_cbr50?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD422_1080p25_CBR50: i32 = 0x78643565;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd422_1080p30_cbr50?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD422_1080p30_CBR50: i32 = 0x78643566;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd_540p?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD_540p: i32 = 0x78646864;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd422_540p?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD422_540p: i32 = 0x78646832;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd422_720p24_cbr50?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD422_720p24_CBR50: i32 = 0x78643534;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd422_720p25_cbr50?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD422_720p25_CBR50: i32 = 0x78643535;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xdcam_hd422_720p30_cbr50?language=objc)
pub const kCMMPEG2VideoProfile_XDCAM_HD422_720p30_CBR50: i32 = 0x78643531;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmpeg2videoprofile_xf?language=objc)
pub const kCMMPEG2VideoProfile_XF: i32 = 0x78667a31;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_temporalquality?language=objc)
    pub static kCMFormatDescriptionExtension_TemporalQuality: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_spatialquality?language=objc)
    pub static kCMFormatDescriptionExtension_SpatialQuality: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_verbatimimagedescription?language=objc)
    pub static kCMFormatDescriptionExtension_VerbatimImageDescription: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_version?language=objc)
    pub static kCMFormatDescriptionExtension_Version: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_revisionlevel?language=objc)
    pub static kCMFormatDescriptionExtension_RevisionLevel: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_vendor?language=objc)
    pub static kCMFormatDescriptionExtension_Vendor: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionvendor_apple?language=objc)
    pub static kCMFormatDescriptionVendor_Apple: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_masteringdisplaycolorvolume?language=objc)
    pub static kCMFormatDescriptionExtension_MasteringDisplayColorVolume: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_contentlightlevelinfo?language=objc)
    pub static kCMFormatDescriptionExtension_ContentLightLevelInfo: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_contentcolorvolume?language=objc)
    pub static kCMFormatDescriptionExtension_ContentColorVolume: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_alternativetransfercharacteristics?language=objc)
    pub static kCMFormatDescriptionExtension_AlternativeTransferCharacteristics: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_auxiliarytypeinfo?language=objc)
    pub static kCMFormatDescriptionExtension_AuxiliaryTypeInfo: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_alphachannelmode?language=objc)
    pub static kCMFormatDescriptionExtension_AlphaChannelMode: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionalphachannelmode_straightalpha?language=objc)
    pub static kCMFormatDescriptionAlphaChannelMode_StraightAlpha: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionalphachannelmode_premultipliedalpha?language=objc)
    pub static kCMFormatDescriptionAlphaChannelMode_PremultipliedAlpha: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_containsalphachannel?language=objc)
    pub static kCMFormatDescriptionExtension_ContainsAlphaChannel: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_bitspercomponent?language=objc)
    pub static kCMFormatDescriptionExtension_BitsPerComponent: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_horizontalfieldofview?language=objc)
    pub static kCMFormatDescriptionExtension_HorizontalFieldOfView: &'static CFString;
}

extern "C" {
    /// Indicates that the transfer function or gamma of the content is a log format and identifies the specific log curve.
    ///
    /// The value is a CFString holding fully specified reverse DNS identifier.
    /// Content captured in Apple Log will have this key set to kCMFormatDescriptionLogTransferFunction_AppleLog.
    ///
    /// Indicates the Apple Log identifier.
    ///
    /// You can download the Apple Log Profile White Paper from the Apple Developer Downloads website.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_logtransferfunction?language=objc)
    pub static kCMFormatDescriptionExtension_LogTransferFunction: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionlogtransferfunction_applelog?language=objc)
    pub static kCMFormatDescriptionLogTransferFunction_AppleLog: &'static CFString;
}

extern "C" {
    /// Indicates which of the two eyes should be used as the primary when rendering in 2D. It is usually perpendicular to the target image surface.
    ///
    /// Indicates the left eye is the hero eye.
    ///
    /// Indicates the right eye is the hero eye.
    ///
    /// The value is a CFString holding one of the kCMFormatDescriptionHeroEye_* constants.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_heroeye?language=objc)
    pub static kCMFormatDescriptionExtension_HeroEye: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionheroeye_left?language=objc)
    pub static kCMFormatDescriptionHeroEye_Left: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionheroeye_right?language=objc)
    pub static kCMFormatDescriptionHeroEye_Right: &'static CFString;
}

extern "C" {
    /// Indicates the distance between centers of the lenses of the camera system.
    ///
    /// The value is a CFNumber holding an unsigned 32-bit integer that is interpreted in micrometers or thousandths of a millimeter (e.g., 63123 is 63.123 millimeters).
    /// This property is optional and should only be specified if the distance is known.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_stereocamerabaseline?language=objc)
    pub static kCMFormatDescriptionExtension_StereoCameraBaseline: &'static CFString;
}

extern "C" {
    /// Indicates a relative shift of the left and right images, which changes the zero parallax plane.
    ///
    /// The value encoded in normalized image space is a CFNumber holding a signed 32-bit integer measured over the range of -10000 to 10000 mapping to the uniform range [-1.0...1.0]. The interval of 0.0 to 1.0 or 0 to 10000 maps onto the stereo eye view image width. The negative interval 0.0 to -1.0 or 0 to -10000 similarly map onto the stereo eye view image width.
    /// The default value of 0 is interpreted if this property is not set. If the property is not set, NULL may be set and retrieved. The NULL value should be interpreted as meaning 0.
    /// This property is optional and should only be specified if a disparity adjustment including 0 is known.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_horizontaldisparityadjustment?language=objc)
    pub static kCMFormatDescriptionExtension_HorizontalDisparityAdjustment: &'static CFString;
}

extern "C" {
    /// Indicates the stereo left eye is present in video frames.
    ///
    /// The value is a CFBoolean holding presence of left eye view in the stream.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_hasleftstereoeyeview?language=objc)
    pub static kCMFormatDescriptionExtension_HasLeftStereoEyeView: &'static CFString;
}

extern "C" {
    /// Indicates the stereo right eye is present in video frames.
    ///
    /// The value is a CFBoolean holding presence of right eye view in the stream.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_hasrightstereoeyeview?language=objc)
    pub static kCMFormatDescriptionExtension_HasRightStereoEyeView: &'static CFString;
}

extern "C" {
    /// Indicates that one or more additional views may be present beyond stereo left and stereo right eyes (e.g,. a “centerline” view).
    ///
    /// The value is a CFBoolean holding presence of additional eye views in the stream.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_hasadditionalviews?language=objc)
    pub static kCMFormatDescriptionExtension_HasAdditionalViews: &'static CFString;
}

extern "C" {
    /// Indicates the projection that should be applied to presented decoded video frames.
    ///
    /// Indicates rectilinear projection. Generally less than 90 degree field of view with no barrel distortion.
    ///
    /// Indicates equirectangular projection of a 360 degree sphere to a rectangular plane, where longitude and latitude of the sphere are mapped linearly to the x,y axes of the plane.
    ///
    /// Indicates half equirectangular projection of a 180 degree hemisphere to a rectangular plane, where longitude and latitude of the sphere are mapped linearly to the x,y axes of the plane
    ///
    /// Indicates a projection described mathematically by a model of camera lens calibration parameters. Parameters may be found in lens calibration metadata in kCMFormatDescriptionExtension_CameraCalibrationDataLensCollection with algorithm_kind being parametric lens
    ///
    /// Indicates a proprietary projection used for Apple Immersive Video.
    ///
    /// The value is a CFString holding one of the kCMFormatDescriptionProjectionKind_* constants.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_projectionkind?language=objc)
    pub static kCMFormatDescriptionExtension_ProjectionKind: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionprojectionkind_rectilinear?language=objc)
    pub static kCMFormatDescriptionProjectionKind_Rectilinear: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionprojectionkind_equirectangular?language=objc)
    pub static kCMFormatDescriptionProjectionKind_Equirectangular: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionprojectionkind_halfequirectangular?language=objc)
    pub static kCMFormatDescriptionProjectionKind_HalfEquirectangular: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionprojectionkind_parametricimmersive?language=objc)
    pub static kCMFormatDescriptionProjectionKind_ParametricImmersive: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionprojectionkind_appleimmersivevideo?language=objc)
    pub static kCMFormatDescriptionProjectionKind_AppleImmersiveVideo: &'static CFString;
}

extern "C" {
    /// Indicates the packing type of stereoscopic video frames.
    ///
    /// Indicates that frames are packed side-by-side.
    ///
    /// Indicates that frames are packed over under.
    ///
    /// The value is a CFString holding one of the kCMFormatDescriptionViewPackingKind_* constants.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_viewpackingkind?language=objc)
    pub static kCMFormatDescriptionExtension_ViewPackingKind: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionviewpackingkind_sidebyside?language=objc)
    pub static kCMFormatDescriptionViewPackingKind_SideBySide: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionviewpackingkind_overunder?language=objc)
    pub static kCMFormatDescriptionViewPackingKind_OverUnder: &'static CFString;
}

extern "C" {
    /// Specifies intrinsic and extrinsic parameters for single or multiple lenses.
    ///
    /// The property value is an array of dictionaries describing the camera calibration data for each lens. The camera calibration data includes intrinsics and extrinics with other parameters.
    /// For a stereoscopic camera system, the left and right lens signaling can be done with the kCMFormatDescriptionCameraCalibration_LensRole key and its value.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_cameracalibrationdatalenscollection?language=objc)
    pub static kCMFormatDescriptionExtension_CameraCalibrationDataLensCollection: &'static CFString;
}

extern "C" {
    /// The following keys are required in each kCMFormatDescriptionExtension_CameraCalibrationDataLensCollection dictionary.
    ///
    ///
    ///
    /// Specifies the camera calibration methodology.
    ///
    /// If the algorithm kind is ParametricLens, the camera lens collection requires camera intrinsic and extrinsic parameters.
    ///
    ///
    ///
    /// Specifies the kind of lens (e.g., color).
    ///
    ///
    ///
    /// Specifies a unique number associated with a lens.
    ///
    ///
    ///
    /// Specifies the particular use of the lens in the camera system (e.g., left or right for a stereo system).
    ///
    /// For a stereoscopic camera system, one lens should have the left role and another should have the right role.
    ///
    ///
    ///
    /// Specifies the first and second radial distortion coefficients(k1 and k2) used to correct the distortion that appeared as curved lines for straight lines and the first and second tangential distortion coefficients(p1 and p2) used to correct the distortion caused by a lens's improper alignment of physical elements.
    ///
    /// The values are in a CFArray of four CFNumbers in k1, k2, p1 and p2 order.
    ///
    ///
    ///
    /// Specifies a three element polynomial for mapping x axis UV parameters with an adjustment using the equation `x' = polynomialX[0] + polynomialX[1]*x + polynomialX[2]*x^3`.
    ///
    /// The values are in a CFArray of three CFNumbers(float) in the order polynomialX[0], polynomialX[1]
    /// &
    /// polynomialX[2].
    /// The polynomial transform origin is at the center of the frame. The default values of elements of polynomialX[] are [0.0, 1.0, 0.0].
    ///
    ///
    ///
    /// Specifies a three element polynomial for mapping y axis UV parameters with an adjustment using the equation `y' = polynomialY[0] + polynomialY[1]*y + polynomialY[2]*y^3`.
    ///
    /// The values are in a CFArray of three CFNumbers(float) in the order polynomialY[0], polynomialY[1]
    /// &
    /// polynomialY[2].
    /// The polynomial transform origin is at the center of the frame. The default values of elements of polynomialY[] are [0.0, 1.0, 0.0].
    ///
    ///
    ///
    /// Specifies the outer limit of the calibration validity in degrees of angle eccentric from the optical axis.
    ///
    /// The value is linked to radial distortion corrections with k1 and k2.
    ///
    ///
    ///
    /// Specifies the 3x3 camera intrinsic matrix for camera calibration.
    ///
    /// Camera intrinsic matrix is a CFData containing a matrix_float3x3, which is column-major. Each element is in IEEE754 native-endian 32-bit floating point. It has the following contents:
    /// fx    s    cx
    /// 0    fy    cy
    /// 0    0    1
    /// fx and fy are the focal length in pixels. For square pixels, they will have the same value.
    /// cx and cy are the coordinates of the principal point. The origin is the upper left of the frame.
    /// s is an optional skew factor.
    ///
    ///
    ///
    /// Specifies the offset of the point of perspective relative to the rectilinear projection.
    ///
    ///
    ///
    /// Specifies the image dimensions to which the camera’s intrinsic matrix values are relative.
    ///
    /// Values are width and height in a CFDictionary. Dictionary keys are compatible with CGSize dictionary, namely "Width" and "Height".
    ///
    ///
    ///
    /// Identifies how the origin of the camera system's extrinsics are determined.
    ///
    /// The 'blin' value indicates the center of transform is determined by the point mid way along the dimensions indicated by the StereoCameraSystemBaselineBox held in the StereoCameraSystemBox.
    /// Each left and right lens within a stereoscopic camera system is equidistant from this point, so the 'blin' value is halved when associated with the respective left and right lenses.
    ///
    ///
    ///
    /// Specifies a camera’s orientation to a world or scene coordinate system. The orientation value is a unit quaternion(ix, iy, and iz) instead of the classical 3x3 matrix.
    ///
    /// The values are in a CFArray of three CFNumbers in ix, iy, and iz order.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibration_lensalgorithmkind?language=objc)
    pub static kCMFormatDescriptionCameraCalibration_LensAlgorithmKind: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibrationlensalgorithmkind_parametriclens?language=objc)
    pub static kCMFormatDescriptionCameraCalibrationLensAlgorithmKind_ParametricLens:
        &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibration_lensdomain?language=objc)
    pub static kCMFormatDescriptionCameraCalibration_LensDomain: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibrationlensdomain_color?language=objc)
    pub static kCMFormatDescriptionCameraCalibrationLensDomain_Color: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibration_lensidentifier?language=objc)
    pub static kCMFormatDescriptionCameraCalibration_LensIdentifier: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibration_lensrole?language=objc)
    pub static kCMFormatDescriptionCameraCalibration_LensRole: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibrationlensrole_mono?language=objc)
    pub static kCMFormatDescriptionCameraCalibrationLensRole_Mono: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibrationlensrole_left?language=objc)
    pub static kCMFormatDescriptionCameraCalibrationLensRole_Left: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibrationlensrole_right?language=objc)
    pub static kCMFormatDescriptionCameraCalibrationLensRole_Right: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibration_lensdistortions?language=objc)
    pub static kCMFormatDescriptionCameraCalibration_LensDistortions: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibration_lensframeadjustmentspolynomialx?language=objc)
    pub static kCMFormatDescriptionCameraCalibration_LensFrameAdjustmentsPolynomialX:
        &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibration_lensframeadjustmentspolynomialy?language=objc)
    pub static kCMFormatDescriptionCameraCalibration_LensFrameAdjustmentsPolynomialY:
        &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibration_radialanglelimit?language=objc)
    pub static kCMFormatDescriptionCameraCalibration_RadialAngleLimit: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibration_intrinsicmatrix?language=objc)
    pub static kCMFormatDescriptionCameraCalibration_IntrinsicMatrix: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibration_intrinsicmatrixprojectionoffset?language=objc)
    pub static kCMFormatDescriptionCameraCalibration_IntrinsicMatrixProjectionOffset:
        &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibration_intrinsicmatrixreferencedimensions?language=objc)
    pub static kCMFormatDescriptionCameraCalibration_IntrinsicMatrixReferenceDimensions:
        &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibration_extrinsicoriginsource?language=objc)
    pub static kCMFormatDescriptionCameraCalibration_ExtrinsicOriginSource: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibrationextrinsicoriginsource_stereocamerasystembaseline?language=objc)
    pub static kCMFormatDescriptionCameraCalibrationExtrinsicOriginSource_StereoCameraSystemBaseline:
        &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptioncameracalibration_extrinsicorientationquaternion?language=objc)
    pub static kCMFormatDescriptionCameraCalibration_ExtrinsicOrientationQuaternion:
        &'static CFString;
}

extern "C" {
    /// Indicates that the image description contains projected media data converted from an external format
    ///
    /// This format description extension is included if boxes containing external stereoscopic or spherical projection information were parsed.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_convertedfromexternalsphericaltags?language=objc)
    pub static kCMFormatDescriptionExtension_ConvertedFromExternalSphericalTags: &'static CFString;
}

extern "C-unwind" {
    /// Creates a format description for a video media stream.
    ///
    /// The caller owns the returned CMFormatDescription, and must release it when done with it. All input parameters
    /// are copied (the extensions are deep-copied).  The caller can deallocate them or re-use them after making this call.
    pub fn CMVideoFormatDescriptionCreate(
        allocator: Option<&CFAllocator>,
        codec_type: CMVideoCodecType,
        width: i32,
        height: i32,
        extensions: Option<&CFDictionary>,
        format_description_out: NonNull<*const CMVideoFormatDescription>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Creates a format description for a video media stream contained in CVImageBuffers of the type provided.
    ///
    /// This convenience function is equivalent to:
    ///
    /// CMVideoFormatDescriptionCreate( allocator,
    /// ( CVPixelBufferGetTypeID() == CFGetTypeID( imageBuffer ) ? CVPixelBufferGetPixelFormatType( imageBuffer ) : 0,
    /// width of image,
    /// height of image,
    /// extensions );
    ///
    /// where extensions is a CFDictionary of attachments to image buffer with keys specified by
    /// CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers, and also
    /// kCMFormatDescriptionExtension_BytesPerRow if applicable.
    #[cfg(feature = "objc2-core-video")]
    pub fn CMVideoFormatDescriptionCreateForImageBuffer(
        allocator: Option<&CFAllocator>,
        image_buffer: &CVImageBuffer,
        format_description_out: NonNull<*const CMVideoFormatDescription>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Creates a format description for a video media stream described by H.264 parameter set NAL units.
    ///
    /// This function parses the dimensions provided by the parameter sets and creates a format description suitable for a raw H.264 stream.
    /// The parameter sets' data can come from raw NAL units and must have any emulation prevention bytes needed.
    /// The supported NAL unit types to be included in the format description are 7 (sequence parameter set), 8 (picture parameter set) and 13 (sequence parameter set extension). At least one sequence parameter set and one picture parameter set must be provided.
    pub fn CMVideoFormatDescriptionCreateFromH264ParameterSets(
        allocator: Option<&CFAllocator>,
        parameter_set_count: usize,
        parameter_set_pointers: NonNull<NonNull<u8>>,
        parameter_set_sizes: NonNull<usize>,
        nal_unit_header_length: c_int,
        format_description_out: NonNull<*const CMFormatDescription>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Creates a format description for a video media stream described by HEVC (H.265) parameter set NAL units.
    ///
    /// This function parses the dimensions provided by the parameter sets and creates a format description suitable for a raw H.265 stream.
    /// The parameter sets' data can come from raw NAL units and must have any emulation prevention bytes needed.
    /// The supported NAL unit types to be included in the format description are 32 (video parameter set), 33 (sequence parameter set), 34 (picture parameter set), 39 (prefix SEI) and 40 (suffix SEI). At least one of each parameter set must be provided.
    pub fn CMVideoFormatDescriptionCreateFromHEVCParameterSets(
        allocator: Option<&CFAllocator>,
        parameter_set_count: usize,
        parameter_set_pointers: NonNull<NonNull<u8>>,
        parameter_set_sizes: NonNull<usize>,
        nal_unit_header_length: c_int,
        extensions: Option<&CFDictionary>,
        format_description_out: NonNull<*const CMFormatDescription>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Returns a parameter set contained in a H.264 format description.
    ///
    /// This function parses the AVC decoder configuration record contained in a H.264 video format description and returns the NAL unit at the given index from it.  These NAL units are typically parameter sets (e.g. SPS, PPS), but may contain others as specified by ISO/IEC 14496-15 (e.g. user-data SEI).
    /// Both parameterSetPointerOut and parameterSetSizeOut may be NULL, parameterSetCountOut will return the total number of parameter set NAL units contained in the AVC decoder configuration record.
    /// The parameter set NAL units returned will already have any emulation prevention bytes needed.
    /// The pointer returned in parameterSetPointerOut points to internal memory of videoDesc, and may only be accessed as long as a retain on videoDesc is held.
    pub fn CMVideoFormatDescriptionGetH264ParameterSetAtIndex(
        video_desc: &CMFormatDescription,
        parameter_set_index: usize,
        parameter_set_pointer_out: *mut *const u8,
        parameter_set_size_out: *mut usize,
        parameter_set_count_out: *mut usize,
        nal_unit_header_length_out: *mut c_int,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Returns a parameter set contained in a HEVC (H.265) format description.
    ///
    /// This function parses the HEVC decoder configuration record contained in a H.265 video format description and returns the NAL unit at the given index from it.  These NAL units are typically parameter sets (e.g. VPS, SPS, PPS), but may contain others as specified by ISO/IEC 14496-15 (e.g. user-data SEI).
    /// Both parameterSetPointerOut and parameterSetSizeOut may be NULL, parameterSetCountOut will return the total number of parameter set NAL units contained in the HEVC decoder configuration record.
    /// The parameter set NAL units returned will already have any emulation prevention bytes needed.
    /// The pointer returned in parameterSetPointerOut points to internal memory of videoDesc, and may only be accessed as long as a retain on videoDesc is held.
    pub fn CMVideoFormatDescriptionGetHEVCParameterSetAtIndex(
        video_desc: &CMFormatDescription,
        parameter_set_index: usize,
        parameter_set_pointer_out: *mut *const u8,
        parameter_set_size_out: *mut usize,
        parameter_set_count_out: *mut usize,
        nal_unit_header_length_out: *mut c_int,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Returns the dimensions (in encoded pixels)
    ///
    /// This does not take into account pixel aspect ratio or clean aperture tags.
    pub fn CMVideoFormatDescriptionGetDimensions(
        video_desc: &CMVideoFormatDescription,
    ) -> CMVideoDimensions;
}

/// Returns the dimensions, adjusted to take pixel aspect ratio and/or clean aperture into account.
///
/// Pixel aspect ratio is used to adjust the width, leaving the height alone.
#[inline]
pub unsafe extern "C-unwind" fn CMVideoFormatDescriptionGetPresentationDimensions(
    video_desc: &CMVideoFormatDescription,
    use_pixel_aspect_ratio: bool,
    use_clean_aperture: bool,
) -> CGSize {
    extern "C-unwind" {
        fn CMVideoFormatDescriptionGetPresentationDimensions(
            video_desc: &CMVideoFormatDescription,
            use_pixel_aspect_ratio: Boolean,
            use_clean_aperture: Boolean,
        ) -> CGSize;
    }
    unsafe {
        CMVideoFormatDescriptionGetPresentationDimensions(
            video_desc,
            use_pixel_aspect_ratio as _,
            use_clean_aperture as _,
        )
    }
}

/// Returns the clean aperture.
///
/// The clean aperture is a rectangle that defines the portion of the encoded pixel dimensions
/// that represents image data valid for display.
#[inline]
pub unsafe extern "C-unwind" fn CMVideoFormatDescriptionGetCleanAperture(
    video_desc: &CMVideoFormatDescription,
    origin_is_at_top_left: bool,
) -> CGRect {
    extern "C-unwind" {
        fn CMVideoFormatDescriptionGetCleanAperture(
            video_desc: &CMVideoFormatDescription,
            origin_is_at_top_left: Boolean,
        ) -> CGRect;
    }
    unsafe { CMVideoFormatDescriptionGetCleanAperture(video_desc, origin_is_at_top_left as _) }
}

/// Returns an array of the keys that are used both as CMVideoFormatDescription extensions
/// and CVImageBuffer attachments and attributes.
///
/// When specifying a CMFormatDescription for a CMSampleBuffer, the format description must
/// be consistent with formatting information attached to the CVImageBuffer. The width, height,
/// and codecType must match (for CVPixelBuffers the codec type is given by
/// CVPixelBufferGetPixelFormatType(pixelBuffer); for other CVImageBuffers, the codecType must be 0).
/// The format description extensions must match the image buffer attachments for all the keys in the
/// list returned by this function (if absent in either they must be absent in both).
///
/// Currently, the list is:
///
/// kCMFormatDescriptionExtension_CleanAperture
/// kCMFormatDescriptionExtension_FieldCount
/// kCMFormatDescriptionExtension_FieldDetail
/// kCMFormatDescriptionExtension_PixelAspectRatio
/// kCMFormatDescriptionExtension_ColorPrimaries
/// kCMFormatDescriptionExtension_TransferFunction
/// kCMFormatDescriptionExtension_GammaLevel
/// kCMFormatDescriptionExtension_YCbCrMatrix
/// kCMFormatDescriptionExtension_ICCProfile
/// kCMFormatDescriptionExtension_ChromaLocationTopField
/// kCMFormatDescriptionExtension_ChromaLocationBottomField
/// kCMFormatDescriptionExtension_MasteringDisplayColorVolume
/// kCMFormatDescriptionExtension_ContentLightLevelInfo
#[inline]
pub unsafe extern "C-unwind" fn CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers(
) -> CFRetained<CFArray> {
    extern "C-unwind" {
        fn CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers(
        ) -> Option<NonNull<CFArray>>;
    }
    let ret = unsafe { CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers() };
    let ret = ret.expect("function was marked as returning non-null, but actually returned NULL");
    unsafe { CFRetained::retain(ret) }
}

/// Checks to see if a given format description matches an image buffer.
///
/// This function uses the keys returned by CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers
/// to compares the extensions of the given format description to the attachments of the
/// given image buffer (if an attachment is absent in either it must be absent in both).
/// It also checks kCMFormatDescriptionExtension_BytesPerRow against CVPixelBufferGetBytesPerRow, if applicable.
#[cfg(feature = "objc2-core-video")]
#[inline]
pub unsafe extern "C-unwind" fn CMVideoFormatDescriptionMatchesImageBuffer(
    desc: &CMVideoFormatDescription,
    image_buffer: &CVImageBuffer,
) -> bool {
    extern "C-unwind" {
        fn CMVideoFormatDescriptionMatchesImageBuffer(
            desc: &CMVideoFormatDescription,
            image_buffer: &CVImageBuffer,
        ) -> Boolean;
    }
    let ret = unsafe { CMVideoFormatDescriptionMatchesImageBuffer(desc, image_buffer) };
    ret != 0
}

extern "C-unwind" {
    /// Copies the multi-image encoding properties as an array of CMTagCollections.
    ///
    /// Parameter `formatDescription`: CMVideoFormatDescription being interrogated.
    ///
    /// Parameter `tagCollectionsOut`: Returned TagCollections with CMTags such as kCMTagCategory_VideoLayerID and kCMTagCategory_StereoViewType.
    ///
    /// On return, the caller owns the returned CFArrayRef and must release it when done with it.
    /// This function copies the VideoLayerIDs and LeftAndRightViewIDs from hvcC and 3D Reference Displays Info SEI in the formatDescription.
    /// The returned values can be used to enable the multi-image decoding with kVTDecompressionPropertyKey_RequestedMVHEVCVideoLayerIDs.
    /// It also gives the eye mapping information for the pixel buffers of the decoded CMTaggedBufferGroups.
    ///
    /// Returns: Array of CMTagCollections. The result will be NULL if the CMVideoFormatDescription does not contain multi-image encoding parameters, or if there is some other error.
    pub fn CMVideoFormatDescriptionCopyTagCollectionArray(
        format_description: &CMVideoFormatDescription,
        tag_collections_out: *mut *const CFArray,
    ) -> OSStatus;
}

/// Synonym type used for manipulating CMTaggedBufferGroup media CMFormatDescriptions
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtaggedbuffergroupformatdescription?language=objc)
pub type CMTaggedBufferGroupFormatDescription = CMFormatDescription;

/// The subtypes of CMTaggedBufferGroup media type.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtaggedbuffergroupformattype?language=objc)
pub type CMTaggedBufferGroupFormatType = FourCharCode;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtaggedbuffergroupformattype_taggedbuffergroup?language=objc)
pub const kCMTaggedBufferGroupFormatType_TaggedBufferGroup: CMTaggedBufferGroupFormatType =
    0x74626772;

/// Synonym type used for manipulating muxed media CMFormatDescriptions
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmmuxedformatdescription?language=objc)
pub type CMMuxedFormatDescription = CMFormatDescription;

/// Muxed media format/subtype.
///
///
///
///
///
///
/// Contains interleaved sample buffers from multiple media types. The receiver should query the media type of each CMSampleBuffer’s format description to discover if it’s video or audio, and process it accordingly.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmmuxedstreamtype?language=objc)
pub type CMMuxedStreamType = FourCharCode;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmuxedstreamtype_mpeg1system?language=objc)
pub const kCMMuxedStreamType_MPEG1System: CMMuxedStreamType = 0x6d703173;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmuxedstreamtype_mpeg2transport?language=objc)
pub const kCMMuxedStreamType_MPEG2Transport: CMMuxedStreamType = 0x6d703274;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmuxedstreamtype_mpeg2program?language=objc)
pub const kCMMuxedStreamType_MPEG2Program: CMMuxedStreamType = 0x6d703270;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmuxedstreamtype_dv?language=objc)
pub const kCMMuxedStreamType_DV: CMMuxedStreamType = 0x64762020;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmuxedstreamtype_embeddeddevicescreenrecording?language=objc)
pub const kCMMuxedStreamType_EmbeddedDeviceScreenRecording: CMMuxedStreamType = 0x69737220;

extern "C-unwind" {
    /// Creates a format description for a muxed media stream.
    ///
    /// A muxed format description does not know what the formats are of the substreams within the muxed stream.
    /// That information will only be discoverable by the demuxer software (or other software which understands
    /// the details of the muxed bitstream) which will need to produce separate format descriptions for each of
    /// its output streams. The caller owns the returned CMFormatDescription, and must release it when done
    /// with it. All input parameters are copied (the extensions are deep-copied).  The caller can deallocate
    /// them or re-use them after making this call.
    pub fn CMMuxedFormatDescriptionCreate(
        allocator: Option<&CFAllocator>,
        mux_type: CMMuxedStreamType,
        extensions: Option<&CFDictionary>,
        format_description_out: NonNull<*const CMMuxedFormatDescription>,
    ) -> OSStatus;
}

/// Synonym type used for manipulating closed-caption media CMFormatDescriptions
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmclosedcaptionformatdescription?language=objc)
pub type CMClosedCaptionFormatDescription = CMFormatDescription;

/// Closed-caption media format/subtype.
/// Note:  use CMFormatDescriptionCreate to create a CMClosedCaptionFormatDescriptionRef.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmclosedcaptionformattype?language=objc)
pub type CMClosedCaptionFormatType = FourCharCode;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmclosedcaptionformattype_cea608?language=objc)
pub const kCMClosedCaptionFormatType_CEA608: CMClosedCaptionFormatType = 0x63363038;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmclosedcaptionformattype_cea708?language=objc)
pub const kCMClosedCaptionFormatType_CEA708: CMClosedCaptionFormatType = 0x63373038;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmclosedcaptionformattype_atsc?language=objc)
pub const kCMClosedCaptionFormatType_ATSC: CMClosedCaptionFormatType = 0x61746363;

/// Synonym type used for manipulating Text media CMFormatDescriptions
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtextformatdescription?language=objc)
pub type CMTextFormatDescription = CMFormatDescription;

/// Text media format/subtype.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtextformattype?language=objc)
pub type CMTextFormatType = FourCharCode;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformattype_qttext?language=objc)
pub const kCMTextFormatType_QTText: CMTextFormatType = 0x74657874;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformattype_3gtext?language=objc)
pub const kCMTextFormatType_3GText: CMTextFormatType = 0x74783367;

/// Display mode flags for text media.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtextdisplayflags?language=objc)
pub type CMTextDisplayFlags = u32;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextdisplayflag_scrollin?language=objc)
pub const kCMTextDisplayFlag_scrollIn: CMTextDisplayFlags = 0x00000020;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextdisplayflag_scrollout?language=objc)
pub const kCMTextDisplayFlag_scrollOut: CMTextDisplayFlags = 0x00000040;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextdisplayflag_scrolldirectionmask?language=objc)
pub const kCMTextDisplayFlag_scrollDirectionMask: CMTextDisplayFlags = 0x00000180;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextdisplayflag_scrolldirection_bottomtotop?language=objc)
pub const kCMTextDisplayFlag_scrollDirection_bottomToTop: CMTextDisplayFlags = 0x00000000;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextdisplayflag_scrolldirection_righttoleft?language=objc)
pub const kCMTextDisplayFlag_scrollDirection_rightToLeft: CMTextDisplayFlags = 0x00000080;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextdisplayflag_scrolldirection_toptobottom?language=objc)
pub const kCMTextDisplayFlag_scrollDirection_topToBottom: CMTextDisplayFlags = 0x00000100;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextdisplayflag_scrolldirection_lefttoright?language=objc)
pub const kCMTextDisplayFlag_scrollDirection_leftToRight: CMTextDisplayFlags = 0x00000180;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextdisplayflag_continuouskaraoke?language=objc)
pub const kCMTextDisplayFlag_continuousKaraoke: CMTextDisplayFlags = 0x00000800;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextdisplayflag_writetextvertically?language=objc)
pub const kCMTextDisplayFlag_writeTextVertically: CMTextDisplayFlags = 0x00020000;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextdisplayflag_filltextregion?language=objc)
pub const kCMTextDisplayFlag_fillTextRegion: CMTextDisplayFlags = 0x00040000;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextdisplayflag_obeysubtitleformatting?language=objc)
pub const kCMTextDisplayFlag_obeySubtitleFormatting: CMTextDisplayFlags = 0x20000000;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextdisplayflag_forcedsubtitlespresent?language=objc)
pub const kCMTextDisplayFlag_forcedSubtitlesPresent: CMTextDisplayFlags = 0x40000000;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextdisplayflag_allsubtitlesforced?language=objc)
pub const kCMTextDisplayFlag_allSubtitlesForced: CMTextDisplayFlags = 0x80000000;

/// Justification modes for text media. Used when specifying either horizontal or vertical justification.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtextjustificationvalue?language=objc)
pub type CMTextJustificationValue = i8;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextjustification_left_top?language=objc)
pub const kCMTextJustification_left_top: CMTextJustificationValue = 0;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextjustification_centered?language=objc)
pub const kCMTextJustification_centered: CMTextJustificationValue = 1;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextjustification_bottom_right?language=objc)
pub const kCMTextJustification_bottom_right: CMTextJustificationValue = -1;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionextension_displayflags?language=objc)
    pub static kCMTextFormatDescriptionExtension_DisplayFlags: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionextension_backgroundcolor?language=objc)
    pub static kCMTextFormatDescriptionExtension_BackgroundColor: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptioncolor_red?language=objc)
    pub static kCMTextFormatDescriptionColor_Red: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptioncolor_green?language=objc)
    pub static kCMTextFormatDescriptionColor_Green: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptioncolor_blue?language=objc)
    pub static kCMTextFormatDescriptionColor_Blue: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptioncolor_alpha?language=objc)
    pub static kCMTextFormatDescriptionColor_Alpha: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionextension_defaulttextbox?language=objc)
    pub static kCMTextFormatDescriptionExtension_DefaultTextBox: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionrect_top?language=objc)
    pub static kCMTextFormatDescriptionRect_Top: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionrect_left?language=objc)
    pub static kCMTextFormatDescriptionRect_Left: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionrect_bottom?language=objc)
    pub static kCMTextFormatDescriptionRect_Bottom: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionrect_right?language=objc)
    pub static kCMTextFormatDescriptionRect_Right: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionextension_defaultstyle?language=objc)
    pub static kCMTextFormatDescriptionExtension_DefaultStyle: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionstyle_startchar?language=objc)
    pub static kCMTextFormatDescriptionStyle_StartChar: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionstyle_font?language=objc)
    pub static kCMTextFormatDescriptionStyle_Font: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionstyle_fontface?language=objc)
    pub static kCMTextFormatDescriptionStyle_FontFace: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionstyle_foregroundcolor?language=objc)
    pub static kCMTextFormatDescriptionStyle_ForegroundColor: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionstyle_fontsize?language=objc)
    pub static kCMTextFormatDescriptionStyle_FontSize: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionextension_horizontaljustification?language=objc)
    pub static kCMTextFormatDescriptionExtension_HorizontalJustification: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionextension_verticaljustification?language=objc)
    pub static kCMTextFormatDescriptionExtension_VerticalJustification: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionstyle_endchar?language=objc)
    pub static kCMTextFormatDescriptionStyle_EndChar: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionextension_fonttable?language=objc)
    pub static kCMTextFormatDescriptionExtension_FontTable: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionextension_textjustification?language=objc)
    pub static kCMTextFormatDescriptionExtension_TextJustification: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionstyle_height?language=objc)
    pub static kCMTextFormatDescriptionStyle_Height: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionstyle_ascent?language=objc)
    pub static kCMTextFormatDescriptionStyle_Ascent: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtextformatdescriptionextension_defaultfontname?language=objc)
    pub static kCMTextFormatDescriptionExtension_DefaultFontName: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextension_ambientviewingenvironment?language=objc)
    pub static kCMFormatDescriptionExtension_AmbientViewingEnvironment: &'static CFString;
}

extern "C-unwind" {
    /// Returns the displayFlags.
    ///
    /// These are the flags that control how the text appears. The function can return kCMFormatDescriptionError_ValueNotAvailable for formats without display flags.
    pub fn CMTextFormatDescriptionGetDisplayFlags(
        desc: &CMFormatDescription,
        display_flags_out: NonNull<CMTextDisplayFlags>,
    ) -> OSStatus;
}

extern "C-unwind" {
    /// Returns horizontal and vertical justification.
    ///
    /// Values are kCMTextJustification_* constants. The function returns kCMFormatDescriptionError_ValueNotAvailable for format descriptions that do not carry text justification.
    pub fn CMTextFormatDescriptionGetJustification(
        desc: &CMFormatDescription,
        horizonta_justificationl_out: *mut CMTextJustificationValue,
        vertical_justification_out: *mut CMTextJustificationValue,
    ) -> OSStatus;
}

/// Returns the default text box.
///
/// Within a text track, text is rendered within a text box.  There is a default text box set, which can be over-ridden by a sample. The function can return kCMFormatDescriptionError_ValueNotAvailable for format descriptions that do not carry a default text box.
#[inline]
pub unsafe extern "C-unwind" fn CMTextFormatDescriptionGetDefaultTextBox(
    desc: &CMFormatDescription,
    origin_is_at_top_left: bool,
    height_of_text_track: CGFloat,
    default_text_box_out: NonNull<CGRect>,
) -> OSStatus {
    extern "C-unwind" {
        fn CMTextFormatDescriptionGetDefaultTextBox(
            desc: &CMFormatDescription,
            origin_is_at_top_left: Boolean,
            height_of_text_track: CGFloat,
            default_text_box_out: NonNull<CGRect>,
        ) -> OSStatus;
    }
    unsafe {
        CMTextFormatDescriptionGetDefaultTextBox(
            desc,
            origin_is_at_top_left as _,
            height_of_text_track,
            default_text_box_out,
        )
    }
}

extern "C-unwind" {
    /// Returns the font name for a local font ID.
    ///
    /// Some format descriptions carry a mapping from local font IDs to font names. The function returns kCMFormatDescriptionError_ValueNotAvailable for format descriptions that do not carry such a font mapping table.
    pub fn CMTextFormatDescriptionGetFontName(
        desc: &CMFormatDescription,
        local_font_id: u16,
        font_name_out: NonNull<*const CFString>,
    ) -> OSStatus;
}

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmsubtitleformattype?language=objc)
pub type CMSubtitleFormatType = FourCharCode;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsubtitleformattype_3gtext?language=objc)
pub const kCMSubtitleFormatType_3GText: CMSubtitleFormatType = 0x74783367;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmsubtitleformattype_webvtt?language=objc)
pub const kCMSubtitleFormatType_WebVTT: CMSubtitleFormatType = 0x77767474;

/// SYnonym type used for manipulating TimeCode media CMFormatDescriptions
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtimecodeformatdescription?language=objc)
pub type CMTimeCodeFormatDescription = CMFormatDescription;

/// The types of TimeCode.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmtimecodeformattype?language=objc)
pub type CMTimeCodeFormatType = FourCharCode;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimecodeformattype_timecode32?language=objc)
pub const kCMTimeCodeFormatType_TimeCode32: CMTimeCodeFormatType = 0x746d6364;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimecodeformattype_timecode64?language=objc)
pub const kCMTimeCodeFormatType_TimeCode64: CMTimeCodeFormatType = 0x74633634;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimecodeformattype_counter32?language=objc)
pub const kCMTimeCodeFormatType_Counter32: CMTimeCodeFormatType = 0x636e3332;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimecodeformattype_counter64?language=objc)
pub const kCMTimeCodeFormatType_Counter64: CMTimeCodeFormatType = 0x636e3634;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimecodeflag_dropframe?language=objc)
pub const kCMTimeCodeFlag_DropFrame: u32 = 1 << 0;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimecodeflag_24hourmax?language=objc)
pub const kCMTimeCodeFlag_24HourMax: u32 = 1 << 1;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimecodeflag_negtimesok?language=objc)
pub const kCMTimeCodeFlag_NegTimesOK: u32 = 1 << 2;

extern "C-unwind" {
    /// Creates a format description for a timecode media.
    ///
    /// The caller owns the returned CMFormatDescription, and must release it when done with it. All input parameters
    /// are copied (the extensions are deep-copied).  The caller can deallocate them or re-use them after making this call.
    #[cfg(feature = "CMTime")]
    pub fn CMTimeCodeFormatDescriptionCreate(
        allocator: Option<&CFAllocator>,
        time_code_format_type: CMTimeCodeFormatType,
        frame_duration: CMTime,
        frame_quanta: u32,
        flags: u32,
        extensions: Option<&CFDictionary>,
        format_description_out: NonNull<*const CMTimeCodeFormatDescription>,
    ) -> OSStatus;
}

#[cfg(feature = "CMTime")]
impl CMTime {
    /// Returns the duration of each frame (eg. 100/2997)
    #[doc(alias = "CMTimeCodeFormatDescriptionGetFrameDuration")]
    #[cfg(feature = "CMTime")]
    #[inline]
    pub unsafe fn code_format_description_get_frame_duration(
        time_code_format_description: &CMTimeCodeFormatDescription,
    ) -> CMTime {
        extern "C-unwind" {
            fn CMTimeCodeFormatDescriptionGetFrameDuration(
                time_code_format_description: &CMTimeCodeFormatDescription,
            ) -> CMTime;
        }
        unsafe { CMTimeCodeFormatDescriptionGetFrameDuration(time_code_format_description) }
    }
}

extern "C-unwind" {
    /// Returns the frames/sec for timecode (eg. 30) OR frames/tick for counter mode
    pub fn CMTimeCodeFormatDescriptionGetFrameQuanta(
        time_code_format_description: &CMTimeCodeFormatDescription,
    ) -> u32;
}

extern "C-unwind" {
    /// Returns the flags for kCMTimeCodeFlag_DropFrame, kCMTimeCodeFlag_24HourMax, kCMTimeCodeFlag_NegTimesOK
    pub fn CMTimeCodeFormatDescriptionGetTimeCodeFlags(desc: &CMTimeCodeFormatDescription) -> u32;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimecodeformatdescriptionextension_sourcereferencename?language=objc)
    pub static kCMTimeCodeFormatDescriptionExtension_SourceReferenceName: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimecodeformatdescriptionkey_value?language=objc)
    pub static kCMTimeCodeFormatDescriptionKey_Value: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmtimecodeformatdescriptionkey_langcode?language=objc)
    pub static kCMTimeCodeFormatDescriptionKey_LangCode: &'static CFString;
}

/// SYnonym type used for manipulating Metadata media CMFormatDescriptions
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmmetadataformatdescription?language=objc)
pub type CMMetadataFormatDescription = CMFormatDescription;

/// The subtypes of Metadata media type.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/coremedia/cmmetadataformattype?language=objc)
pub type CMMetadataFormatType = FourCharCode;

/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformattype_icy?language=objc)
pub const kCMMetadataFormatType_ICY: CMMetadataFormatType = 0x69637920;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformattype_id3?language=objc)
pub const kCMMetadataFormatType_ID3: CMMetadataFormatType = 0x69643320;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformattype_boxed?language=objc)
pub const kCMMetadataFormatType_Boxed: CMMetadataFormatType = 0x6d656278;
/// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformattype_emsg?language=objc)
pub const kCMMetadataFormatType_EMSG: CMMetadataFormatType = 0x656d7367;

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmformatdescriptionextensionkey_metadatakeytable?language=objc)
    pub static kCMFormatDescriptionExtensionKey_MetadataKeyTable: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescriptionkey_namespace?language=objc)
    pub static kCMMetadataFormatDescriptionKey_Namespace: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescriptionkey_value?language=objc)
    pub static kCMMetadataFormatDescriptionKey_Value: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescriptionkey_localid?language=objc)
    pub static kCMMetadataFormatDescriptionKey_LocalID: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescriptionkey_datatype?language=objc)
    pub static kCMMetadataFormatDescriptionKey_DataType: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescriptionkey_datatypenamespace?language=objc)
    pub static kCMMetadataFormatDescriptionKey_DataTypeNamespace: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescriptionkey_conformingdatatypes?language=objc)
    pub static kCMMetadataFormatDescriptionKey_ConformingDataTypes: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescriptionkey_languagetag?language=objc)
    pub static kCMMetadataFormatDescriptionKey_LanguageTag: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescriptionkey_structuraldependency?language=objc)
    pub static kCMMetadataFormatDescriptionKey_StructuralDependency: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescriptionkey_setupdata?language=objc)
    pub static kCMMetadataFormatDescriptionKey_SetupData: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescription_structuraldependencykey_dependencyisinvalidflag?language=objc)
    pub static kCMMetadataFormatDescription_StructuralDependencyKey_DependencyIsInvalidFlag:
        &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescriptionmetadataspecificationkey_identifier?language=objc)
    pub static kCMMetadataFormatDescriptionMetadataSpecificationKey_Identifier: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescriptionmetadataspecificationkey_datatype?language=objc)
    pub static kCMMetadataFormatDescriptionMetadataSpecificationKey_DataType: &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescriptionmetadataspecificationkey_extendedlanguagetag?language=objc)
    pub static kCMMetadataFormatDescriptionMetadataSpecificationKey_ExtendedLanguageTag:
        &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescriptionmetadataspecificationkey_structuraldependency?language=objc)
    pub static kCMMetadataFormatDescriptionMetadataSpecificationKey_StructuralDependency:
        &'static CFString;
}

extern "C" {
    /// [Apple's documentation](https://developer.apple.com/documentation/coremedia/kcmmetadataformatdescriptionmetadataspecificationkey_setupdata?language=objc)
    pub static kCMMetadataFormatDescriptionMetadataSpecificationKey_SetupData: &'static CFString;
}

extern "C-unwind" {
    pub fn CMMetadataFormatDescriptionCreateWithKeys(
        allocator: Option<&CFAllocator>,
        metadata_type: CMMetadataFormatType,
        keys: Option<&CFArray>,
        format_description_out: NonNull<*const CMMetadataFormatDescription>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMMetadataFormatDescriptionCreateWithMetadataSpecifications(
        allocator: Option<&CFAllocator>,
        metadata_type: CMMetadataFormatType,
        metadata_specifications: &CFArray,
        format_description_out: NonNull<*const CMMetadataFormatDescription>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMMetadataFormatDescriptionCreateWithMetadataFormatDescriptionAndMetadataSpecifications(
        allocator: Option<&CFAllocator>,
        source_description: &CMMetadataFormatDescription,
        metadata_specifications: &CFArray,
        format_description_out: NonNull<*const CMMetadataFormatDescription>,
    ) -> OSStatus;
}

extern "C-unwind" {
    pub fn CMMetadataFormatDescriptionCreateByMergingMetadataFormatDescriptions(
        allocator: Option<&CFAllocator>,
        source_description: &CMMetadataFormatDescription,
        other_source_description: &CMMetadataFormatDescription,
        format_description_out: NonNull<*const CMMetadataFormatDescription>,
    ) -> OSStatus;
}

#[inline]
pub unsafe extern "C-unwind" fn CMMetadataFormatDescriptionGetKeyWithLocalID(
    desc: &CMMetadataFormatDescription,
    local_key_id: OSType,
) -> Option<CFRetained<CFDictionary>> {
    extern "C-unwind" {
        fn CMMetadataFormatDescriptionGetKeyWithLocalID(
            desc: &CMMetadataFormatDescription,
            local_key_id: OSType,
        ) -> Option<NonNull<CFDictionary>>;
    }
    let ret = unsafe { CMMetadataFormatDescriptionGetKeyWithLocalID(desc, local_key_id) };
    ret.map(|ret| unsafe { CFRetained::retain(ret) })
}

#[inline]
pub unsafe extern "C-unwind" fn CMMetadataFormatDescriptionGetIdentifiers(
    desc: &CMMetadataFormatDescription,
) -> Option<CFRetained<CFArray>> {
    extern "C-unwind" {
        fn CMMetadataFormatDescriptionGetIdentifiers(
            desc: &CMMetadataFormatDescription,
        ) -> Option<NonNull<CFArray>>;
    }
    let ret = unsafe { CMMetadataFormatDescriptionGetIdentifiers(desc) };
    ret.map(|ret| unsafe { CFRetained::retain(ret) })
}

extern "C-unwind" {
    #[deprecated = "renamed to `CMFormatDescription::create`"]
    pub fn CMFormatDescriptionCreate(
        allocator: Option<&CFAllocator>,
        media_type: CMMediaType,
        media_sub_type: FourCharCode,
        extensions: Option<&CFDictionary>,
        format_description_out: NonNull<*const CMFormatDescription>,
    ) -> OSStatus;
}

#[deprecated = "renamed to `CMFormatDescription::equal`"]
#[inline]
pub unsafe extern "C-unwind" fn CMFormatDescriptionEqual(
    format_description: Option<&CMFormatDescription>,
    other_format_description: Option<&CMFormatDescription>,
) -> bool {
    extern "C-unwind" {
        fn CMFormatDescriptionEqual(
            format_description: Option<&CMFormatDescription>,
            other_format_description: Option<&CMFormatDescription>,
        ) -> Boolean;
    }
    let ret = unsafe { CMFormatDescriptionEqual(format_description, other_format_description) };
    ret != 0
}

#[deprecated = "renamed to `CMFormatDescription::equal_ignoring_extension_keys`"]
#[inline]
pub unsafe extern "C-unwind" fn CMFormatDescriptionEqualIgnoringExtensionKeys(
    format_description: Option<&CMFormatDescription>,
    other_format_description: Option<&CMFormatDescription>,
    format_description_extension_keys_to_ignore: Option<&CFType>,
    sample_description_extension_atom_keys_to_ignore: Option<&CFType>,
) -> bool {
    extern "C-unwind" {
        fn CMFormatDescriptionEqualIgnoringExtensionKeys(
            format_description: Option<&CMFormatDescription>,
            other_format_description: Option<&CMFormatDescription>,
            format_description_extension_keys_to_ignore: Option<&CFType>,
            sample_description_extension_atom_keys_to_ignore: Option<&CFType>,
        ) -> Boolean;
    }
    let ret = unsafe {
        CMFormatDescriptionEqualIgnoringExtensionKeys(
            format_description,
            other_format_description,
            format_description_extension_keys_to_ignore,
            sample_description_extension_atom_keys_to_ignore,
        )
    };
    ret != 0
}

extern "C-unwind" {
    #[deprecated = "renamed to `CMFormatDescription::media_type`"]
    pub fn CMFormatDescriptionGetMediaType(desc: &CMFormatDescription) -> CMMediaType;
}

extern "C-unwind" {
    #[deprecated = "renamed to `CMFormatDescription::media_sub_type`"]
    pub fn CMFormatDescriptionGetMediaSubType(desc: &CMFormatDescription) -> FourCharCode;
}

#[deprecated = "renamed to `CMFormatDescription::extensions`"]
#[inline]
pub unsafe extern "C-unwind" fn CMFormatDescriptionGetExtensions(
    desc: &CMFormatDescription,
) -> Option<CFRetained<CFDictionary>> {
    extern "C-unwind" {
        fn CMFormatDescriptionGetExtensions(
            desc: &CMFormatDescription,
        ) -> Option<NonNull<CFDictionary>>;
    }
    let ret = unsafe { CMFormatDescriptionGetExtensions(desc) };
    ret.map(|ret| unsafe { CFRetained::retain(ret) })
}

#[deprecated = "renamed to `CMFormatDescription::extension`"]
#[inline]
pub unsafe extern "C-unwind" fn CMFormatDescriptionGetExtension(
    desc: &CMFormatDescription,
    extension_key: &CFString,
) -> Option<CFRetained<CFPropertyList>> {
    extern "C-unwind" {
        fn CMFormatDescriptionGetExtension(
            desc: &CMFormatDescription,
            extension_key: &CFString,
        ) -> Option<NonNull<CFPropertyList>>;
    }
    let ret = unsafe { CMFormatDescriptionGetExtension(desc, extension_key) };
    ret.map(|ret| unsafe { CFRetained::retain(ret) })
}

extern "C-unwind" {
    #[cfg(feature = "CMTime")]
    #[deprecated = "renamed to `CMTime::code_format_description_get_frame_duration`"]
    pub fn CMTimeCodeFormatDescriptionGetFrameDuration(
        time_code_format_description: &CMTimeCodeFormatDescription,
    ) -> CMTime;
}
