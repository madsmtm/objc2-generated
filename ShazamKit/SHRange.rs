//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// A half-open interval from a lower bound up to, but not including, an upper bound.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shrange?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SHRange;
);

unsafe impl Send for SHRange {}

unsafe impl Sync for SHRange {}

extern_conformance!(
    unsafe impl NSCoding for SHRange {}
);

extern_conformance!(
    unsafe impl NSCopying for SHRange {}
);

unsafe impl CopyingHelper for SHRange {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for SHRange {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SHRange {}
);

impl SHRange {
    extern_methods!(
        /// The lowerBound of this time range
        #[unsafe(method(lowerBound))]
        #[unsafe(method_family = none)]
        pub unsafe fn lowerBound(&self) -> c_double;

        /// The range's upper bound.
        #[unsafe(method(upperBound))]
        #[unsafe(method_family = none)]
        pub unsafe fn upperBound(&self) -> c_double;

        /// Creates a range with the bounds you specify.
        ///
        /// - Parameters:
        /// - lowerBound: The lower bound of the range.
        /// - upperBound: The upper bound of the range.
        #[unsafe(method(rangeWithLowerBound:upperBound:))]
        #[unsafe(method_family = none)]
        pub unsafe fn rangeWithLowerBound_upperBound(
            lower_bound: c_double,
            upper_bound: c_double,
        ) -> Retained<Self>;

        /// Creates a range with the bounds you specify.
        ///
        /// - Parameters:
        /// - lowerBound: The lower bound of the range.
        /// - upperBound: The upper bound of the range.
        #[unsafe(method(initWithLowerBound:upperBound:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithLowerBound_upperBound(
            this: Allocated<Self>,
            lower_bound: c_double,
            upper_bound: c_double,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
