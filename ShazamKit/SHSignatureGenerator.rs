//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-av-foundation")]
use objc2_av_foundation::*;
#[cfg(feature = "objc2-avf-audio")]
use objc2_avf_audio::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// An object for converting audio data into a signature.
    ///
    /// Create both reference and query signatures using this class.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shsignaturegenerator?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SHSignatureGenerator;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for SHSignatureGenerator {}
);

impl SHSignatureGenerator {
    extern_methods!(
        #[cfg(all(
            feature = "SHSignature",
            feature = "block2",
            feature = "objc2-av-foundation"
        ))]
        /// Creates a signature with the asset you specify.
        ///
        /// > Important:
        /// > You can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:
        /// >
        /// > ```swift
        /// > class func signature(from asset: AVAsset) async throws -> SHSignature
        /// > ```
        /// >
        /// > For information about concurrency and asynchronous code in Swift, see
        /// <doc
        /// ://com.apple.documentation/documentation/swift/calling-objective-c-apis-asynchronously>.
        ///
        /// The asset you specify can be any type of media that contains audio tracks. If the asset has multiple tracks, the system mixes them into one ``SHSignature``.
        ///
        /// - Parameters:
        /// - asset: An asset that contains the audio to convert.
        /// - completionHandler: The system calls this completion block after creating the signature, or an error if the system couldn't create it.
        ///
        /// This block takes the following parameters:
        ///
        /// - term `signature`: A new signature instance.
        /// - term error: An error object if a problem occurs when creating thesignature; otherwise, `nil`.
        #[unsafe(method(generateSignatureFromAsset:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn generateSignatureFromAsset_completionHandler(
            asset: &AVAsset,
            completion_handler: &block2::DynBlock<dyn Fn(*mut SHSignature, *mut NSError)>,
        );

        #[cfg(feature = "objc2-avf-audio")]
        /// Adds audio to the generator.
        ///
        /// Using noncontiguous audio may result in a lower-quality signature.
        ///
        /// The audio must be PCM at one of these rates:
        ///
        /// - `48000` hertz
        /// - `44100` hertz
        /// - `32000` hertz
        /// - `16000` hertz
        ///
        /// - Parameters:
        /// - buffer: The audio data to append to the signature generator.
        /// - time: The time position of the start of the audio buffer in the full audio you use to generate the signature.
        /// - error: The error that occurs; otherwise, `nil`.
        #[unsafe(method(appendBuffer:atTime:error:_))]
        #[unsafe(method_family = none)]
        pub unsafe fn appendBuffer_atTime_error(
            &self,
            buffer: &AVAudioPCMBuffer,
            time: Option<&AVAudioTime>,
        ) -> Result<(), Retained<NSError>>;

        #[cfg(feature = "SHSignature")]
        /// Converts the audio buffer into a signature.
        ///
        /// - Returns: A signature that ShazamKit generates from the audio buffer.
        #[unsafe(method(signature))]
        #[unsafe(method_family = none)]
        pub unsafe fn signature(&self) -> Retained<SHSignature>;
    );
}

/// Methods declared on superclass `NSObject`.
impl SHSignatureGenerator {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
