//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-avf-audio")]
use objc2_avf_audio::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// All communication about matches is performed through this delegate.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shsessiondelegate?language=objc)
    pub unsafe trait SHSessionDelegate: NSObjectProtocol {
        #[cfg(feature = "SHMatch")]
        /// A match was found in the
        /// `SHCatalog`for the provided
        /// `SHSignature`
        /// Parameter `session`: The
        /// `SHSession`that made the match
        ///
        /// Parameter `match`: The
        /// `SHMatch`of the matching audio
        #[optional]
        #[unsafe(method(session:didFindMatch:))]
        #[unsafe(method_family = none)]
        unsafe fn session_didFindMatch(&self, session: &SHSession, r#match: &SHMatch);

        #[cfg(feature = "SHSignature")]
        /// The
        /// `SHSignature`did not match anything
        ///
        /// Parameter `session`: The
        /// `SHSession`that attempted to match the
        /// `SHSignature`
        /// Parameter `signature`: The
        /// `SHSignature`that did not match
        ///
        /// Parameter `error`: An optional error. If simply no match was found this will be set to nil. It will be populated if there was an issue performing the match
        #[optional]
        #[unsafe(method(session:didNotFindMatchForSignature:error:))]
        #[unsafe(method_family = none)]
        unsafe fn session_didNotFindMatchForSignature_error(
            &self,
            session: &SHSession,
            signature: &SHSignature,
            error: Option<&NSError>,
        );
    }
);

extern_class!(
    /// A
    /// `SHSession`matches instances of
    /// `SHSignature`against a
    /// `SHCatalog`
    ///
    /// A
    /// `SHSession`can be used in two distinct ways to match against a
    /// `SHCatalog`
    /// 1. Pass a
    /// `SHSignature`to the -[SHSession matchSignature:] method and respond to matches sent to the delegate
    /// There is a 1 to 1 relationship between calls to this method and calls to the delegate
    /// 2. Pass a continuous stream of
    /// `AVAudioPCMBuffer`to the -[SHSession matchStreamingBuffer:atTime:] method, matches are sent to the delegate.
    /// ShazamKit will convert the buffers in SHSignature objects internally and perform matches against the
    /// `SHCatalog.`The details of how the matching
    /// is performed is an implementation detail and is subject to change. As such there will be many callbacks to the delegate per stream of audio, and the same match
    /// may be reported multiple times in succession.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shsession?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SHSession;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for SHSession {}
);

impl SHSession {
    extern_methods!(
        #[cfg(feature = "SHCatalog")]
        /// The
        /// `SHCatalog`used to initialize this session and which all matches will be made against
        #[unsafe(method(catalog))]
        #[unsafe(method_family = none)]
        pub unsafe fn catalog(&self) -> Retained<SHCatalog>;

        /// A delegate for communicating the results of matching
        #[unsafe(method(delegate))]
        #[unsafe(method_family = none)]
        pub unsafe fn delegate(&self) -> Option<Retained<ProtocolObject<dyn SHSessionDelegate>>>;

        /// Setter for [`delegate`][Self::delegate].
        ///
        /// This is a [weak property][objc2::topics::weak_property].
        #[unsafe(method(setDelegate:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn SHSessionDelegate>>);

        /// Create A new
        /// `SHSession`that searches the Shazam Catalog
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "SHCatalog")]
        /// Create A new
        /// `SHSession`based upon the supplied
        /// `SHCatalog`
        /// Parameter `catalog`: The store of signatures to match against
        #[unsafe(method(initWithCatalog:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCatalog(this: Allocated<Self>, catalog: &SHCatalog)
            -> Retained<Self>;

        #[cfg(feature = "objc2-avf-audio")]
        /// Flow audio buffers for matching into the session
        ///
        /// Audio will be converted into signatures and matched against the
        /// `SHCatalog.`Results are communicated through the delegate.
        /// The initial buffer specifies the
        /// `AVAudioFormat`and all subsequent buffers must contain the same format otherwise an error will be communicated through
        /// the delegate.
        ///
        /// It is advisable but not required to pass an
        /// `AVAudioTime`along with the audio buffer. The audio provided must be contiguous, gaps in the audio will have adverse
        /// effects on the ability to match the audio. The time variable is validated by the session to ensure that the audio is contiguous and mitigate the effect of discontiguous audio.
        ///
        /// Parameter `buffer`: A buffer of audio to be used for recognition
        ///
        /// Parameter `time`: Where in the stream the audio occurs
        ///
        /// Note: This method only accepts PCM audio formats. The following sample rates are recommended but not required: 48000, 44100, 32000, 16000.
        #[unsafe(method(matchStreamingBuffer:atTime:))]
        #[unsafe(method_family = none)]
        pub unsafe fn matchStreamingBuffer_atTime(
            &self,
            buffer: &AVAudioPCMBuffer,
            time: Option<&AVAudioTime>,
        );

        #[cfg(feature = "SHSignature")]
        /// Match the
        /// `SHSignature`against the provided
        /// `SHCatalog`
        /// Parameter `signature`: a
        /// `SHSignature`to be matched
        #[unsafe(method(matchSignature:))]
        #[unsafe(method_family = none)]
        pub unsafe fn matchSignature(&self, signature: &SHSignature);
    );
}

/// Methods declared on superclass `NSObject`.
impl SHSession {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
