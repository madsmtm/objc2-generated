//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

/// Constants for the media item property names.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemproperty?language=objc)
// NS_TYPED_EXTENSIBLE_ENUM
pub type SHMediaItemProperty = NSString;

extern "C" {
    /// The Shazam media ID
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemshazamid?language=objc)
    pub static SHMediaItemShazamID: &'static SHMediaItemProperty;
}

extern "C" {
    /// Title
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemtitle?language=objc)
    pub static SHMediaItemTitle: &'static SHMediaItemProperty;
}

extern "C" {
    /// Subtitle
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemsubtitle?language=objc)
    pub static SHMediaItemSubtitle: &'static SHMediaItemProperty;
}

extern "C" {
    /// Artist
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemartist?language=objc)
    pub static SHMediaItemArtist: &'static SHMediaItemProperty;
}

extern "C" {
    /// A web URL representing this result
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemweburl?language=objc)
    pub static SHMediaItemWebURL: &'static SHMediaItemProperty;
}

extern "C" {
    /// The AppleMusic ID
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemapplemusicid?language=objc)
    pub static SHMediaItemAppleMusicID: &'static SHMediaItemProperty;
}

extern "C" {
    /// A link to this media on Apple Music
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemapplemusicurl?language=objc)
    pub static SHMediaItemAppleMusicURL: &'static SHMediaItemProperty;
}

extern "C" {
    /// A URL to the artwork
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemartworkurl?language=objc)
    pub static SHMediaItemArtworkURL: &'static SHMediaItemProperty;
}

extern "C" {
    /// A URL for a Video associated with the media
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemvideourl?language=objc)
    pub static SHMediaItemVideoURL: &'static SHMediaItemProperty;
}

extern "C" {
    /// Is this content explicit
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemexplicitcontent?language=objc)
    pub static SHMediaItemExplicitContent: &'static SHMediaItemProperty;
}

extern "C" {
    /// An array of strings representing the genres of the media item
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemgenres?language=objc)
    pub static SHMediaItemGenres: &'static SHMediaItemProperty;
}

extern "C" {
    /// The International Standard Recording Code
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemisrc?language=objc)
    pub static SHMediaItemISRC: &'static SHMediaItemProperty;
}

extern "C" {
    /// The key to access the time ranges property of a media item.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemtimeranges?language=objc)
    pub static SHMediaItemTimeRanges: &'static SHMediaItemProperty;
}

extern "C" {
    /// The key to access the frequency skew ranges property of a media item.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemfrequencyskewranges?language=objc)
    pub static SHMediaItemFrequencySkewRanges: &'static SHMediaItemProperty;
}

extern "C" {
    /// The date when the media item was created
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitemcreationdate?language=objc)
    pub static SHMediaItemCreationDate: &'static SHMediaItemProperty;
}

extern_class!(
    /// An object that represents the metadata for a reference signature.
    ///
    /// This class uses subscripting for the data elements of a custom media item that an existing property doesn't already represent.
    ///
    /// Add a readable custom property by extending ``SHMediaItemProperty-struct``  with a key for that property, and by extending this class with a property that uses the key. The following code shows the extensions for an episode number:
    ///
    /// ```swift
    /// // Add an episode number to the list of properties.
    /// extension SHMediaItemProperty {
    /// static let episode = SHMediaItemProperty("Episode")
    /// }
    ///
    /// // Add a property for returning the episode number using a subscript.
    /// extension SHMediaItem {
    /// var episode: Int? {
    /// return self[.episode] as? Int
    /// }
    /// }
    /// ```
    ///
    /// Add your custom property when you create the media item as the following code shows:
    ///
    /// ```swift
    /// // Create a new media item and set the title, subtitle, and episode properties.
    /// let mediaItem = SHMediaItem(properties: [.episode: 42,
    /// .title: "Question",
    /// .subtitle: "The Answer"])
    /// ```
    ///
    /// > Note:
    /// > The class of the object that represents a custom object must be one of: `Dictionary`, `Array`, `URL`, `Number`, `String`, `Date`, or `Data`.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/shazamkit/shmediaitem?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct SHMediaItem;
);

unsafe impl Send for SHMediaItem {}

unsafe impl Sync for SHMediaItem {}

extern_conformance!(
    unsafe impl NSCoding for SHMediaItem {}
);

extern_conformance!(
    unsafe impl NSCopying for SHMediaItem {}
);

unsafe impl CopyingHelper for SHMediaItem {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for SHMediaItem {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for SHMediaItem {}
);

impl SHMediaItem {
    extern_methods!(
        /// The Shazam ID for the song.
        #[unsafe(method(shazamID))]
        #[unsafe(method_family = none)]
        pub unsafe fn shazamID(&self) -> Option<Retained<NSString>>;

        /// A title for the media item.
        #[unsafe(method(title))]
        #[unsafe(method_family = none)]
        pub unsafe fn title(&self) -> Option<Retained<NSString>>;

        /// A subtitle for the media item.
        #[unsafe(method(subtitle))]
        #[unsafe(method_family = none)]
        pub unsafe fn subtitle(&self) -> Option<Retained<NSString>>;

        /// The name of the artist for the media item, such as the performer of a song.
        #[unsafe(method(artist))]
        #[unsafe(method_family = none)]
        pub unsafe fn artist(&self) -> Option<Retained<NSString>>;

        /// An array of genre names for the media item.
        ///
        /// The array is empty if there are no media items.
        #[unsafe(method(genres))]
        #[unsafe(method_family = none)]
        pub unsafe fn genres(&self) -> Retained<NSArray<NSString>>;

        /// The Apple Music ID for the song.
        #[unsafe(method(appleMusicID))]
        #[unsafe(method_family = none)]
        pub unsafe fn appleMusicID(&self) -> Option<Retained<NSString>>;

        /// A link to the Apple Music page that contains the full information for the song.
        #[unsafe(method(appleMusicURL))]
        #[unsafe(method_family = none)]
        pub unsafe fn appleMusicURL(&self) -> Option<Retained<NSURL>>;

        /// A link to the Shazam Music catalog page that contains the full information for the song.
        ///
        /// This link opens the Shazam app or App Clip if it's available on the device.
        #[unsafe(method(webURL))]
        #[unsafe(method_family = none)]
        pub unsafe fn webURL(&self) -> Option<Retained<NSURL>>;

        /// The URL for artwork for the media item, such as an album cover.
        #[unsafe(method(artworkURL))]
        #[unsafe(method_family = none)]
        pub unsafe fn artworkURL(&self) -> Option<Retained<NSURL>>;

        /// The URL for a video for the media item, such as a music video.
        #[unsafe(method(videoURL))]
        #[unsafe(method_family = none)]
        pub unsafe fn videoURL(&self) -> Option<Retained<NSURL>>;

        /// A Boolean value that indicates whether the media item contains explicit content.
        #[unsafe(method(explicitContent))]
        #[unsafe(method_family = none)]
        pub unsafe fn explicitContent(&self) -> bool;

        /// The International Standard Recording Code (ISRC) for the media item.
        #[unsafe(method(isrc))]
        #[unsafe(method_family = none)]
        pub unsafe fn isrc(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "SHRange")]
        /// An array of ranges that indicate the offsets within the reference signature that this media item describes.
        #[unsafe(method(timeRanges))]
        #[unsafe(method_family = none)]
        pub unsafe fn timeRanges(&self) -> Retained<NSArray<SHRange>>;

        #[cfg(feature = "SHRange")]
        /// An array of ranges that indicate the frequency skews in the reference signature that this media item describes.
        #[unsafe(method(frequencySkewRanges))]
        #[unsafe(method_family = none)]
        pub unsafe fn frequencySkewRanges(&self) -> Retained<NSArray<SHRange>>;

        /// The date the media item was created.
        #[unsafe(method(creationDate))]
        #[unsafe(method_family = none)]
        pub unsafe fn creationDate(&self) -> Option<Retained<NSDate>>;

        /// Creates a media item object with a dictionary of properties and their associated values.
        ///
        /// - Parameters:
        /// - properties: A dictionary that contains the media item properties and their associated values.
        #[unsafe(method(mediaItemWithProperties:))]
        #[unsafe(method_family = none)]
        pub unsafe fn mediaItemWithProperties(
            properties: &NSDictionary<SHMediaItemProperty, AnyObject>,
        ) -> Retained<Self>;

        #[cfg(feature = "block2")]
        /// Requests the media item for the song with the specified Shazam ID.
        ///
        /// > Important:
        /// > You can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:
        /// >
        /// > ```swift
        /// > class func fetch(shazamID: String) async throws -> SHMediaItem
        /// > ```
        /// >
        /// > For information about concurrency and asynchronous code in Swift, see
        /// <doc
        /// ://com.apple.documentation/documentation/swift/calling-objective-c-apis-asynchronously>.
        ///
        /// - Parameters:
        /// - shazamID: The Shazam ID of the song.
        /// - completionHandler: The completion handler that the system calls with the result of the request.
        ///
        /// This block takes the following parameters:
        ///
        /// - term `mediaItem`: A media item.
        /// - term `error`: An error object if a problem occurs when fetching the media item; otherwise, `nil`.
        #[unsafe(method(fetchMediaItemWithShazamID:completionHandler:))]
        #[unsafe(method_family = none)]
        pub unsafe fn fetchMediaItemWithShazamID_completionHandler(
            shazam_id: &NSString,
            completion_handler: &block2::DynBlock<dyn Fn(*mut SHMediaItem, *mut NSError)>,
        );

        /// Accesses the property for the specified key for reading.
        ///
        /// - Parameters:
        /// - property: The key for the property.
        ///
        /// - Returns: The value of the property; otherwise, `nil`.
        #[unsafe(method(valueForProperty:))]
        #[unsafe(method_family = none)]
        pub unsafe fn valueForProperty(
            &self,
            property: &SHMediaItemProperty,
        ) -> Retained<AnyObject>;

        /// Accesses the property for the specified key for reading.
        ///
        /// - Parameters:
        /// - key: The key for the media item property.
        ///
        /// - Returns: The value of the property; otherwise, `nil`.
        #[unsafe(method(objectForKeyedSubscript:))]
        #[unsafe(method_family = none)]
        pub unsafe fn objectForKeyedSubscript(
            &self,
            key: &SHMediaItemProperty,
        ) -> Retained<AnyObject>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}
