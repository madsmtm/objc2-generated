// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::doc_lazy_continuation)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::invalid_html_tags)]

#[link(name = "ModelIO", kind = "framework")]
extern "C" {}

#[cfg(feature = "MDLAnimatedValueTypes")]
#[path = "MDLAnimatedValueTypes.rs"]
mod __MDLAnimatedValueTypes;
#[cfg(feature = "MDLAnimation")]
#[path = "MDLAnimation.rs"]
mod __MDLAnimation;
#[cfg(feature = "MDLAsset")]
#[path = "MDLAsset.rs"]
mod __MDLAsset;
#[cfg(feature = "MDLAssetResolver")]
#[path = "MDLAssetResolver.rs"]
mod __MDLAssetResolver;
#[cfg(feature = "MDLCamera")]
#[path = "MDLCamera.rs"]
mod __MDLCamera;
#[cfg(feature = "MDLLight")]
#[path = "MDLLight.rs"]
mod __MDLLight;
#[cfg(feature = "MDLMaterial")]
#[path = "MDLMaterial.rs"]
mod __MDLMaterial;
#[cfg(feature = "MDLMesh")]
#[path = "MDLMesh.rs"]
mod __MDLMesh;
#[cfg(feature = "MDLMeshBuffer")]
#[path = "MDLMeshBuffer.rs"]
mod __MDLMeshBuffer;
#[cfg(feature = "MDLObject")]
#[path = "MDLObject.rs"]
mod __MDLObject;
#[cfg(feature = "MDLSubmesh")]
#[path = "MDLSubmesh.rs"]
mod __MDLSubmesh;
#[cfg(feature = "MDLTexture")]
#[path = "MDLTexture.rs"]
mod __MDLTexture;
#[cfg(feature = "MDLTransform")]
#[path = "MDLTransform.rs"]
mod __MDLTransform;
#[cfg(feature = "MDLTransformStack")]
#[path = "MDLTransformStack.rs"]
mod __MDLTransformStack;
#[cfg(feature = "MDLTypes")]
#[path = "MDLTypes.rs"]
mod __MDLTypes;
#[cfg(feature = "MDLUtility")]
#[path = "MDLUtility.rs"]
mod __MDLUtility;
#[cfg(feature = "MDLValueTypes")]
#[path = "MDLValueTypes.rs"]
mod __MDLValueTypes;
#[cfg(feature = "MDLVertexDescriptor")]
#[path = "MDLVertexDescriptor.rs"]
mod __MDLVertexDescriptor;
#[cfg(feature = "MDLVoxelArray")]
#[path = "MDLVoxelArray.rs"]
mod __MDLVoxelArray;
#[cfg(feature = "ModelIOExports")]
#[path = "ModelIOExports.rs"]
mod __ModelIOExports;

#[cfg(feature = "MDLAnimatedValueTypes")]
pub use self::__MDLAnimatedValueTypes::MDLAnimatedMatrix4x4;
#[cfg(feature = "MDLAnimatedValueTypes")]
pub use self::__MDLAnimatedValueTypes::MDLAnimatedQuaternion;
#[cfg(feature = "MDLAnimatedValueTypes")]
pub use self::__MDLAnimatedValueTypes::MDLAnimatedQuaternionArray;
#[cfg(feature = "MDLAnimatedValueTypes")]
pub use self::__MDLAnimatedValueTypes::MDLAnimatedScalar;
#[cfg(feature = "MDLAnimatedValueTypes")]
pub use self::__MDLAnimatedValueTypes::MDLAnimatedScalarArray;
#[cfg(feature = "MDLAnimatedValueTypes")]
pub use self::__MDLAnimatedValueTypes::MDLAnimatedValue;
#[cfg(feature = "MDLAnimatedValueTypes")]
pub use self::__MDLAnimatedValueTypes::MDLAnimatedValueInterpolation;
#[cfg(feature = "MDLAnimatedValueTypes")]
pub use self::__MDLAnimatedValueTypes::MDLAnimatedVector2;
#[cfg(feature = "MDLAnimatedValueTypes")]
pub use self::__MDLAnimatedValueTypes::MDLAnimatedVector3;
#[cfg(feature = "MDLAnimatedValueTypes")]
pub use self::__MDLAnimatedValueTypes::MDLAnimatedVector3Array;
#[cfg(feature = "MDLAnimatedValueTypes")]
pub use self::__MDLAnimatedValueTypes::MDLAnimatedVector4;
#[cfg(feature = "MDLAnimation")]
pub use self::__MDLAnimation::MDLAnimationBindComponent;
#[cfg(feature = "MDLAnimation")]
pub use self::__MDLAnimation::MDLJointAnimation;
#[cfg(all(feature = "MDLAnimation", feature = "MDLObject"))]
pub use self::__MDLAnimation::MDLPackedJointAnimation;
#[cfg(all(feature = "MDLAnimation", feature = "MDLObject"))]
pub use self::__MDLAnimation::MDLSkeleton;
#[cfg(feature = "MDLAsset")]
pub use self::__MDLAsset::MDLAsset;
#[cfg(feature = "MDLAsset")]
pub use self::__MDLAsset::MDLLightProbeIrradianceDataSource;
#[cfg(feature = "MDLAssetResolver")]
pub use self::__MDLAssetResolver::MDLAssetResolver;
#[cfg(feature = "MDLAssetResolver")]
pub use self::__MDLAssetResolver::MDLBundleAssetResolver;
#[cfg(feature = "MDLAssetResolver")]
pub use self::__MDLAssetResolver::MDLPathAssetResolver;
#[cfg(feature = "MDLAssetResolver")]
pub use self::__MDLAssetResolver::MDLRelativeAssetResolver;
#[cfg(all(feature = "MDLCamera", feature = "MDLObject"))]
pub use self::__MDLCamera::MDLCamera;
#[cfg(feature = "MDLCamera")]
pub use self::__MDLCamera::MDLCameraProjection;
#[cfg(all(feature = "MDLCamera", feature = "MDLObject"))]
pub use self::__MDLCamera::MDLStereoscopicCamera;
#[cfg(all(feature = "MDLLight", feature = "MDLObject"))]
pub use self::__MDLLight::MDLAreaLight;
#[cfg(all(feature = "MDLLight", feature = "MDLObject"))]
pub use self::__MDLLight::MDLLight;
#[cfg(all(feature = "MDLLight", feature = "MDLObject"))]
pub use self::__MDLLight::MDLLightProbe;
#[cfg(feature = "MDLLight")]
pub use self::__MDLLight::MDLLightType;
#[cfg(all(feature = "MDLLight", feature = "MDLObject"))]
pub use self::__MDLLight::MDLPhotometricLight;
#[cfg(all(feature = "MDLLight", feature = "MDLObject"))]
pub use self::__MDLLight::MDLPhysicallyPlausibleLight;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLMaterial;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLMaterialFace;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLMaterialMipMapFilterMode;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLMaterialProperty;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLMaterialPropertyConnection;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLMaterialPropertyGraph;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLMaterialPropertyNode;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLMaterialPropertyType;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLMaterialSemantic;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLMaterialTextureFilterMode;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLMaterialTextureWrapMode;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLPhysicallyPlausibleScatteringFunction;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLScatteringFunction;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLTextureFilter;
#[cfg(feature = "MDLMaterial")]
pub use self::__MDLMaterial::MDLTextureSampler;
#[cfg(all(feature = "MDLMesh", feature = "MDLObject"))]
pub use self::__MDLMesh::MDLMesh;
#[cfg(feature = "MDLMesh")]
pub use self::__MDLMesh::MDLVertexAttributeData;
#[cfg(feature = "MDLMeshBuffer")]
pub use self::__MDLMeshBuffer::MDLMeshBuffer;
#[cfg(feature = "MDLMeshBuffer")]
pub use self::__MDLMeshBuffer::MDLMeshBufferAllocator;
#[cfg(feature = "MDLMeshBuffer")]
pub use self::__MDLMeshBuffer::MDLMeshBufferData;
#[cfg(feature = "MDLMeshBuffer")]
pub use self::__MDLMeshBuffer::MDLMeshBufferDataAllocator;
#[cfg(feature = "MDLMeshBuffer")]
pub use self::__MDLMeshBuffer::MDLMeshBufferMap;
#[cfg(feature = "MDLMeshBuffer")]
pub use self::__MDLMeshBuffer::MDLMeshBufferType;
#[cfg(feature = "MDLMeshBuffer")]
pub use self::__MDLMeshBuffer::MDLMeshBufferZone;
#[cfg(feature = "MDLMeshBuffer")]
pub use self::__MDLMeshBuffer::MDLMeshBufferZoneDefault;
#[cfg(feature = "MDLObject")]
pub use self::__MDLObject::MDLObject;
#[cfg(feature = "MDLObject")]
pub use self::__MDLObject::MDLObjectContainer;
#[cfg(feature = "MDLSubmesh")]
pub use self::__MDLSubmesh::MDLSubmesh;
#[cfg(feature = "MDLSubmesh")]
pub use self::__MDLSubmesh::MDLSubmeshTopology;
#[cfg(feature = "MDLTexture")]
pub use self::__MDLTexture::MDLCheckerboardTexture;
#[cfg(feature = "MDLTexture")]
pub use self::__MDLTexture::MDLColorSwatchTexture;
#[cfg(feature = "MDLTexture")]
pub use self::__MDLTexture::MDLNoiseTexture;
#[cfg(feature = "MDLTexture")]
pub use self::__MDLTexture::MDLNormalMapTexture;
#[cfg(feature = "MDLTexture")]
pub use self::__MDLTexture::MDLSkyCubeTexture;
#[cfg(feature = "MDLTexture")]
pub use self::__MDLTexture::MDLTexture;
#[cfg(feature = "MDLTexture")]
pub use self::__MDLTexture::MDLTextureChannelEncoding;
#[cfg(feature = "MDLTexture")]
pub use self::__MDLTexture::MDLURLTexture;
#[cfg(feature = "MDLTransform")]
pub use self::__MDLTransform::MDLTransform;
#[cfg(all(feature = "MDLTransform", feature = "MDLTypes"))]
pub use self::__MDLTransform::MDLTransformComponent;
#[cfg(feature = "MDLTransformStack")]
pub use self::__MDLTransformStack::MDLTransformMatrixOp;
#[cfg(feature = "MDLTransformStack")]
pub use self::__MDLTransformStack::MDLTransformOp;
#[cfg(feature = "MDLTransformStack")]
pub use self::__MDLTransformStack::MDLTransformOpRotationOrder;
#[cfg(feature = "MDLTransformStack")]
pub use self::__MDLTransformStack::MDLTransformOrientOp;
#[cfg(feature = "MDLTransformStack")]
pub use self::__MDLTransformStack::MDLTransformRotateOp;
#[cfg(feature = "MDLTransformStack")]
pub use self::__MDLTransformStack::MDLTransformRotateXOp;
#[cfg(feature = "MDLTransformStack")]
pub use self::__MDLTransformStack::MDLTransformRotateYOp;
#[cfg(feature = "MDLTransformStack")]
pub use self::__MDLTransformStack::MDLTransformRotateZOp;
#[cfg(feature = "MDLTransformStack")]
pub use self::__MDLTransformStack::MDLTransformScaleOp;
#[cfg(feature = "MDLTransformStack")]
pub use self::__MDLTransformStack::MDLTransformStack;
#[cfg(feature = "MDLTransformStack")]
pub use self::__MDLTransformStack::MDLTransformTranslateOp;
#[cfg(feature = "MDLTypes")]
pub use self::__MDLTypes::kUTType3dObject;
#[cfg(feature = "MDLTypes")]
pub use self::__MDLTypes::kUTTypeAlembic;
#[cfg(feature = "MDLTypes")]
pub use self::__MDLTypes::kUTTypePolygon;
#[cfg(feature = "MDLTypes")]
pub use self::__MDLTypes::kUTTypeStereolithography;
#[cfg(feature = "MDLTypes")]
pub use self::__MDLTypes::kUTTypeUniversalSceneDescription;
#[cfg(feature = "MDLTypes")]
pub use self::__MDLTypes::kUTTypeUniversalSceneDescriptionMobile;
#[cfg(feature = "MDLTypes")]
pub use self::__MDLTypes::MDLComponent;
#[cfg(feature = "MDLTypes")]
pub use self::__MDLTypes::MDLDataPrecision;
#[cfg(feature = "MDLTypes")]
pub use self::__MDLTypes::MDLGeometryType;
#[cfg(feature = "MDLTypes")]
pub use self::__MDLTypes::MDLIndexBitDepth;
#[cfg(feature = "MDLTypes")]
pub use self::__MDLTypes::MDLNamed;
#[cfg(feature = "MDLTypes")]
pub use self::__MDLTypes::MDLObjectContainerComponent;
#[cfg(feature = "MDLTypes")]
pub use self::__MDLTypes::MDLProbePlacement;
#[cfg(feature = "MDLUtility")]
pub use self::__MDLUtility::MDLUtility;
#[cfg(feature = "MDLValueTypes")]
pub use self::__MDLValueTypes::MDLMatrix4x4Array;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttribute;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributeAnisotropy;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributeBinormal;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributeBitangent;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributeColor;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributeEdgeCrease;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributeJointIndices;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributeJointWeights;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributeNormal;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributeOcclusionValue;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributePosition;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributeShadingBasisU;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributeShadingBasisV;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributeSubdivisionStencil;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributeTangent;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexAttributeTextureCoordinate;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexBufferLayout;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexDescriptor;
#[cfg(feature = "MDLVertexDescriptor")]
pub use self::__MDLVertexDescriptor::MDLVertexFormat;
#[cfg(all(feature = "MDLObject", feature = "MDLVoxelArray"))]
pub use self::__MDLVoxelArray::MDLVoxelArray;
