//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-quartz-core")]
use objc2_quartz_core::*;
use objc2_ui_kit::*;

use crate::*;

extern_protocol!(
    /// Component views inside the lockup view may conform to this protocol in order to participate in the state changes of the containing lockup view by altering their appearances.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/tvuikit/tvlockupviewcomponent?language=objc)
    pub unsafe trait TVLockupViewComponent: NSObjectProtocol {
        /// This is called when a lockup view's state changes.
        ///
        ///
        /// If implemented, allows the lockup view's components to update their appearance when the lockup view's state changes. This will also be called on the components' subviews that conform to the protocol and implement the method.
        ///
        /// Parameter `state`: The state of the lockup view. Relevant values are .normal, .highlighted (for pressed state), .enabled, and .focused.
        #[optional]
        #[unsafe(method(updateAppearanceForLockupViewState:))]
        #[unsafe(method_family = none)]
        unsafe fn updateAppearanceForLockupViewState(&self, state: UIControlState);
    }
);

extern_class!(
    /// TVLockupView is a composed view specializing in presenting a main content, and optional header or footer.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/tvuikit/tvlockupview?language=objc)
    #[unsafe(super(UIControl, UIView, UIResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct TVLockupView;
);

#[cfg(feature = "objc2-quartz-core")]
extern_conformance!(
    unsafe impl CALayerDelegate for TVLockupView {}
);

extern_conformance!(
    unsafe impl NSCoding for TVLockupView {}
);

extern_conformance!(
    unsafe impl NSObjectProtocol for TVLockupView {}
);

extern_conformance!(
    unsafe impl UIAppearance for TVLockupView {}
);

extern_conformance!(
    unsafe impl UIAppearanceContainer for TVLockupView {}
);

extern_conformance!(
    unsafe impl UICoordinateSpace for TVLockupView {}
);

extern_conformance!(
    unsafe impl UIDynamicItem for TVLockupView {}
);

extern_conformance!(
    unsafe impl UIFocusEnvironment for TVLockupView {}
);

extern_conformance!(
    unsafe impl UIFocusItem for TVLockupView {}
);

extern_conformance!(
    unsafe impl UIFocusItemContainer for TVLockupView {}
);

extern_conformance!(
    unsafe impl UIResponderStandardEditActions for TVLockupView {}
);

extern_conformance!(
    unsafe impl UITraitEnvironment for TVLockupView {}
);

impl TVLockupView {
    extern_methods!(
        /// The container view where subviews are added.
        ///
        /// Clients should add their subviews to the contentView. Views added directly to the lockup view have undefined behaviors.
        #[unsafe(method(contentView))]
        #[unsafe(method_family = none)]
        pub unsafe fn contentView(&self) -> Retained<UIView>;

        #[cfg(feature = "objc2-core-foundation")]
        /// The size of the content
        ///
        /// Clients can use this to explicitly set the size of the content. Default results in system default contentSize.
        #[unsafe(method(contentSize))]
        #[unsafe(method_family = none)]
        pub unsafe fn contentSize(&self) -> CGSize;

        #[cfg(feature = "objc2-core-foundation")]
        /// Setter for [`contentSize`][Self::contentSize].
        #[unsafe(method(setContentSize:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setContentSize(&self, content_size: CGSize);

        #[cfg(feature = "TVLockupHeaderFooterView")]
        /// The optional header and footer views.
        ///
        /// Subclass TVLockupHeaderFooterView for additional customization.
        #[unsafe(method(headerView))]
        #[unsafe(method_family = none)]
        pub unsafe fn headerView(&self) -> Option<Retained<TVLockupHeaderFooterView>>;

        #[cfg(feature = "TVLockupHeaderFooterView")]
        /// Setter for [`headerView`][Self::headerView].
        #[unsafe(method(setHeaderView:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setHeaderView(&self, header_view: Option<&TVLockupHeaderFooterView>);

        #[cfg(feature = "TVLockupHeaderFooterView")]
        #[unsafe(method(footerView))]
        #[unsafe(method_family = none)]
        pub unsafe fn footerView(&self) -> Option<Retained<TVLockupHeaderFooterView>>;

        #[cfg(feature = "TVLockupHeaderFooterView")]
        /// Setter for [`footerView`][Self::footerView].
        #[unsafe(method(setFooterView:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFooterView(&self, footer_view: Option<&TVLockupHeaderFooterView>);

        /// The spacing between the content view and its sibling and parent views
        ///
        /// .top and .bottom are spaces between the contentView and headerView and footerView, respectively. .leading and .trailing are between contentView and the lockup view itself. Use negative values for positive spacing.
        #[unsafe(method(contentViewInsets))]
        #[unsafe(method_family = none)]
        pub unsafe fn contentViewInsets(&self) -> NSDirectionalEdgeInsets;

        /// Setter for [`contentViewInsets`][Self::contentViewInsets].
        #[unsafe(method(setContentViewInsets:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setContentViewInsets(&self, content_view_insets: NSDirectionalEdgeInsets);

        /// The size increase when the lockup view or its subview is in focus
        ///
        /// The amount by which headerView and footerView will move when the lockup view or its subview is in focus. Use negative values for positive increase.
        #[unsafe(method(focusSizeIncrease))]
        #[unsafe(method_family = none)]
        pub unsafe fn focusSizeIncrease(&self) -> NSDirectionalEdgeInsets;

        /// Setter for [`focusSizeIncrease`][Self::focusSizeIncrease].
        #[unsafe(method(setFocusSizeIncrease:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setFocusSizeIncrease(&self, focus_size_increase: NSDirectionalEdgeInsets);
    );
}

/// Methods declared on superclass `UIControl`.
impl TVLockupView {
    extern_methods!(
        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(initWithFrame:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame: CGRect) -> Retained<Self>;

        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "objc2-core-foundation")]
        /// Initializes the control and adds primaryAction for the UIControlEventPrimaryActionTriggered control event. Subclasses of UIControl may alter or add behaviors around the usage of primaryAction, see subclass documentation of this initializer for additional information.
        #[unsafe(method(initWithFrame:primaryAction:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame_primaryAction(
            this: Allocated<Self>,
            frame: CGRect,
            primary_action: Option<&UIAction>,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `UIView`.
impl TVLockupView {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
impl TVLockupView {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}
