//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ffi::*;
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-quartz-core")]
use objc2_quartz_core::*;
use objc2_ui_kit::*;

use crate::*;

/// Set of options for focus motion direction
///
/// These options alter the motion axis of the floating view.
///
/// See also [Apple's documentation](https://developer.apple.com/documentation/tvuikit/tvcaptionbuttonviewmotiondirection?language=objc)
// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct TVCaptionButtonViewMotionDirection(pub NSInteger);
impl TVCaptionButtonViewMotionDirection {
    /// The floating view will not have any motion. *
    #[doc(alias = "TVCaptionButtonViewMotionDirectionNone")]
    pub const None: Self = Self(0);
    /// The floating view will slide horizontally. *
    #[doc(alias = "TVCaptionButtonViewMotionDirectionHorizontal")]
    pub const Horizontal: Self = Self(1);
    /// The floating view will slide vertically. *
    #[doc(alias = "TVCaptionButtonViewMotionDirectionVertical")]
    pub const Vertical: Self = Self(2);
    /// The floating view will slide in both axes. *
    #[doc(alias = "TVCaptionButtonViewMotionDirectionAll")]
    pub const All: Self = Self(3);
}

unsafe impl Encode for TVCaptionButtonViewMotionDirection {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for TVCaptionButtonViewMotionDirection {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    /// TVCaptionButtonView is a button-like lockup view with a caption (or a footer), which itself consists of a title and a subtitle.
    ///
    /// The caption button view can have either a content image or content text. The system adds it to a floating view with a knock-out effect. When in focus, the floating view will scale up in the .leading, .top., and .trailing directions by a fixed amount determined by the system. Overriding .focusSizeIncrease has no visible effect.
    ///
    /// See also [Apple's documentation](https://developer.apple.com/documentation/tvuikit/tvcaptionbuttonview?language=objc)
    #[unsafe(super(TVLockupView, UIControl, UIView, UIResponder, NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "TVLockupView")]
    pub struct TVCaptionButtonView;
);

#[cfg(all(feature = "TVLockupView", feature = "objc2-quartz-core"))]
extern_conformance!(
    unsafe impl CALayerDelegate for TVCaptionButtonView {}
);

#[cfg(feature = "TVLockupView")]
extern_conformance!(
    unsafe impl NSCoding for TVCaptionButtonView {}
);

#[cfg(feature = "TVLockupView")]
extern_conformance!(
    unsafe impl NSObjectProtocol for TVCaptionButtonView {}
);

#[cfg(feature = "TVLockupView")]
extern_conformance!(
    unsafe impl UIAppearance for TVCaptionButtonView {}
);

#[cfg(feature = "TVLockupView")]
extern_conformance!(
    unsafe impl UIAppearanceContainer for TVCaptionButtonView {}
);

#[cfg(feature = "TVLockupView")]
extern_conformance!(
    unsafe impl UICoordinateSpace for TVCaptionButtonView {}
);

#[cfg(feature = "TVLockupView")]
extern_conformance!(
    unsafe impl UIDynamicItem for TVCaptionButtonView {}
);

#[cfg(feature = "TVLockupView")]
extern_conformance!(
    unsafe impl UIFocusEnvironment for TVCaptionButtonView {}
);

#[cfg(feature = "TVLockupView")]
extern_conformance!(
    unsafe impl UIFocusItem for TVCaptionButtonView {}
);

#[cfg(feature = "TVLockupView")]
extern_conformance!(
    unsafe impl UIFocusItemContainer for TVCaptionButtonView {}
);

#[cfg(feature = "TVLockupView")]
extern_conformance!(
    unsafe impl UIResponderStandardEditActions for TVCaptionButtonView {}
);

#[cfg(feature = "TVLockupView")]
extern_conformance!(
    unsafe impl UITraitEnvironment for TVCaptionButtonView {}
);

#[cfg(feature = "TVLockupView")]
impl TVCaptionButtonView {
    extern_methods!(
        #[unsafe(method(motionDirection))]
        #[unsafe(method_family = none)]
        pub unsafe fn motionDirection(&self) -> TVCaptionButtonViewMotionDirection;

        /// Setter for [`motionDirection`][Self::motionDirection].
        #[unsafe(method(setMotionDirection:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setMotionDirection(
            &self,
            motion_direction: TVCaptionButtonViewMotionDirection,
        );

        /// The content image
        ///
        /// If a contentText exists, setting contentImage will remove it and take its place. By default, the system creates a template image from the alpha values in the source image. To prevent system coloring, provide the source image with UIImageRenderingModeAlwaysOriginal.
        #[unsafe(method(contentImage))]
        #[unsafe(method_family = none)]
        pub unsafe fn contentImage(&self) -> Option<Retained<UIImage>>;

        /// Setter for [`contentImage`][Self::contentImage].
        #[unsafe(method(setContentImage:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setContentImage(&self, content_image: Option<&UIImage>);

        /// The content text
        ///
        /// If a contentImage exists, setting contentText will remove it and take its place.
        #[unsafe(method(contentText))]
        #[unsafe(method_family = none)]
        pub unsafe fn contentText(&self) -> Option<Retained<NSString>>;

        /// Setter for [`contentText`][Self::contentText].
        #[unsafe(method(setContentText:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setContentText(&self, content_text: Option<&NSString>);

        /// The title text
        #[unsafe(method(title))]
        #[unsafe(method_family = none)]
        pub unsafe fn title(&self) -> Option<Retained<NSString>>;

        /// Setter for [`title`][Self::title].
        #[unsafe(method(setTitle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setTitle(&self, title: Option<&NSString>);

        /// The subtitle text
        #[unsafe(method(subtitle))]
        #[unsafe(method_family = none)]
        pub unsafe fn subtitle(&self) -> Option<Retained<NSString>>;

        /// Setter for [`subtitle`][Self::subtitle].
        #[unsafe(method(setSubtitle:))]
        #[unsafe(method_family = none)]
        pub unsafe fn setSubtitle(&self, subtitle: Option<&NSString>);
    );
}

/// Methods declared on superclass `UIControl`.
#[cfg(feature = "TVLockupView")]
impl TVCaptionButtonView {
    extern_methods!(
        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(initWithFrame:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame(this: Allocated<Self>, frame: CGRect) -> Retained<Self>;

        #[unsafe(method(initWithCoder:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "objc2-core-foundation")]
        /// Initializes the control and adds primaryAction for the UIControlEventPrimaryActionTriggered control event. Subclasses of UIControl may alter or add behaviors around the usage of primaryAction, see subclass documentation of this initializer for additional information.
        #[unsafe(method(initWithFrame:primaryAction:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithFrame_primaryAction(
            this: Allocated<Self>,
            frame: CGRect,
            primary_action: Option<&UIAction>,
        ) -> Retained<Self>;
    );
}

/// Methods declared on superclass `UIView`.
#[cfg(feature = "TVLockupView")]
impl TVCaptionButtonView {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    );
}

/// Methods declared on superclass `NSObject`.
#[cfg(feature = "TVLockupView")]
impl TVCaptionButtonView {
    extern_methods!(
        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    );
}
